{"version":3,"sources":["../../../../../../src/.internal/charts/axes/AxisBreak.ts","../../../../../../src/.internal/charts/axes/Axis.ts","../../../../../../src/.internal/charts/axes/AxisLine.ts","../../../../../../src/.internal/charts/axes/AxisFill.ts","../../../../../../src/.internal/charts/axes/Grid.ts","../../../../../../src/.internal/charts/axes/AxisLabel.ts","../../../../../../src/.internal/charts/elements/Tick.ts","../../../../../../src/.internal/charts/axes/AxisTick.ts","../../../../../../src/.internal/charts/axes/AxisRenderer.ts","../../../../../../src/.internal/charts/axes/AxisBullet.ts","../../../../../../src/.internal/charts/axes/AxisRendererY.ts","../../../../../../src/.internal/charts/axes/ValueAxisBreak.ts","../../../../../../src/.internal/charts/axes/ValueAxis.ts","../../../../../../src/.internal/charts/axes/DateAxisBreak.ts","../../../../../../src/.internal/charts/axes/DateAxis.ts","../../../../../../src/.internal/charts/axes/AxisRendererX.ts","../../../../../../src/.internal/charts/axes/CategoryAxisBreak.ts","../../../../../../src/.internal/charts/axes/CategoryAxis.ts","../../../../../../src/.internal/charts/series/XYSeries.ts","../../../../../../src/.internal/charts/elements/XYChartScrollbar.ts","../../../../../../src/.internal/charts/types/XYChart.ts","../../../../../../src/.internal/charts/series/LineSeriesSegment.ts","../../../../../../src/.internal/charts/axes/DurationAxis.ts","../../../../../../src/.internal/charts/series/LineSeries.ts","../../../../../../src/.internal/charts/series/RadarSeries.ts","../../../../../../src/.internal/charts/axes/AxisFillCircular.ts","../../../../../../src/.internal/charts/axes/GridCircular.ts","../../../../../../src/.internal/charts/axes/AxisLabelCircular.ts","../../../../../../src/.internal/charts/axes/AxisRendererCircular.ts","../../../../../../src/.internal/charts/axes/AxisRendererRadial.ts","../../../../../../src/.internal/charts/types/RadarChart.ts","../../../../../../src/.internal/charts/elements/ClockHand.ts","../../../../../../src/.internal/charts/types/GaugeChart.ts","../../../../../../src/.internal/charts/series/PercentSeries.ts","../../../../../../src/.internal/charts/types/PercentChart.ts","../../../../../../src/.internal/charts/elements/PieTick.ts","../../../../../../src/.internal/charts/series/PieSeries.ts","../../../../../../src/.internal/charts/types/PieChart.ts","../../../../../../src/.internal/charts/series/PieSeries3D.ts","../../../../../../src/.internal/charts/types/PieChart3D.ts","../../../../../../src/.internal/charts/types/SlicedChart.ts","../../../../../../src/.internal/charts/elements/FlowDiagramNode.ts","../../../../../../src/.internal/charts/elements/FlowDiagramLink.ts","../../../../../../src/.internal/charts/types/FlowDiagram.ts","../../../../../../src/.internal/charts/elements/LabelBullet.ts","../../../../../../src/.internal/charts/elements/SankeyNode.ts","../../../../../../src/.internal/charts/elements/SankeyLink.ts","../../../../../../src/.internal/charts/types/SankeyDiagram.ts","../../../../../../src/.internal/charts/elements/ChordNode.ts","../../../../../../src/.internal/core/elements/QuadraticCurve.ts","../../../../../../src/.internal/charts/elements/ChordLink.ts","../../../../../../src/.internal/charts/types/ChordDiagram.ts","../../../../../../src/.internal/charts/elements/Column.ts","../../../../../../src/.internal/charts/series/ColumnSeries.ts","../../../../../../src/.internal/charts/series/TreeMapSeries.ts","../../../../../../src/.internal/charts/types/TreeMap.ts","../../../../../../src/.internal/charts/axes/AxisRendererX3D.ts","../../../../../../src/.internal/charts/axes/AxisRendererY3D.ts","../../../../../../src/.internal/charts/elements/Column3D.ts","../../../../../../src/.internal/charts/series/ColumnSeries3D.ts","../../../../../../src/.internal/charts/types/XYChart3D.ts","../../../../../../src/.internal/charts/elements/HeatLegend.ts","../../../../../../src/.internal/charts/elements/Candlestick.ts","../../../../../../src/.internal/charts/series/CandlestickSeries.ts","../../../../../../src/.internal/charts/elements/OHLC.ts","../../../../../../src/.internal/charts/series/OHLCSeries.ts","../../../../../../src/.internal/charts/series/StepLineSeriesSegment.ts","../../../../../../src/.internal/charts/series/StepLineSeries.ts","../../../../../../src/.internal/charts/elements/RadarColumn.ts","../../../../../../src/.internal/charts/series/RadarColumnSeries.ts","../../../../../../src/.internal/charts/elements/FunnelSlice.ts","../../../../../../src/.internal/charts/elements/FunnelTick.ts","../../../../../../src/.internal/charts/series/FunnelSeries.ts","../../../../../../src/.internal/charts/series/PyramidSeries.ts","../../../../../../src/.internal/charts/series/PictorialStackedSeries.ts","../../../../../../src/.internal/charts/elements/ConeColumn.ts","../../../../../../src/.internal/charts/series/ConeSeries.ts","../../../../../../src/.internal/charts/elements/CurvedColumn.ts","../../../../../../src/.internal/charts/series/CurvedColumnSeries.ts","../../../../../../src/.internal/charts/elements/CircleBullet.ts","../../../../../../src/.internal/charts/elements/ErrorBullet.ts","../../../../../../src/.internal/charts/elements/NavigationBar.ts","../../../../../../src/.internal/charts/cursors/Cursor.ts","../../../../../../src/.internal/charts/cursors/XYCursor.ts","../../../../../../src/.internal/charts/cursors/RadarCursor.ts"],"names":["_axis","dataItems","List","className","breakSize","marginLeft","marginRight","marginTop","marginBottom","interfaceColors","InterfaceColorSet","fillShape","WavedLine","fill","getFor","stroke","fillOpacity","zIndex","_fillShape","startLine","strokeOpacity","_startLine","endLine","_endLine","_disposers","push","applyTheme","dispose","this","sprite","addBreakSprite","parent","isMeasured","get","axis","set","renderer","gridContainer","events","on","invalidate","createBreakSprites","breakTemplate","axisBreaks","template","copyFrom","getPropertyValue","value","setPropertyValue","invalidateSeries","positionToPoint","startPosition","endPosition","draw","updateBreakElement","Container","registeredClasses","AxisItemLocation","_grid","component","isRange","axisRanges","grid","disabled","clone","create","Disposer","removeValue","shouldClone","sprites","dataItem","undefined","addSprite","_tick","tick","ticks","_label","label","labels","virtualParent","_axisFill","axisFill","isTemplate","axisFills","_text","text","_mask","_contents","contents","mask","createFill","_axisBreak","axisBreak","validate","validateDataElement","appendChildren","appendDataItem","hasProperty","prop","source","bullet","minPosition","maxPosition","setVisibility","noChangeValues","visible","_bullet","DataItem","_gridCount","_series","autoDispose","_axisItemCount","constructor","Axis","Error","hideTooltipWhileZooming","minWidth","minHeight","toggleZoomOutButton","zoomable","title","Label","_dataItemsIterator","createNewItems","tooltip","Tooltip","padding","background","pointerLength","fitPointerToBounds","filters","clear","cornerRadius","strokeWidth","readerHidden","series","each","hide","preventShow","fillRule","index","Math","round","__disabled","opacity","createDataItem","invalidateLayout","iterator","validateDataElements","ghostLabel","updateLabelElement","start","end","updateGridCount","gridCount","axisLength","minGridDistance","clearCache","validateLayout","axisFullLength","updateAxisLine","updateTooltip","updateBaseGridElement","_prevLength","dispatchImmediately","initRenderer","above","bulletsContainer","updateGridContainer","validateAxisRanges","axisRange","validateBreaks","_axisBreaks","processBreak","event","newValue","breakContainer","registerSeries","moveValue","createMask","_renderer","chart","interactionsEnabled","positionToAngle","position","pointToPosition","point","positionToCoordinate","getAnyRangePath","getPositionRangePath","anyToPosition","anyToPoint","x","y","angle","hideTooltip","duration","_tooltipPosition","showTooltipAtPosition","local","_tooltip","length","toAxisPosition","tooltipContainer","tooltipLocation","getCellStartPosition","getCellEndPosition","tooltipPosition","tooltipLocation2","startPoint","endPoint","currentItemStartPoint","currentItemEndPoint","fullWidthTooltip","width","height","globalPoint","line","getTooltipText","delayedPointTo","show","cursorTooltipEnabled","inversed","toGlobalPosition","pointerOrientation","boundingRectangle","fixDoc","setBounds","roundPosition","location","axisLocation","_axisRanges","processAxisRange","SortedList","createAxisBreak","a","b","adjustedStartValue","processSeriesDataItems","processSeriesDataItem","axisLetter","postProcessSeriesDataItems","postProcessSeriesDataItem","updateAxisBySeries","hideUnusedDataItems","dataItemsIterator","getSeriesDataItem","findNearest","getAngle","key","stackKey","range","getX","getPositionX","getY","getPositionY","dataChangeUpdate","seriesDataChangeUpdate","adjustDifference","min","max","difference","startValue","endValue","adjustedEndValue","intersection","isInBreak","fixAxisBreaks","update","firstAxisBreak","first","getPositionLabel","_chart","createSeriesRange","addDisposer","resetIterators","reset","processConfig","config","i","len","map","hasKey","getKey","configOrder","setDisabled","changed","_title","Component","relevant","Responsive","maybeXS","state","target","stateId","states","properties","element","paper","add","pixelPerfect","Sprite","invalidateDataItems","fillPath","path","measure","setPath","attr","nonScalingStroke","inside","cellStartLocation","cellEndLocation","minLabelPosition","maxLabelPosition","createChild","layout","inited","invalidateAxisItems","baseGrid","disposers","setAxis","bind","processRenderer","positionItem","item","moveTo","position2","getHeight","pixelHeight","getWidth","pixelWidth","coordinateToPosition","coordinate","coordinate2","updateGridElement","updateTickElement","updateBullet","updateFillElement","toggleVisibility","updatedStart","updatedEnd","_axisFills","applyOnClones","createGrid","_ticks","createTick","_labels","createLabel","opposite","verticalCenter","pixelY","inversedPosition","relativePositionSprite","innerHeight","valign","Percent","rotation","toBack","toFront","bigNum","bbx","bbw","bbh","measuredHeight","pixelPaddingTop","pixelPaddingBottom","y1","y2","h","abs","w","tickLength","measuredWidth","pixelX","basePoint","horizontalCenter","deltaX","maxWidth","align","x1","pixelMarginLeft","x2","pixelMarginRight","wavedRectangle","WavedRectangle","setWavedSides","widthS","widthXS","valueToPosition","values","setValue","_stepDecimalPlaces","_prevStepDecimalPlaces","_adjustLabelPrecision","_baseValue","_adjustedStart","_adjustedEnd","_extremesChanged","_deltaMinMax","_dsc","calculateTotals","axisFieldName","Number","MAX_VALUE","keepSelection","includeRangesInMinMax","step","_start","_end","_maxZoomed","_maxDefined","_minZoomed","_minDefined","_maxAdjusted","_minAdjusted","getIndex","startIndex","endIndex","total","sum","excludeFromTotal","workingValue","setCalculatedValue","getMinMax","calculateZoom","validateAxisElements","positionToValue","differece","minMaxStep","adjustMinMax","stepDecimalPlaces","syncWithAxis","calculated","getCache","_step","fixSmallStep","minZoomed","logarithmic","log","LOG10E","pow","floor","maxZoomed","precisionChanged","find","formatLabel","invalid","currentText","oldValue","stepPower","decCount","adjustedMin","adjustedMax","adjustedStep","itemIndex","fillEndPosition","adjustLabelPrecision","numberFormatter","format","baseValue","_adapterO","apply","valueToPoint","_difference","treatZeroAs","invalidateLabels","breakStartPosition","breakEndPosition","breakStartValue","breakEndValue","E","xToValue","yToValue","animateMinMax","animate","property","from","to","rangeChangeDuration","rangeChangeEasing","POSITIVE_INFINITY","NEGATIVE_INFINITY","ignoreMinMax","seriesMin","seriesMax","minValue","maxValue","raiseCriticalError","_minReal","_maxReal","dif","fixMin","fixMax","exponent","power","extraMin","extraMax","strict","strictMinMax","animation","_minMaxAnimation","isFinished","_finalMax","_finalMin","validateDataItems","handleSelectionExtremesChange","strictMode","initialMin","initialMax","extra","Infinity","ceil","stepDivisor","maxPrecision","minCount","maxCount","handleExtremesChange","selectionMin","selectionMax","allHidden","isHidden","outOfRange","isHiding","seriesSelectionMin","seriesSelectionMax","minMaxStep2","syncAxes","declination","setCache","zoom","getWorkingValue","stack","getValue","extraTooltipPrecision","valueStr","zoomToValues","skipRangeEvent","instantly","axisBreakDif","axisBreakGridCount","breakMinMaxStep","showTooltipAt","once","count","currentCount","synced","c","diff","omin","omax","ostep","checkSync","processingErrors","xAxis","getTime","date","endDate","dates","setDate","_gapBreaks","gridIntervals","groupIntervals","dateFormats","Dictionary","periodChangeDateFormats","_baseIntervalReal","timeUnit","_prevSeriesTime","_minDifference","_firstWeekDay","groupMin","groupMax","snapTooltip","groupCount","getDFFormatter","pushAll","gridInterval","_gridInterval","gridDuration","applyInternalDefaults","setKey","language","translate","baseDuration","periodCount","getFirstWeekDay","mainBaseDuration","mainBaseInterval","maxZoomFactor","dataSetChanged","groupData","modifiedDifference","startLocation","endLocation","groupInterval","chooseInterval","_groupInterval","newId","_currentDataSetId","dispatch","baseAxis","setDataSet","baseInterval","_nextGridUnit","_intervalDuration","_gridDate","Date","_df","utc","timezoneMinutes","timezone","getAxisField","minZoomedStr","toString","startDataItem","dataItemsByAxis","uid","currentDataSetId","findFirst","findClosestIndex","maxZoomedStr","endDataItem","dataRangeInvalid","validateDataRange","time","previousDataItem","previousDate","validateData","minDifference","seriesGroupUpdate","addEmptyUnitsBreaks","JSON","stringify","_baseInterval","mainDataSet","groupSeriesData","dataGrouped","removeChildren","interval","intervalDuration","_dataSets","dataSetId","dataSet","dataSets","newDataItem","roundedDate","previousTime","dataFields","dfkey","df","dfk","indexOf","getDate","currentTime","firstDayOfWeek","vkey","dataField","dataContext","setWorkingLocation","locations","dateX","openDateX","dateY","openDateY","_index","dvalues","open","close","low","high","average","propertyFields","fieldValue","f","hasProperties","setProperty","groupDataItems","groupFieldName","groupFields","dateFormatter","intervalID","startTime","skipEmptyPeriods","startTimeStr","startDate","breakGridCount","gridDate","getGridDate","intervalCount","realIntervalCount","prevTimestamp","newDate","timestamp","durationBreaksRemoved","getBreaklessDate","prevGridDate","markUnitChange","endTimestamp","intervals","lastIndex","dateToPosition","dateToPoint","positionToDate","getTimeByLocation","workingLocations","endTime","timezoneOffset","setTime","getTimezoneOffset","openTime","openDate","prevSeriesTime","_mainBaseInterval","timeInterval","invalidateData","tooltipDate","tooltipDateFormat","dateFormat","deltaValue","nextDate","getCurrentLabelFormat","id","zoomToDates","adjust","parse","isEnd","isStart","ds","mindi","maxdi","yAxis","asIs","field","cursor","snapToSeries","showTooltipAtDataItem","_seriesPoints","tooltipText","tooltipHTML","makeGap","previous","connect","autoGapCount","prevDate","bby","deltaY","maxHeight","pixelPaddingRight","pixelPaddingLeft","pixelMarginTop","pixelMarginBottom","innerWidth","heightXS","heightXXS","indexToPosition","category","categoryToIndex","seriesDataItems","endCategory","deltaPosition","isEnabled","oldCategory","deltaCoordinate","dataItemsByCategory","_lastDataItem","removeKey","categoryAxisDataItem","seriesId","remove","CategoryAxis","invalidateDataRange","positionToIndex","minIndex","maxIndex","axisDataItem","seriesDataItem","dataCount","MAX_SAFE_INTEGER","frequency","_startIndex","_endIndex","_frequency","fillEndIndex","fillPosition","html","disposeData","processDataItem","getDataItem","breakStartIndex","breakEndIndex","categoryToPosition","categoryToPoint","zoomToCategories","startCategory","zoomToIndexes","startPos","endPos","getFirstSeriesDataItem","categoryX","categoryY","getLastSeriesDataItem","getSeriesDataItemByCategory","categories","tooltipDataItem","breakPosition","positionToCategory","sortBySeries","addDelayedMap","customValue","valueX","valueY","openValueX","openValueY","setLocation","setCategory","openCategoryX","openCategoryY","getMin","fields","working","stackValue","getMax","Series","_xAxis","_yAxis","_xValueFields","_yValueFields","usesShowFields","_dataSetChanged","_maxxX","_maxxY","_propertiesChanged","cursorHoverEnabled","mainContainer","setElement","stacked","_showBullets","stackToNegative","returnBulletDefaultState","observe","legendDataItem","childrenCreated","legend","readerTitle","resetExtremes","_tmin","_tmax","_smin","_smax","valueYShow","openValueXShow","openValueYShow","defineFields","data","updateItemReaderText","_xField","_yField","name","setInitialWorkingValues","e","updateDataItem","dataItemsX","clearCatAxis","dataItemsY","xAxisFieldName","xField","xOpenField","yAxisFieldName","yField","yOpenField","_xOpenField","_yOpenField","addValueField","setCategoryAxisField","setDateAxisField","afterDraw","getMaskPath","plotContainer","minBulletDistance","maskBullets","leftAxesContainer","rightAxesContainer","topAxesContainer","bottomAxesContainer","xAxes","setXAxis","oldAxis","yAxes","setYAxis","handleYAxisSet","_baseAxis","addData","rawDataItem","removeCount","skipRaw","scrollbarSeries","setData","_prevStartIndex","_prevEndIndex","appeared","processValues","minX","maxX","minY","maxY","workingStartIndex","workingEndIndex","getStackValue","stackX","stackY","xAxisId","yAxisId","stackedSeries","isDisposed","tmin","isShowing","tmax","_prevTooltipDataItem","xPosition","yPosition","getAdjustedXLocation","bulletLocationX","getAdjustedYLocation","bulletLocationY","hideSeriesTooltipsOnSelection","selection","downPoint","updateLegendValue","tooltipXField","tooltipYField","tooltipPoint","getPoint","tooltipX","tooltipY","type","interactions","isRealHover","isHover","showTooltip","fireEvent","shouldCreateBullet","bulletTemplate","hasValue","disabledField","positionBullet","getBulletLocationX","getBulletLocationY","positionX","positionY","openValue","closeValue","middleValue","rightLocation","locationX","leftLocation","openPositionX","topLocation","locationY","bottomLocation","openPositionY","positionBulletReal","bulletLocation","updateStacking","invalidateProcessedData","anim","delay","interpolationDuration","defaultState","transitionDuration","animationsEnabled","realDuration","sequencedInterpolation","sequencedInterpolationDelay","disable","enable","hidden","hiddenState","handleDataItemWorkingValueChange","axisSeries","backwards","prevSeries","prevDataItem","prevValue","prevRealValue","_tooltipXField","_tooltipYField","xKey","yKey","stackKeyX","stackKeyY","_itemReaderTextChanged","val","itemReaderText","axisBulletsContainer","scrollbarChart","margin","_scrollbarChart","filter","DesaturateFilter","filterUnits","unselectedOverlay","_unselectedOverlay","thumbBackground","thumb","hoverState","downState","handleSeriesAdded","handleSeriesRemoved","sourceSeries","zoomOutButton","inputDateFormat","locale","addXAxis","addYAxis","onlyShowOnViewport","queue","maxZoomCount","minZoomCount","sourceAxis","clonedFrom","minDefined","maxDefined","showOnInit","zoomOutAxes","updateByOrientation","orientation","off","err","handleDataChanged","dataProvider","invalidateRawData","updateThumb","Scrollbar","SerialChart","_axisRendererX","_axisRendererY","arrangeTooltips","chartContainer","topAxesCont","yAxesAndPlotCont","yAxesAndPlotContainer","bottomAxesCont","leftAxesCont","contentAlign","updateXAxesMargins","plotCont","mouseWheelBehavior","_cursorContainer","rightAxesCont","seriesContainer","ZoomOutButton","_bulletMask","exportable","updateSeriesLegend","updatePlotElements","_parseDataFrom","leftAxesWidth","rightAxesWidth","paddingLeft","paddingRight","reinit","handleXAxisChange","updateXAxis","handleYAxisChange","updateYAxis","processXAxis","handleXAxisRangeChange","processAxis","processYAxis","handleYAxisRangeChange","getCommonAxisRange","scrollbarX","zoomAxes","updateScrollbar","minZoomFactor","seriesAppeared","scrollbarY","scrollbar","skipRangeEvents","axes","axisStart","axisEnd","_dataUsers","dataUsers","updateSeriesMasks","_xAxes","handleAxisRemoval","_yAxes","removeFromInvalidComponents","dataInvalid","patterns","colors","next","backgroundOpacity","Color","_cursor","removeDispose","handleCursorPositionChange","handleCursorZoomStart","handleCursorZoomEnd","handleCursorPanStart","handleCursorPanning","handleCursorPanEnd","handleCursorCanceled","handleHideCursor","tapToActivate","setTapToActivate","showSeriesTooltip","snpSeries","getClosest","closestSeries","handleSnap","_cursorXPosition","showAxisTooltip","_cursorYPosition","sortSeriesTooltips","closestDataItem","minDistance","xPos","yPos","dxPosition","dyPosition","distance","sqrt","hideObjectTooltip","seriesPoints","maxTooltipDistance","seriesPoint","fixedPoint","handleOutReal","np","firstSeries","sort","reverse","averageY","svgContainer","SVGContainer","bottom","dropped","nextHeight","pointY","nextY","except","getUpdatedRange","behavior","xRange","priority","yRange","_panStartXRange","_panStartYRange","_panEndXRange","panEndRange","panStartRange","delta","snapOnPan","_panEndYRange","maxPanOut","newStart","newEnd","newRange","_scrollbarX","startGrip","endGrip","handleXScrollbarChange","adapter","arg","_scrollbarY","handleYScrollbarChange","fixRange","stop","realRange","originalRange","cellWidth","handleWheel","svgPoint","htmlContainer","cssScale","plotPoint","shift","handleWheelReal","handleHorizontalWheel","horizontalMouseWheelBehavior","rangeX","rangeY","shiftStep","differenceX","newStartX","newEndX","differenceY","newStartY","newEndY","location2X","location2Y","_mouseWheelDisposer","wheelable","hoverable","_mouseWheelDisposer2","dataSourceDateFields","populateDataSourceFields","dataSourceNumberFields","createSeries","_zoomOutButton","button","addScrollbarData","removeScrollbarData","dataUser","removeData","isTouchProtected","handleTapToActivate","handleTapToActivateDeactivation","fillSprite","strokeSprite","drawSegment","points","closePoints","smoothnessX","smoothnessY","smoothing","smooth","closed","lineElement","fillElement","_baseUnit","durationFormatter","axisDurationFormat","baseUnit","divisors","realDivisor","divisor","reducedCount","getValueUnit","getFormat","_tooltipDurationFormat","tooltipDurationFormat","segments","createSegment","_segmentsIterator","tensionX","tensionY","segmentsContainer","initialY","setWorkingValue","initialX","notRange","segment","tooltipColorSource","openSegmentWrapper","_adjustedStartIndex","sliceData","findAdjustedIndex","_workingStartIndex","_workingEndIndex","adjustedIndex","openIndex","params","openSegment","getSegment","getFirst","addToClose","closeIndex","propertiesChanged","strokeDasharray","group","node","removeAttribute","valuesFound","updateSegmentProperties","addPoints","closeSegment","itemProperties","checkOnly","propertyName","currentValue","currentValueStr","createLegendMarker","marker","disposeChildren","Line","Rectangle","color","colorOrig","bullets","Bullet","copyToLegendMarker","hasLabels","children","child","connectEnds","radius","startAngle","endAngle","pixelRadius","pixelInnerRadius","unshift","updateRendererRefs","rendererX","rendererY","axisRendererY","innerRadius","setPercentProperty","fdx","fdy","locationOnPath","textAlign","textPathElement","axisRadius","sign","pixelRadiusY","axisRadiusY","fixPosition","dx","dy","isNegative","realRadius","relativeRotation","labelRadius","bent","bbox","dH","dW","_measuredHeight","_measuredWidth","pixelRadiusReal","useChartAngles","cos","atan2","sin","PI","mr","innerRadiusModifyer","arc","angleToPosition","gridInnerRadius","fitsToBounds","gridType","axisAngle","gridLocation","WavedCircle","tooltipOrientation","radarContainer","Circle","beforeDraw","rect","innerRect","wr","hr","maxRadius","diameter","_pixelInnerRadius","definedBBox","validatePosition","pin","startWidth","endWidth","hand","Trapezoid","leftSide","rightSide","x0","_pin","_hand","showValue","easing","_value","newAngle","currentAngle","rotationDirection","updateValue","hands","processHand","uidAttr","slice","toValue","_legendDataItem","valueLabel","ticksContainer","labelsContainer","_slice","slices","slicesContainer","itemsFocusable","role","focusable","ev","populateString","hiddenInLegend","_addAllDataItems","ColorSet","calculatePercent","alignLabels","skipFocusThreshold","transitionEasing","createSlice","_slices","initSlice","initTick","initLabel","currentStep","feedLegend","arrangeLabels","lh","nextLabel","getNextLabel","arrangeLabels2","previousTop","nextDataItem","isActive","handleSliceScale","handleSliceMove","setAlignLabels","legendSettings","labelText","itemLabelText","valueText","itemValueText","setLegend","valueLabels","itemContainers","percentSeriesDataItem","ix","scale","y0","iy","radiusY","r","radiusValue","Slice","shiftRadius","togglable","lastHitPointer","touch","_leftItems","_rightItems","_currentStartAngle","_arcRect","_maxRadiusPercent","radiusValuePercent","percent","aAngle","middleAngle","bAngle","ignoreZeroValues","normalizedMiddleAngle","arcRect","depth","_pixelRadius","_startAngleInternal","_endAngleInternal","updateRadius","_chartPixelRadius","updateSeriesAngles","chartCont","chartRadius","chartPixelInnerRadius","seriesRadius","_chartPixelInnerRadius","depthValue","Slice3D","depthPercent","invalidateDataUsers","Legend","draggable","inert","setStateOnChildren","invalidateLinks","handleHit","outgoingDataItems","toNode","incomingDataItems","fromNode","link","colorMode","gradient","stops","_incomingDataItems","sortBy","_incomingSorted","fromName","_outgoingDataItems","_outgoingSorted","setColorProperty","_background","column","RoundedRectangle","itemContainer","deepInvalidate","positionBullets","_bulletsContainer","_bulletsMask","bulletsMask","middleLine","rotationField","addColor","setFill","_gradient","measureElement","_bullets","Polyline","getTooltipX","getTooltipY","LinearGradient","toName","_link","links","Chart","nodePadding","minNodeSize","linksContainer","nodesContainer","nodes","sortNodes","strokeModifier","LinearGradientModifier","opacities","fillModifier","strNode","getNodeValue","_sorted","sortedIterator","incomingTotal","outgoingTotal","totalIncoming","totalOutgoing","changeSorting","_nodes","createNode","_links","createLink","truncate","hideOversized","handleMaxSize","nextInCoord","nextOutCoord","nameLabel","endX","endY","linkWidth","valueHeight","startX","startY","tension","controlPointDistance","Polyspline","makeBackwards","setState","xt0","yt0","xt1","yt1","xb0","xb1","yb0","yb1","xm0","xm1","ym0","ym1","_bbox","cpd","kxt0","kyt0","kxt1","kyt1","kxm0","kym0","kxm1","kym1","kxb0","kyb0","kxb1","kyb1","nodeAlign","_valueHeight","_levelCount","level","getNodeLevel","levels","_counter","checkLoop","calculateValueHeight","_levelSum","_levelNodesCount","maxSum","availableHeight","maxSumLevel","realValue","levelNodeCount","_maxSumLevel","maxSumLevelNodeCount","finalHeight","_heightAnimation","animationOptions","Animation","interpolationEasing","container","nextCoordinate","levelCoordinate","nodeCount","showReal","nodeHeight","updateRotation","childAngle","childRadius","labelAngle","adjustedTotal","nextAngle","nonRibbon","percentWidth","valueAngle","mAngle","trueStartAngle","tx","ty","cpx","cpy","p1","p2","cp","d","point1","point2","fromX","fromY","toX","toY","mAngle1","mAngle2","chordContainer","newTotal","disableType","createAssets","handleKidAdded","_column","setColumn","columns","_rangesColumns","_startLocation","_endLocation","clustered","columnsContainer","_columnsContainer","baseAxisSeries","ColumnSeries","sortedItem","sortCategoryAxis","disableUnusedColumns","currentPosition","deltaAnimation","validateDataElementReal","getStartLocation","getEndLocation","l","t","percentHeight","paddingTop","paddingBottom","outOfBounds","diw","dih","offset","fixHorizontalCoordinate","fixVerticalCoordinate","axisLenght","realX","realY","realWidth","realHeight","setColumnStates","rangeColumn","rangesColumns","itemWidth","itemHeight","_dropFromOpenState","_dropFromPreviousState","_riseFromOpenState","_riseFromPreviousState","change","droppedFromOpen","droppedFromPrevious","_columns","createColumnTemplate","treeMapDataItem","_dataContext","configField","hideReal","rows","hasChildren","getDuration","childValue","layoutAlgorithm","squarify","_usesData","maxLevels","currentLevel","hideParentColumns","sorting","xRenderer","yRenderer","seriesTemplates","zoomToChartDataItem","_homeDataItem","_navigationBar","navigationBar","createTreeSeries","_tempSeries","homeDataItem","_homeText","layoutItems","_updateDataItemIndexes","navigationData","parentDataItem","initSeries","createTreeSeriesReal","currentlyZoomed","cursorOverStyle","Mouse","pointer","zoomToSeriesDataItem","toggleBullets","rangeChangeAnimation","_dataDisposers","binaryTree","dice","sliceDice","validateRawData","n","sums","Array","partition","j","valueOffset","valueTarget","k","hi","mid","valueLeft","valueRight","xk","yk","nodeValue","sumValue","newRatio","minRatio","alpha","beta","ratio","i0","i1","row","handleSeriesAdded2","handleDataItemValueChange","getLegendLevel","handleLegendSeriesAdded","legendParent","getExporting","exporting","info","dx3D","dy3D","handle3DChanged","column3D","Rectangle3D","fixLayout","fixColumns","depthIndex","s","maskColumns","markerContainer","markerCount","markers","getMinFromRules","heatRules","heatRule","getMaxFromRules","valueAxis","reverseOrder","minColor","maxColor","seriesFill","minOpacity","maxOpacity","minStrokeOpacity","maxStrokeOpacity","minStroke","maxStroke","strokeGradient","rgb","_valueAxis","dataFieldDefined","updateMinMax","lowLine","highLine","lowValueX","lowValueY","highValueX","highValueY","positiveColor","negativeColor","dropFromOpenState","riseFromOpenState","validateCandlestick","yOpen","yClose","yLow","yLowField","yHigh","yHighField","xOpen","xClose","xLow","xLowField","xHigh","xHighField","rangeLowLine","rangehighLine","_xLowField","_yLowField","_xHighField","_yHighField","cw","ch","openLine","highLowLine","closeLine","rangeOpenLine","rangeCloseLine","rangeHighLowLine","noRisers","vertical","startLocationX","endLocationX","startLocationY","endLocationY","prevPoint","point0","radarColumn","lAngle","rAngle","tRadius","bRadius","cellAngle","temp","bottomWidth","topWidth","expandDistance","pt","pb","pr","pl","ed","tl","tw","tr","br","bw","bl","cpr","cpl","qp1","qp2","tickPoint","tt","tb","bt","bb","mlx","mty","p0","labelsOpposite","maxRight","maxBottom","_sliceLink","sliceLinks","_nextY","bottomRatio","labelTemplate","dItem","_total","_count","getNextValue","nextValue","nextItem","formDataElement","sliceLink","decorateSlice","linkHeight","getLastLabel","lastLabel","lastY","lastX","_sliceLinks","labelAlign","labelValign","pyramidHeight","valueIs","_nextWidth","relValue","_pyramidHeight","_pyramidWidth","absoluteSum","pyramidWidth","sliceTopWidth","tan","sliceHeight","sliceBottomWidth","square","sliceWidth","_maskSprite","maskSprite","pictureWidth","pictureHeight","newWidth","newHeight","hs","coneColumn","Cone","curvedColumn","circle","errorLine","isDynamic","textLink","TextLink","_linksIterator","triangle","Triangle","direction","separators","activeLink","fontWeight","getLast","separator","_stick","trackable","clickable","interaction","body","handleCursorDown","handleCursorUp","handleCursorMove","_generalBehavior","isLocalElement","svg","_stickPoint","triggerMove","stick","force","triggerMoveReal","invalidatePosition","getPositions","triggerDown","triggerDownReal","setGlobalStyle","grabbing","triggerUp","triggerUpReal","requestFrame","updatePoint","upPoint","_upPointOrig","_downPointOrig","getHitOption","default","updateSelection","cancelable","shouldPreventGestures","preventDefault","lockElement","_lineX","_lineY","_snapToDisposers","lineX","lineY","updateSize","_usesSelection","_positionPrecision","fixPoint","updateLinePositions","getPanningRanges","selectionX","selectionY","hasMoved","getRanges","handleXTooltipPosition","handleYTooltipPosition","fullWidthLineX","fullWidthLineY","_selection","snap","disposer","xx","yy","animationDuration","animationEasing","truePixelRadius","updateLineX","updateLineY","fillStartAngle","downAngle","downRadius","currentRadius","_prevAngle","downSin","downCos","upAngle","upRadius"],"mappings":"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","file":"static/js/41.b32a8264.chunk.js","sourcesContent":["/**\r\n * Axis break module\r\n */\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Axis, AxisDataItem } from \"./Axis\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { WavedLine } from \"../../core/elements/WavedLine\";\r\nimport { IWavedShape } from \"../../core/defs/IWavedShape\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisBreak]].\r\n */\r\nexport interface IAxisBreakProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * A size of the break relative to the actual size of the scope break spans.\r\n\t *\r\n\t * For example, if `breakSize = 0.1` and unbroken scope of values it spans\r\n\t * would be 100 pixels, the break would be 10 pixels wide.\r\n\t *\r\n\t * 0 means the break will completely collapse and hide the values.\r\n\t * 1 means break would be not collapse at all, which would make it\r\n\t * effectively useless.\r\n\t *\r\n\t * @default 0.01\r\n\t */\r\n\tbreakSize?: number;\r\n\r\n\t/**\r\n\t * Starting value.\r\n\t */\r\n\tstartValue?: number;\r\n\r\n\t/**\r\n\t * End value.\r\n\t */\r\n\tendValue?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisBreak]].\r\n */\r\nexport interface IAxisBreakEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines [[AxisBreak]] adapters.\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisBreakAdapters extends IContainerAdapters, IAxisBreakProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Base class to define \"breaks\" on axes.\r\n *\r\n * @see {@link IAxisBreakEvents} for a list of available events\r\n * @see {@link IAxisBreakAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class AxisBreak extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisBreakProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisBreakAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisBreakEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Axis this break is used for.\r\n\t */\r\n\tpublic _axisType: Axis;\r\n\r\n\t/**\r\n\t * Reference to parent Axis.\r\n\t */\r\n\tprotected _axis = new MutableValueDisposer<this[\"_axisType\"]>();\r\n\r\n\t/**\r\n\t * A reference to starting line element.\r\n\t */\r\n\tprotected _startLine: IWavedShape;\r\n\r\n\t/**\r\n\t * A reference to ending line element.\r\n\t */\r\n\tprotected _endLine: IWavedShape;\r\n\r\n\t/**\r\n\t * A reference to fill shape.\r\n\t */\r\n\tprotected _fillShape: IWavedShape;\r\n\r\n\t/**\r\n\t * A list of axis data items which fall within this break.\r\n\t */\r\n\tpublic dataItems: List<AxisDataItem> = new List<AxisDataItem>();\r\n\r\n\t/**\r\n\t * Adjusted start value.\r\n\t *\r\n\t * Start and end values need to be adjusted so that they do not overlap with\r\n\t * adjacent breaks.\r\n\t */\r\n\tpublic adjustedStartValue: number;\r\n\r\n\t/**\r\n\t * Adjusted end value.\r\n\t *\r\n\t * Start and end values need to be adjusted so that they do not overlap with\r\n\t * adjacent breaks.\r\n\t */\r\n\tpublic adjustedEndValue: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisBreak\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.breakSize = 0.01;\r\n\t\tthis.marginLeft = -5;\r\n\t\tthis.marginRight = -5;\r\n\t\tthis.marginTop = -5;\r\n\t\tthis.marginBottom = -5;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Create elements\r\n\t\t// (these won't be used actually, just for setting properties)\r\n\t\tlet fillShape = new WavedLine();\r\n\t\tfillShape.fill = interfaceColors.getFor(\"background\");\r\n\t\tfillShape.stroke = color();\r\n\t\tfillShape.fillOpacity = 0.9;\r\n\t\tfillShape.zIndex = 0;\r\n\t\tthis._fillShape = fillShape;\r\n\r\n\t\tlet startLine = new WavedLine();\r\n\t\tstartLine.fill = color();\r\n\t\tstartLine.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tstartLine.strokeOpacity = 0.3;\r\n\t\tstartLine.zIndex = 1;\r\n\t\tthis._startLine = startLine;\r\n\r\n\t\tlet endLine = new WavedLine();\r\n\t\tendLine.fill = color();\r\n\t\tendLine.stroke = color(\"#000000\");// interfaceColors.getFor(\"grid\");\r\n\t\tendLine.strokeOpacity = 0.3;\r\n\t\tendLine.zIndex = 2;\r\n\t\tthis._endLine = endLine;\r\n\r\n\t\tthis._disposers.push(this._axis);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tpublic dispose(): void {\r\n\t\tsuper.dispose();\r\n\r\n\t\tif (this._fillShape) {\r\n\t\t\tthis._fillShape.dispose();\r\n\t\t}\r\n\r\n\t\tif (this._startLine) {\r\n\t\t\tthis._startLine.dispose();\r\n\t\t}\r\n\r\n\t\tif (this._endLine) {\r\n\t\t\tthis._endLine.dispose();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * An element used for the starting line of the break.\r\n\t *\r\n\t * @param sprite  Element\r\n\t */\r\n\tpublic set startLine(sprite: IWavedShape) {\r\n\t\tif (this._startLine) {\r\n\t\t\tthis._startLine.dispose();\r\n\t\t}\r\n\t\tthis._startLine = sprite;\r\n\t\tthis.addBreakSprite(sprite);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Element\r\n\t */\r\n\tpublic get startLine(): IWavedShape {\r\n\t\treturn this._startLine;\r\n\t}\r\n\r\n\t/**\r\n\t * An element used for the end line of the break.\r\n\t *\r\n\t * @param sprite Element\r\n\t */\r\n\tpublic set endLine(sprite: IWavedShape) {\r\n\t\tif (this._endLine) {\r\n\t\t\tthis._endLine.dispose();\r\n\t\t}\r\n\t\tthis._endLine = sprite;\r\n\t\tthis.addBreakSprite(sprite);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Element\r\n\t */\r\n\tpublic get endLine(): IWavedShape {\r\n\t\treturn this._endLine;\r\n\t}\r\n\r\n\t/**\r\n\t * An element used for fill of the break.\r\n\t *\r\n\t * @param sprite Element\r\n\t */\r\n\tpublic set fillShape(sprite: IWavedShape) {\r\n\t\tif (this._fillShape) {\r\n\t\t\tthis._fillShape.dispose();\r\n\t\t}\r\n\r\n\t\tthis._fillShape = sprite;\r\n\t\tthis.addBreakSprite(sprite);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Element\r\n\t */\r\n\tpublic get fillShape(): IWavedShape {\r\n\t\treturn this._fillShape;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a break element (e.g. lines, fill) to the break, which is\r\n\t * [[Container]].\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param sprite Element to add\r\n\t */\r\n\tpublic addBreakSprite(sprite: IWavedShape) {\r\n\t\tsprite.parent = this;\r\n\t\tsprite.isMeasured = false;\r\n\t\tthis._disposers.push(sprite);\r\n\t}\r\n\r\n\t/**\r\n\t * An Axis this Break is associated with.\r\n\t *\r\n\t * @param axis  Axis\r\n\t */\r\n\tpublic set axis(axis: this[\"_axisType\"]) {\r\n\t\tif (this._axis.get() !== axis) {\r\n\t\t\tthis._axis.set(axis, axis.renderer.gridContainer.events.on(\"transformed\", this.invalidate, this, false));\r\n\t\t\taxis.renderer.createBreakSprites(this);\r\n\r\n\t\t\t// this can't go to copyFrom, as axis is set later\r\n\t\t\tlet breakTemplate: AxisBreak = axis.axisBreaks.template;\r\n\r\n\t\t\tthis.startLine.copyFrom(breakTemplate.startLine);\r\n\t\t\tthis.endLine.copyFrom(breakTemplate.endLine);\r\n\t\t\tthis.fillShape.copyFrom(breakTemplate.fillShape);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Axis\r\n\t */\r\n\tpublic get axis(): this[\"_axisType\"] {\r\n\t\treturn this._axis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A size of the break relative to the actual size of the scope break spans.\r\n\t *\r\n\t * For example, if `breakSize = 0.1` and unbroken scope of values it spans\r\n\t * would be 100 pixels, the break would be 10 pixels wide.\r\n\t *\r\n\t * 0 means the break will completely collapse and hide the values.\r\n\t * 1 means break would be not collapse at all, which would make it\r\n\t * effectively useless.\r\n\t *\r\n\t * @default 0.01\r\n\t * @param value  Relative axis break\r\n\t */\r\n\tpublic set breakSize(value: number) {\r\n\t\tif (this.setPropertyValue(\"breakSize\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Relative axis break\r\n\t */\r\n\tpublic get breakSize(): number {\r\n\t\treturn this.getPropertyValue(\"breakSize\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns pixel coordinates of axis break's start.\r\n\t *\r\n\t * @return Start point\r\n\t */\r\n\tpublic get startPoint(): IPoint {\r\n\t\tlet renderer: AxisRenderer = this.axis.renderer;\r\n\t\tif (renderer) {\r\n\t\t\treturn renderer.positionToPoint(this.startPosition);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns pixel coordinates of axis break's end.\r\n\t *\r\n\t * @return End point\r\n\t */\r\n\tpublic get endPoint(): IPoint {\r\n\t\tlet renderer: AxisRenderer = this.axis.renderer;\r\n\t\tif (renderer) {\r\n\t\t\treturn renderer.positionToPoint(this.endPosition);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a relative position at which axis break starts.\r\n\t *\r\n\t * This is a calculated position, meaning it shows relative position of the\r\n\t * break after break is applied.\r\n\t *\r\n\t * @return Start position\r\n\t */\r\n\tpublic get startPosition(): number {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a relative position at which axis break ends.\r\n\t *\r\n\t * This is a calculated position, meaning it shows relative position of the\r\n\t * break after break is applied.\r\n\t *\r\n\t * @return End position\r\n\t */\r\n\tpublic get endPosition(): number {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the axis break.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer: AxisRenderer = this.axis.renderer;\r\n\t\t\trenderer.updateBreakElement(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A starting value for the break.\r\n\t *\r\n\t * @param value  Starting value\r\n\t */\r\n\tpublic set startValue(value: number) {\r\n\t\tif (this.setPropertyValue(\"startValue\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Starting value\r\n\t */\r\n\tpublic get startValue(): number {\r\n\t\treturn this.getPropertyValue(\"startValue\");\r\n\t}\r\n\r\n\t/**\r\n\t * An end value for the break.\r\n\t *\r\n\t * @param value  End value\r\n\t */\r\n\tpublic set endValue(value: number) {\r\n\t\tif (this.setPropertyValue(\"endValue\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return End value\r\n\t */\r\n\tpublic get endValue(): number {\r\n\t\treturn this.getPropertyValue(\"endValue\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisBreak\"] = AxisBreak;\r\n","/**\r\n * Base class for all Axis\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Component, IComponentProperties, IComponentDataFields, IComponentAdapters, IComponentEvents } from \"../../core/Component\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { DataItem, IDataItemAdapters } from \"../../core/DataItem\";\r\n\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { AxisBreak } from \"./AxisBreak\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\n\r\n// Charts\r\nimport { Chart } from \"../Chart\";\r\n\r\n// Series\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\n\r\n// Elements\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { Tooltip, PointerOrientation } from \"../../core/elements/Tooltip\";\r\nimport { PointedRectangle } from \"../../core/elements/PointedRectangle\";\r\n\r\n// Types\r\nimport { IRange } from \"../../core/defs/IRange\";\r\n\r\n// Utils\r\nimport { Ordering } from \"../../core/utils/Order\";\r\nimport { SortedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { List, ListTemplate, IListEvents, ListDisposer } from \"../../core/utils/List\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $number from \"../../core/utils/Number\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[Axis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class AxisDataItem extends DataItem {\r\n\r\n\t/**\r\n\t * Reference to a related [[Grid]] element.\r\n\t */\r\n\tprotected _grid: Grid;\r\n\r\n\t/**\r\n\t * Reference to a related [[AxisTick]] element.\r\n\t */\r\n\tprotected _tick: AxisTick;\r\n\r\n\t/**\r\n\t * Reference to a related [[AxisLabel]] element.\r\n\t */\r\n\tprotected _label: AxisLabel;\r\n\r\n\t/**\r\n\t * Reference to a related [[AxisFill]] element.\r\n\t */\r\n\tprotected _axisFill: AxisFill;\r\n\r\n\t/**\r\n\t * A mask for axis. We're using [[AxisFill]] since the mask, basically, has\r\n\t * the same shape and features.\r\n\t */\r\n\tprotected _mask: AxisFill;\r\n\r\n\t/**\r\n\t * Container which might be used to hold some extra items, like series\r\n\t * segments when data item is used for axis range.\r\n\t */\r\n\tprotected _contents: Container;\r\n\r\n\t/**\r\n\t * A text to be used as label for this data item.\r\n\t */\r\n\tprotected _text: string;\r\n\r\n\t/**\r\n\t * Holds a physical position of the grid line associated with this data item,\r\n\t * so that it can be used when measuring distance between points, and hiding\r\n\t * some of them so they don't overlap.\r\n\t */\r\n\tpublic point: IPoint;\r\n\r\n\t/**\r\n\t * If the data item is within an existing [[AxisBreak]] this property will\r\n\t * hold a reference to that [[AxisBreak]].\r\n\t */\r\n\tpublic _axisBreak: AxisBreak;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: Axis;\r\n\r\n\t/**\r\n\t * Used to distinguish from real data points and those data items that are\r\n\t * used for ranges, like `series.axisRanges` or `axis.axisRanges`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic isRange: boolean;\r\n\r\n\t/**\r\n\t * relative position of data item on axis\r\n\t */\r\n\tpublic position: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _bullet: Sprite;\r\n\r\n\t/**\r\n\t * Allows hiding axis item (tick, label, grid) if it is closer to axis\r\n\t * beginning than this relative position (0-1).\r\n\t *\r\n\t * For axis labels it overrides `minLabelPosition` if set.\r\n\t *\r\n\t * ```TypeScript\r\n\t * // Hide all ticks and labels closer than 20% to axis beginning.\r\n\t * axis.renderer.ticks.template.minPosition = 0.2;\r\n\t * axis.renderer.labels.template.minPosition = 0.2;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * // Hide all ticks and labels closer than 20% to axis beginning.\r\n\t * axis.renderer.ticks.template.minPosition = 0.2;\r\n\t * axis.renderer.labels.template.minPosition = 0.2;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"xAxes\": [{\r\n\t *     // ...\r\n\t *     // Hide all ticks and labels closer than 20% to axis beginning.\r\n\t *     \"renderer\": {\r\n\t *       \"ticks\": {\r\n\t *         \"minPosition\": 0.2\r\n\t *       },\r\n\t *       \"labels\": {\r\n\t *         \"minPosition\": 0.2\r\n\t *       }\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t * \r\n\t * @since 4.5.11\r\n\t */\r\n\tpublic minPosition?: number;\r\n\r\n\t/**\r\n\t * Allows hiding axis item (tick, label, grid) if it is closer to axis\r\n\t * end than this relative position (0-1).\r\n\t *\r\n\t * For axis labels it overrides `maxLabelPosition` if set.\r\n\t *\r\n\t * ```TypeScript\r\n\t * // Hide all ticks and labels closer than 20% to axis end.\r\n\t * axis.renderer.ticks.template.maxPosition = 0.8;\r\n\t * axis.renderer.labels.template.maxPosition = 0.8;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * // Hide all ticks and labels closer than 20% to axis end.\r\n\t * axis.renderer.ticks.template.maxPosition = 0.8;\r\n\t * axis.renderer.labels.template.maxPosition = 0.8;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"xAxes\": [{\r\n\t *     // ...\r\n\t *     // Hide all ticks and labels closer than 20% to axis end.\r\n\t *     \"renderer\": {\r\n\t *       \"ticks\": {\r\n\t *         \"maxPosition\": 0.8\r\n\t *       },\r\n\t *       \"labels\": {\r\n\t *         \"maxPosition\": 0.8\r\n\t *       }\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t * \r\n\t * @since 4.5.11\r\n\t */\r\n\tpublic maxPosition?: number;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Actual index of the axis data item.\r\n\t * \r\n\t * @since 4.7.8\r\n\t */\r\n\tpublic itemIndex: number;\r\n\r\n\t/**\r\n\t * A [[Grid]] element associated with this data item.\r\n\t *\r\n\t * If there is no grid element associated with data item, a new one is\r\n\t * created and returned.\r\n\t *\r\n\t * @param grid  Grid element\r\n\t */\r\n\tpublic set grid(grid: Grid) {\r\n\t\tif (this._grid && this._grid != grid) {\r\n\t\t\t$array.remove(this.sprites, this._grid);\r\n\t\t\tthis._grid.dataItem = undefined;\r\n\t\t}\r\n\r\n\t\tif (grid) {\r\n\t\t\tif (grid.dataItem && grid.dataItem != this) {\r\n\t\t\t\t$array.remove(grid.dataItem.sprites, grid);\r\n\t\t\t\tgrid.dataItem.grid = undefined;\r\n\t\t\t}\r\n\t\t\tthis.addSprite(grid);\r\n\t\t}\r\n\t\tthis._grid = grid;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Grid element\r\n\t */\r\n\tpublic get grid(): Grid {\r\n\t\tif (!this._grid) {\r\n\t\t\tlet component = this.component;\r\n\t\t\tif (component) {\r\n\r\n\t\t\t\tlet template: Grid;\r\n\t\t\t\tlet grid: Grid;\r\n\r\n\t\t\t\tif (this.isRange) {\r\n\t\t\t\t\ttemplate = component.axisRanges.template.grid;\r\n\t\t\t\t\tif (template.disabled) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tgrid = template.clone();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\ttemplate = component.renderer.grid.template;\r\n\t\t\t\t\tif (template.disabled) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tgrid = component.renderer.grid.create();\r\n\t\t\t\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\t\t\t\tcomponent.renderer.grid.removeValue(grid);\r\n\t\t\t\t\t\t}));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.grid = grid;\r\n\t\t\t\tgrid.shouldClone = false;\r\n\t\t\t\tthis._disposers.push(grid);\r\n\t\t\t\tgrid.axis = this.component;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._grid;\r\n\t}\r\n\r\n\t/**\r\n\t * An [[AxisTick]] element associated with this data item.\r\n\t *\r\n\t * If there is no tick element associated with data item, a new one is\r\n\t * created and returned.\r\n\t *\r\n\t * @param tick  Tick element\r\n\t */\r\n\tpublic set tick(tick: AxisTick) {\r\n\t\tif (this._tick && this._tick != tick) {\r\n\t\t\t$array.remove(this.sprites, this._tick);\r\n\t\t\tthis._tick.dataItem = undefined;\r\n\t\t}\r\n\r\n\t\tif (tick) {\r\n\t\t\tif (tick.dataItem && tick.dataItem != this) {\r\n\t\t\t\t$array.remove(tick.dataItem.sprites, tick);\r\n\t\t\t\ttick.dataItem.tick = undefined;\r\n\t\t\t}\r\n\t\t\tthis.addSprite(tick);\r\n\t\t}\r\n\t\tthis._tick = tick;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Tick element\r\n\t */\r\n\tpublic get tick(): AxisTick {\r\n\t\tif (!this._tick) {\r\n\t\t\tlet component = this.component;\r\n\t\t\tif (component) {\r\n\r\n\t\t\t\tlet template: AxisTick;\r\n\t\t\t\tlet tick: AxisTick;\r\n\r\n\t\t\t\tif (this.isRange) {\r\n\t\t\t\t\ttemplate = component.axisRanges.template.tick;\r\n\t\t\t\t\tif (template.disabled) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\ttick = template.clone();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\ttemplate = component.renderer.ticks.template;\r\n\t\t\t\t\tif (template.disabled) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\ttick = component.renderer.ticks.create();\r\n\t\t\t\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\t\t\t\tcomponent.renderer.ticks.removeValue(tick);\r\n\t\t\t\t\t\t}));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.tick = tick;\r\n\t\t\t\ttick.axis = this.component;\r\n\t\t\t\ttick.shouldClone = false;\r\n\t\t\t\tthis._disposers.push(tick);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._tick;\r\n\t}\r\n\r\n\t/**\r\n\t * An [[AxisLabel]] element associated with this data item.\r\n\t *\r\n\t * If there is no label element associated with data item, a new one is\r\n\t * created and returned.\r\n\t *\r\n\t * @param label Label element\r\n\t */\r\n\tpublic set label(label: AxisLabel) {\r\n\t\tif (this._label && this._label != label) {\r\n\t\t\t$array.remove(this.sprites, this._label);\r\n\t\t\tthis._label.dataItem = undefined;\r\n\t\t}\r\n\r\n\t\tif (label) {\r\n\t\t\tif (label.dataItem && label.dataItem != this) {\r\n\t\t\t\t$array.remove(label.dataItem.sprites, label);\r\n\t\t\t\tlabel.dataItem.label = undefined;\r\n\t\t\t}\r\n\t\t\tthis.addSprite(label);\r\n\t\t}\r\n\t\tthis._label = label;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Label element\r\n\t */\r\n\tpublic get label(): AxisLabel {\r\n\t\tif (!this._label) {\r\n\t\t\tlet component = this.component;\r\n\t\t\tif (component) {\r\n\r\n\t\t\t\tlet template: AxisLabel;\r\n\t\t\t\tlet label: AxisLabel;\r\n\r\n\t\t\t\tif (this.isRange) {\r\n\t\t\t\t\ttemplate = component.axisRanges.template.label;\r\n\t\t\t\t\tif (template.disabled) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlabel = template.clone();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\ttemplate = component.renderer.labels.template;\r\n\t\t\t\t\tif (template.disabled) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlabel = component.renderer.labels.create();\r\n\t\t\t\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\t\t\t\tcomponent.renderer.labels.removeValue(label);\r\n\t\t\t\t\t\t}));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._disposers.push(label);\r\n\t\t\t\tthis.label = label;\r\n\t\t\t\tlabel.shouldClone = false;\r\n\t\t\t\tlabel.axis = this.component;\r\n\t\t\t\tlabel.virtualParent = component;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._label;\r\n\t}\r\n\r\n\t/**\r\n\t * An [[AxisFill]] associated element with this data item.\r\n\t *\r\n\t * If there is no fill element associated with data item, a new one is\r\n\t * created and returned.\r\n\t *\r\n\t * @param label Label element\r\n\t */\r\n\tpublic set axisFill(axisFill: AxisFill) {\r\n\t\tif (this._axisFill && this._axisFill != axisFill) {\r\n\t\t\t$array.remove(this.sprites, this._axisFill);\r\n\t\t\tthis._axisFill.dataItem = undefined;\r\n\t\t}\r\n\r\n\t\tif (axisFill) {\r\n\t\t\tif (axisFill.dataItem && axisFill.dataItem != this) {\r\n\t\t\t\t$array.remove(axisFill.dataItem.sprites, axisFill);\r\n\t\t\t\taxisFill.dataItem.axisFill = undefined;\r\n\t\t\t}\r\n\t\t\taxisFill.axis = this.component;\r\n\t\t\tthis.addSprite(axisFill);\r\n\t\t}\r\n\t\tthis._axisFill = axisFill;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Label element\r\n\t */\r\n\tpublic get axisFill(): AxisFill {\r\n\t\tif (!this._axisFill) {\r\n\t\t\tlet component = this.component;\r\n\t\t\tif (component) {\r\n\r\n\t\t\t\tlet template: AxisFill;\r\n\t\t\t\tlet axisFill: AxisFill;\r\n\r\n\t\t\t\tif (this.isRange) {\r\n\t\t\t\t\ttemplate = component.axisRanges.template.axisFill;\r\n\t\t\t\t\tif (!this.isTemplate && template.disabled) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\taxisFill = template.clone();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\ttemplate = component.renderer.axisFills.template;\r\n\t\t\t\t\tif (template.disabled) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\taxisFill = component.renderer.axisFills.create();\r\n\t\t\t\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\t\t\t\tcomponent.renderer.axisFills.removeValue(axisFill);\r\n\t\t\t\t\t\t}));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.axisFill = axisFill;\r\n\t\t\t\taxisFill.shouldClone = false;\r\n\t\t\t\tthis._disposers.push(axisFill);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._axisFill;\r\n\t}\r\n\r\n\t/**\r\n\t * Text to be used as data item's label.\r\n\t *\r\n\t * @param text Text label\r\n\t */\r\n\tpublic set text(text: string) {\r\n\t\tthis._text = text;\r\n\t\tif (this._label) { // do not use getter, it will create unwanted instances!\r\n\t\t\tthis._label.text = text;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Text label\r\n\t */\r\n\tpublic get text(): string {\r\n\t\treturn this._text;\r\n\t}\r\n\r\n\t/**\r\n\t * Data item's mask.\r\n\t *\r\n\t * @return Mask\r\n\t */\r\n\tpublic get mask(): AxisFill {\r\n\t\treturn this._mask;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a [[Container]] to place all visual elements, related to data item\r\n\t * in.\r\n\t *\r\n\t * If there is no Container, a new one is created.\r\n\t *\r\n\t * @return Contents container\r\n\t */\r\n\tpublic get contents(): Container {\r\n\t\tif (!this._contents) {\r\n\t\t\tlet contents = new Container();\r\n\t\t\tthis.addSprite(contents);\r\n\t\t\tcontents.isMeasured = false;\r\n\t\t\tthis._contents = contents;\r\n\r\n\t\t\tlet component = this.component;\r\n\t\t\tif (component) {\r\n\t\t\t\tlet mask: AxisFill = component.renderer.createFill(this.component);\r\n\t\t\t\tmask.disabled = false;\r\n\t\t\t\tmask.axis = component;\r\n\t\t\t\tthis.addSprite(mask);\r\n\t\t\t\tthis._mask = mask;\r\n\t\t\t\tcontents.mask = mask;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._contents;\r\n\t}\r\n\r\n\t/**\r\n\t * An [[AxisBreak]] this data item falls within.\r\n\t *\r\n\t * @param axisBreak Axis break\r\n\t */\r\n\tpublic set axisBreak(axisBreak: this[\"_axisBreak\"]) {\r\n\t\tif (this._axisBreak) {\r\n\t\t\tthis._axisBreak.dataItems.removeValue(this);\r\n\t\t}\r\n\t\tif (axisBreak) {\r\n\t\t\taxisBreak.dataItems.push(this);\r\n\t\t}\r\n\t\tthis._axisBreak = axisBreak;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Axis break\r\n\t */\r\n\tpublic get axisBreak(): this[\"_axisBreak\"] {\r\n\t\treturn this._axisBreak;\r\n\t}\r\n\r\n\t/**\r\n\t * Re-draws the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tif (this.component) {\r\n\t\t\tthis.component.validateDataElement(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Appends data item's elements to the parent [[Container]].\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic appendChildren() {\r\n\t\tif (this.component) {\r\n\t\t\tthis.component.appendDataItem(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if data item has particular property set.\r\n\t *\r\n\t * @param prop  Property name\r\n\t * @return Property set?\r\n\t */\r\n\tprotected hasProperty(prop: string): boolean {\r\n\t\treturn prop == \"component\" ? true : super.hasProperty(prop);\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[AxisDataItem]].\r\n\t *\r\n\t * @param source Source AxisDataItem\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.text = source.text;\r\n\t\tif (source.bullet) {\r\n\t\t\tthis.bullet = source.bullet.clone();\r\n\t\t}\r\n\r\n\t\tthis.minPosition = source.minPosition;\r\n\t\tthis.maxPosition = source.maxPosition;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets visibility of the Data Item.\r\n\t *\r\n\t * @param value Data Item\r\n\t */\r\n\tpublic setVisibility(value: boolean, noChangeValues?: boolean): void {\r\n\t\tsuper.setVisibility(value, noChangeValues);\r\n\t\tif (this._contents) {\r\n\t\t\tthis._contents.visible = value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Set it to an instance of any [[Sprite]]. It will be displayed as an axis\r\n\t * bullet in the middle of the cell, or specific value.\r\n\t *\r\n\t * If you need position bullet relatively to the cell, use [[AxisBullet]]\r\n\t * instead. It has a `location` property which can be used to indicate\r\n\t * precise relative location within cell/range.\r\n\t *\r\n\t * Also, [[AxisBullet]] is a [[Container]] so you can push any other element\r\n\t * into it.\r\n\t *\r\n\t * NOTE: `location` is relative to the parent axis range's scope, i.e.\r\n\t * between its `date` and `endDate` for [[DateAxis]], or `value`/`endValue`\r\n\t * ([[ValueAxis]]), or `category`/`endCategory` ([[categoryAxis]]).\r\n\t * \r\n\t * ```TypeScript\r\n\t * let range = dateAxis.axisRanges.create();\r\n\t * range.date = new Date(2018, 0, 5);\r\n\t * \r\n\t * let flag = new am4plugins_bullets.FlagBullet();\r\n\t * flag.label.text = \"Hello\";\r\n\t *\r\n\t * range.bullet = flag;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * var range = dateAxis.axisRanges.create();\r\n\t * range.date = new Date(2018, 0, 5);\r\n\t * \r\n\t * var flag = new am4plugins_bullets.FlagBullet();\r\n\t * flag.label.text = \"Hello\";\r\n\t *\r\n\t * range.bullet = flag;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"xAxes\": [{\r\n\t *     \"type\": \"DateAxis\",\r\n\t *     // ...\r\n\t *     \"axisRanges\": [{\r\n\t *       \"date\": new Date(2018, 0, 5),\r\n\t *       \"bullet: {\r\n\t *         \"type\": \"FlagBullet\",\r\n\t *         \"label\": {\r\n\t *           \"text\": \"Hello\"\r\n\t *         }\r\n\t *       }\r\n\t *     }]\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @since 4.5.9\r\n\t * @param  value  Bullet\r\n\t */\r\n\tpublic set bullet(value: Sprite) {\r\n\t\tif (this._bullet && this._bullet != value) {\r\n\t\t\t$array.remove(this.sprites, this._bullet);\r\n\t\t\tthis._bullet.dataItem = undefined;\r\n\t\t}\r\n\r\n\t\tthis._bullet = value;\r\n\t\tif (value) {\r\n\t\t\tthis.addSprite(value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Bullet\r\n\t */\r\n\tpublic get bullet(): Sprite {\r\n\t\treturn this._bullet;\r\n\t}\r\n\r\n\r\n\r\n}\r\n\r\n/**\r\n * Defines adapters for [[AxisDataItem]]\r\n * Includes both the [[DataItemAdapter]] definitions and properties\r\n * @see {@link DataItemAdapter}\r\n */\r\nexport interface IAxisDataItemAdapters extends IDataItemAdapters {\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines named positions for data item's location within [[Axis]].\r\n */\r\nexport enum AxisItemLocation {\r\n\tStart = 0,\r\n\tMiddle = 0.5,\r\n\tEnd = 1\r\n}\r\n\r\n/**\r\n * Defines data fields for [[Axis]].\r\n */\r\nexport interface IAxisDataFields extends IComponentDataFields { }\r\n\r\n/**\r\n * Defines properties for [[Axis]].\r\n */\r\nexport interface IAxisProperties extends IComponentProperties {\r\n\r\n\t/**\r\n\t * Axis start location.\r\n\t *\r\n\t * * 0 - None of the first cell is shown. (don't do that)\r\n\t * * 0.5 - Half of the first cell is shown.\r\n\t * * 1 - Full first cell is shown.\r\n\t *\r\n\t * @param value Location (0-1)\r\n\t */\r\n\tstartLocation?: number;\r\n\r\n\r\n\t/**\r\n\t * Axis end location.\r\n\t *\r\n\t * * 0 - None of the last cell is shown. (don't do that)\r\n\t * * 0.5 - Half of the last cell is shown.\r\n\t * * 1 - Full last cell is shown.\r\n\t *\r\n\t * @param value Location (0-1)\r\n\t */\r\n\tendLocation?: number;\r\n\r\n\t/**\r\n\t * Indicates if cusor's tooltip should be shown on this Axis.\r\n\t */\r\n\tcursorTooltipEnabled?: boolean;\r\n\r\n\t/**\r\n\t * Normally, when axis is zoomed in, a zoom out button is shown by a chart,\r\n\t * and vice versa: when axis is zoomed out completely, zoom out button is\r\n\t * hidden.\r\n\t *\r\n\t * Setting this to `false` will disable this behavior. Zooming in our out\r\n\t * this axis will not reveal or hide zoom out button.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\ttoggleZoomOutButton?: boolean;\r\n\r\n\t/**\r\n\t * Indicates if axis' tooltip should be hidden while axis range is animating\r\n\t * (zooming)\r\n\t *\r\n\t * @since 4.7.16\r\n\t * @default true\r\n\t */\r\n\thideTooltipWhileZooming?: boolean;\r\n\r\n\r\n\tzoomable?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[Axis]].\r\n */\r\nexport interface IAxisEvents extends IComponentEvents {\r\n\r\n\t/**\r\n\t * Invoked when available axis lenght changes, e.g. after resizing the whole\r\n\t * chart.\r\n\t */\r\n\tlengthchanged: {}\r\n\r\n}\r\n\r\n/**\r\n * Defines adapters for [[Axis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisAdapters extends IComponentAdapters, IAxisProperties {\r\n\t/**\r\n\t * Applied to the tooltip text before it is shown.\r\n\t */\r\n\tgetTooltipText: string;\r\n\r\n}\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A base class for all Axis elements.\r\n *\r\n * @see {@link IAxisEvents} for a list of available Events\r\n * @see {@link IAxisAdapters} for a list of available Adapters\r\n */\r\nexport class Axis<T extends AxisRenderer = AxisRenderer> extends Component {\r\n\r\n\t/**\r\n\t * Defines list of data fields.\r\n\t */\r\n\tpublic _dataFields: IAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines the type of the [[DataItem]] used in the class.\r\n\t */\r\n\tpublic _dataItem: AxisDataItem;\r\n\r\n\t/**\r\n\t * A list of Axis Ranges.\r\n\t */\r\n\tprotected _axisRanges: ListTemplate<this[\"_dataItem\"]>;\r\n\r\n\t/**\r\n\t * Defines the type of the axis breaks.\r\n\t */\r\n\tpublic _axisBreak: AxisBreak;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisEvents;\r\n\r\n\t/**\r\n\t * A [[Label]] instance that is used for Axis title label.\r\n\t */\r\n\tprotected _title: Label;\r\n\r\n\t/**\r\n\t * \"X\", \"Y\", etc.\r\n\t *\r\n\t * This is needed so that Axis knows which of the values from series' data\r\n\t * items it should use.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic axisLetter: string;\r\n\r\n\t/**\r\n\t * A reference to chart the axis is for.\r\n\t */\r\n\tprotected _chart: Chart;\r\n\r\n\t/**\r\n\t * A type for renderer used for this Axis.\r\n\t */\r\n\tpublic _renderer: T;\r\n\r\n\t/**\r\n\t * Number of Grid elements on the axis.\r\n\t */\r\n\tprotected _gridCount: number = 10;\r\n\r\n\t/**\r\n\t * A list of [[XYSeries]] that are using this Axis.\r\n\t */\r\n\tprotected _series: List<XYSeries> = new List<XYSeries>();\r\n\r\n\t/**\r\n\t * Holds the length of the Axis, so that we can check if it changed after\r\n\t * other changes and we need to update layouts.\r\n\t */\r\n\tprotected _prevLength: number;\r\n\r\n\t/**\r\n\t * A list of Axis Breaks associated with this Axis.\r\n\t */\r\n\tprotected _axisBreaks: SortedListTemplate<this[\"_axisBreak\"]>;\r\n\r\n\t/**\r\n\t * A reference to the Iterator for Axis' data items.\r\n\t */\r\n\tprotected _dataItemsIterator: $iter.ListIterator<this[\"_dataItem\"]>;\r\n\r\n\t/**\r\n\t * A name of the data field this Axis looks for its data in, e.g. \"category\".\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic axisFieldName: string;\r\n\r\n\t// we save these values so that cursur could use them if axis line is a fill\r\n\r\n\t/**\r\n\t * [currentItemStartPoint description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic currentItemStartPoint: IPoint;\r\n\r\n\t/**\r\n\t * [currentItemEndPoint description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic currentItemEndPoint: IPoint;\r\n\r\n\tprotected _tooltipPosition: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic relativePositionSprite?: Sprite;\r\n\r\n\t/**\r\n\t * Holds reference to a function that accepts a DataItem and its index as\r\n\t * parameters.\r\n\t *\r\n\t * It can either return a fill opacity for a fill, or manipulate data item\r\n\t * directly, to create various highlighting scenarios.\r\n\t *\r\n\t * For example, you can set it up to highlight only weekends on a\r\n\t * [[DateAxis]].\r\n\t */\r\n\tpublic fillRule(dataItem: this[\"_dataItem\"], index?: number): void {\r\n\t\tif (!$type.isNumber(index)) {\r\n\t\t\tindex = dataItem.index;\r\n\t\t}\r\n\t\tif (index / 2 == Math.round(index / 2)) {\r\n\t\t\tdataItem.axisFill.__disabled = true;\r\n\t\t\tdataItem.axisFill.opacity = 0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdataItem.axisFill.opacity = 1;\r\n\t\t\tdataItem.axisFill.__disabled = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Full length of the axis, in pixels.\r\n\t *\r\n\t * @readonly\r\n\t */\r\n\tpublic axisFullLength: number;\r\n\r\n\t/**\r\n\t * Ghost label is used to prevent chart shrinking/expanding when zooming or\r\n\t * when data is invalidated. You can set custom text on it so that it would\r\n\t * be bigger/smaller,\r\n\t */\r\n\tpublic ghostLabel: AxisLabel;\r\n\r\n\t/**\r\n\t * Specifies if axis should be automatically disposed when removing from\r\n\t * chart's axis list.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tpublic autoDispose: boolean = true;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _axisItemCount: number = 0;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tif (this.constructor === Axis) {\r\n\t\t\tthrow new Error(\"'Axis' cannot be instantiated directly. Please use a specific axis type.\");\r\n\t\t}\r\n\r\n\t\tthis.hideTooltipWhileZooming = true;\r\n\t\tthis.minWidth = 0.0001;\r\n\t\tthis.minHeight = 0.0001;\r\n\t\tthis.className = \"Axis\";\r\n\t\tthis.shouldClone = false;\r\n\t\tthis.setPropertyValue(\"cursorTooltipEnabled\", true);\r\n\t\tthis.toggleZoomOutButton = true;\r\n\t\tthis.zoomable = true;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Create title\r\n\t\tthis.title = new Label();\r\n\t\tthis.title.shouldClone = false;\r\n\t\tthis._disposers.push(this.title);\r\n\t\tthis.setPropertyValue(\"startLocation\", 0);\r\n\t\tthis.setPropertyValue(\"endLocation\", 1);\r\n\r\n\t\t// Data item iterator\r\n\t\tthis._dataItemsIterator = new $iter.ListIterator<this[\"_dataItem\"]>(this.dataItems, () => this.dataItems.create());\r\n\t\tthis._dataItemsIterator.createNewItems = true;\r\n\r\n\t\t// Create tooltip\r\n\t\tlet tooltip: Tooltip = new Tooltip();\r\n\t\tthis._disposers.push(tooltip);\r\n\t\ttooltip.label.padding(5, 10, 5, 10);\r\n\t\ttooltip.background.pointerLength = 5;\r\n\t\ttooltip.fitPointerToBounds = true;\r\n\t\ttooltip.background.filters.clear();\r\n\r\n\t\t// Set virtual parentfor the tooltip so that it can properly inheirt\r\n\t\t// formatters from the axis.\r\n\t\ttooltip.virtualParent = this;\r\n\r\n\t\t// Create background element for the tooltip\r\n\t\tlet background: PointedRectangle = <PointedRectangle>tooltip.background;\r\n\t\tbackground.cornerRadius = 0;\r\n\t\tbackground.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tbackground.stroke = background.fill;\r\n\t\tbackground.strokeWidth = 1;\r\n\t\tbackground.fillOpacity = 1;\r\n\t\ttooltip.label.fill = interfaceColors.getFor(\"alternativeText\");\r\n\r\n\t\tthis.tooltip = tooltip;\r\n\r\n\t\t// Accessibility\r\n\t\tthis.readerHidden = true;\r\n\r\n\t\tthis.events.on(\"rangechangestarted\", () => {\r\n\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tif (series.hideTooltipWhileZooming) {\r\n\t\t\t\t\tseries.tooltip.hide();\r\n\t\t\t\t\tseries.tooltip.preventShow = true;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\tif (this.hideTooltipWhileZooming) {\r\n\t\t\t\tthis.tooltip.hide();\r\n\t\t\t\tthis.tooltip.preventShow = true;\r\n\t\t\t}\r\n\t\t}, undefined, false);\r\n\r\n\t\tthis.events.on(\"rangechangeended\", () => {\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tif (series.hideTooltipWhileZooming) {\r\n\t\t\t\t\tseries.tooltip.hide();\r\n\t\t\t\t\tseries.tooltip.preventShow = false;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\tif (this.hideTooltipWhileZooming) {\r\n\t\t\t\tthis.tooltip.hide();\r\n\t\t\t\tthis.tooltip.preventShow = false;\r\n\t\t\t}\r\n\t\t}, undefined, false);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new AxisDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates layout.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidateLayout(): void {\r\n\t\tsuper.invalidateLayout();\r\n\t\t// this puts series after axis in invalidation order also makes series update it's data items in case widht/height of a series is not 100%\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.invalidateLayout();\r\n\t\t});\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Invalidates series of this axis.\r\n\t */\r\n\tpublic invalidateSeries(): void {\r\n\t\t// this puts series after axis in invalidation order also makes series update it's data items in case widht/height of a series is not 100%\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Override to cancel super call for data element validation.\r\n\t * @ignore\r\n\t */\r\n\tpublic validateDataElements() {\r\n\t\tthis._axisItemCount = 0;\r\n\t\tif (this.ghostLabel) {\r\n\t\t\tthis.renderer.updateLabelElement(this.ghostLabel, this.start, this.end);\r\n\t\t\tthis.ghostLabel.validate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Recalculates the number of grid items on the axis.\r\n\t */\r\n\tprotected updateGridCount() {\r\n\t\tif (this.renderer) {\r\n\t\t\tlet gridCount = this.axisLength / this.renderer.minGridDistance;\r\n\t\t\tif (gridCount != this._gridCount) {\r\n\t\t\t\tthis._gridCount = gridCount;\r\n\t\t\t\tthis.clearCache();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Redraws the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateLayout(): void {\r\n\r\n\t\tthis.axisFullLength = this.axisLength / (this.end - this.start);\r\n\r\n\t\tsuper.validateLayout();\r\n\t\tthis.updateGridCount();\r\n\t\tlet renderer = this.renderer;\r\n\t\tif (renderer) {\r\n\t\t\trenderer.updateAxisLine();\r\n\t\t\trenderer.updateTooltip();\r\n\t\t\trenderer.updateBaseGridElement();\r\n\t\t}\r\n\r\n\t\tif (this._prevLength != this.axisLength) {\r\n\t\t\tthis.dispatchImmediately(\"lengthchanged\");\r\n\t\t\tthis._prevLength = this.axisLength;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes Axis' renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic initRenderer(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a data item to the Axis.\r\n\t *\r\n\t * @param dataItem Data item\r\n\t */\r\n\tpublic appendDataItem(dataItem: this[\"_dataItem\"]) {\r\n\t\tlet renderer: AxisRenderer = this.renderer;\r\n\r\n\r\n\t\tlet tick = dataItem.tick;\r\n\t\tif (tick) {\r\n\t\t\tif (tick.above) {\r\n\t\t\t\ttick.parent = renderer.bulletsContainer;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttick.parent = renderer.gridContainer;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (dataItem.label) {\r\n\t\t\tdataItem.label.parent = renderer;\r\n\t\t}\r\n\r\n\t\tlet axisFill = dataItem.axisFill;\r\n\t\tif (axisFill) {\r\n\t\t\tif (axisFill.above) {\r\n\t\t\t\taxisFill.parent = renderer.bulletsContainer;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\taxisFill.parent = renderer.gridContainer;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet grid = dataItem.grid;\r\n\t\tif (grid) {\r\n\t\t\tif (grid.above) {\r\n\t\t\t\tgrid.parent = renderer.bulletsContainer;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tgrid.parent = renderer.gridContainer;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (dataItem.bullet) {\r\n\t\t\tdataItem.bullet.parent = renderer.bulletsContainer;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Redraws Axis' related items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\t\tthis.validateLayout();\r\n\r\n\t\tthis.renderer.updateGridContainer();\r\n\t}\r\n\r\n\t/**\r\n\t * Redars Axis ranges.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateAxisRanges(): void {\r\n\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\tthis.appendDataItem(axisRange);\r\n\t\t\tthis.validateDataElement(axisRange);\r\n\t\t\tif (axisRange.grid) {\r\n\t\t\t\taxisRange.grid.validate();\r\n\t\t\t}\r\n\t\t\tif (axisRange.tick) {\r\n\t\t\t\taxisRange.tick.validate();\r\n\t\t\t}\r\n\t\t\tif (axisRange.axisFill) {\r\n\t\t\t\taxisRange.axisFill.validate();\r\n\t\t\t}\r\n\t\t\tif (axisRange.label) {\r\n\t\t\t\taxisRange.label.validate();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates all axis breaks, so they are redrawn.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateBreaks(): void {\r\n\t\tif (this._axisBreaks) {\r\n\t\t\t$iter.each(this._axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\taxisBreak.invalidate();\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Associates an Axis break with this Axis, after it is inserted into\r\n\t * `axisBreaks`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Event\r\n\t */\r\n\tpublic processBreak(event: IListEvents<this[\"_axisBreak\"]>[\"inserted\"]) {\r\n\t\tlet axisBreak: this[\"_axisBreak\"] = event.newValue;\r\n\t\taxisBreak.parent = this.renderer.breakContainer;\r\n\t\taxisBreak.axis = this;\r\n\t}\r\n\r\n\t/**\r\n\t * Registers a [[XYSeries]] element with this Axis.\r\n\t *\r\n\t * Returns a [[Disposer]] for all events, added to Series for watching\r\n\t * changes in Axis, and vice versa.\r\n\t * @ignore\r\n\t * @param series  Series\r\n\t * @return Event disposer\r\n\t */\r\n\tpublic registerSeries(series: XYSeries): IDisposer {\r\n\t\tthis.series.moveValue(series);\r\n\r\n\t\treturn new MultiDisposer([\r\n\t\t\tnew Disposer(() => {\r\n\t\t\t\tthis.series.removeValue(series);\r\n\t\t\t}),\r\n\r\n\t\t\tthis.events.on(\"lengthchanged\", series.invalidate, series, false),\r\n\t\t\tthis.events.on(\"lengthchanged\", series.createMask, series, false),\r\n\t\t\tthis.events.on(\"startchanged\", series.invalidate, series, false),\r\n\t\t\tthis.events.on(\"endchanged\", series.invalidate, series, false),\r\n\t\t\t//axis.events.on(\"validated\", chart.handleCursorPositionChange, chart, false)\t\t\t\r\n\r\n\t\t\t// TODO should these be disposed of ?\r\n\t\t\t//series.events.on(\"datavalidated\", this.processSeriesDataItems, this),\r\n\t\t\t//series.events.on(\"visibilitychanged\", this.processSeriesDataItems, this),\r\n\t\t\t//series.events.on(\"hidden\", this.processSeriesDataItems, this)\r\n\t\t]);\r\n\t}\r\n\r\n\t/**\r\n\t * An [[AxisRenderer]] to be used to render this Axis.\r\n\t *\r\n\t * Please note that most of the settings, related to Axis' appearance are set\r\n\t * via its renderer. Not directly on the Axis.\r\n\t *\r\n\t * E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * axis.renderer.inside = true;\r\n\t * axis.renderer.minLabelPosition = 0.1;\r\n\t * axis.renderer.maxLabelPosition = 0.9;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * axis.renderer.inside = true;\r\n\t * axis.renderer.minLabelPosition = 0.1;\r\n\t * axis.renderer.maxLabelPosition = 0.9;\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/} for more info\r\n\t * @param renderer  Renderer\r\n\t */\r\n\tpublic set renderer(renderer: this[\"_renderer\"]) {\r\n\t\tif (renderer != this._renderer) {\r\n\t\t\tthis._renderer = renderer;\r\n\t\t\trenderer.chart = this.chart;\r\n\t\t\trenderer.axis = this;\r\n\t\t\trenderer.parent = this;\r\n\t\t\tthis.title.parent = this; // we add title to axis and set layout in renderer to avoid one extra container, as otherwise axis container would be used for holding renderer only\r\n\t\t\tthis.initRenderer();\r\n\r\n\t\t\tthis._disposers.push(renderer.gridContainer.events.on(\"maxsizechanged\", this.invalidate, this, false));\r\n\r\n\t\t\tlet ghostLabel = this.renderer.labels.create();\r\n\t\t\tthis._disposers.push(ghostLabel);\r\n\t\t\tghostLabel.dataItem = this.dataItems.template.clone(); // just for the adapters not to fail\r\n\t\t\tghostLabel.text = \"L\";\r\n\t\t\tghostLabel.parent = this.renderer;\r\n\t\t\tghostLabel.shouldClone = false;\r\n\t\t\tghostLabel.fillOpacity = 0;\r\n\t\t\tghostLabel.opacity = 0;\r\n\t\t\tghostLabel.strokeOpacity = 0;\r\n\t\t\tghostLabel.interactionsEnabled = false;\r\n\t\t\tghostLabel.validate();\r\n\r\n\t\t\tthis.ghostLabel = ghostLabel;\r\n\r\n\t\t\tthis.events.on(\"beforedatavalidated\", () => {\r\n\t\t\t\tghostLabel.text = \"L\";\r\n\t\t\t}, undefined, false);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Renderer\r\n\t */\r\n\tpublic get renderer(): this[\"_renderer\"] {\r\n\t\treturn this._renderer;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a relative position to angle. (for circular axes)\r\n\t *\r\n\t * @param position Position (0-1)\r\n\t * @return Angle\r\n\t */\r\n\tpublic positionToAngle(position: number): number {\r\n\t\treturn this.renderer.positionToAngle(position);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts pixel coordinates to a relative position. (0-1)\r\n\t *\r\n\t * @param point  Coorinates (px)\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic pointToPosition(point: IPoint): number {\r\n\t\treturn this.renderer.pointToPosition(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position to coordinate.\r\n\t *\r\n\t * @since 4.7.15\r\n\t * @param position (0-1)\r\n\t * @return coordinate (px)\r\n\t */\r\n\tpublic positionToCoordinate(position: number): number {\r\n\t\treturn this.renderer.positionToCoordinate(position);\r\n\t}\r\n\r\n\t/**\r\n\t * [getAnyRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param start  [description]\r\n\t * @param end    [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getAnyRangePath(start: any, end: any): string {\r\n\t\treturn this.renderer.getPositionRangePath(start, end);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts any positional parameter to a relative position on axis.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param value  Pisition\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic anyToPosition(value: any): number {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts any positional parameter to a relative position on axis.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param value  Pisition\r\n\t * @return Orientation point\r\n\t */\r\n\tpublic anyToPoint(value: any): IOrientationPoint {\r\n\t\treturn { x: 0, y: 0, angle: 0 };\r\n\t}\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param startPosition [description]\r\n\t * @param endPosition   [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number): string {\r\n\t\tif (this.renderer) {\r\n\t\t\treturn this.renderer.getPositionRangePath(startPosition, endPosition);\r\n\t\t}\r\n\t\treturn \"\";\r\n\t}\r\n\r\n\t/**\r\n\t * Actual axis length in pixels.\r\n\t *\r\n\t * @return Axis length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\tif (this.renderer) {\r\n\t\t\treturn this.renderer.axisLength;\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if axis should display a tooltip for chart's cursor.\r\n\t *\r\n\t * @param value Display tooltip?\r\n\t */\r\n\tpublic set cursorTooltipEnabled(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"cursorTooltipEnabled\", value)) {\r\n\t\t\tif (value && this.renderer) {\r\n\t\t\t\tthis.renderer.updateTooltip();\r\n\t\t\t}\r\n\t\t\telse if (this.tooltip) {\r\n\t\t\t\tthis.tooltip.hide(0);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Normally, when axis is zoomed in, a zoom out button is shown by a chart,\r\n\t * and vice versa: when axis is zoomed out completely, zoom out button is\r\n\t * hidden.\r\n\t *\r\n\t * Setting this to `false` will disable this behavior. Zooming in our out\r\n\t * this axis will not reveal or hide zoom out button.\r\n\t *\r\n\t * @default true\r\n\t * @since 4.6.2\r\n\t * @param  value  Toggle zoom out button?\r\n\t */\r\n\tpublic set toggleZoomOutButton(value: boolean) {\r\n\t\tthis.setPropertyValue(\"toggleZoomOutButton\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Toggle zoom out button?\r\n\t */\r\n\tpublic get toggleZoomOutButton(): boolean {\r\n\t\treturn this.getPropertyValue(\"toggleZoomOutButton\");\r\n\t}\r\n\r\n\t/**\r\n\t * @return Display tooltip?\r\n\t */\r\n\tpublic get cursorTooltipEnabled(): boolean {\r\n\t\treturn this.getPropertyValue(\"cursorTooltipEnabled\");\r\n\t}\r\n\r\n\t/**\r\n\t * Hides element's [[Tooltip]].\r\n\t *\r\n\t * @see {@link Tooltip}\r\n\t */\r\n\tpublic hideTooltip(duration?: number): void {\r\n\t\tsuper.hideTooltip(duration);\r\n\t\tthis._tooltipPosition = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Shows Axis tooltip at specific relative position within Axis. (0-1)\r\n\t *\r\n\t * @param position Position (0-1)\r\n\t * @param local or global position\r\n\t */\r\n\tpublic showTooltipAtPosition(position: number, local?: boolean) {\r\n\t\tlet tooltip: Tooltip = this._tooltip;\r\n\r\n\t\tif (!tooltip || this.dataItems.length <= 0) {\r\n\t\t\tthis._tooltipPosition = undefined;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (!local) {\r\n\t\t\t\tposition = this.toAxisPosition(position);\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNumber(position) || position < this.start || position > this.end) {\r\n\t\t\t\ttooltip.hide(0);\r\n\t\t\t\tthis._tooltipPosition = undefined;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tlet renderer = this.renderer;\r\n\r\n\t\t\t//@todo: think of how to solve this better\r\n\t\t\tif (!tooltip.parent) {\r\n\t\t\t\ttooltip.parent = this.tooltipContainer;\r\n\t\t\t}\r\n\r\n\t\t\tlet tooltipLocation = renderer.tooltipLocation;\r\n\r\n\t\t\tlet startPosition: number = this.getCellStartPosition(position);\r\n\t\t\tlet endPosition: number = this.getCellEndPosition(position);\r\n\r\n\t\t\tif (this.tooltipPosition == \"fixed\") {\r\n\t\t\t\tposition = startPosition + (endPosition - startPosition) * tooltipLocation;\r\n\t\t\t}\r\n\r\n\t\t\tposition = $math.fitToRange(position, this.start, this.end);\r\n\r\n\t\t\tif (this._tooltipPosition != position) {\r\n\t\t\t\tthis._tooltipPosition = position;\r\n\r\n\t\t\t\tlet tooltipLocation2 = renderer.tooltipLocation2;\r\n\r\n\t\t\t\tlet startPoint: IPoint = renderer.positionToPoint(startPosition, tooltipLocation2);\r\n\t\t\t\tlet endPoint: IPoint = renderer.positionToPoint(endPosition, tooltipLocation2);\r\n\r\n\t\t\t\t// save values so cursor could use them\r\n\t\t\t\tthis.currentItemStartPoint = startPoint;\r\n\t\t\t\tthis.currentItemEndPoint = endPoint;\r\n\r\n\t\t\t\tif (renderer.fullWidthTooltip) {\r\n\t\t\t\t\ttooltip.width = endPoint.x - startPoint.x;\r\n\t\t\t\t\ttooltip.height = endPoint.y - startPoint.y;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet point: IPoint = renderer.positionToPoint(position, tooltipLocation2);\r\n\t\t\t\tlet globalPoint: IPoint = $utils.spritePointToSvg(point, this.renderer.line);\r\n\t\t\t\ttooltip.text = this.getTooltipText(position);\r\n\r\n\t\t\t\tif (tooltip.text) {\r\n\t\t\t\t\ttooltip.delayedPointTo(globalPoint);\r\n\t\t\t\t\ttooltip.show();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (!this.cursorTooltipEnabled || this.tooltip.disabled) {\r\n\t\t\t\ttooltip.hide(0);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position (0-1) to Axis position with zoom level and\r\n\t * inversed taken into account.\r\n\t *\r\n\t * @param position Global position (0-1)\r\n\t * @return Position within Axis (0-1)\r\n\t */\r\n\tpublic toAxisPosition(position: number): number {\r\n\r\n\t\tposition = this.renderer.toAxisPosition(position);\r\n\r\n\t\tif (position == undefined) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tposition = position * (this.end - this.start);\r\n\t\tif (this.renderer.inversed) {\r\n\t\t\tposition = this.end - position;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tposition = this.start + position;\r\n\t\t}\r\n\r\n\t\treturn position;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts position on the axis with zoom level and\r\n\t * inversed taken into account to global position.\r\n\t *\r\n\t * @param position Axis position (0-1)\r\n\t * @return Global position (0-1)\r\n\t */\r\n\tpublic toGlobalPosition(position: number): number {\r\n\t\tif (this.renderer.inversed) {\r\n\t\t\tposition = this.end - position;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tposition = position - this.start;\r\n\t\t}\r\n\r\n\t\treturn position / (this.end - this.start);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to be used for cursor's Axis tooltip.\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Position coordinate (px)\r\n\t * @return Label text\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Axis' tooltip's position and possibly size, and pointer (stem)\r\n\t * place.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param pointerOrientation  Pointer (stem) orientation\r\n\t * @param boundingRectangle   A rectangle for tooltip to fit within\r\n\t */\r\n\tpublic updateTooltip(pointerOrientation: PointerOrientation, boundingRectangle: IRectangle): void {\r\n\t\tlet tooltip: Tooltip = this._tooltip;\r\n\t\tif (tooltip) {\r\n\t\t\ttooltip.fixDoc = false;\r\n\t\t\ttooltip.pointerOrientation = pointerOrientation;\r\n\t\t\ttooltip.setBounds($utils.spriteRectToSvg(boundingRectangle, this.renderer.line));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [roundPosition description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param position  Relative position\r\n\t * @param location  Location on axis\r\n\t * @return Rounded position\r\n\t */\r\n\tpublic roundPosition(position: number, location: AxisItemLocation, axisLocation?: number): number {\r\n\t\treturn position;\r\n\t}\r\n\r\n\t/**\r\n\t * [getCellStartPosition description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param position [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getCellStartPosition(position: number): number {\r\n\t\treturn position;\r\n\t}\r\n\r\n\t/**\r\n\t * [getCellEndPosition description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param position [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getCellEndPosition(position: number): number {\r\n\t\treturn position;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of axis ranges for this Axis.\r\n\t *\r\n\t * @return Axis ranges\r\n\t */\r\n\tpublic get axisRanges(): ListTemplate<this[\"_dataItem\"]> {\r\n\t\tif (!this._axisRanges) {\r\n\t\t\tlet dataItem: AxisDataItem = this.createDataItem();\r\n\t\t\tdataItem.isRange = true;\r\n\t\t\tdataItem.axisFill = this.renderer.axisFills.template.clone();\r\n\t\t\tdataItem.grid = this.renderer.grid.template.clone();\r\n\t\t\tdataItem.tick = this.renderer.ticks.template.clone();\r\n\t\t\tdataItem.label = this.renderer.labels.template.clone();\r\n\r\n\t\t\tdataItem.isTemplate = true;\r\n\t\t\tdataItem.component = this;\r\n\t\t\tdataItem.axisFill.disabled = false;\r\n\t\t\tdataItem.tick.disabled = false;\r\n\t\t\tdataItem.grid.disabled = false;\r\n\t\t\tdataItem.label.disabled = false;\r\n\r\n\t\t\tthis._axisRanges = new ListTemplate<this[\"_dataItem\"]>(dataItem);\r\n\t\t\tthis._axisRanges.events.on(\"inserted\", this.processAxisRange, this, false);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._axisRanges));\r\n\t\t\tthis._disposers.push(this._axisRanges.template);\r\n\t\t}\r\n\t\treturn this._axisRanges;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates an axis range after it has been added to the axis range list.\r\n\t *\r\n\t * @param event Event\r\n\t */\r\n\tprotected processAxisRange(event: IListEvents<this[\"_dataItem\"]>[\"inserted\"]) {\r\n\t\tlet axisRange: AxisDataItem = event.newValue;\r\n\t\taxisRange.component = this;\r\n\t\taxisRange.isRange = true;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of axis breaks on this Axis.\r\n\t *\r\n\t * @return Axis breaks.\r\n\t */\r\n\tpublic get axisBreaks(): SortedListTemplate<this[\"_axisBreak\"]> {\r\n\t\tif (!this._axisBreaks) {\r\n\t\t\tthis._axisBreaks = new SortedListTemplate<this[\"_axisBreak\"]>(this.createAxisBreak(), (a, b) => {\r\n\t\t\t\treturn $number.order(a.adjustedStartValue, b.adjustedStartValue);\r\n\t\t\t});\r\n\r\n\t\t\tthis._axisBreaks.events.on(\"inserted\", this.processBreak, this, false);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._axisBreaks));\r\n\t\t\tthis._disposers.push(this._axisBreaks.template);\r\n\t\t}\r\n\t\treturn this._axisBreaks;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new axis break.\r\n\t *\r\n\t * @return Axis break\r\n\t */\r\n\tprotected createAxisBreak(): this[\"_axisBreak\"] {\r\n\t\treturn new AxisBreak();\r\n\t}\r\n\r\n\t/**\r\n\t * A list of Series currently associated with this Axis.\r\n\t *\r\n\t * @return Series\r\n\t */\r\n\tpublic get series(): List<XYSeries> {\r\n\t\tif (!this._series) {\r\n\t\t\tthis._series = new List<XYSeries>();\r\n\t\t}\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes Series' data items.\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic processSeriesDataItems(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Processes Series' single data item.\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem Data item\r\n\t */\r\n\tpublic processSeriesDataItem(dataItem: XYSeriesDataItem, axisLetter?: string): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Post-processes Serie's data items.\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic postProcessSeriesDataItems(series?: XYSeries): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Post-processes Serie's single data item.\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem Data item\r\n\t */\r\n\tpublic postProcessSeriesDataItem(dataItem: XYSeriesDataItem): void {\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\t/**\r\n\t * Updates Axis based on all Series that might influence it.\r\n\t *\r\n\t * Called by Series after Series data is validated.\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisBySeries(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Hides unused data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic hideUnusedDataItems(): void {\r\n\t\t// hide all unused\r\n\t\tlet dataItemsIterator: $iter.ListIterator<this[\"_dataItem\"]> = this._dataItemsIterator;\r\n\r\n\t\tdataItemsIterator.createNewItems = false;\r\n\r\n\t\t$iter.each(dataItemsIterator.iterator(), (dataItem) => {\r\n\t\t\tthis.validateDataElement(dataItem); // solves shrinking\r\n\t\t\tdataItem.__disabled = true;\r\n\t\t});\r\n\r\n\t\tdataItemsIterator.clear();\r\n\t\tdataItemsIterator.createNewItems = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a Series' data item that corresponds to specific position on Axis.\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param series    Series\r\n\t * @param position  Position (0-1)\r\n\t * @param findNearest  Should axis try to find nearest tooltip if there is no data item at exact position\r\n\t * @return Data item\r\n\t */\r\n\tpublic getSeriesDataItem(series: XYSeries, position: number, findNearest?: boolean): XYSeriesDataItem {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an angle that corresponds to specific position on axis.\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       ???\r\n\t * @param location  Location\r\n\t * @param stackKey  ???\r\n\t * @return Angle\r\n\t */\r\n\tpublic getAngle(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * [getX description]\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem [description]\r\n\t * @param key      [description]\r\n\t * @param location [description]\r\n\t * @param stackKey [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getX(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\treturn;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getX description]\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem [description]\r\n\t * @param key      [description]\r\n\t * @param location [description]\r\n\t * @param stackKey [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getPositionX(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\treturn;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getY description]\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem [description]\r\n\t * @param key      [description]\r\n\t * @param location [description]\r\n\t * @param stackKey [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getY(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * [getY description]\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem [description]\r\n\t * @param key      [description]\r\n\t * @param location [description]\r\n\t * @param stackKey [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getPositionY(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * Coordinates of the actual axis start.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Base point coordinates\r\n\t */\r\n\tpublic get basePoint(): IPoint {\r\n\t\treturn { x: 0, y: 0 };\r\n\t}\r\n\r\n\t/**\r\n\t * [dataChangeUpdate description]\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic dataChangeUpdate(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [dataChangeUpdate description]\r\n\t *\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic seriesDataChangeUpdate(series: XYSeries): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Removes axis breaks that fall between `min` and `max` (???)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param min  Start value\r\n\t * @param max  End value\r\n\t * @return Spread o\r\n\t */\r\n\tprotected adjustDifference(min: number, max: number): number {\r\n\t\tlet difference: number = max - min;\r\n\t\tif ($type.isNumber(difference)) {\r\n\t\t\tif (this._axisBreaks) {\r\n\t\t\t\t$iter.eachContinue(this._axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\t\tlet startValue: number = axisBreak.adjustedStartValue;\r\n\t\t\t\t\tlet endValue: number = axisBreak.adjustedEndValue;\r\n\t\t\t\t\tif ($type.isNumber(startValue) && $type.isNumber(endValue)) {\r\n\t\t\t\t\t\t// breaks are sorted, we don't need go further anymore\r\n\t\t\t\t\t\tif (startValue > max) {\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (endValue >= min) {\r\n\t\t\t\t\t\t\tif ($type.isNumber(startValue) && $type.isNumber(endValue)) {\r\n\t\t\t\t\t\t\t\tlet breakSize: number = axisBreak.breakSize;\r\n\r\n\t\t\t\t\t\t\t\tlet intersection: IRange = $math.intersection({ start: startValue, end: endValue }, { start: min, end: max });\r\n\r\n\t\t\t\t\t\t\t\tif (intersection) {\r\n\t\t\t\t\t\t\t\t\tdifference -= (intersection.end - intersection.start) * (1 - breakSize);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\treturn difference;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if specific value falls within a break.\r\n\t *\r\n\t * Returns [[AxisBreak]] the value falls into.\r\n\t *\r\n\t * @param value  Value to check\r\n\t * @return Axis break\r\n\t */\r\n\tprotected isInBreak(value: number): this[\"_axisBreak\"] {\r\n\t\tif (this._axisBreaks) {\r\n\t\t\treturn $iter.find(this._axisBreaks.iterator(), (axisBreak) =>\r\n\t\t\t\tvalue >= axisBreak.adjustedStartValue &&\r\n\t\t\t\tvalue <= axisBreak.adjustedEndValue);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [fixAxisBreaks description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tprotected fixAxisBreaks(): void {\r\n\t\tif (this._axisBreaks) {\r\n\t\t\tlet axisBreaks: SortedListTemplate<this[\"_axisBreak\"]> = this._axisBreaks;\r\n\t\t\tif (axisBreaks.length > 0) {\r\n\t\t\t\t// first make sure that startValue is <= end value\r\n\t\t\t\t// This needs to make a copy of axisBreaks because it mutates the list while traversing\r\n\t\t\t\t// TODO very inefficient\r\n\t\t\t\t$array.each($iter.toArray(axisBreaks.iterator()), (axisBreak) => {\r\n\t\t\t\t\tlet startValue: number = $math.min(axisBreak.startValue, axisBreak.endValue);\r\n\t\t\t\t\tlet endValue: number = $math.max(axisBreak.startValue, axisBreak.endValue);\r\n\r\n\t\t\t\t\taxisBreak.adjustedStartValue = startValue;\r\n\t\t\t\t\taxisBreak.adjustedEndValue = endValue;\r\n\r\n\t\t\t\t\tthis._axisBreaks.update(axisBreak);\r\n\t\t\t\t});\r\n\r\n\r\n\t\t\t\tlet firstAxisBreak: this[\"_axisBreak\"] = axisBreaks.first;\r\n\t\t\t\tlet previousEndValue: number = Math.min(firstAxisBreak.startValue, firstAxisBreak.endValue);\r\n\r\n\t\t\t\t// process breaks\r\n\t\t\t\t// TODO does this need to call axisBreaks.update ?\r\n\t\t\t\t$iter.each(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\t\tlet startValue: number = axisBreak.adjustedStartValue;\r\n\t\t\t\t\tlet endValue: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\t\t\t// breaks can't overlap\r\n\t\t\t\t\t// if break starts before previous break ends\r\n\t\t\t\t\tif (startValue < previousEndValue) {\r\n\t\t\t\t\t\tstartValue = previousEndValue;\r\n\r\n\t\t\t\t\t\tif (endValue < previousEndValue) {\r\n\t\t\t\t\t\t\tendValue = previousEndValue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\taxisBreak.adjustedStartValue = startValue;\r\n\t\t\t\t\taxisBreak.adjustedEndValue = endValue;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * We need start/end indexes of axes to be 0 - `dataItems.length`.\r\n\t *\r\n\t * Yes, also for category axis, this helps to avoid jumping of categories\r\n\t * while scrolling and does not do a lot of extra work as we use\r\n\t * protected `_startIndex` and `_endIndex` when working with items.\r\n\t *\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * [startIndex description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set startIndex(value: number) {\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return [description]\r\n\t */\r\n\tpublic get startIndex(): number {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * [endIndex description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set endIndex(value: number) {\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return [description]\r\n\t */\r\n\tpublic get endIndex(): number {\r\n\t\treturn this.dataItems.length;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns a formatted label based on position.\r\n\t *\r\n\t * Individual axis types should override this method to generate a label\r\n\t * that is relevant to axis type.\r\n\t *\r\n\t * Please note that `position` represents position within axis which may be\r\n\t * zoomed and not correspond to Cursor's `position`.\r\n\t *\r\n\t * To convert Cursor's `position` to Axis' `position` use `toAxisPosition()` method.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/tutorials/tracking-cursors-position-via-api/#Tracking_Cursor_s_position} For more information about cursor tracking.\r\n\t * @param position  Relative position on axis (0-1)\r\n\t * @return Position label\r\n\t */\r\n\tpublic getPositionLabel(position: number): string {\r\n\t\treturn Math.round(position * 100) + \"%x\";\r\n\t}\r\n\r\n\t/**\r\n\t * A Chart this Axis belongs to.\r\n\t *\r\n\t * @param value  Chart\r\n\t */\r\n\tpublic set chart(value: Chart) {\r\n\t\tthis._chart = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): Chart {\r\n\t\treturn this._chart;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a data item for a Series range.\r\n\t *\r\n\t * @param series  Target Series\r\n\t * @return Range data item\r\n\t */\r\n\tpublic createSeriesRange(series: XYSeries): this[\"_dataItem\"] {\r\n\t\tlet range = this.axisRanges.create();\r\n\t\trange.component = this;\r\n\t\trange.axisFill = this.renderer.axisFills.template.clone();\r\n\t\trange.axisFill.disabled = false;\r\n\t\trange.axisFill.fillOpacity = 0;\r\n\r\n\t\trange.grid = this.renderer.grid.template.clone();\r\n\t\trange.grid.disabled = true;\r\n\r\n\t\trange.tick = this.renderer.ticks.template.clone();\r\n\t\trange.tick.disabled = true;\r\n\r\n\t\trange.label = this.renderer.labels.template.clone();\r\n\t\trange.label.disabled = true;\r\n\r\n\t\trange.addDisposer(new Disposer(() => {\r\n\t\t\tseries.axisRanges.removeValue(range);\r\n\t\t}))\r\n\r\n\t\tseries.axisRanges.push(range);\r\n\t\treturn range;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties and related data from a different instance of Axis.\r\n\t *\r\n\t * @param source Source Axis\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tif (this.renderer) {\r\n\t\t\tthis.renderer.copyFrom(source.renderer);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (source.renderer) {\r\n\t\t\t\tthis.renderer = source.renderer.clone();\r\n\t\t\t\tthis._disposers.push(this.renderer);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (source.title) {\r\n\t\t\tif (!this.title) {\r\n\t\t\t\tthis.title = source.title.clone();\r\n\t\t\t\tthis.title.parent = this;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.title.copyFrom(source.title);\r\n\t\t\t}\r\n\t\t\tthis._disposers.push(this.title);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Resets internal iterator.\r\n\t */\r\n\tprotected resetIterators(): void {\r\n\t\tthis._dataItemsIterator.reset();\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up axis ranges\r\n\t\t\tif ($type.hasValue(config.axisRanges) && $type.isArray(config.axisRanges)) {\r\n\t\t\t\tfor (let i = 0, len = config.axisRanges.length; i < len; i++) {\r\n\t\t\t\t\tlet range = config.axisRanges[i];\r\n\r\n\t\t\t\t\t// If `series` is set, we know it's a series range\r\n\t\t\t\t\tif ($type.hasValue(range[\"series\"])) {\r\n\t\t\t\t\t\tif ($type.isString(range[\"series\"])) {\r\n\t\t\t\t\t\t\tif (this.map.hasKey(range[\"series\"])) {\r\n\t\t\t\t\t\t\t\t//range[\"series\"] = this.map.getKey(range[\"series\"]);\r\n\t\t\t\t\t\t\t\tconfig.axisRanges[i] = this.createSeriesRange(this.map.getKey(range[\"series\"]));\r\n\t\t\t\t\t\t\t\tdelete (range[\"series\"]);\r\n\t\t\t\t\t\t\t\tconfig.axisRanges[i].config = range;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n\t/**\r\n\t * Ordering function used in JSON setup.\r\n\t *\r\n\t * @param a  Item A\r\n\t * @param b  Item B\r\n\t * @return Order\r\n\t */\r\n\tprotected configOrder(a: string, b: string): Ordering {\r\n\t\tif (a == b) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\t// last\r\n\t\telse if (a == \"title\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"title\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\r\n\t\t// first\r\n\t\telse if (a == \"component\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (b == \"component\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.configOrder(a, b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Axis start location. Works on Date/Category axis, doesn't work on Value axis.\r\n\t *\r\n\t * * 0 - Full first cell is shown.\r\n\t * * 0.5 - Half of first cell is shown.\r\n\t * * 1 - None of the first cell is visible. (you probably don't want that)\r\n\t *\r\n\t * @param value Location (0-1)\r\n\t */\r\n\tpublic set startLocation(value: number) {\r\n\t\tthis.setPropertyValue(\"startLocation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get startLocation(): number {\r\n\t\treturn this.getPropertyValue(\"startLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Axis end location. Works on Date/Category axis, doesn't work on Value axis.\r\n\t *\r\n\t * * 0 - None of the last cell is shown. (don't do that)\r\n\t * * 0.5 - Half of the last cell is shown.\r\n\t * * 1 - Full last cell is shown.\r\n\t *\r\n\t * @param value Location (0-1)\r\n\t */\r\n\tpublic set endLocation(value: number) {\r\n\t\tthis.setPropertyValue(\"endLocation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get endLocation(): number {\r\n\t\treturn this.getPropertyValue(\"endLocation\");\r\n\t}\r\n\r\n\r\n\tprotected setDisabled(value: boolean) {\r\n\t\tlet changed = super.setDisabled(value);\r\n\t\tif (this.renderer) {\r\n\t\t\tthis.renderer.gridContainer.disabled = value;\r\n\t\t}\r\n\t\treturn changed;\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to a [[Label]] element which serves as a title to the axis.\r\n\t *\r\n\t * When axis is created it aleready has an element, so you can just modify\r\n\t * it.\r\n\t *\r\n\t * Or you can replace it with your own instance of `Label`.\r\n\t * \r\n\t * @param  value  Title label\r\n\t */\r\n\tpublic set title(value: Label) {\r\n\t\tif (this._title && this._title != value) {\r\n\t\t\tthis._title.dispose();\r\n\t\t}\r\n\t\tif (value) {\r\n\t\t\tthis._title = value;\r\n\t\t\tvalue.parent = this;\r\n\t\t\tvalue.shouldClone = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Title label\r\n\t */\r\n\tpublic get title(): Label {\r\n\t\treturn this._title;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Indicates if axis' tooltip should be hidden while axis range is animating\r\n\t * (zooming)\r\n\t * \r\n\t * @default true\r\n\t * @since 4.7.16\r\n\t * @param  value  Hide tooltip while zooming?\r\n\t */\r\n\tpublic set hideTooltipWhileZooming(value: boolean) {\r\n\t\tthis.setPropertyValue(\"hideTooltipWhileZooming\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Hide tooltip while zooming?\r\n\t */\r\n\tpublic get hideTooltipWhileZooming(): boolean {\r\n\t\treturn this.getPropertyValue(\"hideTooltipWhileZooming\");\r\n\t}\r\n\r\n\t/**\r\n\t * Should the axis be zoomed with scrollbar/cursor?\r\n\t *\r\n\t * @default true\r\n\t * @since 4.9.28\r\n\t * @param  value  Zoomable?\r\n\t */\r\n\tpublic set zoomable(value: boolean) {\r\n\t\tthis.setPropertyValue(\"zoomable\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Zoomable?\r\n\t */\r\n\tpublic get zoomable(): boolean {\r\n\t\treturn this.getPropertyValue(\"zoomable\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Axis\"] = Axis;\r\nregistry.registeredClasses[\"AxisDataItem\"] = AxisDataItem;\r\n\r\n/**\r\n * Add default responsive rules\r\n */\r\n\r\n/**\r\n * Disable axis tooltips.\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.maybeXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof Axis && target.tooltip) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.cursorTooltipEnabled = false;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});","/**\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, ISpriteProperties, ISpriteAdapters, ISpriteEvents } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisLine]].\r\n */\r\nexport interface IAxisLineProperties extends ISpriteProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisLine]].\r\n */\r\nexport interface IAxisLineEvents extends ISpriteEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisLine]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisLineAdapters extends ISpriteAdapters, IAxisLineProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw Axis line.\r\n *\r\n * @see {@link IAxisLineEvents} for a list of available events\r\n * @see {@link IAxisLineAdapters} for a list of available Adapters\r\n */\r\nexport class AxisLine extends Sprite {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisLineProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisLineAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisLineEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisLine\";\r\n\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\t\tthis.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tthis.strokeOpacity = 0.15;\r\n\t\tthis.pixelPerfect = true;\r\n\t\tthis.fill = color();\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.interactionsEnabled = false;\r\n\r\n\t\t//this.element.moveTo({ x: 0, y: 0 });\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisLine\"] = AxisLine;\r\n","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, ISpriteProperties, ISpriteAdapters, ISpriteEvents } from \"../../core/Sprite\";\r\nimport { Axis, AxisItemLocation, AxisDataItem } from \"./Axis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisFill]].\r\n */\r\nexport interface IAxisFillProperties extends ISpriteProperties {\r\n\r\n\t/**\r\n\t * Start position. (0-1)\r\n\t */\r\n\tstartPosition?: number;\r\n\r\n\t/**\r\n\t * End position. (0-1)\r\n\t */\r\n\tendPosition?: number;\r\n\r\n\t/**\r\n\t * Location within the axis.\r\n\t */\r\n\tlocation?: number;\r\n\r\n\t/**\r\n\t * Normally fill goes below series. Set this to `true` to go above.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tabove?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisFill]].\r\n */\r\nexport interface IAxisFillEvents extends ISpriteEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisFill]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisFillAdapters extends ISpriteAdapters, IAxisFillProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * AxisFill is a base class used to defines fill shapes for various\r\n * type-specific Axes.\r\n *\r\n * Axis fills are used to add fills to specific ranges of those axes.\r\n *\r\n * @see {@link IAxisFillEvents} for a list of available events\r\n * @see {@link IAxisFillAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class AxisFill extends Sprite {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisFillProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisFillAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisFillEvents;\r\n\r\n\t/**\r\n\t * A referecent to Axis element this fill is applied to.\r\n\t */\r\n\tpublic axis: Axis;\r\n\r\n\t/**\r\n\t * An SVG path, used to draw fill shape.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic fillPath: string;\r\n\r\n\t/**\r\n\t * [_dataItem description]\r\n\t *\r\n\t * Not sure what this is doing here?\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tpublic _dataItem: AxisDataItem;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Axis\r\n\t */\r\n\tconstructor(axis: Axis) {\r\n\t\tsuper();\r\n\t\tthis.axis = axis;\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\r\n\t\tthis.className = \"AxisFill\";\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.location = 0;\r\n\r\n\t\tthis.above = false;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tthis.fillOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setDisabled(value: boolean): boolean {\r\n\t\tlet changed = super.setDisabled(value);\r\n\t\tif (this.axis) {\r\n\t\t\tthis.axis.invalidateDataItems();\r\n\t\t}\r\n\t\treturn changed;\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tif (this.__disabled || this.disabled) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (this.axis && $type.isNumber(this.startPosition) && $type.isNumber(this.endPosition)) {\r\n\t\t\tthis.fillPath = this.axis.getPositionRangePath(this.startPosition, this.endPosition);\r\n\t\t\tthis.path = this.fillPath;\r\n\t\t\tif (this.isMeasured) {\r\n\t\t\t\tthis.measure();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * An actual starting position of the fill.\r\n\t *\r\n\t * @param value  Starting position\r\n\t */\r\n\tpublic set startPosition(value: number) {\r\n\t\tthis.setPropertyValue(\"startPosition\", value);\r\n\t\tthis.invalidate(); // this is needed as relative position might not change when zooming\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start position\r\n\t */\r\n\tpublic get startPosition(): number {\r\n\t\treturn this.getPropertyValue(\"startPosition\");\r\n\t}\r\n\r\n\t/**\r\n\t * An actual end position of the fill.\r\n\t *\r\n\t * @param value End position\r\n\t */\r\n\tpublic set endPosition(value: number) {\r\n\t\tthis.setPropertyValue(\"endPosition\", value);\r\n\t\tthis.invalidate(); // this is needed as relative position might not change when zooming\r\n\t}\r\n\r\n\t/**\r\n\t * @return End position\r\n\t */\r\n\tpublic get endPosition(): number {\r\n\t\treturn this.getPropertyValue(\"endPosition\");\r\n\t}\r\n\r\n\t/**\r\n\t * Relative location of the fill. (0-1)\r\n\t *\r\n\t * @param value Location (0-1)\r\n\t */\r\n\tpublic set location(value: AxisItemLocation) {\r\n\t\tthis.setPropertyValue(\"location\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get location(): AxisItemLocation {\r\n\t\treturn this.getPropertyValue(\"location\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setPath(value: string): boolean {\r\n\t\tif (this.setPropertyValue(\"path\", value)) {\r\n\t\t\tthis.element.attr({ \"d\": value });\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Normally fill goes below series. Set this to `true` to go above.\r\n\t *\r\n\t * @default false\r\n\t * @since 4.5.9\r\n\t * @param  value  Draw above series?\r\n\t */\r\n\tpublic set above(value: boolean) {\r\n\t\tthis.setPropertyValue(\"above\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Draw above series?\r\n\t */\r\n\tpublic get above(): boolean {\r\n\t\treturn this.getPropertyValue(\"above\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisFill\"] = AxisFill;\r\n","/**\r\n * A module defining functionality for axis grid elements.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, ISpriteProperties, ISpriteEvents, ISpriteAdapters } from \"../../core/Sprite\";\r\nimport { AxisItemLocation, AxisDataItem, Axis } from \"./Axis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Grid]].\r\n */\r\nexport interface IGridProperties extends ISpriteProperties {\r\n\r\n\t/**\r\n\t * Location of the grid item within cell. (0-1)\r\n\t */\r\n\tlocation?: AxisItemLocation;\r\n\r\n\t/**\r\n\t * Normally fill goes below series. Set this to `true` to go above.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tabove?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[Grid]].\r\n */\r\nexport interface IGridEvents extends ISpriteEvents { }\r\n\r\n/**\r\n * Defines adapters  for [[Grid]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IGridAdapters extends ISpriteAdapters, IGridProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Displays an axis grid line.\r\n *\r\n * @see {@link IGridEvents} for a list of available events\r\n * @see {@link IGridAdapters} for a list of available Adapters\r\n * @todo Review: container is better, as we'll be able to attach something to the grid, also with 3d charts we might need some additional elements\r\n * @important\r\n */\r\nexport class Grid extends Sprite {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IGridProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IGridAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IGridEvents;\r\n\r\n\t/**\r\n\t * An axis data item that corresponds to the this grid element.\r\n\t */\r\n\tpublic _dataItem: AxisDataItem;\r\n\r\n\t/**\r\n\t * A referecent to Axis element this fill is applied to.\r\n\t */\r\n\tpublic axis: Axis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Grid\";\r\n\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\r\n\t\tthis.location = 0.5;\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.above = false;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\t\tthis.stroke = interfaceColors.getFor(\"grid\");\r\n\r\n\t\tthis.pixelPerfect = true;\r\n\t\tthis.strokeOpacity = 0.15;\r\n\t\tthis.fill = color(); // \"none\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Location within axis cell to place grid line on.\r\n\t *\r\n\t * * 0 - start\r\n\t * * 0.5 - middle\r\n\t * * 1 - end\r\n\t *\r\n\t * @param value  Location (0-1)\r\n\t */\r\n\tpublic set location(value: AxisItemLocation) {\r\n\t\tthis.setPropertyValue(\"location\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get location(): AxisItemLocation {\r\n\t\treturn this.getPropertyValue(\"location\");\r\n\t}\r\n\r\n\t/**\r\n\t * Normally fill goes below series. Set this to `true` to go above.\r\n\t *\r\n\t * @default false\r\n\t * @since 4.5.9\r\n\t * @param  value  Draw above series?\r\n\t */\r\n\tpublic set above(value: boolean) {\r\n\t\tthis.setPropertyValue(\"above\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Draw above series?\r\n\t */\r\n\tpublic get above(): boolean {\r\n\t\treturn this.getPropertyValue(\"above\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setDisabled(value: boolean): boolean {\r\n\t\tlet changed = super.setDisabled(value);\r\n\t\tif (this.axis) {\r\n\t\t\tthis.axis.invalidateDataItems();\r\n\t\t}\r\n\t\treturn changed;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Grid\"] = Grid;\r\n\r\n/**\r\n * Add default responsive rules\r\n */\r\n\r\n/**\r\n * Disable grid on smaller charts\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.maybeXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof Grid) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.disabled = true;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});","/**\r\n * Axis Label module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Label, ILabelProperties, ILabelAdapters, ILabelEvents } from \"../../core/elements/Label\";\r\nimport { AxisItemLocation, AxisDataItem, Axis } from \"./Axis\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisLabel]].\r\n */\r\nexport interface IAxisLabelProperties extends ILabelProperties {\r\n\r\n\t/**\r\n\t * Relative location of the label. (0-1)\r\n\t */\r\n\tlocation?: number;\r\n\r\n\t/**\r\n\t * Draw the label on the inside of the Axis?\r\n\t */\r\n\tinside?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisLabel]].\r\n */\r\nexport interface IAxisLabelEvents extends ILabelEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisLabel]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisLabelAdapters extends ILabelAdapters, IAxisLabelProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Use to create labels on Axis.\r\n *\r\n * @see {@link IAxisLabelEvents} for a list of available events\r\n * @see {@link IAxisLabelAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class AxisLabel extends Label {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisLabelProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisLabelAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisLabelEvents;\r\n\r\n\t/**\r\n\t * Related data item.\r\n\t */\r\n\tpublic _dataItem: AxisDataItem;\r\n\r\n\t/**\r\n\t * A referecent to Axis element this fill is applied to.\r\n\t */\r\n\tpublic axis: Axis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisLabel\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.padding(10, 10, 10, 10);\r\n\t\tthis.location = 0.5;\r\n\t\t//this.nonScaling = true; // not good for perf\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Relative location of the label. (0-1)\r\n\t *\r\n\t * @param value  Location (0-1)\r\n\t */\r\n\tpublic set location(value: AxisItemLocation) {\r\n\t\tthis.setPropertyValue(\"location\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get location(): AxisItemLocation {\r\n\t\treturn this.getPropertyValue(\"location\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets if label should be drawn inside axis.\r\n\t *\r\n\t * @param value  Inside?\r\n\t */\r\n\tpublic set inside(value: boolean) {\r\n\t\tthis.setPropertyValue(\"inside\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns if label is set to be drawn inside axis.\r\n\t *\r\n\t * @return Inside?\r\n\t */\r\n\tpublic get inside(): boolean {\r\n\t\treturn this.getPropertyValue(\"inside\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setDisabled(value: boolean):boolean {\r\n\t\tlet changed = super.setDisabled(value);\r\n\t\tif(this.axis){\r\n\t\t\tthis.axis.invalidateDataItems();\r\n\t\t}\r\n\t\treturn changed;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisLabel\"] = AxisLabel;\r\n","/**\r\n * Tick module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, ISpriteProperties, ISpriteAdapters, ISpriteEvents } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Tick]].\r\n */\r\nexport interface ITickProperties extends ISpriteProperties {\r\n\r\n\t/**\r\n\t * Length of the tick (px).\r\n\t */\r\n\tlength?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[Tick]].\r\n */\r\nexport interface ITickEvents extends ISpriteEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Tick]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITickAdapters extends ISpriteAdapters, ITickProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A basic Tick class.\r\n *\r\n * A tick is a short dash, mainly connecting an object like axis or slice to\r\n * it's textual label.\r\n *\r\n * @see {@link ITickEvents} for a list of available events\r\n * @see {@link ITickAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class Tick extends Sprite {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ITickProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ITickAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ITickEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Tick\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.fillOpacity = 0;\r\n\t\tthis.length = 6;\r\n\t\tthis.strokeOpacity = 0.2;\r\n\t\tthis.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.nonScalingStroke = true;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Length of the tick in pixels.\r\n\t *\r\n\t * @param value  Length (px)\r\n\t */\r\n\tpublic set length(value: number) {\r\n\t\tthis.setPropertyValue(\"length\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Length (px)\r\n\t */\r\n\tpublic get length(): number {\r\n\t\tif (this.disabled) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\treturn this.getPropertyValue(\"length\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Tick\"] = Tick;\r\n","/**\r\n * Axis Tick module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Tick, ITickProperties, ITickAdapters, ITickEvents } from \"../elements/Tick\";\r\nimport { AxisItemLocation, AxisDataItem, Axis } from \"./Axis\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisTick]].\r\n */\r\nexport interface IAxisTickProperties extends ITickProperties {\r\n\t/**\r\n\t * Relative location of the tick. (0-1)\r\n\t */\r\n\tlocation?: number;\r\n\r\n\t/**\r\n\t * Draw the tick on the inside of the Axis?\r\n\t */\r\n\tinside?: boolean;\r\n\r\n\t/**\r\n\t * Normally fill goes below series. Set this to `true` to go above.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tabove?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisTick]].\r\n */\r\nexport interface IAxisTickEvents extends ITickEvents {\r\n\r\n}\r\n\r\n/**\r\n * Defines adapter for [[AxisTick]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisTickAdapters extends ITickAdapters, IAxisTickProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws an axis tick\r\n * @see {@link IAxisTickEvents} for a list of available events\r\n * @see {@link IAxisTickAdapters} for a list of available Adapters\r\n */\r\nexport class AxisTick extends Tick {\r\n\r\n\t/**\r\n\t * Defines available properties\r\n\t */\r\n\tpublic _properties!: IAxisTickProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t */\r\n\tpublic _adapter!: IAxisTickAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisTickEvents;\r\n\r\n\tpublic _dataItem: AxisDataItem;\r\n\r\n\t/**\r\n\t * A referece to Axis element this tick is placed on.\r\n\t */\r\n\tpublic axis: Axis;\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"AxisTick\";\r\n\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\r\n\t\tthis.location = 0.5;\r\n\r\n\t\tthis.above = false;\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.pixelPerfect = true;\r\n\r\n\t\tthis.strokeOpacity = 0;\r\n\r\n\t\tthis.length = 5;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Relative location of the tick. (0-1)\r\n\t *\r\n\t * @param value  Location (0-1)\r\n\t */\r\n\tpublic set location(value: AxisItemLocation) {\r\n\t\tthis.setPropertyValue(\"location\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get location(): AxisItemLocation {\r\n\t\treturn this.getPropertyValue(\"location\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets if tick should be drawn inside axis.\r\n\t *\r\n\t * @param value  Inside?\r\n\t */\r\n\tpublic set inside(value: boolean) {\r\n\t\tthis.setPropertyValue(\"inside\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns if label is set to be drawn inside axis.\r\n\t *\r\n\t * @return Inside?\r\n\t */\r\n\tpublic get inside(): boolean {\r\n\t\treturn this.getPropertyValue(\"inside\");\r\n\t}\r\n\r\n\t/**\r\n\t * Normally tick goes below series. Set this to `true` to go above.\r\n\t *\r\n\t * @default false\r\n\t * @since 4.5.9\r\n\t * @param  value  Draw above series?\r\n\t */\r\n\tpublic set above(value: boolean) {\r\n\t\tthis.setPropertyValue(\"above\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Draw above series?\r\n\t */\r\n\tpublic get above(): boolean {\r\n\t\treturn this.getPropertyValue(\"above\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setDisabled(value: boolean): boolean {\r\n\t\tlet changed = super.setDisabled(value);\r\n\t\tif (this.axis) {\r\n\t\t\tthis.axis.invalidateDataItems();\r\n\t\t}\r\n\t\treturn changed;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisTick\"] = AxisTick;\r\n","/**\r\n * Module, defining base Axis Renderer.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { Axis, AxisDataItem } from \"./Axis\";\r\nimport { AxisLine } from \"./AxisLine\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { AxisBreak } from \"./AxisBreak\";\r\nimport { Chart } from \"../Chart\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRenderer]].\r\n */\r\nexport interface IAxisRendererProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Minimum distance in pixels between grid elements.\r\n\t */\r\n\tminGridDistance?: number;\r\n\r\n\t/**\r\n\t * Draw axis labels inside axis.\r\n\t */\r\n\tinside?: boolean;\r\n\r\n\t/**\r\n\t * Draw axis on opposite side of the plot area?\r\n\t */\r\n\topposite?: boolean;\r\n\r\n\t/**\r\n\t * Inverse the order of the scale for the Axis.\r\n\t */\r\n\tinversed?: boolean;\r\n\r\n\t/**\r\n\t * Location of the cell start. (0-1)\r\n\t */\r\n\tcellStartLocation?: number;\r\n\r\n\t/**\r\n\t * Location of the cell end. (0-1)\r\n\t */\r\n\tcellEndLocation?: number;\r\n\r\n\t/**\r\n\t * Location of the axis tooltip. (0-1)\r\n\t */\r\n\ttooltipLocation?: number;\r\n\r\n\t/**\r\n\t * Location of the tooltip relative secondary axis cell. (0-1)\r\n\t */\r\n\ttooltipLocation2?: number;\t\r\n\r\n\t/**\r\n\t * Resize axis tooltip to the full width of the cell.\r\n\t */\r\n\tfullWidthTooltip?: boolean;\r\n\r\n\t/**\r\n\t * Labels with position less than this will be hidden.\r\n\t */\r\n\tminLabelPosition?: number;\r\n\r\n\t/**\r\n\t * Labels with position bigger than this will be hidden.\r\n\t */\r\n\tmaxLabelPosition?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisRenderer]].\r\n */\r\nexport interface IAxisRendererEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererAdapters extends IContainerAdapters, IAxisRendererProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A base class for all axis renderers.\r\n *\r\n * @see {@link IAxisRendererEvents} for a list of available events\r\n * @see {@link IAxisRendererAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRenderer extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisRendererProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisRendererAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererEvents;\r\n\r\n\t/**\r\n\t * A related Axis.\r\n\t */\r\n\tprotected _axis: Axis;\r\n\r\n\t/**\r\n\t * A line object of the related axis.\r\n\t */\r\n\tpublic line: AxisLine;\r\n\r\n\t/**\r\n\t * Base grid element. ([[Sprite]])\r\n\t *\r\n\t * For value axes base grid is at value 0.\r\n\t *\r\n\t * For category/date axis it is added at the end of the last item/date.\r\n\t *\r\n\t */\r\n\tpublic baseGrid: Sprite;\r\n\r\n\t/**\r\n\t * A [[Container]] holding all of the [[Grid]] elements.\r\n\t */\r\n\tpublic gridContainer: Container;\r\n\r\n\t/**\r\n\t * A [[Container]] holding all of the axis bullets.\r\n\t */\r\n\tpublic bulletsContainer: Container;\r\n\r\n\t/**\r\n\t * A [[Container]] holding all of the [[AxisBreak]] elements.\r\n\t */\r\n\tpublic breakContainer: Container;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<Chart>();\r\n\r\n\t/**\r\n\t * Defines type of the grid elements.\r\n\t */\r\n\tpublic _gridType: Grid;\r\n\r\n\t/**\r\n\t * Defines type for the fill elements.\r\n\t */\r\n\tpublic _fillType: AxisFill;\r\n\r\n\t/**\r\n\t * Defines type for tick elements.\r\n\t */\r\n\tpublic _tickType: AxisTick;\r\n\r\n\t/**\r\n\t * Defines type for the label elements.\r\n\t */\r\n\tpublic _labelType: AxisLabel;\r\n\r\n\t/**\r\n\t * A list of grid elements.\r\n\t */\r\n\tprotected _grid: ListTemplate<this[\"_gridType\"]>;\r\n\r\n\t/**\r\n\t * A list of tick elements.\r\n\t */\r\n\tprotected _ticks: ListTemplate<this[\"_tickType\"]>;\r\n\r\n\t/**\r\n\t * A list of label elements.\r\n\t */\r\n\tprotected _labels: ListTemplate<this[\"_labelType\"]>;\r\n\r\n\t/**\r\n\t * A list of fill elements.\r\n\t */\r\n\tprotected _axisFills: ListTemplate<this[\"_fillType\"]>;\r\n\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRenderer\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.minGridDistance = 50;\r\n\t\tthis.inside = false;\r\n\t\tthis.inversed = false;\r\n\t\tthis.tooltipLocation = 0.5;\r\n\t\tthis.fullWidthTooltip = false;\r\n\t\tthis.cellStartLocation = 0;\r\n\t\tthis.cellEndLocation = 1;\r\n\r\n\t\tthis.minLabelPosition = 0;\r\n\t\tthis.maxLabelPosition = 1;\r\n\t\tthis.shouldClone = false;\r\n\r\n\t\tlet gridContainer = this.createChild(Container);\r\n\t\tgridContainer.shouldClone = false;\r\n\t\tgridContainer.layout = \"none\";\r\n\t\t//\tgridContainer.isMeasured = false;\r\n\t\tgridContainer.virtualParent = this;\r\n\t\tgridContainer.width = percent(100);\r\n\t\tgridContainer.height = percent(100);\r\n\r\n\t\tthis.gridContainer = gridContainer;\r\n\t\t// not good without this\r\n\t\tgridContainer.events.on(\"maxsizechanged\", () => {\r\n\t\t\tif (this.inited) {\r\n\t\t\t\tthis.invalidateAxisItems();\r\n\t\t\t}\r\n\t\t}, this, false);\r\n\r\n\t\tlet breakContainer = this.createChild(Container);\r\n\t\tbreakContainer.shouldClone = false;\r\n\t\tbreakContainer.isMeasured = false;\r\n\t\tbreakContainer.layout = \"none\";\r\n\t\tbreakContainer.width = percent(100);\r\n\t\tbreakContainer.height = percent(100);\r\n\t\tthis.breakContainer = breakContainer;\r\n\r\n\t\tlet bulletsContainer = this.createChild(Container);\r\n\t\tbulletsContainer.shouldClone = false;\r\n\t\tbulletsContainer.isMeasured = false;\r\n\t\tbulletsContainer.layout = \"none\";\r\n\t\tbulletsContainer.width = percent(100);\r\n\t\tbulletsContainer.height = percent(100);\r\n\t\tthis.bulletsContainer = bulletsContainer;\r\n\r\n\t\tthis.line = this.createChild(AxisLine);\r\n\t\tthis.line.shouldClone = false;\r\n\t\tthis.line.strokeOpacity = 0;\r\n\r\n\t\tlet baseGrid: Grid = this.createChild(Grid);\r\n\t\tbaseGrid.shouldClone = false;\r\n\t\tthis.baseGrid = baseGrid;\r\n\r\n\t\t// Make elements disposable\r\n\t\tlet disposers = this._disposers;\r\n\t\tdisposers.push(baseGrid);\r\n\t\tdisposers.push(this.line);\r\n\t\tdisposers.push(gridContainer);\r\n\t\tdisposers.push(breakContainer);\r\n\t\tdisposers.push(bulletsContainer);\r\n\t\tdisposers.push(this._chart);\r\n\r\n\t\tthis.ticks.template.disabled = true;\r\n\t\tthis.axisFills.template.disabled = true;\r\n\t\tthis.axisFills.template.interactionsEnabled = false;\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Axis of a renderer\r\n\t * @param axis Axis\r\n\t */\r\n\tset axis(axis: Axis) {\r\n\t\tthis.setAxis(axis);\r\n\t}\r\n\r\n\t/**\r\n\t * Axis of a renderer\r\n\t * @return axis Axis\r\n\t */\r\n\tget axis(): Axis {\r\n\t\treturn this._axis;\r\n\t}\r\n\r\n\t/**\r\n\t* @ignore\r\n\t*/\r\n\tpublic setAxis(axis: Axis) {\r\n\t\tthis._axis = axis;\r\n\t\tthis.baseGrid.parent = axis;\r\n\t\tthis.line.parent = axis;\r\n\t\tthis.gridContainer.bind(\"opacity\", axis);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Called when rendered is attached to an Axis, as well as a property of\r\n\t * Axis that might affect the appearance is updated.\r\n\t *\r\n\t * E.g. `axis.opposite`, `axis.inside`, etc.\r\n\t *\r\n\t * This method is called **before** draw, so that any related setting\r\n\t * changed in this method can be changed.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic processRenderer(): void {\r\n\t\tthis.events.on(\"sizechanged\", this.updateTooltip, this, false);\r\n\t\tthis.events.on(\"positionchanged\", this.updateTooltip, this, false);\r\n\t\tthis.labels.template.inside = this.inside;\r\n\t\tthis.ticks.template.inside = this.inside;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Axis' tooltip.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateTooltip(): void {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Re-positions an element to new coordinates.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param item   A target element\r\n\t * @param point  New coordinates\r\n\t */\r\n\tpublic positionItem(item: Sprite, point: IPoint): void {\r\n\t\tif (item) {\r\n\t\t\titem.moveTo(point);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @return Point\r\n\t */\r\n\tpublic positionToPoint(position: number, position2?:number): IPoint {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t\treturn { x: 0, y: 0 };\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to angle.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review / units)\r\n\t * @param position  Position (0-1)\r\n\t * @return Angle\r\n\t */\r\n\tpublic positionToAngle(position: number): number {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position (0-1) on axis to a pixel coordinate.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @return Coordinate (px)\r\n\t */\r\n\tpublic positionToCoordinate(position: number): number {\r\n\t\tlet coordinate: number;\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tlet axisFullLength = axis.axisFullLength;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tcoordinate = (axis.end - position) * axisFullLength;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcoordinate = (position - axis.start) * axisFullLength;\r\n\t\t}\r\n\r\n\t\treturn coordinate;\r\n\t}\r\n\r\n\tpublic updateGridContainer() {\r\n\r\n\t}\r\n\r\n\r\n\tprotected getHeight(): number {\r\n\t\tlet gridContainer = this.gridContainer;\r\n\t\tif(gridContainer.parent){\r\n\t\t\treturn gridContainer.parent.pixelHeight;\r\n\t\t}\r\n\t\treturn this.gridContainer.pixelHeight || 0;\r\n\t}\r\n\r\n\tprotected getWidth(): number {\r\n\t\tlet gridContainer = this.gridContainer;\r\n\t\tif(gridContainer.parent){\r\n\t\t\treturn gridContainer.parent.pixelWidth;\r\n\t\t}\r\n\t\treturn this.gridContainer.pixelWidth || 0;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a coordinate in pixels to a relative position. (0-1)\r\n\t *\r\n\t * @param coordinate  Coordinate (px)\r\n\t * @param coordinate2  Coordinate of a second axis, only needed for complex axes systems, like timeline (px)\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic coordinateToPosition(coordinate: number, coordinate2?:number): number {\r\n\t\tlet position: number;\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tlet axisFullLength = axis.axisFullLength;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tposition = axis.end - coordinate / axisFullLength;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tposition = coordinate / axisFullLength + axis.start;\r\n\t\t}\r\n\r\n\t\treturn $math.round(position, 5);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a point at specific coordinates to a relative position (0-1)\r\n\t * on the axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param point  Point\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic pointToPosition(point: IPoint): number {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param startPosition  Starting position\r\n\t * @param endPosition    End position\r\n\t * @return SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number): string {\r\n\t\treturn \"\";\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates all axis data items, effectively causing them re-evaluated.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic invalidateAxisItems(): void {\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tif (axis) {\r\n\t\t\taxis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Sprite, position: number, endPosition: number): void {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param tick         Tick element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number, endPosition: number): void {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions axis bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet       AxisBullet element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateBullet(bullet: Sprite, position: number, endPosition: number): void {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param label        Label element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: AxisLabel, position: number, endPosition: number, location?: number): void {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param fill         Fill element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  Ending position\r\n\t */\r\n\tpublic updateFillElement(fill: AxisFill, position: number, endPosition: number): void {\r\n\t\tfill.startPosition = position;\r\n\t\tfill.endPosition = endPosition;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine(): void {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions an axis break element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axisBreak Break element\r\n\t */\r\n\tpublic updateBreakElement(axisBreak: AxisBreak): void {\r\n\t\tthis.positionItem(axisBreak.startLine, axisBreak.startPoint);\r\n\t\tthis.toggleVisibility(axisBreak.startLine, axisBreak.startPosition, 0, 1);\r\n\t\tthis.positionItem(axisBreak.endLine, axisBreak.endPoint);\r\n\t\tthis.toggleVisibility(axisBreak.endLine, axisBreak.endPosition, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Minimum distance in pixels between grid elements.\r\n\t *\r\n\t * Use it to control density of the grid/labels on the axis.element.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/#Setting_the_density_of_the_the_grid_labels} for more info\r\n\t * @param value  Min distance (px)\r\n\t */\r\n\tpublic set minGridDistance(value: number) {\r\n\t\tif (this.setPropertyValue(\"minGridDistance\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataItems();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Min distance (px)\r\n\t */\r\n\tpublic get minGridDistance(): number {\r\n\t\treturn this.getPropertyValue(\"minGridDistance\");\r\n\t}\r\n\r\n\t/**\r\n\t * A chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Chart\r\n\t */\r\n\tpublic set chart(value: Chart) {\r\n\t\tthis._chart.set(value, null);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): Chart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Toggles visibility of an element, based on its current position and\r\n\t * min/max position settings.\r\n\t *\r\n\t * E.g. labels based on `minLabelPosition` and `maxLabelPosition`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param sprite       An element to toggle\r\n\t * @param position     Elements current position\r\n\t * @param minPosition  Min position setting\r\n\t * @param maxPosition  Max position setting\r\n\t */\r\n\tprotected toggleVisibility(sprite: Sprite, position: number, minPosition: number, maxPosition: number): void {\r\n\t\tlet axis = this.axis;\r\n\r\n\t\tlet dataItem = sprite.dataItem;\r\n\t\tif(dataItem && dataItem instanceof AxisDataItem){\r\n\t\t\tif($type.isNumber(dataItem.minPosition)){\r\n\t\t\t\tminPosition = dataItem.minPosition;\r\n\t\t\t}\r\n\t\t\tif($type.isNumber(dataItem.maxPosition)){\r\n\t\t\t\tmaxPosition = dataItem.maxPosition;\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\r\n\t\tlet updatedStart = axis.start + (axis.end - axis.start) * (minPosition - 0.0001);\r\n\t\tlet updatedEnd = axis.start + (axis.end - axis.start) * (maxPosition + 0.0001);\r\n\r\n\t\tif (!sprite.disabled) {\r\n\t\t\tif (position < updatedStart || position > updatedEnd) {\r\n\t\t\t\tsprite.__disabled = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tsprite.__disabled = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates visual elements for and axis break.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axisBreak Axis break\r\n\t */\r\n\tpublic createBreakSprites(axisBreak: AxisBreak) {\r\n\t\t// This is a placeholder method for extending classes to override.\r\n\t}\r\n\r\n\t/**\r\n\t * A list of Axis' Fill elements.\r\n\t *\r\n\t * Those are fill elements that cover the space between every second set\r\n\t * of grid lines, and can be configured to create striped charts.\r\n\t *\r\n\t * Please note that these are disabled by default. To enable them, set\r\n\t * template to true.\r\n\t *\r\n\t * ```TypeScript\r\n\t * categoryAxis.renderer.axisFills.template.disabled = false;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * categoryAxis.renderer.axisFills.template.disabled = false;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"xAxes\": [{\r\n\t *     // ...\r\n\t *     \"renderer\": {\r\n\t *       \"axisFills\": {\r\n\t *         \"disabled\": false\r\n\t *       }\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/tutorials/alternated-axis-fills/} this tutorial for more info.\r\n\t * @return Fill elements\r\n\t */\r\n\tpublic get axisFills(): ListTemplate<this[\"_fillType\"]> {\r\n\t\tif (!this._axisFills) {\r\n\t\t\tlet fill = this.createFill(this.axis);\r\n\t\t\tthis._axisFills = new ListTemplate<AxisFill>(fill);\r\n\t\t\tfill.applyOnClones = true;\r\n\t\t\tfill.events.on(\"enabled\", this.invalidateAxisItems, this, false);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._axisFills));\r\n\t\t\tthis._disposers.push(this._axisFills.template);\r\n\t\t}\r\n\t\treturn this._axisFills;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new fill element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return Fill element\r\n\t */\r\n\tpublic createFill(axis: Axis): this[\"_fillType\"] {\r\n\t\treturn new AxisFill(axis);\r\n\t}\r\n\r\n\t/**\r\n\t * A list of Axis' Grid elements.\r\n\t *\r\n\t * @return Grid elements\r\n\t */\r\n\tpublic get grid(): ListTemplate<this[\"_gridType\"]> {\r\n\t\tif (!this._grid) {\r\n\t\t\tlet grid = this.createGrid();\r\n\t\t\tthis._grid = new ListTemplate<Grid>(grid);\r\n\t\t\tgrid.applyOnClones = true;\r\n\t\t\tgrid.events.on(\"enabled\", this.invalidateAxisItems, this, false);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._grid));\r\n\t\t\tthis._disposers.push(this._grid.template);\r\n\t\t}\r\n\t\treturn this._grid;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new grid element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return Grid element\r\n\t */\r\n\tpublic createGrid(): this[\"_gridType\"] {\r\n\t\treturn new Grid();\r\n\t}\r\n\r\n\t/**\r\n\t * A list of Axis' Tick elements.\r\n\t *\r\n\t * Please note that these are disabled by default. To enable ticks, you'll\r\n\t * need to set `disabled` and `strokeOpacity` properties of the tick template.\r\n\t *\r\n\t * ```TypeScript\r\n\t * categoryAxis.renderer.ticks.template.disabled = false;\r\n\t * categoryAxis.renderer.ticks.template.strokeOpacty = 0.5;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * categoryAxis.renderer.ticks.template.disabled = false;\r\n\t * categoryAxis.renderer.ticks.template.strokeOpacty = 0.5;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"xAxes\": [{\r\n\t *     // ...\r\n\t *     \"renderer\": {\r\n\t *       \"ticks\": {\r\n\t *         \"disabled\": false,\r\n\t *         \"strokeOpacty\": 0.5\r\n\t *       }\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @return Tick elements\r\n\t */\r\n\tpublic get ticks(): ListTemplate<this[\"_tickType\"]> {\r\n\t\tif (!this._ticks) {\r\n\t\t\tlet tick: AxisTick = this.createTick();\r\n\t\t\ttick.applyOnClones = true;\r\n\t\t\ttick.isMeasured = false;\r\n\t\t\ttick.events.on(\"enabled\", this.invalidateAxisItems, this, false);\r\n\t\t\tthis._ticks = new ListTemplate<AxisTick>(tick);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._ticks));\r\n\t\t\tthis._disposers.push(this._ticks.template);\r\n\t\t}\r\n\t\treturn this._ticks;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new tick element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return Tick element\r\n\t */\r\n\tpublic createTick(): this[\"_tickType\"] {\r\n\t\treturn new AxisTick();\r\n\t}\r\n\r\n\t/**\r\n\t * A list of Axis' Label elements.\r\n\t *\r\n\t * @return Label elements\r\n\t */\r\n\tpublic get labels(): ListTemplate<this[\"_labelType\"]> {\r\n\t\tif (!this._labels) {\r\n\t\t\tlet label = this.createLabel();\r\n\t\t\tthis._labels = new ListTemplate<AxisLabel>(label);\r\n\t\t\tlabel.applyOnClones = true;\r\n\t\t\tlabel.events.on(\"enabled\", this.invalidateAxisItems, this, false);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._labels));\r\n\t\t\tthis._disposers.push(this._labels.template);\r\n\t\t}\r\n\t\treturn this._labels;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new label element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return Label element\r\n\t */\r\n\tpublic createLabel(): this[\"_labelType\"] {\r\n\t\treturn new AxisLabel();\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether Axis' labels and ticks should be drawn inside Plot area.\r\n\t *\r\n\t * Does not work with all renderers, like AxisRendererRadial.\r\n\t *\r\n\t * @param value  Labels inside?\r\n\t */\r\n\tpublic set inside(value: boolean) {\r\n\r\n\t\tif (this.setPropertyValue(\"inside\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (value) {\r\n\t\t\tthis.width = 0;\r\n\t\t\tthis.height = 0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.width = undefined;\r\n\t\t\tthis.height = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Labels inside?\r\n\t */\r\n\tpublic get inside(): boolean {\r\n\t\treturn this.getPropertyValue(\"inside\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether Axis should be drawn on the opposite side of the plot\r\n\t * area than it would normally be drawn based on chart's settings.\r\n\t *\r\n\t * Does not work with all renderers, like [[AxisRendererRadial]] and\r\n\t * [[AxisRenderer Circular].\r\n\t *\r\n\t * @param value  Draw axis on opposite side?\r\n\t */\r\n\tpublic set opposite(value: boolean) {\r\n\t\tthis.setPropertyValue(\"opposite\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Draw axis on opposite side?\r\n\t */\r\n\tpublic get opposite(): boolean {\r\n\t\treturn this.getPropertyValue(\"opposite\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if Axis tooltip should take the whole width of the axis cell.\r\n\t * (between two grid lines)\r\n\t *\r\n\t * NOTE: this setting is ignored on circular axis types.\r\n\t *\r\n\t * @param value Full width tooltip?\r\n\t */\r\n\tpublic set fullWidthTooltip(value: boolean) {\r\n\t\tthis.setPropertyValue(\"fullWidthTooltip\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Full width tooltip?\r\n\t */\r\n\tpublic get fullWidthTooltip(): boolean {\r\n\t\treturn this.getPropertyValue(\"fullWidthTooltip\");\r\n\t}\r\n\r\n\t/**\r\n\t * Location within axis cell to show tooltip on. (0-1)\r\n\t *\r\n\t * 0 - show at the start\r\n\t * 0.5 - show right in the middle\r\n\t * 1 - show at the end\r\n\t *\r\n\t * @param value Tooltip location\r\n\t */\r\n\tpublic set tooltipLocation(value: number) {\r\n\t\tthis.setPropertyValue(\"tooltipLocation\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Tooltip location\r\n\t */\r\n\tpublic get tooltipLocation(): number {\r\n\t\treturn this.getPropertyValue(\"tooltipLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Location within secondary axis cell to show tooltip on. (0-1)\r\n\t *\r\n\t * 0 - show at the start\r\n\t * 0.5 - show right in the middle\r\n\t * 1 - show at the end\r\n\t *\r\n\t * @param value Tooltip location\r\n\t */\r\n\tpublic set tooltipLocation2(value: number) {\r\n\t\tthis.setPropertyValue(\"tooltipLocation2\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Tooltip location\r\n\t */\r\n\tpublic get tooltipLocation2(): number {\r\n\t\treturn this.getPropertyValue(\"tooltipLocation2\");\r\n\t}\t\r\n\r\n\t/**\r\n\t * Location for the cell start.\r\n\t *\r\n\t * Normally a \"cell\" is the whole available width in a category.\r\n\t *\r\n\t * If there are several clustered column-like series available, the whole\r\n\t * space is divided between each clustered column, or column stacks.\r\n\t *\r\n\t * `cellStartLocation` identifies where, within available space, the actual\r\n\t * cell starts.\r\n\t *\r\n\t * This, together with column series' `width` will affect actual width of\r\n\t * columns, and thus gaps between them.\r\n\t *\r\n\t * This will affect category-like axes only, like [[DateAxis]], or\r\n\t * [[CategoryAxis]].\r\n\t *\r\n\t * This is used to limit a space occupied by series like column.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/} for more info.\r\n\t * @param value Cell start (0-1)\r\n\t */\r\n\tpublic set cellStartLocation(value: number) {\r\n\t\tif (this.setPropertyValue(\"cellStartLocation\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Cell start (0-1)\r\n\t */\r\n\tpublic get cellStartLocation(): number {\r\n\t\treturn this.getPropertyValue(\"cellStartLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Location for the cell end.\r\n\t *\r\n\t * Normally a \"cell\" is the whole available width in a category.\r\n\t *\r\n\t * If there are several clustered column-like series available, the whole\r\n\t * space is divided between each clustered column, or column stacks.\r\n\t *\r\n\t * `cellEndLocation` identifies where, within available space, the actual\r\n\t * cell ends.\r\n\t *\r\n\t * This, together with column series' `width` will affect actual width of\r\n\t * columns, and thus gaps between them.\r\n\t *\r\n\t * This will affect category-like axes only, like [[DateAxis]], or\r\n\t * [[CategoryAxis]].\r\n\t *\r\n\t * This is used to limit a space occupied by series like column.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/} for more info.\r\n\t * @param value Cell end (0-1)\r\n\t */\r\n\tpublic set cellEndLocation(value: number) {\r\n\t\tif (this.setPropertyValue(\"cellEndLocation\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Cell end (0-1)\r\n\t */\r\n\tpublic get cellEndLocation(): number {\r\n\t\treturn this.getPropertyValue(\"cellEndLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if the scale of the axis should be flipped.\r\n\t *\r\n\t * @param value Flip axis?\r\n\t */\r\n\tpublic set inversed(value: boolean) {\r\n\t\tthis.setPropertyValue(\"inversed\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Flip axis?\r\n\t */\r\n\tpublic get inversed(): boolean {\r\n\t\treturn this.getPropertyValue(\"inversed\");\r\n\t}\r\n\r\n\t/**\r\n\t * Minimum position along the Axis, for labels.\r\n\t *\r\n\t * Labels, which have their position closer to the start of the Axis, will be\r\n\t * automatically hidden.\r\n\t *\r\n\t * E.g., setting this to 0.05 (5% of total axis length) would hide labels,\r\n\t * that would otherwise be drawn very near start of the Axis.\r\n\t *\r\n\t * This is especially usefull with `inside = true`, or if the chart hasn't\r\n\t * got any extra margins.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/} for more info.\r\n\t * @param value  Min label position (0-1)\r\n\t */\r\n\tpublic set minLabelPosition(value: number) {\r\n\t\tthis.setPropertyValue(\"minLabelPosition\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Min label position (0-1)\r\n\t */\r\n\tpublic get minLabelPosition(): number {\r\n\t\treturn this.getPropertyValue(\"minLabelPosition\");\r\n\t}\r\n\r\n\t/**\r\n\t * Maximum position along the Axis, for labels.\r\n\t *\r\n\t * Labels, which have their position closer to the and of the Axis, will be\r\n\t * automatically hidden.\r\n\t *\r\n\t * E.g., setting this to 0.95 (95% of total axis length) would hide labels,\r\n\t * that would otherwise be drawn very near end of the Axis.\r\n\t *\r\n\t * This is especially usefull with `inside = true`, or if the chart hasn't\r\n\t * got any extra margins.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/} for more info.\r\n\t * @param value  Max label position (0-1)\r\n\t */\r\n\tpublic set maxLabelPosition(value: number) {\r\n\t\tthis.setPropertyValue(\"maxLabelPosition\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Max label position (0-1)\r\n\t */\r\n\tpublic get maxLabelPosition(): number {\r\n\t\treturn this.getPropertyValue(\"maxLabelPosition\");\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all settings and related items from another object of the same\r\n\t * type.\r\n\t *\r\n\t * @param source  Source object\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.grid.template.copyFrom(source.grid.template);\r\n\t\tthis.ticks.template.copyFrom(source.ticks.template);\r\n\t\tthis.labels.template.copyFrom(source.labels.template);\r\n\t\tthis.axisFills.template.copyFrom(source.axisFills.template);\r\n\t\tthis.line.copyFrom(source.line);\r\n\t\tthis.baseGrid.copyFrom(source.baseGrid);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic toAxisPosition(value: number): number {\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets `visibility` property:\r\n\t *\r\n\t * * `true` - visible\r\n\t * * `false` - hidden\r\n\t *\r\n\t * @param value  true - visible, false - hidden\r\n\t * @return Current visibility\r\n\t */\r\n\tpublic setVisibility(value: boolean) {\r\n\t\tsuper.setVisibility(value);\r\n\t\tthis.bulletsContainer.visible = value;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRenderer\"] = AxisRenderer;\r\n","/**\r\n * Axis Bullet module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerAdapters, IContainerEvents, IContainerProperties } from \"../../core/Container\";\r\nimport { AxisItemLocation, AxisDataItem, Axis } from \"./Axis\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisBullet]].\r\n */\r\nexport interface IAxisBulletProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Relative position within cell/range.\r\n\t *\r\n\t * Value range is from from `0` (beginning) to `1` (end).\r\n\t *\r\n\t * @default 0.5\r\n\t */\r\n\tlocation?: number;\r\n\r\n\t/**\r\n\t * Draw inside plot area (`true`) or outside it (`false`).\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tinside?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisBullet]].\r\n */\r\nexport interface IAxisBulletEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapter for [[AxisBullet]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisBulletAdapters extends IContainerAdapters, IAxisBulletProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw a positioned bullet (element) on an Axis.\r\n *\r\n * ```TypeScript\r\n * let range = dateAxis.axisRanges.create();\r\n * range.date = new Date(2018, 0, 5);\r\n * \r\n * let flag = new am4plugins_bullets.FlagBullet();\r\n * flag.label.text = \"Hello\";\r\n *\r\n * range.bullet = flag;\r\n * ```\r\n * ```JavaScript\r\n * var range = dateAxis.axisRanges.create();\r\n * range.date = new Date(2018, 0, 5);\r\n * \r\n * var flag = new am4plugins_bullets.FlagBullet();\r\n * flag.label.text = \"Hello\";\r\n *\r\n * range.bullet = flag;\r\n * ```\r\n * ```JSON\r\n * {\r\n *   // ...\r\n *   \"xAxes\": [{\r\n *     \"type\": \"DateAxis\",\r\n *     // ...\r\n *     \"axisRanges\": [{\r\n *       \"date\": new Date(2018, 0, 5),\r\n *       \"bullet: {\r\n *         \"type\": \"FlagBullet\",\r\n *         \"label\": {\r\n *           \"text\": \"Hello\"\r\n *         }\r\n *       }\r\n *     }]\r\n *   }]\r\n * }\r\n * ```\r\n *\r\n * @since 4.5.9\r\n * @see {@link IAxisBulletEvents} for a list of available events\r\n * @see {@link IAxisBulletAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class AxisBullet extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties\r\n\t */\r\n\tpublic _properties!: IAxisBulletProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t */\r\n\tpublic _adapter!: IAxisBulletAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisBulletEvents;\r\n\r\n\t/**\r\n\t * Data item.\r\n\t */\r\n\tpublic _dataItem: AxisDataItem;\r\n\r\n\t/**\r\n\t * A referecent to Axis element this fill is applied to.\r\n\t */\r\n\tpublic axis: Axis;\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"AxisBullet\";\r\n\r\n\t\tthis.location = 0.5;\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Relative position within cell/range.\r\n\t *\r\n\t * Value range is from from `0` (beginning) to `1` (end).\r\n\t *\r\n\t * NOTE: `location` is relative to the parent axis range's scope, i.e.\r\n\t * between its `date` and `endDate` for [[DateAxis]], or `value`/`endValue`\r\n\t * ([[ValueAxis]]), or `category`/`endCategory` ([[categoryAxis]]).\r\n\t * \r\n\t * ```TypeScript\r\n\t * let range = dateAxis.axisRanges.create();\r\n\t * range.date = new Date(2018, 0, 5);\r\n\t * range.endDate = new Date(2018, 0, 6);\r\n\t * \r\n\t * let bullet = new am4charts.AxisBullet();\r\n\t * bullet.location = 1;\r\n\t * \r\n\t * let flag = bullet.createChild(am4plugins_bullets.FlagBullet);\r\n\t * flag.label.text = \"Hello\";\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * var range = dateAxis.axisRanges.create();\r\n\t * range.date = new Date(2018, 0, 5);\r\n\t * range.endDate = new Date(2018, 0, 6);\r\n\t * \r\n\t * var bullet = new am4charts.AxisBullet();\r\n\t * bullet.location = 1;\r\n\t * \r\n\t * var flag = bullet.createChild(am4plugins_bullets.FlagBullet);\r\n\t * flag.label.text = \"Hello\";\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"xAxes\": [{\r\n\t *     \"type\": \"DateAxis\",\r\n\t *     // ...\r\n\t *     \"axisRanges\": [{\r\n\t *       \"date\": new Date(2018, 0, 5),\r\n\t *       \"endDate\": new Date(2018, 0, 6),\r\n\t *       \"bullet: {\r\n\t *         \"type\": \"AxisBullet\",\r\n\t *         \"location\": 1,\r\n\t *         \"children\": [{\r\n\t *           \"type\": \"FlagBullet\",\r\n\t *           \"label\": {\r\n\t *             \"text\": \"Hello\"\r\n\t *           }\r\n\t *         }]\r\n\t *       }\r\n\t *     }]\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @default 0.5\r\n\t * @param  value  Location (0-1)\r\n\t */\r\n\tpublic set location(value: AxisItemLocation) {\r\n\t\tthis.setPropertyValue(\"location\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get location(): AxisItemLocation {\r\n\t\treturn this.getPropertyValue(\"location\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setDisabled(value: boolean): boolean {\r\n\t\tlet changed = super.setDisabled(value);\r\n\t\tif (this.axis) {\r\n\t\t\tthis.axis.invalidateDataItems();\r\n\t\t}\r\n\t\treturn changed;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisBullet\"] = AxisBullet;","/**\r\n * Module, defining Axis Renderer for vertical axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRenderer, IAxisRendererProperties, IAxisRendererAdapters, IAxisRendererEvents } from \"./AxisRenderer\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { Axis } from \"./Axis\";\r\nimport { HorizontalCenter } from \"../../core/defs/HorizontalCenter\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { AxisBreak } from \"./AxisBreak\";\r\nimport { WavedLine } from \"../../core/elements/WavedLine\";\r\nimport { WavedRectangle } from \"../../core/elements/WavedRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\r\nimport { AxisBullet } from \"./AxisBullet\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererY]].\r\n */\r\nexport interface IAxisRendererYProperties extends IAxisRendererProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererY]].\r\n */\r\nexport interface IAxisRendererYEvents extends IAxisRendererEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererYAdapters extends IAxisRendererAdapters, IAxisRendererYProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for vertical axis.\r\n *\r\n * @see {@link IAxisRendererYEvents} for a list of available events\r\n * @see {@link IAxisRendererYAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererY extends AxisRenderer {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisRendererYProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisRendererYAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererYEvents;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererY\";\r\n\t\tthis.minGridDistance = 40;\r\n\t\tthis.opposite = false;\r\n\t\tthis.height = percent(100);\r\n\t\tthis.labels.template.verticalCenter = \"middle\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t* @ignore\r\n\t*/\r\n\tpublic setAxis(axis: Axis) {\r\n\t\tsuper.setAxis(axis);\r\n\t\taxis.layout = \"horizontal\";\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic updateGridContainer() {\r\n\t\tlet axis = this.axis;\r\n\t\tif (axis) {\r\n\t\t\tlet gridContainer = this.gridContainer;\r\n\t\t\tgridContainer.y = axis.pixelY;\r\n\t\t\tgridContainer.height = axis.axisLength;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic toAxisPosition(value: number): number {\r\n\t\tlet axis = this.axis;\r\n\t\tif (axis) {\r\n\t\t\tlet inversedPosition = 1 - value;\r\n\t\t\tlet relativePositionSprite = axis.relativePositionSprite;\r\n\r\n\t\t\tlet y = axis.pixelY;\r\n\t\t\tif (relativePositionSprite) {\r\n\t\t\t\ty = $utils.spritePointToSprite({ x: 0, y: this.pixelY }, this.parent, relativePositionSprite).y;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\trelativePositionSprite = axis.parent;\r\n\t\t\t}\r\n\t\t\tif (relativePositionSprite) {\r\n\t\t\t\tlet relativeY = y / relativePositionSprite.innerHeight;\r\n\t\t\t\tlet relativeHeight = axis.axisLength / relativePositionSprite.innerHeight;\r\n\r\n\t\t\t\treturn 1 - (inversedPosition - relativeY) / relativeHeight;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Called when rendered is attached to an Axis, as well as a property of\r\n\t * Axis that might affect the appearance is updated.\r\n\t *\r\n\t * E.g. `axis.opposite`, `axis.inside`, etc.\r\n\t *\r\n\t * This method is called **before** draw, so that any related setting\r\n\t * changed in this method can be changed.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic processRenderer(): void {\r\n\t\tsuper.processRenderer();\r\n\r\n\t\tlet axis = this.axis;\r\n\r\n\t\tif (axis) {\r\n\r\n\t\t\tlet title: Label = axis.title;\r\n\t\t\ttitle.valign = \"middle\";\r\n\r\n\t\t\tif (!(axis.height instanceof Percent)) {\r\n\t\t\t\taxis.height = percent(100);\r\n\t\t\t}\r\n\r\n\t\t\tif (this.opposite) {\r\n\t\t\t\ttitle.rotation = 90;\r\n\t\t\t\tthis.line.toBack();\r\n\t\t\t\ttitle.toFront();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttitle.rotation = -90;\r\n\t\t\t\ttitle.toBack();\r\n\t\t\t\tthis.line.toFront();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates some of the Axis tooltip's visual properties, related to\r\n\t * rendering of the Axis.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateTooltip(): void {\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tif (axis) {\r\n\r\n\t\t\tlet bigNum: number = 2000;\r\n\t\t\tlet bbx: number = 0;\r\n\t\t\tlet bby: number = 0;\r\n\t\t\tlet bbw: number = bigNum;\r\n\t\t\tlet bbh: number = this.axisLength;\r\n\r\n\t\t\t// right\r\n\t\t\tif (this.opposite) {\r\n\t\t\t\tif (this.inside) {\r\n\t\t\t\t\tbbx = - bigNum;\r\n\t\t\t\t\tbbw = bigNum;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// left\r\n\t\t\telse {\r\n\t\t\t\tif (!this.inside) {\r\n\t\t\t\t\tbbx = - bigNum;\r\n\t\t\t\t\tbbw = bigNum;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.axis.updateTooltip(\"horizontal\", { x: bbx, y: bby, width: bbw, height: bbh });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\tlet axis = this.axis;\r\n\t\treturn (axis.measuredHeight - axis.pixelPaddingTop - axis.pixelPaddingBottom) || 0;\r\n\t}\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @param position2  Position (0-1) Position on the second axis\r\n\t * @return Point\r\n\t */\r\n\tpublic positionToPoint(position: number, position2?: number): IPoint {\r\n\t\treturn { x: 0, y: this.positionToCoordinate(position) };\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a point at specific coordinates to a relative position (0-1)\r\n\t * on the axis.\r\n\t *\r\n\t * @param point  Point\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic pointToPosition(point: IPoint) {\r\n\t\treturn this.coordinateToPosition(point.y, point.x);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a coordinate in pixels to a relative position. (0-1)\r\n\t *\r\n\t * @param coordinate  Coordinate (px)\r\n\t * @param coordinate2  Coordinate of a second axis, only needed for complex axes systems, like timeline (px)\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic coordinateToPosition(coordinate: number, coordinate2?:number): number {\r\n\t\tlet position: number;\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tlet axisFullLength = axis.axisFullLength;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tposition = (1 - axis.start) - coordinate / axisFullLength;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tposition = coordinate / axisFullLength + (1 - axis.end);\r\n\t\t}\r\n\t\treturn $math.round(position, 5);\r\n\t}\t\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param startPosition  Starting position\r\n\t * @param endPosition    End position\r\n\t * @return SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number): string {\r\n\t\tlet y1: number = $math.fitToRange(this.positionToCoordinate(startPosition), 0, this.axisLength);\r\n\t\tlet y2: number = $math.fitToRange(this.positionToCoordinate(endPosition), 0, this.axisLength);\r\n\r\n\t\tlet h: number = Math.abs(y2 - y1);\r\n\t\tlet w: number = this.getWidth();\r\n\t\tlet y: number = Math.min(y1, y2);\r\n\t\tlet x: number = 0;\r\n\r\n\t\treturn $path.rectToPath({\r\n\t\t\tx: x,\r\n\t\t\ty: y,\r\n\t\t\twidth: w,\r\n\t\t\theight: h\r\n\t\t}, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\t//\tpoint.y = $utils.spritePointToSprite({ x: 0, y: point.y }, this, this.gridContainer).y;\r\n\r\n\t\tgrid.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: this.getWidth(), y: 0 });\r\n\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param tick         Tick element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * tick.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tlet tickLength = tick.length;\r\n\r\n\t\ttry {\r\n\t\t\t$utils.used(this.axis.title.measuredWidth);\r\n\t\t} catch {\r\n\t\t\t// void\r\n\t\t}\r\n\r\n\t\tpoint.x = $utils.spritePointToSprite({ x: this.line.pixelX, y: 0 }, this.line.parent, this.gridContainer).x;\r\n\r\n\t\tif (!this.opposite) {\r\n\t\t\ttickLength *= (tick.inside ? 1 : -1);\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttickLength *= (tick.inside ? -1 : 1);\r\n\t\t}\r\n\r\n\t\ttick.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: tickLength, y: 0 });\r\n\r\n\t\tthis.positionItem(tick, point);\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine() {\r\n\t\tthis.line.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: this.axisLength });\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet axis: Axis = this.axis;\r\n\r\n\t\tlet w: number = this.getWidth();\r\n\t\tlet h: number = this.axisLength;\r\n\t\tlet y: number = axis.basePoint.y;\r\n\r\n\t\tlet baseGrid: Sprite = this.baseGrid;\r\n\r\n\t\tif (y < - 0.2 || y > h + 0.2) {\r\n\t\t\tbaseGrid.hide(0);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet x = $utils.spritePointToSprite({ x: 0, y: 0 }, this.gridContainer, baseGrid.parent).x;\r\n\r\n\t\t\tbaseGrid.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: w, y: 0 });\r\n\t\t\tbaseGrid.moveTo({ x: x, y: y });\r\n\t\t\tbaseGrid.show(0);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param label        Label element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: AxisLabel, position: number, endPosition: number, location?: number) {\r\n\r\n\t\tif (!$type.hasValue(location)) {\r\n\t\t\tlocation = label.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\t\tlabel.isMeasured = !label.inside;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tlet horizontalCenter: HorizontalCenter;\r\n\t\tlet deltaX = 0;\r\n\t\tlet maxWidth = this.gridContainer.maxWidth;\r\n\r\n\t\tif (this.opposite) {\r\n\t\t\tif (label.inside) {\r\n\t\t\t\thorizontalCenter = \"right\";\r\n\t\t\t\tif (label.align == \"left\") {\r\n\t\t\t\t\tdeltaX = -maxWidth;\r\n\t\t\t\t\thorizontalCenter = \"left\";\r\n\t\t\t\t}\r\n\t\t\t\tif (label.align == \"center\") {\r\n\t\t\t\t\tdeltaX = -maxWidth / 2;\r\n\t\t\t\t\thorizontalCenter = \"middle\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\thorizontalCenter = \"left\";\r\n\t\t\t}\r\n\r\n\t\t\tpoint.x = 0 + deltaX;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (label.inside) {\r\n\t\t\t\thorizontalCenter = \"left\";\r\n\t\t\t\tif (label.align == \"right\") {\r\n\t\t\t\t\tdeltaX = maxWidth;\r\n\t\t\t\t\thorizontalCenter = \"right\";\r\n\t\t\t\t}\r\n\t\t\t\tif (label.align == \"center\") {\r\n\t\t\t\t\tdeltaX = maxWidth / 2;\r\n\t\t\t\t\thorizontalCenter = \"middle\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\thorizontalCenter = \"right\";\r\n\t\t\t}\r\n\r\n\t\t\tpoint.x = this.measuredWidth + deltaX;\r\n\t\t}\r\n\r\n\t\tif (label.rotation == 0) {\r\n\t\t\t// Apply fuzzy logic to verticalCenter only if labels are not rotated\r\n\t\t\tlabel.horizontalCenter = horizontalCenter;\r\n\t\t}\r\n\r\n\t\tthis.positionItem(label, point);\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions an axis break element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axisBreak Break element\r\n\t */\r\n\tpublic updateBreakElement(axisBreak: AxisBreak) {\r\n\t\tsuper.updateBreakElement(axisBreak);\r\n\r\n\t\tlet startLine = axisBreak.startLine;\r\n\t\tlet endLine = axisBreak.endLine;\r\n\t\tlet fillShape = axisBreak.fillShape;\r\n\r\n\t\tlet startPoint: IPoint = axisBreak.startPoint;\r\n\t\tlet endPoint: IPoint = axisBreak.endPoint;\r\n\r\n\t\tlet x1: number = axisBreak.pixelMarginLeft;\r\n\t\tlet x2: number = this.getWidth() - axisBreak.pixelMarginLeft - axisBreak.pixelMarginRight;\r\n\r\n\t\tstartPoint.y = $math.fitToRange(startPoint.y, -1, this.axisLength + 1);\r\n\t\tendPoint.y = $math.fitToRange(endPoint.y, -1, this.axisLength + 1);\r\n\r\n\t\tif (startPoint.y == endPoint.y && (startPoint.y < 0 || startPoint.y > this.axisLength)) {\r\n\t\t\taxisBreak.fillShape.__disabled = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\taxisBreak.fillShape.__disabled = false;\r\n\t\t}\r\n\r\n\t\tlet w = Math.abs(x2 - x1);\r\n\r\n\t\tstartLine.x = x1;\r\n\t\tstartLine.height = 0;\r\n\t\tstartLine.width = w;\r\n\r\n\t\tendLine.x = x1;\r\n\t\tendLine.height = 0;\r\n\t\tendLine.width = w;\r\n\r\n\t\tfillShape.width = w;\r\n\t\tfillShape.height = Math.abs(endPoint.y - startPoint.y);\r\n\t\tfillShape.x = x1;\r\n\t\tfillShape.y = endPoint.y;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates visual elements for and axis break.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axisBreak Axis break\r\n\t */\r\n\tpublic createBreakSprites(axisBreak: AxisBreak) {\r\n\t\taxisBreak.startLine = new WavedLine();\r\n\t\taxisBreak.endLine = new WavedLine();\r\n\t\tlet wavedRectangle: WavedRectangle = new WavedRectangle();\r\n\t\twavedRectangle.setWavedSides(true, false, true, false);\r\n\t\taxisBreak.fillShape = wavedRectangle;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a position on the axis to a coordinate in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Position (0-1)\r\n\t * @return Coordinate (px)\r\n\t */\r\n\tpublic positionToCoordinate(position: number): number {\r\n\t\tlet coordinate: number;\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tlet axisFullLength = axis.axisFullLength;\r\n\r\n\t\tif (!axis.renderer.inversed) {\r\n\t\t\tcoordinate = (axis.end - position) * axisFullLength;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcoordinate = (position - axis.start) * axisFullLength;\r\n\t\t}\r\n\r\n\t\treturn coordinate\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Updates and positions axis bullets.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet       AxisBullet element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateBullet(bullet: Sprite, position: number, endPosition: number): void {\r\n\r\n\t\tlet location = 0.5;\r\n\t\tif (bullet instanceof AxisBullet) {\r\n\t\t\tlocation = bullet.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tpoint.x = $utils.spritePointToSprite({ x: this.line.pixelX, y: 0 }, this.line.parent, this.gridContainer).x;\r\n\r\n\t\tthis.positionItem(bullet, point);\r\n\r\n\t\tthis.toggleVisibility(bullet, position, 0, 1);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererY\"] = AxisRendererY;\r\n\r\n/**\r\n * Add default responsive rules\r\n */\r\n\r\n/**\r\n * Put labels inside plot area.\r\n * Disable first and last labels.\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.widthS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof AxisRendererY) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.inside = true;\r\n\t\t\tstate.properties.maxLabelPosition = 0.9;\r\n\t\t\tstate.properties.minLabelPosition = 0.1;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n\r\n/**\r\n * Disable labels altogather on very small charts\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.widthXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof AxisRendererY) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.disabled = true;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});","/**\r\n * A module which defines functionality related to Value Axis Break.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { AxisBreak, IAxisBreakProperties, IAxisBreakAdapters, IAxisBreakEvents } from \"./AxisBreak\";\r\nimport { ValueAxis } from \"./ValueAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ValueAxisBreak]].\r\n */\r\nexport interface IValueAxisBreakProperties extends IAxisBreakProperties {\r\n\r\n\t/**\r\n\t * Value break starts on.\r\n\t */\r\n\tstartValue?: number;\r\n\r\n\t/**\r\n\t * Value break ends on.\r\n\t */\r\n\tendValue?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[ValueAxisBreak]].\r\n */\r\nexport interface IValueAxisBreakEvents extends IAxisBreakEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ValueAxisBreak]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IValueAxisBreakAdapters extends IAxisBreakAdapters, IValueAxisBreakProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Base class to define \"breaks\" on value axis.\r\n *\r\n * A \"break\" can be used to \"cut out\" specific ranges of the axis scale, e.g.\r\n * when comparing columns with relatively similar values, it would make sense\r\n * to cut out their mid section, so that their tip differences are more\r\n * prominent.\r\n *\r\n * @see {@link IValueAxisBreakEvents} for a list of available events\r\n * @see {@link IValueAxisBreakAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ValueAxisBreak extends AxisBreak {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IValueAxisBreakProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IValueAxisBreakAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IValueAxisBreakEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Axis this break is used for.\r\n\t */\r\n\tpublic _axisType: ValueAxis;\r\n\r\n\t/**\r\n\t * [adjustedStep description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic adjustedStep: number;\r\n\r\n\t/**\r\n\t * [adjustedMin description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic adjustedMin: number;\r\n\r\n\t/**\r\n\t * [adjustedMax description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic adjustedMax: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ValueAxisBreak\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Pixel position of the break's start.\r\n\t *\r\n\t * @return Position (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get startPosition(): number {\r\n\t\tif (this.axis) {\r\n\t\t\treturn this.axis.valueToPosition(this.adjustedStartValue);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Pixel position of the break's end.\r\n\t *\r\n\t * @return Position (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get endPosition(): number {\r\n\t\tif (this.axis) {\r\n\t\t\treturn this.axis.valueToPosition(this.adjustedEndValue);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ValueAxisBreak\"] = ValueAxisBreak;\r\n","/**\r\n * Value Axis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Axis, AxisDataItem, IAxisProperties, IAxisDataFields, IAxisAdapters, IAxisEvents } from \"./Axis\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { AxisRendererY } from \"./AxisRendererY\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { Grid } from \"./Grid\";\r\nimport { IDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { ValueAxisBreak } from \"./ValueAxisBreak\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ValueAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ValueAxisDataItem extends AxisDataItem {\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: ValueAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ValueAxisDataItem\";\r\n\r\n\t\tthis.values.value = {};\r\n\t\tthis.values.endValue = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A data point's numeric value.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set value(value: number) {\r\n\t\tthis.setValue(\"value\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\treturn this.values[\"value\"].value;\r\n\t}\r\n\r\n\t/**\r\n\t * Data point's numeric end value.\r\n\t *\r\n\t * @param value  End value\r\n\t */\r\n\tpublic set endValue(value: number) {\r\n\t\tthis.setValue(\"endValue\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get endValue(): number {\r\n\t\treturn this.values[\"endValue\"].value;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n */\r\nexport interface IMinMaxStep {\r\n\tmin: number;\r\n\tmax: number;\r\n\tstep: number;\r\n}\r\n\r\n/**\r\n * Defines data fields for [[ValueAxis]].\r\n */\r\nexport interface IValueAxisDataFields extends IAxisDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ValueAxis]].\r\n */\r\nexport interface IValueAxisProperties extends IAxisProperties {\r\n\tstrictMinMax?: boolean;\r\n\tlogarithmic?: boolean;\r\n\tmaxPrecision?: number;\r\n\tadjustLabelPrecision?: boolean;\r\n\textraTooltipPrecision?: number;\r\n\textraMin?: number;\r\n\textraMax?: number;\r\n\tkeepSelection?: boolean;\r\n\tincludeRangesInMinMax?: boolean;\r\n\tsyncWithAxis?: ValueAxis;\r\n\ttreatZeroAs?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[ValueAxis]].\r\n */\r\nexport interface IValueAxisEvents extends IAxisEvents {\r\n\r\n\t/**\r\n\t * Invoked when selection/zoom on axis occurs and start/end coordinates\r\n\t * change.\r\n\t */\r\n\tselectionextremeschanged: {};\r\n\r\n\t/**\r\n\t * Invoked when start/end coordinates of the axis change.\r\n\t */\r\n\textremeschanged: {};\r\n\r\n}\r\n\r\n/**\r\n * Defines adapters for [[ValueAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IValueAxisAdapters extends IAxisAdapters, IValueAxisProperties {\r\n\t/**\r\n\t * Applied to the base value of the axis\r\n\t */\r\n\tbaseValue: number,\r\n\r\n\t/**\r\n\t * Applied to the min value of the axis\r\n\t */\r\n\tmin: number\r\n\r\n\t/**\r\n\t * Applied to the max value of the axis\r\n\t */\r\n\tmax: number\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create a value axis for the chart.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Monthly Sales\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Monthly Sales\";\r\n * ```\r\n * ```JSON\r\n * \"yAxes\": [{\r\n *   \"type\": \"ValueAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Monthly Sales\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link IValueAxisEvents} for a list of available Events\r\n * @see {@link IValueAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ValueAxis<T extends AxisRenderer = AxisRenderer> extends Axis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t */\r\n\tpublic _dataFields: IValueAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IValueAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IValueAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t */\r\n\tpublic _dataItem: ValueAxisDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the axis breaks.\r\n\t */\r\n\tpublic _axisBreak: ValueAxisBreak;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IValueAxisEvents;\r\n\r\n\t/**\r\n\t * A reference to chart the axis is for.\r\n\t */\r\n\tpublic chart: XYChart;\r\n\r\n\t/**\r\n\t * A list of Series that are using this Axis.\r\n\t */\r\n\tpublic series: List<XYSeries>;\r\n\r\n\t/**\r\n\t * Minimum value for the axis scale.\r\n\t */\r\n\tprotected _min: number;\r\n\r\n\t/**\r\n\t * Maximum value for the axis scale.\r\n\t */\r\n\tprotected _max: number;\r\n\r\n\t/**\r\n\t * User-defined min value for axis.\r\n\t */\r\n\tprotected _minDefined: number;\r\n\r\n\t/**\r\n\t * User-defined max value for axis.\r\n\t */\r\n\tprotected _maxDefined: number;\r\n\r\n\t/**\r\n\t * [_minAdjusted description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _minAdjusted: number;\r\n\r\n\t/**\r\n\t * [_maxAdjusted description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _maxAdjusted: number;\r\n\r\n\t/**\r\n\t * Min real value. (lowest value of all data points)\r\n\t */\r\n\tprotected _minReal: number;\r\n\r\n\t/**\r\n\t * Max real value. (highest value of all data points)\r\n\t */\r\n\tprotected _maxReal: number;\r\n\r\n\t/**\r\n\t * Min value within current zoom.\r\n\t */\r\n\tprotected _minZoomed: number;\r\n\r\n\t/**\r\n\t * Max value within current zoom.\r\n\t */\r\n\tprotected _maxZoomed: number\r\n\r\n\t/**\r\n\t * [_step description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _step: number;\r\n\r\n\t/**\r\n\t * [_stepDecimalPlaces description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _stepDecimalPlaces: number = 0;\r\n\tprotected _prevStepDecimalPlaces: number = 0;\r\n\tprotected _adjustLabelPrecision: boolean = true;\r\n\r\n\t/**\r\n\t * [_difference description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _difference: number;\r\n\r\n\t/**\r\n\t * Base value for the axis.\r\n\t */\r\n\tprotected _baseValue: number = 0;\r\n\r\n\t/**\r\n\t * [_previousValue description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _previousValue: number;\r\n\r\n\t/**\r\n\t * [_previousPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _previousPoint: IPoint;\r\n\r\n\t/**\r\n\t * Adjusted start in case we have breaks.\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _adjustedStart: number = 0;\r\n\r\n\t/**\r\n\t * Adjusted end in case we have breaks.\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _adjustedEnd: number = 1;\r\n\r\n\tprotected _finalMin: number;\r\n\tprotected _finalMax: number;\r\n\r\n\tprotected _extremesChanged: boolean = false;\r\n\r\n\tprotected _deltaMinMax: number = 1;\r\n\r\n\tprotected _dsc: boolean = false;\r\n\r\n\t/**\r\n\t * Holds reference to a function that accepts a DataItem as parameter.\r\n\t *\r\n\t * It can either return a fill opacity for a fill, or manipulate data item\r\n\t * directly, to create various highlighting scenarios.\r\n\t */\r\n\tpublic fillRule(dataItem: this[\"_dataItem\"]): void {\r\n\t\tlet value = dataItem.value;\r\n\t\tlet axis = dataItem.component;\r\n\t\tif (!dataItem.axisFill.disabled) {\r\n\t\t\t// rounding in left to solve floating point number\r\n\t\t\tif ($math.round(value / axis.step / 2, 5) == Math.round(value / axis.step / 2)) {\r\n\t\t\t\tdataItem.axisFill.__disabled = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataItem.axisFill.__disabled = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * As calculating totals is expensive operation and not often needed, we\r\n\t * don't do it by default.\r\n\t *\r\n\t * In case you use `totalPercent` or `total` in your charts, this must be set\r\n\t * to `true`.\r\n\t *\r\n\t * @default false\r\n\t * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/#100_stacks} For using `calculateTotals` for 100% stacked series.\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-strings/#Placeholders_for_numeric_values} For using `calculateTotals` in labels.\r\n\t */\r\n\tpublic calculateTotals: boolean = false;\r\n\r\n\r\n\tprotected _minMaxAnimation: Animation;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"ValueAxis\";\r\n\r\n\t\t// Set field name\r\n\t\tthis.axisFieldName = \"value\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.setPropertyValue(\"maxZoomFactor\", 1000);\r\n\t\tthis.setPropertyValue(\"extraMin\", 0);\r\n\t\tthis.setPropertyValue(\"extraMax\", 0);\r\n\t\tthis.setPropertyValue(\"strictMinMax\", false);\r\n\t\tthis.setPropertyValue(\"maxPrecision\", Number.MAX_VALUE);\r\n\t\tthis.setPropertyValue(\"adjustLabelPrecision\", true);\r\n\t\tthis.setPropertyValue(\"extraTooltipPrecision\", 0);\r\n\t\tthis.keepSelection = false;\r\n\t\tthis.includeRangesInMinMax = false;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[DataItem]] of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new ValueAxisDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[AxisBreak]] of the appropriate type.\r\n\t *\r\n\t * @return Axis break\r\n\t */\r\n\tprotected createAxisBreak(): this[\"_axisBreak\"] {\r\n\t\treturn new ValueAxisBreak();\r\n\t}\r\n\r\n\t/**\r\n\t * [dataChangeUpdate description]\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic dataChangeUpdate(): void {\r\n\t\tthis.clearCache();\r\n\t\tif (!this.keepSelection) {\r\n\t\t\tif (this._start != 0 || this._end != 1) {\r\n\t\t\t\tthis._start = 0;\r\n\t\t\t\tthis._end = 1;\r\n\t\t\t\tthis.dispatchImmediately(\"startendchanged\");\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this._start != 0) {\r\n\t\t\t\tthis.dispatchImmediately(\"startchanged\");\r\n\t\t\t}\r\n\t\t\tif (this._end != 1) {\r\n\t\t\t\tthis.dispatchImmediately(\"endchanged\");\r\n\r\n\t\t\t}\r\n\t\t\tif (this._start != 0 || this._end != 1) {\r\n\t\t\t\tthis.dispatchImmediately(\"startendchanged\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._maxZoomed = this._maxDefined;\r\n\t\tthis._minZoomed = this._minDefined;\r\n\r\n\t\tthis._maxAdjusted = this._maxDefined;\r\n\t\tthis._minAdjusted = this._minDefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes data items of the related Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic processSeriesDataItems(): void {\r\n\t\t// @todo: add some boolean (maybe autodedect) if we need these calculations or not. this place uses a lot of cpu\r\n\t\tif (this.calculateTotals) {\r\n\t\t\tlet series: XYSeries = this.series.getIndex(0);\r\n\t\t\tlet startIndex: number = series.startIndex;\r\n\r\n\t\t\tif (series.dataItems.length > 0) {\r\n\r\n\t\t\t\tif (startIndex > 0) {\r\n\t\t\t\t\tstartIndex--;\r\n\t\t\t\t}\r\n\t\t\t\tlet endIndex: number = series.endIndex;\r\n\t\t\t\tif (endIndex < series.dataItems.length) {\r\n\t\t\t\t\tendIndex++;\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\t// This has to be `var` in order to avoid garbage collection\r\n\t\t\t\tfor (let i: number = startIndex; i < endIndex; ++i) {\r\n\t\t\t\t\t// This has to be `var` in order to avoid garbage collection\r\n\t\t\t\t\tconst total: { [index: string]: number } = {};\r\n\t\t\t\t\tconst sum: { [index: string]: number } = {};\r\n\r\n\t\t\t\t\tthis.series.each((series) => {\r\n\t\t\t\t\t\tif (!series.excludeFromTotal) {\r\n\t\t\t\t\t\t\tlet dataItem: XYSeriesDataItem = series.dataItems.getIndex(i);\r\n\t\t\t\t\t\t\tif (dataItem) {\r\n\t\t\t\t\t\t\t\t$object.each(dataItem.values, (key) => {\r\n\t\t\t\t\t\t\t\t\tlet value: number = dataItem.values[key].workingValue; // can not use getWorkingValue here!\r\n\r\n\t\t\t\t\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\t\t\t\t\tif (!$type.isNumber(total[key])) {\r\n\t\t\t\t\t\t\t\t\t\t\ttotal[key] = Math.abs(value);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\t\ttotal[key] += Math.abs(value);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tif (!$type.isNumber(sum[key])) {\r\n\t\t\t\t\t\t\t\t\t\t\tsum[key] = value;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\t\tsum[key] += value;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\r\n\r\n\t\t\t\t\tthis.series.each((series) => {\r\n\t\t\t\t\t\tif (!series.excludeFromTotal) {\r\n\t\t\t\t\t\t\tlet dataItem: XYSeriesDataItem = series.dataItems.getIndex(i);\r\n\t\t\t\t\t\t\tif (dataItem) {\r\n\t\t\t\t\t\t\t\t$object.each(dataItem.values, (key) => {\r\n\t\t\t\t\t\t\t\t\tlet value: number = dataItem.values[key].workingValue; // can not use getWorkingValue here!\r\n\t\t\t\t\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\t\t\t\t\tdataItem.setCalculatedValue(key, total[key], \"total\");\r\n\t\t\t\t\t\t\t\t\t\tdataItem.setCalculatedValue(key, 100 * value / total[key], \"totalPercent\");\r\n\t\t\t\t\t\t\t\t\t\tdataItem.setCalculatedValue(key, sum[key], \"sum\");\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates the whole axis. Causes it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tif (this.axisLength <= 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tthis.getMinMax();\r\n\r\n\t\tthis.fixAxisBreaks();\r\n\r\n\t\tthis.calculateZoom();\r\n\r\n\t\tthis.validateAxisElements();\r\n\r\n\t\tthis.validateAxisRanges();\r\n\r\n\t\tthis.validateBreaks();\r\n\r\n\t\tthis.hideUnusedDataItems();\r\n\r\n\t\tthis.renderer.invalidateLayout();\r\n\t\t// hide too close\r\n\t\t//this.hideTooCloseDataItems();\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates all positions, related to axis as per current zoom.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic calculateZoom(): void {\r\n\t\tif ($type.isNumber(this.min) && $type.isNumber(this.max)) {\r\n\t\t\tlet min: number = this.positionToValue(this.start);\r\n\t\t\tlet max: number = this.positionToValue(this.end);\r\n\r\n\t\t\tlet differece: number = this.adjustDifference(min, max);\r\n\t\t\tlet minMaxStep: IMinMaxStep = this.adjustMinMax(min, max, differece, this._gridCount, true);\r\n\r\n\t\t\tlet stepDecimalPlaces = $utils.decimalPlaces(minMaxStep.step);\r\n\t\t\tthis._stepDecimalPlaces = stepDecimalPlaces;\r\n\r\n\t\t\tmin = $math.round(min, stepDecimalPlaces);\r\n\t\t\tmax = $math.round(max, stepDecimalPlaces);\r\n\r\n\t\t\tminMaxStep = this.adjustMinMax(min, max, differece, this._gridCount, true);\r\n\t\t\tlet step = minMaxStep.step;\r\n\r\n\t\t\tif (this.syncWithAxis) {\r\n\t\t\t\tlet calculated = this.getCache(min + \"-\" + max);\r\n\t\t\t\tif ($type.isNumber(calculated)) {\r\n\t\t\t\t\tstep = calculated;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tmin = minMaxStep.min;\r\n\t\t\t\tmax = minMaxStep.max;\r\n\t\t\t}\r\n\r\n\t\t\tif (this._minZoomed != min || this._maxZoomed != max || this._step != step || this._dsc) {\r\n\t\t\t\tthis._dsc = false;\r\n\t\t\t\tthis._minZoomed = min;\r\n\t\t\t\tthis._maxZoomed = max;\r\n\r\n\t\t\t\tthis._step = step;\r\n\t\t\t\tthis.dispatchImmediately(\"selectionextremeschanged\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprotected fixSmallStep(step: number): number {\r\n\t\tif (1 + step == 1) {\r\n\t\t\tstep *= 2;\r\n\t\t\treturn this.fixSmallStep(step);\r\n\t\t}\r\n\t\treturn step;\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic validateAxisElements(): void {\r\n\t\tif ($type.isNumber(this.max) && $type.isNumber(this.min)) {\r\n\t\t\t// first regular items\r\n\t\t\tlet value: number = this.minZoomed - this._step * 2;\r\n\r\n\t\t\tif (!this.logarithmic) {\r\n\t\t\t\tvalue = Math.floor(value / this._step) * this._step;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet differencePower = Math.log(this.max) * Math.LOG10E - Math.log(this.min) * Math.LOG10E;\r\n\t\t\t\tif (differencePower > 1) {\r\n\t\t\t\t\tvalue = Math.pow(10, Math.log(this.min) * Math.LOG10E);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tvalue = Math.floor(this.minZoomed / this._step) * this._step;\r\n\t\t\t\t\tif (value == 0) {\r\n\t\t\t\t\t\tvalue = this.minZoomed;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet maxZoomed = this._maxZoomed + this._step;\r\n\r\n\t\t\tthis.resetIterators();\r\n\r\n\t\t\tlet dataItemsIterator = this._dataItemsIterator;\r\n\r\n\t\t\tif (this._step == 0) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tthis._step = this.fixSmallStep(this._step);\r\n\r\n\t\t\tlet i: number = 0;\r\n\r\n\t\t\tconst precisionChanged = this._prevStepDecimalPlaces != this._stepDecimalPlaces;\r\n\t\t\tthis._prevStepDecimalPlaces = this._stepDecimalPlaces;\r\n\r\n\t\t\twhile (value <= maxZoomed) {\r\n\t\t\t\tlet axisBreak: ValueAxisBreak = <ValueAxisBreak>this.isInBreak(value);\r\n\r\n\t\t\t\tif (!axisBreak) {\r\n\r\n\t\t\t\t\tlet dataItem: this[\"_dataItem\"] = dataItemsIterator.find((x) => x.value === value);\r\n\t\t\t\t\tif (dataItem.__disabled) {\r\n\t\t\t\t\t\tdataItem.__disabled = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//this.processDataItem(dataItem);\r\n\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\tdataItem.axisBreak = undefined;\r\n\r\n\t\t\t\t\tif (dataItem.value != value || precisionChanged) {\r\n\t\t\t\t\t\tdataItem.value = value;\r\n\t\t\t\t\t\tdataItem.text = this.formatLabel(value);\r\n\r\n\t\t\t\t\t\tif (dataItem.label && dataItem.label.invalid) {\r\n\t\t\t\t\t\t\tdataItem.label.validate();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (dataItem.value >= this.min && dataItem.value <= this.max) {\r\n\t\t\t\t\t\t\tif (dataItem.label) {\r\n\t\t\t\t\t\t\t\tif ((this.axisLetter == \"Y\" && dataItem.label.measuredWidth > this.ghostLabel.measuredWidth) || (this.axisLetter == \"X\" && dataItem.label.measuredHeight > this.ghostLabel.measuredHeight)) {\r\n\t\t\t\t\t\t\t\t\tthis.ghostLabel.text = dataItem.label.currentText;\r\n\t\t\t\t\t\t\t\t\tthis.ghostLabel.validate();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.validateDataElement(dataItem);\r\n\t\t\t\t}\r\n\t\t\t\ti++;\r\n\r\n\t\t\t\tlet oldValue = value;\r\n\r\n\t\t\t\tif (!this.logarithmic) {\r\n\t\t\t\t\tvalue += this._step;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlet differencePower = Math.log(this.max) * Math.LOG10E - Math.log(this.min) * Math.LOG10E;\r\n\t\t\t\t\tif (differencePower > 1) {\r\n\t\t\t\t\t\tvalue = Math.pow(10, Math.log(this.min) * Math.LOG10E + i);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tvalue += this._step;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet stepPower = Math.pow(10, Math.floor(Math.log(Math.abs(this._step)) * Math.LOG10E));\r\n\t\t\t\tif (stepPower < 1) {\r\n\t\t\t\t\t// exponent is less then 1 too. Count decimals of exponent\r\n\t\t\t\t\tlet decCount = Math.round(Math.abs(Math.log(Math.abs(stepPower)) * Math.LOG10E)) + 2;\r\n\t\t\t\t\tdecCount = Math.min(13, decCount);\r\n\t\t\t\t\t// round value to avoid floating point issues\r\n\t\t\t\t\tvalue = $math.ceil(value, decCount);\r\n\r\n\t\t\t\t\tif (oldValue == value) {\r\n\t\t\t\t\t\tvalue = maxZoomed;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet axisBreaks = this._axisBreaks;\r\n\t\t\tif (axisBreaks) {\r\n\t\t\t\t// breaks later\r\n\t\t\t\tlet renderer: AxisRenderer = this.renderer;\r\n\r\n\t\t\t\t$iter.each(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\t\tif (axisBreak.breakSize > 0) {\r\n\t\t\t\t\t\t// only add grid if gap is bigger then minGridDistance\r\n\t\t\t\t\t\tif ($math.getDistance(axisBreak.startPoint, axisBreak.endPoint) > renderer.minGridDistance) {\r\n\t\t\t\t\t\t\tlet breakValue: number = axisBreak.adjustedMin;\r\n\r\n\t\t\t\t\t\t\twhile (breakValue <= axisBreak.adjustedMax) {\r\n\t\t\t\t\t\t\t\tif (breakValue >= axisBreak.adjustedStartValue && breakValue <= axisBreak.adjustedEndValue) {\r\n\t\t\t\t\t\t\t\t\tlet dataItem: this[\"_dataItem\"] = dataItemsIterator.find((x) => x.value === breakValue);\r\n\t\t\t\t\t\t\t\t\tif (dataItem.__disabled) {\r\n\t\t\t\t\t\t\t\t\t\tdataItem.__disabled = false;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t//this.processDataItem(dataItem);\r\n\t\t\t\t\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\t\t\t\t\tdataItem.axisBreak = axisBreak;\r\n\t\t\t\t\t\t\t\t\tif (dataItem.value != breakValue) {\r\n\t\t\t\t\t\t\t\t\t\tdataItem.value = breakValue;\r\n\t\t\t\t\t\t\t\t\t\tdataItem.text = this.formatLabel(breakValue);\r\n\t\t\t\t\t\t\t\t\t\tif (dataItem.label && dataItem.label.invalid) {\r\n\t\t\t\t\t\t\t\t\t\t\tdataItem.label.validate();\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tthis.validateDataElement(dataItem);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreakValue += axisBreak.adjustedStep;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates axis data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\t//dataItem.__disabled = false;\r\n\r\n\t\tdataItem.itemIndex = this._axisItemCount;\r\n\t\tthis._axisItemCount++;\r\n\r\n\t\tlet renderer: AxisRenderer = this.renderer;\r\n\t\tlet value: number = dataItem.value;\r\n\t\tlet endValue: number = dataItem.endValue;\r\n\r\n\t\tlet position: number = this.valueToPosition(value);\r\n\t\tdataItem.position = position;\r\n\r\n\t\tlet endPosition: number = position;\r\n\t\tlet fillEndPosition: number = this.valueToPosition(value + this._step);\r\n\r\n\t\tif ($type.isNumber(endValue)) {\r\n\t\t\tendPosition = this.valueToPosition(endValue);\r\n\t\t\tfillEndPosition = endPosition;\r\n\t\t}\r\n\r\n\t\t// this point is needed to calculate distance to satisfy minGridDistance\r\n\t\tdataItem.point = renderer.positionToPoint(position);\r\n\r\n\t\tlet tick: AxisTick = dataItem.tick;\r\n\t\tif (tick && !tick.disabled) {\r\n\t\t\trenderer.updateTickElement(tick, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet grid: Grid = dataItem.grid;\r\n\t\tif (grid && !grid.disabled) {\r\n\t\t\trenderer.updateGridElement(grid, position, endPosition);\r\n\t\t}\r\n\r\n\r\n\t\tlet label: AxisLabel = dataItem.label;\r\n\t\tif (label && !label.disabled) {\r\n\t\t\trenderer.updateLabelElement(label, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet fill: AxisFill = dataItem.axisFill;\r\n\t\tif (fill && !fill.disabled) {\r\n\t\t\trenderer.updateFillElement(fill, position, fillEndPosition);\r\n\t\t\tif (!dataItem.isRange) {\r\n\t\t\t\tthis.fillRule(dataItem);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (dataItem.bullet) {\r\n\t\t\trenderer.updateBullet(dataItem.bullet, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet mask: AxisFill = dataItem.mask;\r\n\t\tif (mask) {\r\n\t\t\trenderer.updateFillElement(mask, position, fillEndPosition);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Formats the value according to axis' own [[NumberFormatter]].\r\n\t *\r\n\t * @param value  Source value\r\n\t * @return Formatted value\r\n\t */\r\n\tpublic formatLabel(value: number): string {\r\n\t\tif (this.adjustLabelPrecision && value != 0) {\r\n\t\t\treturn this.numberFormatter.format(value, undefined, this._stepDecimalPlaces);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.numberFormatter.format(value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Coordinates of the actual axis start.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Base point\r\n\t */\r\n\tpublic get basePoint(): IPoint {\r\n\t\tlet baseValue: number = this.baseValue;\r\n\t\tlet position: number = this.valueToPosition(baseValue);\r\n\t\tlet basePoint: IPoint = this.renderer.positionToPoint(position);\r\n\r\n\t\treturn basePoint;\r\n\t}\r\n\r\n\t/**\r\n\t * A base value.\r\n\t *\r\n\t * This is a threshold value that will divide \"positive\" and \"negative\"\r\n\t * value ranges.\r\n\t *\r\n\t * Other scale-related functionality also depend on base value. E.g. stacks,\r\n\t * value-dependent coloring, etc.\r\n\t *\r\n\t * @param value Base value\r\n\t */\r\n\tpublic set baseValue(value: number) {\r\n\t\tthis._baseValue = value;\r\n\t\tthis.invalidateLayout();\r\n\t\tthis.invalidateSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * @return base value\r\n\t */\r\n\tpublic get baseValue(): number {\r\n\r\n\t\tlet baseValue = this._baseValue;\r\n\t\tif (this.logarithmic) {\r\n\t\t\tbaseValue = this.min;\r\n\t\t}\r\n\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn baseValue;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"baseValue\", baseValue);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a numeric value to relative position on axis\r\n\t *\r\n\t * An alias to `valueToPosition()`.\r\n\t *\r\n\t * @param value  Value\r\n\t * @return Position\r\n\t */\r\n\tpublic anyToPosition(value: number): number {\r\n\t\treturn this.valueToPosition(value);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a numeric value to orientation point (x, y, angle) on axis\r\n\t *\r\n\t * @param value  Value\r\n\t * @return Orientation point\r\n\t */\r\n\tpublic valueToPoint(value: number): IOrientationPoint {\r\n\t\tlet position = this.valueToPosition(value);\r\n\t\tlet point = this.renderer.positionToPoint(position);\r\n\t\tlet angle = this.renderer.positionToAngle(position);\r\n\t\treturn { x: point.x, y: point.y, angle: angle };\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a numeric value to orientation (x, y, angle) point on axis\r\n\t *\r\n\t * @param value  Value\r\n\t * @return Orientation point\r\n\t */\r\n\tpublic anyToPoint(value: number): IOrientationPoint {\r\n\t\treturn this.valueToPoint(value);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a numeric value to relative position on axis.\r\n\t *\r\n\t * @param value  Value\r\n\t * @return relative position\r\n\t */\r\n\tpublic valueToPosition(value: number): number {\r\n\t\tif ($type.isNumber(value)) {\r\n\r\n\t\t\t// todo: think if possible to take previous value and do not go through all previous breaks\r\n\t\t\tlet min: number = this.min;\r\n\t\t\tlet max: number = this.max;\r\n\r\n\t\t\tif ($type.isNumber(min) && $type.isNumber(max)) {\r\n\t\t\t\tlet difference: number = this._difference;\r\n\r\n\t\t\t\tlet axisBreaks = this._axisBreaks;\r\n\t\t\t\tif (axisBreaks && axisBreaks.length > 0) {\r\n\t\t\t\t\t$iter.eachContinue(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\t\t\tlet startValue: number = axisBreak.adjustedStartValue;\r\n\t\t\t\t\t\tlet endValue: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\t\t\t\tif ($type.isNumber(startValue) && $type.isNumber(endValue)) {\r\n\r\n\t\t\t\t\t\t\tif (value < startValue) {\r\n\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif ($math.intersect({ start: startValue, end: endValue }, { start: min, end: max })) { // todo: check this once and set some flag in axisBreak\r\n\t\t\t\t\t\t\t\tstartValue = Math.max(startValue, min);\r\n\t\t\t\t\t\t\t\tendValue = Math.min(endValue, max);\r\n\r\n\t\t\t\t\t\t\t\tlet breakSize: number = axisBreak.breakSize;\r\n\r\n\t\t\t\t\t\t\t\t// value to the right of break end\r\n\t\t\t\t\t\t\t\tif (value > endValue) {\r\n\t\t\t\t\t\t\t\t\tmin += (endValue - startValue) * (1 - breakSize); // todo: maybe this can be done differently?\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// value to the left of break start\r\n\t\t\t\t\t\t\t\telse if (value < startValue) {\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// value within break\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tvalue = startValue + (value - startValue) * breakSize;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet position;\r\n\r\n\t\t\t\tif (!this.logarithmic) {\r\n\t\t\t\t\tposition = (value - min) / difference;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlet treatZeroAs = this.treatZeroAs;\r\n\t\t\t\t\tif ($type.isNumber(treatZeroAs)) {\r\n\t\t\t\t\t\tif (value <= treatZeroAs) {\r\n\t\t\t\t\t\t\tvalue = treatZeroAs;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tposition = (Math.log(value) * Math.LOG10E - Math.log(this.min) * Math.LOG10E) / ((Math.log(this.max) * Math.LOG10E - Math.log(this.min) * Math.LOG10E));\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//position = $math.round(position, 10);\r\n\r\n\t\t\t\treturn position;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * When fontSize of fontFamily changes we need to hard-invalidate all Labels of this container to position them properly.\r\n\t */\r\n\tpublic invalidateLabels() {\r\n\t\tsuper.invalidateLabels();\r\n\t\tif (this.dataItems) {\r\n\t\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\t\tdataItem.value = undefined;\r\n\t\t\t})\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts an relative position to a corresponding value within\r\n\t * axis' scale.\r\n\t *\r\n\t * @param position  Position (px)\r\n\t * @return Value\r\n\t */\r\n\tpublic positionToValue(position: number): number {\r\n\r\n\t\tlet min: number = this.min;\r\n\t\tlet max: number = this.max;\r\n\r\n\t\tif ($type.isNumber(min) && $type.isNumber(max)) {\r\n\r\n\t\t\tlet difference: number = max - min; //no need to adjust!\r\n\r\n\t\t\tlet value: number = null;\r\n\r\n\t\t\tlet axisBreaks = this._axisBreaks;\r\n\r\n\t\t\tif (axisBreaks) {\r\n\t\t\t\t// in case we have some axis breaks\r\n\t\t\t\tif (axisBreaks.length > 0) {\r\n\t\t\t\t\t$iter.eachContinue(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\t\t\tlet breakStartPosition: number = axisBreak.startPosition;\r\n\t\t\t\t\t\tlet breakEndPosition: number = axisBreak.endPosition;\r\n\r\n\t\t\t\t\t\tlet breakStartValue: number = axisBreak.adjustedStartValue;\r\n\t\t\t\t\t\tlet breakEndValue: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\t\t\t\tif ($type.isNumber(breakStartValue) && $type.isNumber(breakEndValue)) {\r\n\r\n\t\t\t\t\t\t\tif (breakStartValue > max) {\r\n\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif ($math.intersect({ start: breakStartValue, end: breakEndValue }, { start: min, end: max })) {\r\n\r\n\t\t\t\t\t\t\t\tbreakStartValue = $math.max(breakStartValue, min);\r\n\t\t\t\t\t\t\t\tbreakEndValue = $math.min(breakEndValue, max);\r\n\r\n\t\t\t\t\t\t\t\tlet breakSize: number = axisBreak.breakSize;\r\n\r\n\t\t\t\t\t\t\t\tdifference -= (breakEndValue - breakStartValue) * (1 - breakSize);\r\n\r\n\t\t\t\t\t\t\t\t// position to the right of break end\r\n\t\t\t\t\t\t\t\tif (position > breakEndPosition) {\r\n\t\t\t\t\t\t\t\t\tmin += (breakEndValue - breakStartValue) * (1 - breakSize);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// position to the left of break start\r\n\t\t\t\t\t\t\t\telse if (position < breakStartPosition) {\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// value within break\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tlet breakPosition: number = (position - breakStartPosition) / (breakEndPosition - breakStartPosition);\r\n\t\t\t\t\t\t\t\t\tvalue = breakStartValue + breakPosition * (breakEndValue - breakStartValue);\r\n\t\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNumber(value)) {\r\n\t\t\t\tif (this.logarithmic) {\r\n\t\t\t\t\tvalue = Math.pow(Math.E, (position * ((Math.log(this.max) * Math.LOG10E - Math.log(this.min) * Math.LOG10E)) + Math.log(this.min) * Math.LOG10E) / Math.LOG10E);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tvalue = position * difference + min;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn value;\r\n\t\t}\r\n\t\t//}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts an X coordinate to a relative value in axis' scale.\r\n\t *\r\n\t * @param x  X (px)\r\n\t * @return Value\r\n\t */\r\n\tpublic xToValue(x: number): number {\r\n\t\treturn this.positionToValue(this.pointToPosition({ x: x, y: 0 }));\r\n\t}\r\n\r\n\t/**\r\n\t * Converts an Y coordinate to a relative value in axis' scale.\r\n\t *\r\n\t * @param y  Y (px)\r\n\t * @return Value\r\n\t */\r\n\tpublic yToValue(y: number): number {\r\n\t\treturn this.positionToValue(this.pointToPosition({ x: 0, y: y }));\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts pixel coordinates to a relative position. (0-1)\r\n\t *\r\n\t * @param point  Coorinates (px)\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic pointToPosition(point: IPoint): number {\r\n\t\tif (this.renderer instanceof AxisRendererY) {\r\n\t\t\treturn 1 - this.renderer.pointToPosition(point);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.renderer.pointToPosition(point);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected animateMinMax(min: number, max: number): Animation {\r\n\t\treturn this.animate([{ property: \"_minAdjusted\", from: this._minAdjusted, to: min }, { property: \"_maxAdjusted\", from: this._maxAdjusted, to: max }], this.rangeChangeDuration, this.rangeChangeEasing);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Calculates smallest and biggest value for the axis scale.\r\n\t * @ignore\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic getMinMax() {\r\n\r\n\t\tthis.updateGridCount();\r\n\r\n\t\tlet min: number = Number.POSITIVE_INFINITY;\r\n\t\tlet max: number = Number.NEGATIVE_INFINITY;\r\n\r\n\t\t// only if min and max are not set from outside, we go through min and max influencers\r\n\t\tif (!$type.isNumber(this._minDefined) || !$type.isNumber(this._maxDefined)) {\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tif (!series.ignoreMinMax) {\r\n\t\t\t\t\t// check min\r\n\t\t\t\t\tlet seriesMin: number = series.min(this);\r\n\t\t\t\t\tif ($type.isNumber(seriesMin) && (seriesMin < min)) {\r\n\t\t\t\t\t\tmin = seriesMin;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// check max\r\n\t\t\t\t\tlet seriesMax: number = series.max(this);\r\n\r\n\t\t\t\t\tif ($type.isNumber(seriesMax) && (seriesMax > max)) {\r\n\t\t\t\t\t\tmax = seriesMax;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tif (this.includeRangesInMinMax) {\r\n\t\t\t\tthis.axisRanges.each((range) => {\r\n\t\t\t\t\tif (!range.ignoreMinMax) {\r\n\t\t\t\t\t\tlet minValue = $math.min(range.value, range.endValue);\r\n\t\t\t\t\t\tlet maxValue = $math.max(range.value, range.endValue);\r\n\r\n\r\n\t\t\t\t\t\tif (minValue < min || !$type.isNumber(min)) {\r\n\t\t\t\t\t\t\tmin = minValue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (maxValue > max || !$type.isNumber(max)) {\r\n\t\t\t\t\t\t\tmax = maxValue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.logarithmic) {\r\n\t\t\tlet treatZeroAs = this.treatZeroAs;\r\n\t\t\tif ($type.isNumber(treatZeroAs)) {\r\n\t\t\t\tif (min <= 0) {\r\n\t\t\t\t\tmin = treatZeroAs;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (min <= 0) {\r\n\t\t\t\tthis.raiseCriticalError(new Error(\"Logarithmic value axis can not have values <= 0.\"), true);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (min == 0 && max == 0) {\r\n\t\t\tmax = 0.9;\r\n\t\t\tmin = -0.9;\r\n\t\t}\r\n\r\n\t\t// if defined from outside\r\n\t\tif ($type.isNumber(this._minDefined)) {\r\n\t\t\tmin = this._minDefined;\r\n\t\t}\r\n\r\n\t\tif ($type.isNumber(this._maxDefined)) {\r\n\t\t\tmax = this._maxDefined;\r\n\t\t}\r\n\r\n\t\tif (this._adapterO) {\r\n\t\t\tmin = this._adapterO.apply(\"min\", min);\r\n\t\t}\r\n\r\n\t\tif (this._adapterO) {\r\n\t\t\tmax = this._adapterO.apply(\"max\", max);\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(min) || !$type.isNumber(max)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis._minReal = min;\r\n\t\tthis._maxReal = max;\r\n\r\n\t\tif (min == Number.POSITIVE_INFINITY) {\r\n\t\t\tmin = undefined;\r\n\t\t}\r\n\t\tif (max == Number.NEGATIVE_INFINITY) {\r\n\t\t\tmax = undefined;\r\n\t\t}\r\n\r\n\t\tlet dif: number = this.adjustDifference(min, max); // previously it was max-min, but not worked well\r\n\r\n\r\n\t\tmin = this.fixMin(min);\r\n\t\tmax = this.fixMax(max);\r\n\r\n\t\t// this happens if starLocation and endLocation are 0.5 and DateAxis has only one date\r\n\t\tif (max - min <= 1 / Math.pow(10, 15)) {\r\n\t\t\tif (max - min != 0) {\r\n\t\t\t\tthis._deltaMinMax = (max - min) / 2;\r\n\t\t\t}\r\n\t\t\telse {\r\n\r\n\t\t\t\t// the number by which we need to raise 10 to get difference\r\n\t\t\t\tlet exponent: number = Math.log(Math.abs(max)) * Math.LOG10E;\r\n\r\n\t\t\t\t// here we find a number which is power of 10 and has the same count of numbers as difference has\r\n\t\t\t\tlet power = Math.pow(10, Math.floor(exponent));\r\n\r\n\t\t\t\t// reduce this number by 10 times\r\n\t\t\t\tpower = power / 10;\r\n\r\n\t\t\t\tthis._deltaMinMax = power;\r\n\t\t\t}\r\n\t\t\tmin -= this._deltaMinMax;\r\n\t\t\tmax += this._deltaMinMax;\r\n\t\t}\r\n\r\n\t\tmin -= (max - min) * this.extraMin;\r\n\t\tmax += (max - min) * this.extraMax;\r\n\r\n\t\tlet strict = this.strictMinMax;\r\n\t\tif ($type.isNumber(this._maxDefined)) {\r\n\t\t\tstrict = true;\r\n\t\t}\r\n\r\n\t\tlet minMaxStep: IMinMaxStep = this.adjustMinMax(min, max, dif, this._gridCount, strict);\r\n\r\n\t\tmin = minMaxStep.min;\r\n\t\tmax = minMaxStep.max;\r\n\r\n\t\tdif = max - min;  //new\r\n\r\n\t\t// do it for the second time (importat!)\r\n\t\tminMaxStep = this.adjustMinMax(min, max, max - min, this._gridCount, true);\r\n\r\n\t\tmin = minMaxStep.min;\r\n\t\tmax = minMaxStep.max;\r\n\r\n\t\t// return min max if strict\r\n\t\tif (this.strictMinMax) {\r\n\t\t\tif ($type.isNumber(this._minDefined)) {\r\n\t\t\t\tmin = this._minDefined;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tmin = this._minReal;\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.isNumber(this._maxDefined)) {\r\n\t\t\t\tmax = this._maxDefined;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tmax = this._maxReal;\r\n\t\t\t}\r\n\r\n\t\t\tif (max - min <= 0.00000001) {\r\n\t\t\t\tmin -= this._deltaMinMax;\r\n\t\t\t\tmax += this._deltaMinMax;\r\n\t\t\t}\r\n\r\n\t\t\tmin -= (max - min) * this.extraMin;\r\n\t\t\tmax += (max - min) * this.extraMax;\r\n\t\t}\r\n\r\n\t\tif (this._adapterO) {\r\n\t\t\tmin = this._adapterO.apply(\"min\", min);\r\n\t\t}\r\n\r\n\t\tif (this._adapterO) {\r\n\t\t\tmax = this._adapterO.apply(\"max\", max);\r\n\t\t}\r\n\r\n\t\tthis._step = minMaxStep.step;\r\n\r\n\t\tif (!$type.isNumber(min) && !$type.isNumber(max)) {\r\n\t\t\tthis.start = 0;\r\n\t\t\tthis.end = 1;\r\n\r\n\t\t\tthis.renderer.labels.each((label) => {\r\n\t\t\t\tlabel.dataItem.text = \"\";\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\t// checking isNumber is good when all series are hidden\r\n\t\tif ((this._minAdjusted != min || this._maxAdjusted != max) && $type.isNumber(min) && $type.isNumber(max)) {\r\n\r\n\t\t\tlet animation = this._minMaxAnimation;\r\n\r\n\t\t\tif (this._extremesChanged && $type.isNumber(this._minAdjusted) && $type.isNumber(this._maxAdjusted) && this.inited) {\r\n\t\t\t\tif ((animation && !animation.isFinished()) && this._finalMax == max && this._finalMin == min) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._finalMin = min;\r\n\t\t\t\t\tthis._finalMax = max;\r\n\r\n\t\t\t\t\tanimation = this.animateMinMax(min, max);\r\n\r\n\t\t\t\t\tif (animation && !animation.isFinished()) {\r\n\t\t\t\t\t\tanimation.events.on(\"animationprogress\", this.validateDataItems, this);\r\n\r\n\t\t\t\t\t\tanimation.events.on(\"animationended\", () => {\r\n\t\t\t\t\t\t\t//this.validateDataItems();\r\n\t\t\t\t\t\t\tthis.series.each((series) => {\r\n\t\t\t\t\t\t\t\tseries.validate();\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\tthis.validateDataItems();\r\n\t\t\t\t\t\t\tthis.handleSelectionExtremesChange();\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tthis._minMaxAnimation = animation;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tthis.series.each((series) => {\r\n\t\t\t\t\t\t\tseries.invalidate();\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.validateDataItems();\r\n\t\t\t\t\tthis.dispatchImmediately(\"extremeschanged\");\r\n\t\t\t\t\tthis.handleSelectionExtremesChange();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif ((animation && !animation.isFinished()) && this._finalMax == max && this._finalMin == min) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._minAdjusted = min;\r\n\t\t\t\t\tthis._maxAdjusted = max;\r\n\r\n\t\t\t\t\tthis._finalMin = min;\r\n\t\t\t\t\tthis._finalMax = max;\r\n\r\n\t\t\t\t\tthis.invalidateDataItems();\r\n\t\t\t\t\tthis.dispatchImmediately(\"extremeschanged\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis._extremesChanged = false;\r\n\t\tthis._difference = this.adjustDifference(min, max);\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts the minimum value.\r\n\t *\r\n\t * This is a placeholder method for extending classes to override.\r\n\t *\r\n\t * For numeric values this does nothing, however for more complex types, like\r\n\t * dates, it may be necessary to adjust.\r\n\t *\r\n\t * @param value  Value\r\n\t * @return Adjusted value\r\n\t */\r\n\tprotected fixMin(value: number): number {\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts the maximum value.\r\n\t *\r\n\t * This is a placeholder method for extending classes to override.\r\n\t *\r\n\t * For numeric values this does nothing, however for more complex types, like\r\n\t * dates, it may be necessary to adjust.\r\n\t *\r\n\t * @param value  Value\r\n\t * @return Adjusted value\r\n\t */\r\n\tprotected fixMax(value: number): number {\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts actual min and max scale values so that the axis starts and ends\r\n\t * at \"nice\" values, unless `strictMinMax` is set.\r\n\t *\r\n\t * The `difference` can be something else than `max - min`, because of the\r\n\t * axis breaks.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param min        [description]\r\n\t * @param max        [description]\r\n\t * @param difference [description]\r\n\t * @param gridCount  [description]\r\n\t * @param strictMode [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic adjustMinMax(min: number, max: number, difference: number, gridCount: number, strictMode?: boolean): IMinMaxStep {\r\n\r\n\t\t// will fail if 0\r\n\t\tif (gridCount <= 1) {\r\n\t\t\tgridCount = 1;\r\n\t\t}\r\n\r\n\t\tgridCount = Math.round(gridCount);\r\n\r\n\t\tlet initialMin: number = min;\r\n\t\tlet initialMax: number = max;\r\n\r\n\t\t// in case min and max is the same, use max\r\n\t\tif (difference === 0) {\r\n\t\t\tdifference = Math.abs(max);\r\n\t\t}\r\n\r\n\t\t// the number by which we need to raise 10 to get difference\r\n\t\tlet exponent: number = Math.log(Math.abs(difference)) * Math.LOG10E;\r\n\r\n\t\t// here we find a number which is power of 10 and has the same count of numbers as difference has\r\n\t\tlet power = Math.pow(10, Math.floor(exponent));\r\n\r\n\t\t// reduce this number by 10 times\r\n\t\tpower = power / 10;\r\n\r\n\t\tlet extra: number = power;\r\n\t\tif (strictMode) {\r\n\t\t\textra = 0;\r\n\t\t}\r\n\r\n\t\tif (!this.logarithmic) {\r\n\r\n\t\t\t// round down min\r\n\t\t\tif (strictMode) {\r\n\t\t\t\tmin = Math.floor(min / power) * power;\r\n\t\t\t\t// round up max\r\n\t\t\t\tmax = Math.ceil(max / power) * power;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tmin = Math.ceil(min / power) * power - extra;\r\n\t\t\t\t// round up max\r\n\t\t\t\tmax = Math.floor(max / power) * power + extra;\r\n\t\t\t}\r\n\r\n\t\t\t// don't let min go below 0 if real min is >= 0\r\n\t\t\tif (min < 0 && initialMin >= 0) {\r\n\t\t\t\tmin = 0;\r\n\t\t\t}\r\n\t\t\t// don't let max go above 0 if real max is <= 0\r\n\t\t\tif (max > 0 && initialMax <= 0) {\r\n\t\t\t\tmax = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (min <= 0) {\r\n\t\t\t\t//throw Error(\"Logarithmic value axis can not have values <= 0.\");\r\n\t\t\t\tmin = this.baseValue;\r\n\t\t\t}\r\n\r\n\t\t\t// @todo: think of a better way or to restrict zooming when no series are selected\r\n\t\t\tif (min == Infinity) {\r\n\t\t\t\tmin = 1;\r\n\t\t\t}\r\n\r\n\t\t\tif (max == -Infinity) {\r\n\t\t\t\tmax = 10;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.strictMinMax) {\r\n\t\t\t\tif (this._minDefined > 0) {\r\n\t\t\t\t\tmin = this._minDefined;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tmin = min;\r\n\t\t\t\t}\r\n\t\t\t\tif (this._maxDefined > 0) {\r\n\t\t\t\t\tmax = max;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tmin = Math.pow(10, Math.floor(Math.log(Math.abs(min)) * Math.LOG10E));\r\n\t\t\t\tmax = Math.pow(10, Math.ceil(Math.log(Math.abs(max)) * Math.LOG10E));\r\n\t\t\t}\r\n\t\t}\r\n\t\t// repeat diff, exponent and power again with rounded values\r\n\t\t//difference = this.adjustDifference(min, max);\r\n\t\t/*\r\n\r\n\t\t\t\tif(min > initialMin){\r\n\t\t\t\t\tmin = initialMin;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(max < initialMax){\r\n\t\t\t\t\tmax = initialMax;\r\n\t\t\t\t}\r\n\t\t*/\r\n\r\n\t\texponent = Math.log(Math.abs(difference)) * Math.LOG10E;\r\n\t\tpower = Math.pow(10, Math.floor(exponent));\r\n\t\tpower = power / 10;\r\n\r\n\t\t// approximate difference between two grid lines\r\n\t\tlet step = Math.ceil((difference / gridCount) / power) * power;\r\n\r\n\t\tlet stepPower = Math.pow(10, Math.floor(Math.log(Math.abs(step)) * Math.LOG10E));\r\n\r\n\t\t// TODO: in v3 I had fixStepE here, ommiting it for a while, need to think about other solution\r\n\t\t// the step should divide by  2, 5, and 10.\r\n\t\tlet stepDivisor: number = Math.ceil(step / stepPower); // number 0 - 10\r\n\r\n\r\n\t\tif (stepDivisor > 5) {\r\n\t\t\tstepDivisor = 10;\r\n\t\t}\r\n\t\telse if (stepDivisor <= 5 && stepDivisor > 2) {\r\n\t\t\tstepDivisor = 5;\r\n\t\t}\r\n\r\n\t\t// now get real step\r\n\t\tstep = Math.ceil(step / (stepPower * stepDivisor)) * stepPower * stepDivisor;\r\n\r\n\t\tif (this.maxPrecision < Number.MAX_VALUE && step != $math.ceil(step, this.maxPrecision)) {\r\n\t\t\tstep = $math.ceil(step, this.maxPrecision);\r\n\t\t}\r\n\r\n\t\tlet decCount: number = 0;\r\n\t\t// in case numbers are smaller than 1\r\n\t\tif (stepPower < 1) {\r\n\t\t\t// exponent is less then 1 too. Count decimals of exponent\r\n\t\t\tdecCount = Math.round(Math.abs(Math.log(Math.abs(stepPower)) * Math.LOG10E)) + 1;\r\n\t\t\t// round step\r\n\t\t\tstep = $math.round(step, decCount);\r\n\t\t}\r\n\t\tif (!this.logarithmic) {\r\n\t\t\t// final min and max\r\n\t\t\tlet minCount = Math.floor(min / step);\r\n\r\n\t\t\tmin = $math.round(step * minCount, decCount);\r\n\r\n\t\t\tlet maxCount: number;\r\n\r\n\t\t\tif (!strictMode) {\r\n\t\t\t\tmaxCount = Math.ceil(max / step);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tmaxCount = Math.floor(max / step);\r\n\t\t\t}\r\n\r\n\t\t\tif (maxCount == minCount) {\r\n\t\t\t\tmaxCount++;\r\n\t\t\t}\r\n\r\n\t\t\tmax = $math.round(step * maxCount, decCount);\r\n\r\n\t\t\tif (max < initialMax) {\r\n\t\t\t\tmax = max + step;\r\n\t\t\t}\r\n\r\n\t\t\tif (min > initialMin) {\r\n\t\t\t\tmin = min - step;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn { min: min, max: max, step: step };\r\n\t}\r\n\r\n\t/**\r\n\t * A minimum value for the axis scale.\r\n\t *\r\n\t * This value might be auto-adjusted by the Axis in order to accomodate the\r\n\t * grid nicely, i.e. plot area is divided by grid in nice equal cells.\r\n\t *\r\n\t * The above might be overridden by `strictMinMax` which will force exact\r\n\t * user-defined min and max values to be used for scale.\r\n\t *\r\n\t * @param value  Min value\r\n\t */\r\n\tpublic set min(value: number | undefined) {\r\n\t\tif (this._minDefined != value) {\r\n\t\t\tthis._minDefined = value;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Min value\r\n\t */\r\n\tpublic get min(): number | undefined {\r\n\t\tlet min = this._minAdjusted;\r\n\t\tif (!$type.isNumber(min)) {\r\n\t\t\tmin = this._minDefined;\r\n\t\t}\r\n\t\treturn min;\r\n\t}\r\n\r\n\t/**\r\n\t * Min value as defined by user's code, not auto-calculated.\r\n\t *\r\n\t * @readonly\r\n\t * @return Min value\r\n\t */\r\n\tpublic get minDefined(): number {\r\n\t\treturn this._minDefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Max value as defined by user's code, not auto-calculated.\r\n\t *\r\n\t * @readonly\r\n\t * @return Man value\r\n\t */\r\n\tpublic get maxDefined(): number {\r\n\t\treturn this._maxDefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Allows relatively adjusting minimum value of the axis' scale.\r\n\t *\r\n\t * The value is relative to the actual range of values currently displayed\r\n\t * on the axis.\r\n\t *\r\n\t * E.g.: 0.5 will mean half of the current range. If we have axis displaying\r\n\t * from 100 to 200, we will now have axis displaying from 50 to 200 because\r\n\t * we asked to expand minimum value by 50% (0.5).\r\n\t *\r\n\t * NOTE: this setting is not compatible with `strictMinMax`.\r\n\t *\r\n\t * @param {number}\r\n\t */\r\n\tpublic set extraMin(value: number) {\r\n\t\tif (this.setPropertyValue(\"extraMin\", value)) {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number}\r\n\t */\r\n\tpublic get extraMin(): number {\r\n\t\treturn this.getPropertyValue(\"extraMin\");\r\n\t}\r\n\r\n\t/**\r\n\t * Allows relatively adjusting maximum value of the axis' scale.\r\n\t *\r\n\t * The value is relative to the actual range of values currently displayed\r\n\t * on the axis.\r\n\t *\r\n\t * E.g.: 0.5 will mean half of the current range. If we have axis displaying\r\n\t * from 100 to 200, we will now have axis displaying from 100 to 250 because\r\n\t * we asked to expand maximum value by 50% (0.5).\r\n\t *\r\n\t * NOTE: this setting is not compatible with `strictMinMax`.\r\n\t *\r\n\t * @param {number}\r\n\t */\r\n\tpublic set extraMax(value: number) {\r\n\t\tif (this.setPropertyValue(\"extraMax\", value)) {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Min multiplier\r\n\t */\r\n\tpublic get extraMax(): number {\r\n\t\treturn this.getPropertyValue(\"extraMax\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Current calculated delta in values between two adjacent grid lines (step).\r\n\t *\r\n\t * This is a read-only value and cannot be used to set actual step.\r\n\t *\r\n\t * @readonly\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/#Setting_the_density_of_the_the_grid_labels} For more information about modifying density of labels\r\n\t * @return [description]\r\n\t */\r\n\tpublic get step(): number {\r\n\t\treturn this._step;\r\n\t}\r\n\r\n\t/**\r\n\t * A maximum value for the axis scale.\r\n\t *\r\n\t * This value might be auto-adjusted by the Axis in order to accomodate the\r\n\t * grid nicely, i.e. plot area is divided by grid in nice equal cells.\r\n\t *\r\n\t * The above might be overridden by `strictMinMax` which will force exact\r\n\t * user-defined min and max values to be used for scale.\r\n\t *\r\n\t * @param value  Max value\r\n\t */\r\n\tpublic set max(value: number | undefined) {\r\n\t\tif (this._maxDefined != value) {\r\n\t\t\tthis._maxDefined = value;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Max value\r\n\t */\r\n\tpublic get max(): number | undefined {\r\n\t\tlet max = this._maxAdjusted;\r\n\t\tif (!$type.isNumber(max)) {\r\n\t\t\tmax = this._maxDefined;\r\n\t\t}\r\n\t\treturn max;\r\n\t}\r\n\r\n\t/**\r\n\t * By default the axis will adjust precision of all numbers to match number\r\n\t * of decimals in all its labels, e.g.: `1.0`, `1.5`, `2.0`.\r\n\t *\r\n\t * To disable set `adjustLabelPrecision` to `false`, to use whatever other\r\n\t * precision or number format settings are set.\r\n\t *\r\n\t * IMPORTANT: This setting will be ignored if your number format uses\r\n\t * modifiers, e.g. `\"#a\"`.\r\n\t *\r\n\t * @default true\r\n\t * @since 4.9.14\r\n\t * @param  value  Adjust precision\r\n\t */\r\n\tpublic set adjustLabelPrecision(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"adjustLabelPrecision\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Adjust precision\r\n\t */\r\n\tpublic get adjustLabelPrecision(): boolean {\r\n\t\treturn this.getPropertyValue(\"adjustLabelPrecision\");\r\n\t}\r\n\r\n\t/**\r\n\t * Used for the Series to register itself as the user of this Axis.\r\n\t *\r\n\t * This will also decorate both the Series and Axis with event handlers, used\r\n\t * to redraw on Axis position/zoom change.\r\n\t *\r\n\t * A disposer for those events is returned, so that they can be disposed\r\n\t * together with Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param series  Series\r\n\t * @return Disposer for events\r\n\t */\r\n\tpublic registerSeries(series: XYSeries): IDisposer {\r\n\t\treturn new MultiDisposer([\r\n\t\t\tsuper.registerSeries(series),\r\n\r\n\t\t\tseries.events.on(\"extremeschanged\", this.handleExtremesChange, this, false),\r\n\t\t\tseries.events.on(\"selectionextremeschanged\", this.handleSelectionExtremesChange, this, false),\r\n\t\t\tthis.events.on(\"extremeschanged\", series.invalidate, series, false)\r\n\t\t]);\r\n\t}\r\n\r\n\t/**\r\n\t * Perform tasks after Axis zoom.\r\n\t */\r\n\tprotected handleSelectionExtremesChange(): void {\r\n\r\n\t\tlet selectionMin: number;\r\n\t\tlet selectionMax: number;\r\n\r\n\t\tlet allHidden: boolean = true;\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (!series.ignoreMinMax && !series.isHidden && !series.outOfRange) {\r\n\r\n\t\t\t\tif (series.visible && !series.isHiding) {\r\n\t\t\t\t\tallHidden = false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet seriesSelectionMin: number = series.selectionMin(this);\r\n\t\t\t\tlet seriesSelectionMax: number = series.selectionMax(this);\r\n\r\n\t\t\t\tif ($type.isNumber(seriesSelectionMin)) {\r\n\t\t\t\t\tif (!$type.isNumber(selectionMin) || (seriesSelectionMin < selectionMin)) {\r\n\t\t\t\t\t\tselectionMin = seriesSelectionMin;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// check max\r\n\t\t\t\tif ($type.isNumber(seriesSelectionMax)) {\r\n\t\t\t\t\tif (!$type.isNumber(selectionMax) || (seriesSelectionMax > selectionMax)) {\r\n\t\t\t\t\t\tselectionMax = seriesSelectionMax;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tif (this.includeRangesInMinMax) {\r\n\t\t\tthis.axisRanges.each((range) => {\r\n\t\t\t\tif (!range.ignoreMinMax) {\r\n\t\t\t\t\tlet minValue = $math.min(range.value, range.endValue);\r\n\t\t\t\t\tlet maxValue = $math.max(range.value, range.endValue);\r\n\r\n\t\t\t\t\tif (minValue < selectionMin) {\r\n\t\t\t\t\t\tselectionMin = minValue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (maxValue > selectionMax) {\r\n\t\t\t\t\t\tselectionMax = maxValue;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\t// this is not good, as if date axis is initially zoomed, selection of y axis is reset to 0, 1 at the end of this method\r\n\t\t//$iter.each(this.series.iterator(), (series) => {\r\n\t\t//\tif (!series.appeared) {\r\n\t\t//\t\tallHidden = true;\r\n\t\t//\t}\r\n\t\t//})\r\n\r\n\t\tif ($type.isNumber(this._minDefined)) {\r\n\t\t\tif (this.strictMinMax) {\r\n\t\t\t\tselectionMin = this._minDefined;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tselectionMin = this.min;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (this.strictMinMax) {\r\n\t\t\tselectionMin = this._minReal;\r\n\t\t}\r\n\r\n\t\tif ($type.isNumber(this._maxDefined)) {\r\n\t\t\tif (this.strictMinMax) {\r\n\t\t\t\tselectionMax = this._maxDefined;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tselectionMax = this.max;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (this.strictMinMax) {\r\n\t\t\tselectionMax = this._maxReal;\r\n\t\t}\r\n\r\n\t\tif (selectionMin == selectionMax) {\r\n\r\n\t\t\tselectionMin -= this._deltaMinMax;\r\n\t\t\tselectionMax += this._deltaMinMax;\r\n\r\n\t\t\tlet minMaxStep2 = this.adjustMinMax(selectionMin, selectionMax, 0, this._gridCount, this.strictMinMax);\r\n\t\t\tselectionMin = minMaxStep2.min;\r\n\t\t\tselectionMax = minMaxStep2.max;\r\n\t\t}\r\n\r\n\t\tlet dif: number = this.adjustDifference(selectionMin, selectionMax);\r\n\t\tlet minMaxStep: IMinMaxStep = this.adjustMinMax(selectionMin, selectionMax, dif, this._gridCount);\r\n\r\n\t\tselectionMin = minMaxStep.min;\r\n\t\tselectionMax = minMaxStep.max;\r\n\r\n\t\tselectionMin -= (selectionMax - selectionMin) * this.extraMin;\r\n\t\tselectionMax += (selectionMax - selectionMin) * this.extraMax;\r\n\r\n\t\tselectionMin = $math.fitToRange(selectionMin, this.min, this.max);\r\n\t\tselectionMax = $math.fitToRange(selectionMax, this.min, this.max);\r\n\r\n\t\t// do it for the second time !important\r\n\t\tdif = this.adjustDifference(selectionMin, selectionMax);\r\n\t\tminMaxStep = this.adjustMinMax(selectionMin, selectionMax, dif, this._gridCount, true);\r\n\r\n\t\tselectionMin = minMaxStep.min;\r\n\t\tselectionMax = minMaxStep.max;\r\n\r\n\t\tif (this.strictMinMax) {\r\n\t\t\tselectionMin = $math.max(selectionMin, this._minDefined);\r\n\t\t\tselectionMax = $math.min(selectionMax, this._maxDefined);\r\n\t\t}\r\n\t\tlet step = minMaxStep.step;\r\n\t\tif (this.syncWithAxis) {\r\n\t\t\tminMaxStep = this.syncAxes(selectionMin, selectionMax, step)\r\n\t\t\tselectionMin = minMaxStep.min;\r\n\t\t\tselectionMax = minMaxStep.max;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t\tstep = minMaxStep.step;\r\n\r\n\t\t// needed because of grouping\r\n\t\tthis._difference = this.adjustDifference(this.min, this.max);\r\n\r\n\t\tlet start: number = this.valueToPosition(selectionMin);\r\n\t\tlet end: number = this.valueToPosition(selectionMax);\r\n\r\n\t\t// in case all series are hidden or hiding, full zoomout\r\n\t\tif (allHidden && !this.syncWithAxis) {\r\n\t\t\tstart = 0;\r\n\t\t\tend = 1;\r\n\t\t}\r\n\r\n\t\tlet declination = 0;\r\n\t\tif (this.syncWithAxis) {\r\n\t\t\tdeclination = 5;\r\n\t\t\tthis.setCache(selectionMin + \"-\" + selectionMax, step);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this._step != step || this._minZoomed != selectionMin || this._maxZoomed != selectionMax) {\r\n\t\t\t\tthis._dsc = true;\r\n\t\t\t}\r\n\t\t\tthis._step = step;\r\n\t\t\tthis._minZoomed = selectionMin;\r\n\t\t\tthis._maxZoomed = selectionMax;\r\n\t\t}\r\n\r\n\r\n\t\tif (!this.keepSelection) {\r\n\t\t\tthis.zoom({ start: start, end: end }, false, false, declination);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether to blindly use exact `min` and `max` values set by user\r\n\t * when generating Axis scale.\r\n\t *\r\n\t * If not set, the Axis might slightly adjust those values to accomodate a\r\n\t * better looking grid.\r\n\t *\r\n\t * NOTE: if `min` and `max` are not set, setting `strictMinMax` to `true`\r\n\t * will result in fixing the scale of the axis to actual lowest and highest\r\n\t * values in the series within currently selected scope.\r\n\t *\r\n\t * @default false\r\n\t * @param value Use exact values?\r\n\t */\r\n\tpublic set strictMinMax(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"strictMinMax\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Use exact values?\r\n\t */\r\n\tpublic get strictMinMax(): boolean {\r\n\t\treturn this.getPropertyValue(\"strictMinMax\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if this axis should use a logarithmic scale.\r\n\t *\r\n\t * Please note that logarithmic axis can **only** accommodate values bigger\r\n\t * than zero.\r\n\t *\r\n\t * Having zero or negative values will result in error and failure of the\r\n\t * whole chart.\r\n\t *\r\n\t * @param value Logarithmic scale?\r\n\t */\r\n\tpublic set logarithmic(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"logarithmic\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tseries.invalidateDataItems();\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Logarithmic scale?\r\n\t */\r\n\tpublic get logarithmic(): boolean {\r\n\t\treturn this.getPropertyValue(\"logarithmic\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if a current selection (zoom) should be kept across data updates.\r\n\t *\r\n\t * If your axis is zoomed while chart's data is updated, the axis will try\r\n\t * to retain the same start and end values.\r\n\t *\r\n\t * You can also use this to initially pre-zoom axis:\r\n\t *\r\n\t * ```TypeScript\r\n\t * axis.keepSelection = true;\r\n\t * axis.start = 0.5;\r\n\t * axis.end = 0.7;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * axis.keepSelection = true;\r\n\t * axis.start = 0.5;\r\n\t * axis.end = 0.7;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   \"xAxes\": [{\r\n\t *     // ...\r\n\t *     \"keepSelection\": true,\r\n\t *     \"start\": 0.5,\r\n\t *     \"end\": 0.7\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * The above will start the chart zoomed from the middle of the actual scope\r\n\t * to 70%.\r\n\t *\r\n\t * @since 4.1.1\r\n\t * @default false\r\n\t * @param  value  Preseve zoom after data update?\r\n\t */\r\n\tpublic set keepSelection(value: boolean) {\r\n\t\tthis.setPropertyValue(\"keepSelection\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Preseve zoom after data update?\r\n\t */\r\n\tpublic get keepSelection(): boolean {\r\n\t\treturn this.getPropertyValue(\"keepSelection\");\r\n\t}\r\n\r\n\t/**\r\n\t * If set to `true`, values of axis ranges will be included when calculating\r\n\t * range of values / scale of the [[ValueAxis]].\r\n\t *\r\n\t * @default false\r\n\t * @since 4.4.9\r\n\t * @param  value  Include ranges?\r\n\t */\r\n\tpublic set includeRangesInMinMax(value: boolean) {\r\n\t\tthis.setPropertyValue(\"includeRangesInMinMax\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Include ranges?\r\n\t */\r\n\tpublic get includeRangesInMinMax(): boolean {\r\n\t\treturn this.getPropertyValue(\"includeRangesInMinMax\");\r\n\t}\r\n\r\n\t/**\r\n\t * Maximum number of decimals to allow when placing grid lines and labels\r\n\t * on axis.\r\n\t *\r\n\t * Set it to `0` (zero) to force integer-only axis labels.\r\n\t *\r\n\t * @param {number}\r\n\t */\r\n\tpublic set maxPrecision(value: number) {\r\n\t\tif (this.setPropertyValue(\"maxPrecision\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return max precision\r\n\t */\r\n\tpublic get maxPrecision(): number {\r\n\t\treturn this.getPropertyValue(\"maxPrecision\");\r\n\t}\r\n\r\n\t/**\r\n\t * This setting allows using bigger precision for numbers displayed in axis\r\n\t * tooltip.\r\n\t *\r\n\t * Please note that this setting indicates additional decimal places to\r\n\t * automatically-calculated axis number precision.\r\n\t *\r\n\t * So if your axis displays numbers like 0.1, 0.2, etc. (one decimal place),\r\n\t * and you set `extraTooltipPrecision = 1`, tooltips will display numbers\r\n\t * like 0.12, 0.25, etc. (two decimal places).\r\n\t *\r\n\t * @default 0\r\n\t * @since 4.8.3\r\n\t * @param  value  Extra decimals\r\n\t */\r\n\tpublic set extraTooltipPrecision(value: number) {\r\n\t\tif (this.setPropertyValue(\"extraTooltipPrecision\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Extra decimals\r\n\t */\r\n\tpublic get extraTooltipPrecision(): number {\r\n\t\treturn this.getPropertyValue(\"extraTooltipPrecision\");\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates axis data items when series extremes change\r\n\t */\r\n\tprotected handleExtremesChange() {\r\n\t\tthis._extremesChanged = true;\r\n\t\tthis.getMinMax();\r\n\r\n\t\tif (this.ghostLabel) {\r\n\t\t\tlet mw = 0;\r\n\r\n\t\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\t\tif (dataItem.label && dataItem.label.pixelWidth > mw) {\r\n\t\t\t\t\tthis.ghostLabel.text = dataItem.label.currentText;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative position on axis for series' data item's value.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       Data field to get value from\r\n\t * @param location  Location (0-1)\r\n\t * @param stackKey  ?\r\n\t * @return X coordinate (px)\r\n\t */\r\n\tpublic getX(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\treturn this.renderer.positionToPoint(this.getPositionX(dataItem, key, location, stackKey, range)).x;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the X coordinate for series' data item's value.\r\n\t *\r\n\t * @since 4.5.14\r\n\t * @param  dataItem  Data item\r\n\t * @param  key       Data field to get value from\r\n\t * @param  location  Location (0-1)\r\n\t * @param  stackKey  ?\r\n\t * @return           Relative position\r\n\t */\r\n\tpublic getPositionX(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\tlet value: number = dataItem.getWorkingValue(key);\r\n\t\tif (!$type.hasValue(stackKey)) {\r\n\t\t\tstackKey = \"valueX\";\r\n\t\t}\r\n\t\tlet stack: number = dataItem.getValue(stackKey, \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\r\n\t\t\tif (this.logarithmic) {\r\n\t\t\t\tif (stack > 0) {\r\n\t\t\t\t\tvalue = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet position = this.valueToPosition(value + stack);\r\n\r\n\t\tif (range) {\r\n\t\t\tposition = $math.fitToRange(position, range.start, range.end);\r\n\t\t}\r\n\r\n\t\treturn position;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the Y coordinate for series' data item's value.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       Data field to get value from\r\n\t * @param location  Location (0-1)\r\n\t * @param stackKey  Stack ID\r\n\t * @return Y coordinate (px)\r\n\t */\r\n\tpublic getY(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\treturn this.renderer.positionToPoint(this.getPositionY(dataItem, key, location, stackKey, range)).y;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative position on axis for series' data item's value.\r\n\t *\r\n\t * @since 4.5.14\r\n\t * @param  dataItem  Data item\r\n\t * @param  key       Data field to get value from\r\n\t * @param  location  Location (0-1)\r\n\t * @param  stackKey  Stack ID\r\n\t * @return           Relative position\r\n\t */\r\n\tpublic getPositionY(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\tlet value: number = dataItem.getWorkingValue(key);\r\n\r\n\t\tif (!$type.hasValue(stackKey)) {\r\n\t\t\tstackKey = \"valueY\";\r\n\t\t}\r\n\r\n\t\tlet stack: number = dataItem.getValue(stackKey, \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\r\n\t\t\tif (this.logarithmic) {\r\n\t\t\t\tif (stack > 0) {\r\n\t\t\t\t\tvalue = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\tlet position = this.valueToPosition(value + stack);\r\n\t\tif (range) {\r\n\t\t\tposition = $math.fitToRange(position, range.start, range.end);\r\n\t\t}\r\n\r\n\t\treturn position;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an angle for series data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       Data field to get value from\r\n\t * @param location  Location (0-1)\r\n\t * @param stackKey  Stack ID\r\n\t * @param range Range to fit in\r\n\t * @return Angle\r\n\t */\r\n\tpublic getAngle(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\tlet value: number = dataItem.getWorkingValue(key);\r\n\t\tlet stack: number = dataItem.getValue(stackKey, \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\tlet position = this.valueToPosition(value + stack);\r\n\t\tif (range) {\r\n\t\t\tposition = $math.fitToRange(position, range.start, range.end);\r\n\t\t}\r\n\r\n\t\treturn this.positionToAngle(position);\r\n\t}\r\n\r\n\t/**\r\n\t * [getAnyRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param start     [description]\r\n\t * @param end       [description]\r\n\t * @param location  [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getAnyRangePath(start: number, end: number, location?: number): string {\r\n\t\tlet startPosition: number = this.valueToPosition(start);\r\n\t\tlet endPosition: number = this.valueToPosition(end);\r\n\r\n\t\treturn this.getPositionRangePath(startPosition, endPosition); // Base class (Axis) gets range shape from AxisRenderer\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a axis tooltip, based on specific position within\r\n\t * axis.\r\n\t *\r\n\t * The label will be formatted as per [[NumberFormatter]] set for the whole\r\n\t * chart, or explicitly for this Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Position (px)\r\n\t * @return Label (numeric value)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet value: number = $math.round(this.positionToValue(position), this._stepDecimalPlaces + this.extraTooltipPrecision);\r\n\t\tlet valueStr = this.tooltip.numberFormatter.format(value);\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn valueStr;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"getTooltipText\", valueStr);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axis to specific values.\r\n\t *\r\n\t * @param startValue      Start value\r\n\t * @param endValue        End value\r\n\t * @param skipRangeEvent  Do not invoke events\r\n\t * @param instantly       Do not play zoom animations\r\n\t */\r\n\tpublic zoomToValues(startValue: number, endValue: number, skipRangeEvent?: boolean, instantly?: boolean): void {\r\n\t\tlet start: number = (startValue - this.min) / (this.max - this.min);\r\n\t\tlet end: number = (endValue - this.min) / (this.max - this.min);\r\n\r\n\t\tthis.zoom({ start: start, end: end }, skipRangeEvent, instantly);\r\n\t}\r\n\r\n\t/**\r\n\t * A smallest value in axis scale within current zoom.\r\n\t *\r\n\t * @return Min zoom value\r\n\t */\r\n\tpublic get minZoomed(): number {\r\n\t\tif (!this.syncWithAxis) {\r\n\t\t\treturn $math.max(this.min, this._minZoomed);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._minZoomed\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A biggest value in axis scale within current zoom.\r\n\t * @return [description]\r\n\t */\r\n\tpublic get maxZoomed(): number {\r\n\t\tif (!this.syncWithAxis) {\r\n\t\t\treturn $math.min(this.max, this._maxZoomed);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._maxZoomed;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates positioning of Axis breaks after something changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic fixAxisBreaks(): void {\r\n\r\n\t\tsuper.fixAxisBreaks();\r\n\t\tlet axisBreaks = this._axisBreaks;\r\n\t\tif (axisBreaks && axisBreaks.length > 0) {\r\n\t\t\t// process breaks\r\n\t\t\taxisBreaks.each((axisBreak) => {\r\n\t\t\t\tlet startValue: number = axisBreak.adjustedStartValue;\r\n\t\t\t\tlet endValue: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\t\t// break difference\r\n\t\t\t\tlet axisBreakDif: number = endValue - startValue;\r\n\t\t\t\tlet axisBreakGridCount: number = Math.ceil(axisBreakDif * axisBreak.breakSize) * this._gridCount / (this.max - this.min);\r\n\r\n\t\t\t\t// calculate min, max and step for axis break\r\n\t\t\t\tlet breakMinMaxStep = this.adjustMinMax(startValue, endValue, axisBreakDif, axisBreakGridCount, true);\r\n\r\n\t\t\t\taxisBreak.adjustedStep = breakMinMaxStep.step;\r\n\t\t\t\taxisBreak.adjustedMin = breakMinMaxStep.min;\r\n\t\t\t\taxisBreak.adjustedMax = breakMinMaxStep.max;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tthis._difference = this.adjustDifference(this.min, this.max);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns value based on position.\r\n\t *\r\n\t * Please note that `position` represents position within axis which may be\r\n\t * zoomed and not correspond to Cursor's `position`.\r\n\t *\r\n\t * To convert Cursor's `position` to Axis' `position` use `toAxisPosition()` method.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/tutorials/tracking-cursors-position-via-api/#Tracking_Cursor_s_position} For more information about cursor tracking.\r\n\t * @param position  Relative position on axis (0-1)\r\n\t * @return Position label\r\n\t */\r\n\tpublic getPositionLabel(position: number): string {\r\n\t\tlet value: number = this.positionToValue(position);\r\n\t\treturn this.numberFormatter.format(value);\r\n\t}\r\n\r\n\t/**\r\n\t * Shows Axis tooltip at specific value\r\n\t *\r\n\t * @param value Value\r\n\t */\r\n\tpublic showTooltipAt(value: number) {\r\n\t\tthis.showTooltipAtPosition(this.valueToPosition(value));\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties and related data from a different instance of Axis.\r\n\t *\r\n\t * @param source Source Axis\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.min = source.min;\r\n\t\tthis.max = source.max;\r\n\t\tthis.calculateTotals = source.calculateTotals;\r\n\t\tthis._baseValue = source.baseValue;\r\n\t}\r\n\r\n\t/**\r\n\t * Enables syncing of grid with another axis.\r\n\t *\r\n\t * To enable, set to a reference of the other `ValueAxis`. This axis will try\r\n\t * to maintain its scale in such way that its grid matches target axis grid.\r\n\t *\r\n\t * IMPORTANT #1: At this stage it's an experimental feature. Use it at your\r\n\t * own risk, as it may not work in 100% of the scenarios.\r\n\t *\r\n\t * IMPORTANT #2: `syncWithAxis` is not compatible with `strictMinMax` and\r\n\t * `sequencedInterpolation` settings.\r\n\t * \r\n\t * IMPORTANT #3: `syncWithAxis` is not compatible with scrollbars. Make sure\r\n\t * you do not add a scrollbar in the same direction as synced axes. For\r\n\t * example, if you have vertical synced axes, do not add `scrollbarY` on\r\n\t * your chart. It will create anomalies when used.\r\n\t *\r\n\t * IMPORTANT #4: `syncWithAxis` is not compatible with `XYCursor` if it has\r\n\t * its `behavior` set to either `zoomY` or `zoomXY`.\r\n\t *\r\n\t * @since 4.8.1\r\n\t * @param  axis  Target axis\r\n\t */\r\n\tpublic set syncWithAxis(axis: ValueAxis) {\r\n\t\tif (this.setPropertyValue(\"syncWithAxis\", axis, true)) {\r\n\t\t\tif (axis) {\r\n\t\t\t\tthis._disposers.push(axis.events.on(\"extremeschanged\", this.handleSelectionExtremesChange, this, false));\r\n\t\t\t\tthis._disposers.push(axis.events.on(\"selectionextremeschanged\", this.handleSelectionExtremesChange, this, false));\r\n\t\t\t\tthis._disposers.push(axis.events.on(\"startendchanged\", this.handleSelectionExtremesChange, this, false));\r\n\t\t\t\tthis.events.on(\"shown\", this.handleSelectionExtremesChange, this, false);\r\n\t\t\t\tthis.events.on(\"maxsizechanged\", () => {\r\n\t\t\t\t\tthis.clearCache();\r\n\t\t\t\t\tthis._disposers.push(registry.events.once(\"exitframe\", () => {\r\n\t\t\t\t\t\tthis.handleSelectionExtremesChange();\r\n\t\t\t\t\t}))\r\n\t\t\t\t}, this, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Target axis\r\n\t */\r\n\tpublic get syncWithAxis(): ValueAxis {\r\n\t\treturn this.getPropertyValue(\"syncWithAxis\");\r\n\t}\r\n\r\n\t/**\r\n\t * If set, zero values will be treated as this value.\r\n\t *\r\n\t * It is useful if you need to use data with zero-values on a logarithmic\r\n\t * axis scale.\r\n\t *\r\n\t * @since 4.9.34\r\n\t * @param  value  Zero replacement value\r\n\t */\r\n\tpublic set treatZeroAs(value: number) {\r\n\t\tthis.setPropertyValue(\"treatZeroAs\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Zero replacement value\r\n\t */\r\n\tpublic get treatZeroAs(): number {\r\n\t\treturn this.getPropertyValue(\"treatZeroAs\");\r\n\t}\r\n\r\n\t/**\r\n\t * Syncs with a target axis.\r\n\t *\r\n\t * @param  min  Min\r\n\t * @param  max  Max\r\n\t * @param  step Step\r\n\t */\r\n\tprotected syncAxes(min: number, max: number, step: number) {\r\n\t\tlet axis = this.syncWithAxis;\r\n\t\tif (axis) {\r\n\r\n\t\t\tif (!$type.isNumber(min)) {\r\n\t\t\t\tmin = this.min;\r\n\t\t\t}\r\n\t\t\tif (!$type.isNumber(max)) {\r\n\t\t\t\tmax = this.max;\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNumber(step)) {\r\n\t\t\t\tstep = this._step;\r\n\t\t\t}\r\n\r\n\t\t\tlet count: number = Math.round((axis.maxZoomed - axis.minZoomed) / axis.step);\r\n\t\t\tlet currentCount = Math.round((max - min) / step);\r\n\r\n\t\t\tif ($type.isNumber(count) && $type.isNumber(currentCount)) {\r\n\t\t\t\tlet synced = false;\r\n\t\t\t\tlet c = 0\r\n\t\t\t\tlet diff = (max - min) * 0.01;\r\n\t\t\t\tlet omin = min;\r\n\t\t\t\tlet omax = max;\r\n\t\t\t\tlet ostep = step;\r\n\r\n\t\t\t\twhile (synced != true) {\r\n\t\t\t\t\tsynced = this.checkSync(omin, omax, ostep, count);\r\n\t\t\t\t\tc++;\r\n\t\t\t\t\tif (c > 1000) {\r\n\t\t\t\t\t\tsynced = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!synced) {\r\n\t\t\t\t\t\t//omin = min - diff * c;\r\n\r\n\t\t\t\t\t\tif (c / 3 == Math.round(c / 3)) {\r\n\t\t\t\t\t\t\tomin = min - diff * c;\r\n\t\t\t\t\t\t\tif (min >= 0 && omin < 0) {\r\n\t\t\t\t\t\t\t\tomin = 0;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tomax = max + diff * c;\r\n\t\t\t\t\t\t\tif (omax <= 0 && omax > 0) {\r\n\t\t\t\t\t\t\t\tomax = 0;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlet minMaxStep = this.adjustMinMax(omin, omax, omax - omin, this._gridCount, true);\r\n\t\t\t\t\t\tomin = minMaxStep.min;\r\n\t\t\t\t\t\tomax = minMaxStep.max;\r\n\t\t\t\t\t\tostep = minMaxStep.step;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tmin = omin;\r\n\t\t\t\t\t\tmax = omax;\r\n\t\t\t\t\t\tstep = ostep;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\treturn { min: min, max: max, step: step };\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if axis needs to be resunced with some other axis.\r\n\t */\r\n\tprotected checkSync(min: number, max: number, step: number, count: number): boolean {\r\n\t\tlet currentCount = (max - min) / step;\r\n\t\tfor (let i = 1; i < count; i++) {\r\n\t\t\tif ($math.round(currentCount / i, 1) == count || currentCount * i == count) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.syncWithAxis) && $type.isString(config.syncWithAxis)) {\r\n\t\t\t\tif (this.map.hasKey(config.syncWithAxis)) {\r\n\t\t\t\t\tconfig.syncWithAxis = this.map.getKey(config.syncWithAxis);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.processingErrors.push(\"[ValueAxis] No axis with id \\\"\" + config.syncWithAxis + \"\\\" found for `syncWithAxis`\");\r\n\t\t\t\t\tdelete config.xAxis;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ValueAxis\"] = ValueAxis;\r\nregistry.registeredClasses[\"ValueAxisDataItem\"] = ValueAxisDataItem;\r\n","/**\r\n * DateAxisBreak includes functionality to add breaks on a [[DateAxis]].\r\n *\r\n * A \"break\" can be used to \"cut out\" specific ranges of the axis scale, e.g.\r\n * weekends and holidays out of the Date-based axis.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { ValueAxisBreak, IValueAxisBreakProperties, IValueAxisBreakAdapters, IValueAxisBreakEvents } from \"./ValueAxisBreak\";\r\nimport { DateAxis } from \"./DateAxis\";\r\nimport { ITimeInterval } from \"../../core/defs/ITimeInterval\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[DateAxisBreak]].\r\n */\r\nexport interface IDateAxisBreakProperties extends IValueAxisBreakProperties {\r\n\r\n\t/**\r\n\t * A `Date` break starts on.\r\n\t */\r\n\tstartDate?: Date;\r\n\r\n\t/**\r\n\t * A `Date` break ends on.\r\n\t */\r\n\tendDate?: Date;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[DateAxisBreak]]\r\n */\r\nexport interface IDateAxisBreakEvents extends IValueAxisBreakEvents { }\r\n\r\n/**\r\n * Defines adapters for [[DateAxisBreak]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IDateAxisBreakAdapters extends IValueAxisBreakAdapters, IDateAxisBreakProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to define breaks for [[DateAxis]].\r\n *\r\n * A \"break\" can be used to \"cut out\" specific ranges of the axis scale, e.g.\r\n * weekends and holidays out of the Date-based axis.\r\n *\r\n * @see {@link IDateAxisBreakEvents} for a list of available events\r\n * @see {@link IDateAxisBreakAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class DateAxisBreak extends ValueAxisBreak {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IDateAxisBreakProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IDateAxisBreakAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IDateAxisBreakEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Axis this break is used for.\r\n\t */\r\n\tpublic _axisType: DateAxis;\r\n\r\n\t/**\r\n\t * [gridInterval description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic gridInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * [gridDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic gridDate: Date;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxisBreak\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting date for the break.\r\n\t *\r\n\t * @param value Start date\r\n\t */\r\n\tpublic set startDate(value: Date) {\r\n\t\tif (this.setPropertyValue(\"startDate\", value)) {\r\n\t\t\tthis.startValue = value.getTime();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start date\r\n\t */\r\n\tpublic get startDate(): Date {\r\n\t\treturn this.getPropertyValue(\"startDate\");\r\n\t}\r\n\r\n\t/**\r\n\t * Ending date for the break.\r\n\t *\r\n\t * @param value End date\r\n\t */\r\n\tpublic set endDate(value: Date) {\r\n\t\tif (this.setPropertyValue(\"endDate\", value)) {\r\n\t\t\tthis.endValue = value.getTime();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return End date\r\n\t */\r\n\tpublic get endDate(): Date {\r\n\t\treturn this.getPropertyValue(\"endDate\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DateAxisBreak\"] = DateAxisBreak;\r\n","/**\r\n * DateAxis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ValueAxis, ValueAxisDataItem, IValueAxisProperties, IValueAxisDataFields, IValueAxisAdapters, IValueAxisEvents } from \"./ValueAxis\";\r\nimport { AxisItemLocation } from \"./Axis\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { Grid } from \"./Grid\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { LineSeriesDataItem } from \"../series/LineSeries\";\r\nimport { TimeUnit } from \"../../core/defs/TimeUnit\";\r\nimport { ITimeInterval } from \"../../core/defs/ITimeInterval\";\r\nimport { IMinMaxStep } from \"./ValueAxis\";\r\nimport { DateAxisBreak } from \"./DateAxisBreak\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $time from \"../../core/utils/Time\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\nimport { DateFormatter } from \"../../core/formatters/DateFormatter\";\r\nimport { OrderedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data item for [[DateAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class DateAxisDataItem extends ValueAxisDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: DateAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxisDataItem\";\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.values.date = {};\r\n\t\tthis.values.endDate = {};\r\n\t}\r\n\r\n\t/**\r\n\t * Date position of the data item.\r\n\t *\r\n\t * @param date  Date\r\n\t */\r\n\tpublic set date(date: Date) {\r\n\t\tthis.setDate(\"date\", date);\r\n\t\tthis.value = date.getTime();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Date\r\n\t */\r\n\tpublic get date(): Date {\r\n\t\treturn this.dates[\"date\"];\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * End date for data item.\r\n\t *\r\n\t * @param date End date\r\n\t */\r\n\tpublic set endDate(date: Date) {\r\n\t\tthis.setDate(\"endDate\", date);\r\n\t\tthis.endValue = date.getTime();\r\n\t}\r\n\r\n\t/**\r\n\t * @return End date\r\n\t */\r\n\tpublic get endDate(): Date {\r\n\t\treturn this.dates[\"endDate\"];\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[DateAxis]].\r\n */\r\nexport interface IDateAxisDataFields extends IValueAxisDataFields {\r\n\r\n\t/**\r\n\t * Date.\r\n\t */\r\n\tdate?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[DateAxis]].\r\n */\r\nexport interface IDateAxisProperties extends IValueAxisProperties {\r\n\r\n\t/**\r\n\t * If enabled, axis will automatically collapse empty (without data points)\r\n\t * periods of time, i.e. weekends.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tskipEmptyPeriods?: boolean;\r\n\r\n\t/**\r\n\t * Use `periodChangeDateFormats` to apply different formats to the first\r\n\t * label in bigger time unit.\r\n\t *\r\n\t * @default true\r\n\t * @param value  Use different format for period beginning?\r\n\t */\r\n\tmarkUnitChange?: boolean;\r\n\r\n\t/**\r\n\t * Should the nearest tooltip be shown if no data item is found on the\r\n\t * current cursor position.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tsnapTooltip?: boolean;\r\n\r\n\t/**\r\n\t * A special date format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t */\r\n\ttooltipDateFormat?: string | Intl.DateTimeFormatOptions;\r\n\r\n\t/**\r\n\t * Indicates if data should be aggregated to composide data items if there\r\n\t * are more data items in selected range than `groupCount`.\r\n\t *\r\n\t * @default false\r\n\t * @since 4.7.0\r\n\t */\r\n\tgroupData?: boolean;\r\n\r\n\t/**\r\n\t * Indicates threshold of data items in selected range at which to start\r\n\t * aggregating data items if `groupData = true`.\r\n\t * \r\n\t * @default 200\r\n\t * @since 4.7.0\r\n\t */\r\n\tgroupCount?: number;\r\n\r\n\t/**\r\n\t * Disables automatic selection of data grouping intervals and always uses\r\n\t * `groupInterval` if set. Works only if `groupData = true`.\r\n\t * \r\n\t * @since 4.9.24\r\n\t */\r\n\tgroupInterval?: ITimeInterval;\r\n\r\n\t/**\r\n\t * If set will recalculate all timestamps in data by applying specific offset\r\n\t * in minutes.\r\n\t *\r\n\t * IMPORTANT: do not set `timezoneOffset` on both `DateAxis` and `dateFormatter`. It\r\n\t * will skew your results by applying offset twice.\r\n\t *\r\n\t * @since 4.8.5\r\n\t */\r\n\ttimezoneOffset?: number;\r\n\r\n\t/**\r\n\t * If set will recalculate all timestamps in data to specific named timezone,\r\n\t * e.g. `\"America/Vancouver\"`, `\"Australia/Sydney\"`, `\"UTC\"`, etc.\r\n\t *\r\n\t * IMPORTANT: do not set `timezone` on both `DateAxis` and `dateFormatter`. It\r\n\t * will skew your results by applying timezone twice.\r\n\t * \r\n\t * @since 4.10.1\r\n\t */\r\n\ttimezone?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[DateAxis]].\r\n */\r\nexport interface IDateAxisEvents extends IValueAxisEvents {\r\n\t/**\r\n\t * Invoked when data grouping is on and grouping period is changed. You can find our the period via dateAxis.currentDataSetId property.\r\n\t */\r\n\tgroupperiodchanged: IDateAxisEvents;\r\n}\r\n\r\n/**\r\n * Defines adapters for [[DateAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IDateAxisAdapters extends IValueAxisAdapters, IDateAxisProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create a date/time-based axis for the chart.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Time\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Time\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"DateAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Time\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link IDateAxisEvents} for a list of available Events\r\n * @see {@link IDateAxisAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/date-axis/} got `DateAxis` documention\r\n * @important\r\n */\r\nexport class DateAxis<T extends AxisRenderer = AxisRenderer> extends ValueAxis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t */\r\n\tpublic _dataFields: IDateAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IDateAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IDateAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IDateAxisEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t */\r\n\tpublic _dataItem: DateAxisDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the axis breaks.\r\n\t */\r\n\tpublic _axisBreak: DateAxisBreak;\r\n\r\n\tprotected _gapBreaks: boolean = false;\r\n\r\n\t/**\r\n\t * A list of date/time intervals for Date axis.\r\n\t *\r\n\t * This define various granularities available for the axis. For example\r\n\t * if you have an axis spanning an hour, and space for 6 grid lines / labels\r\n\t * the axis will choose the granularity of 10 minutes, displaying a label\r\n\t * every 10 minutes.\r\n\t *\r\n\t * Default intervals:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *  { timeUnit: \"millisecond\", count: 1 },\r\n\t *  { timeUnit: \"millisecond\", count: 5 },\r\n\t *  { timeUnit: \"millisecond\", count: 10 },\r\n\t *  { timeUnit: \"millisecond\", count: 50 },\r\n\t *  { timeUnit: \"millisecond\", count: 100 },\r\n\t *  { timeUnit: \"millisecond\", count: 500 },\r\n\t *  { timeUnit: \"second\", count: 1 },\r\n\t *  { timeUnit: \"second\", count: 5 },\r\n\t *  { timeUnit: \"second\", count: 10 },\r\n\t *  { timeUnit: \"second\", count: 30 },\r\n\t *  { timeUnit: \"minute\", count: 1 },\r\n\t *  { timeUnit: \"minute\", count: 5 },\r\n\t *  { timeUnit: \"minute\", count: 10 },\r\n\t *  { timeUnit: \"minute\", count: 30 },\r\n\t *  { timeUnit: \"hour\", count: 1 },\r\n\t *  { timeUnit: \"hour\", count: 3 },\r\n\t *  { timeUnit: \"hour\", count: 6 },\r\n\t *  { timeUnit: \"hour\", count: 12 },\r\n\t *  { timeUnit: \"day\", count: 1 },\r\n\t *  { timeUnit: \"day\", count: 2 },\r\n\t *  { timeUnit: \"day\", count: 3 },\r\n\t *  { timeUnit: \"day\", count: 4 },\r\n\t *  { timeUnit: \"day\", count: 5 },\r\n\t *  { timeUnit: \"week\", count: 1 },\r\n\t *  { timeUnit: \"month\", count: 1 },\r\n\t *  { timeUnit: \"month\", count: 2 },\r\n\t *  { timeUnit: \"month\", count: 3 },\r\n\t *  { timeUnit: \"month\", count: 6 },\r\n\t *  { timeUnit: \"year\", count: 1 },\r\n\t *  { timeUnit: \"year\", count: 2 },\r\n\t *  { timeUnit: \"year\", count: 5 },\r\n\t *  { timeUnit: \"year\", count: 10 },\r\n\t *  { timeUnit: \"year\", count: 50 },\r\n\t *  { timeUnit: \"year\", count: 100 }\r\n\t * ]\r\n\t * ```\r\n\t */\r\n\tpublic gridIntervals: List<ITimeInterval> = new List<ITimeInterval>();\r\n\r\n\t/**\r\n\t * If data aggregation is enabled by setting Axis' `groupData = true`, the\r\n\t * chart will try to aggregate data items into grouped data items.\r\n\t *\r\n\t * If there are more data items in selected period than `groupCount`, it will\r\n\t * group data items into bigger period.\r\n\t *\r\n\t * For example seconds might be grouped into 10-second aggregate data items.\r\n\t *\r\n\t * This setting indicates what group intervals can the chart group to.\r\n\t *\r\n\t * Default intervals:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   { timeUnit: \"millisecond\", count: 1},\r\n\t *   { timeUnit: \"millisecond\", count: 10 },\r\n\t *   { timeUnit: \"millisecond\", count: 100 },\r\n\t *   { timeUnit: \"second\", count: 1 },\r\n\t *   { timeUnit: \"second\", count: 10 },\r\n\t *   { timeUnit: \"minute\", count: 1 },\r\n\t *   { timeUnit: \"minute\", count: 10 },\r\n\t *   { timeUnit: \"hour\", count: 1 },\r\n\t *   { timeUnit: \"day\", count: 1 },\r\n\t *   { timeUnit: \"week\", count: 1 },\r\n\t *   { timeUnit: \"month\", count: 1 },\r\n\t *   { timeUnit: \"year\", count: 1 }\r\n\t * ]\r\n\t * ```\r\n\t * `groupData = true` does not work in combination with `skipEmptyPeriods = true`.\r\n\t * \r\n\t * @since 4.7.0\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/date-axis/#Dynamic_data_item_grouping} for more information about dynamic data item grouping.\r\n\t */\r\n\tpublic groupIntervals: List<ITimeInterval> = new List<ITimeInterval>();\r\n\r\n\t/**\r\n\t * A collection of date formats to use when formatting different time units\r\n\t * on Date/time axis.\r\n\t *\r\n\t * Actual defaults will depend on the language locale set for the chart.\r\n\t *\r\n\t * To override format for a specific time unit, say days, you need to set\r\n\t * the appropriate key to a format string. E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * axis.dateFormats.setKey(\"day\", \"MMMM d, yyyy\");\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * axis.dateFormats.setKey(\"day\", \"MMMM d, yyyy\");\r\n\t * ```\r\n\t * ```JSON\r\n\t * \"xAxes\": [{\r\n\t *   \"type\": \"DateAxis\",\r\n\t *   \"dateFormats\": {\r\n\t *     \"day\": \"MMMM d, yyyy\"\r\n\t *   }\r\n\t * }]\r\n\t * ```\r\n\t *\r\n\t * @see {@link DateFormatter}\r\n\t */\r\n\tpublic dateFormats: Dictionary<TimeUnit, string | Intl.DateTimeFormatOptions> = new Dictionary<TimeUnit, string | Intl.DateTimeFormatOptions>();\r\n\r\n\t/**\r\n\t * These formats are applied to labels that are first in a larger unit.\r\n\t *\r\n\t * For example, if we have a DateAxis with days on it, the first day of month\r\n\t * indicates a break in month - a start of the bigger period.\r\n\t *\r\n\t * For those labels, `periodChangeDateFormats` are applied instead of\r\n\t * `dateFormats`.\r\n\t *\r\n\t * This allows us implement convenient structures, like instead of:\r\n\t *\r\n\t * `Jan 1 - Jan 2 - Jan 3 - ...`\r\n\t *\r\n\t * We can have:\r\n\t *\r\n\t * `Jan - 1 - 2 - 3 - ...`\r\n\t *\r\n\t * This can be disabled by setting `markUnitChange = false`.\r\n\t */\r\n\tpublic periodChangeDateFormats: Dictionary<TimeUnit, string | Intl.DateTimeFormatOptions> = new Dictionary<TimeUnit, string | Intl.DateTimeFormatOptions>();\r\n\r\n\t/**\r\n\t * At which intervals grid elements are displayed.\r\n\t */\r\n\tprotected _gridInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * [_intervalDuration description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _intervalDuration: number;\r\n\r\n\t/**\r\n\t * [_gridDate description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _gridDate: Date;\r\n\r\n\t/**\r\n\t * [_nextGridUnit description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _nextGridUnit: TimeUnit;\r\n\r\n\t/**\r\n\t * User-defined granularity of data.\r\n\t */\r\n\tprotected _baseInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * This is base interval of the main data set.\r\n\t */\r\n\tprotected _mainBaseInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * This is base interval of the currently selected data set.\r\n\t */\r\n\tprotected _groupInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * Actual interval (granularity) derived from the actual data.\r\n\t */\r\n\tprotected _baseIntervalReal: ITimeInterval = { timeUnit: \"day\", count: 1 };\r\n\r\n\t/**\r\n\t */\r\n\tprotected _prevSeriesTime: { [index: string]: number } = {};\r\n\r\n\t/**\r\n\t * [_minDifference description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _minDifference: { [index: string]: number } = {};\r\n\r\n\t/**\r\n\t * A function which applies fills to axis cells.\r\n\t *\r\n\t * Default function fills every second fill. You can set this to a function\r\n\t * that follows some other logic.\r\n\t *\r\n\t * Function should accept a [[DateAxisDataItem]] and modify its `axisFill`\r\n\t * property accordingly.\r\n\t */\r\n\tpublic fillRule(dataItem: this[\"_dataItem\"]): void {\r\n\t\tlet value = dataItem.value;\r\n\t\tlet axis = dataItem.component;\r\n\t\tlet gridInterval = axis._gridInterval;\r\n\t\tlet gridDuration = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\r\n\t\tif (Math.round((value - axis.min) / gridDuration) / 2 == Math.round(Math.round((value - axis.min) / gridDuration) / 2)) {\r\n\t\t\tdataItem.axisFill.__disabled = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdataItem.axisFill.__disabled = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _firstWeekDay: number = 1;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _df: DateFormatter;\r\n\r\n\t/**\r\n\t * A collection of start timestamps to use as axis' min timestamp for\r\n\t * particular data item item periods.\r\n\t *\r\n\t * @since 4.7.0\r\n\t * @readonly\r\n\t */\r\n\tpublic groupMin: { [index: string]: number } = {};\r\n\r\n\t/**\r\n\t * A collection of start timestamps to use as axis' max timestamp for\r\n\t * particular data item item periods.\r\n\t *\r\n\t * @since 4.7.0\r\n\t * @readonly\r\n\t */\r\n\tpublic groupMax: { [index: string]: number } = {};\r\n\r\n\t/**\r\n\t * Date of the last shown axis tooltip.\r\n\t *\r\n\t * @since 4.9.7\r\n\t * @readonly\r\n\t */\r\n\tpublic tooltipDate: Date;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxis\";\r\n\r\n\t\tthis.setPropertyValue(\"markUnitChange\", true);\r\n\t\tthis.snapTooltip = true;\r\n\t\tthis.tooltipPosition = \"pointer\";\r\n\r\n\t\tthis.setPropertyValue(\"groupData\", false);\r\n\t\tthis.groupCount = 200;\r\n\r\n\t\tthis.events.on(\"parentset\", this.getDFFormatter, this, false);\r\n\r\n\t\t// Translatable defaults are applied in `applyInternalDefaults()`\r\n\t\t// ...\r\n\r\n\t\t// Define default intervals\r\n\t\tthis.gridIntervals.pushAll([\r\n\t\t\t{ timeUnit: \"millisecond\", count: 1 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 5 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 10 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 50 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 100 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 500 },\r\n\t\t\t{ timeUnit: \"second\", count: 1 },\r\n\t\t\t{ timeUnit: \"second\", count: 5 },\r\n\t\t\t{ timeUnit: \"second\", count: 10 },\r\n\t\t\t{ timeUnit: \"second\", count: 30 },\r\n\t\t\t{ timeUnit: \"minute\", count: 1 },\r\n\t\t\t{ timeUnit: \"minute\", count: 5 },\r\n\t\t\t{ timeUnit: \"minute\", count: 10 },\r\n\t\t\t{ timeUnit: \"minute\", count: 15 },\r\n\t\t\t{ timeUnit: \"minute\", count: 30 },\r\n\t\t\t{ timeUnit: \"hour\", count: 1 },\r\n\t\t\t{ timeUnit: \"hour\", count: 3 },\r\n\t\t\t{ timeUnit: \"hour\", count: 6 },\r\n\t\t\t{ timeUnit: \"hour\", count: 12 },\r\n\t\t\t{ timeUnit: \"day\", count: 1 },\r\n\t\t\t{ timeUnit: \"day\", count: 2 },\r\n\t\t\t{ timeUnit: \"day\", count: 3 },\r\n\t\t\t{ timeUnit: \"day\", count: 4 },\r\n\t\t\t{ timeUnit: \"day\", count: 5 },\r\n\t\t\t{ timeUnit: \"week\", count: 1 },\r\n\t\t\t{ timeUnit: \"month\", count: 1 },\r\n\t\t\t{ timeUnit: \"month\", count: 2 },\r\n\t\t\t{ timeUnit: \"month\", count: 3 },\r\n\t\t\t{ timeUnit: \"month\", count: 6 },\r\n\t\t\t{ timeUnit: \"year\", count: 1 },\r\n\t\t\t{ timeUnit: \"year\", count: 2 },\r\n\t\t\t{ timeUnit: \"year\", count: 5 },\r\n\t\t\t{ timeUnit: \"year\", count: 10 },\r\n\t\t\t{ timeUnit: \"year\", count: 50 },\r\n\t\t\t{ timeUnit: \"year\", count: 100 },\r\n\t\t\t{ timeUnit: \"year\", count: 200 },\r\n\t\t\t{ timeUnit: \"year\", count: 500 },\r\n\t\t\t{ timeUnit: \"year\", count: 1000 },\r\n\t\t\t{ timeUnit: \"year\", count: 2000 },\r\n\t\t\t{ timeUnit: \"year\", count: 5000 },\r\n\t\t\t{ timeUnit: \"year\", count: 10000 },\r\n\t\t\t{ timeUnit: \"year\", count: 100000 }\r\n\t\t]);\r\n\r\n\t\tthis.groupIntervals.pushAll([\r\n\t\t\t{ timeUnit: \"millisecond\", count: 1 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 10 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 100 },\r\n\t\t\t{ timeUnit: \"second\", count: 1 },\r\n\t\t\t{ timeUnit: \"second\", count: 10 },\r\n\t\t\t{ timeUnit: \"minute\", count: 1 },\r\n\t\t\t{ timeUnit: \"minute\", count: 10 },\r\n\t\t\t{ timeUnit: \"hour\", count: 1 },\r\n\t\t\t{ timeUnit: \"day\", count: 1 },\r\n\t\t\t{ timeUnit: \"week\", count: 1 },\r\n\t\t\t{ timeUnit: \"month\", count: 1 },\r\n\t\t\t{ timeUnit: \"year\", count: 1 }\r\n\t\t]);\r\n\r\n\t\t// Set field name\r\n\t\tthis.axisFieldName = \"date\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Set default date formats\r\n\t\tif (!this.dateFormats.hasKey(\"millisecond\")) {\r\n\t\t\tthis.dateFormats.setKey(\"millisecond\", this.language.translate(\"_date_millisecond\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"second\")) {\r\n\t\t\tthis.dateFormats.setKey(\"second\", this.language.translate(\"_date_second\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"minute\")) {\r\n\t\t\tthis.dateFormats.setKey(\"minute\", this.language.translate(\"_date_minute\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"hour\")) {\r\n\t\t\tthis.dateFormats.setKey(\"hour\", this.language.translate(\"_date_hour\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"day\")) {\r\n\t\t\tthis.dateFormats.setKey(\"day\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"week\")) {\r\n\t\t\tthis.dateFormats.setKey(\"week\", this.language.translate(\"_date_day\"));\t // not a mistake\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"month\")) {\r\n\t\t\tthis.dateFormats.setKey(\"month\", this.language.translate(\"_date_month\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"year\")) {\r\n\t\t\tthis.dateFormats.setKey(\"year\", this.language.translate(\"_date_year\"));\r\n\t\t}\r\n\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"millisecond\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"millisecond\", this.language.translate(\"_date_millisecond\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"second\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"second\", this.language.translate(\"_date_second\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"minute\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"minute\", this.language.translate(\"_date_minute\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"hour\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"hour\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"day\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"day\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"week\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"week\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"month\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"month\", this.language.translate(\"_date_month\") + \" \" + this.language.translate(\"_date_year\"));\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[DataItem]] of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new DateAxisDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[AxisBreak]] of the appropriate type.\r\n\t *\r\n\t * @return Axis break\r\n\t */\r\n\tprotected createAxisBreak(): this[\"_axisBreak\"] {\r\n\t\treturn new DateAxisBreak();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis' data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems(): void {\r\n\t\t// allows to keep selection of the same size\r\n\t\tlet start: number = this.start;\r\n\t\tlet end: number = this.end;\r\n\t\tlet baseDuration = this.baseDuration;\r\n\t\tlet periodCount: number = (this.max - this.min) / baseDuration;\r\n\r\n\t\tthis._firstWeekDay = this.getFirstWeekDay();\r\n\t\tthis.getDFFormatter();\r\n\r\n\t\tsuper.validateDataItems();\r\n\r\n\t\tlet mainBaseDuration = $time.getDuration(this.mainBaseInterval.timeUnit, this.mainBaseInterval.count)\r\n\r\n\t\tthis.maxZoomFactor = Math.max(1, (this.max - this.min) / mainBaseDuration);\r\n\r\n\t\tthis._deltaMinMax = this.baseDuration / 2;\r\n\r\n\t\t// allows to keep selection of the same size\r\n\t\tlet newPeriodCount: number = (this.max - this.min) / baseDuration;\r\n\t\tstart = start + (end - start) * (1 - periodCount / newPeriodCount);\r\n\t\tthis.zoom({ start: start, end: end }, false, true); // added instantlyto solve zoomout problem when we have axes gaps. @todo: check how this affects maxZoomFactor\r\n\t}\r\n\r\n\t/**\r\n\t * Handles process after zoom.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Does nothing?\r\n\t */\r\n\tpublic handleSelectionExtremesChange(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates all positions, related to axis as per current zoom.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic calculateZoom(): void {\r\n\t\tsuper.calculateZoom();\r\n\r\n\t\tlet difference = this.adjustDifference(this._minZoomed, this._maxZoomed);\r\n\t\tlet dataSetChanged = false;\r\n\r\n\t\t// if data has to be grouped, choose interval and set dataset\r\n\t\tif (this.groupData && $type.hasValue(difference)) {\r\n\t\t\tlet mainBaseInterval = this.mainBaseInterval;\r\n\r\n\t\t\tlet modifiedDifference = difference + (this.startLocation + (1 - this.endLocation)) * this.baseDuration;\r\n\t\t\tlet groupInterval: ITimeInterval;\r\n\t\t\tif (this.groupInterval) {\r\n\t\t\t\tgroupInterval = { ...this.groupInterval }\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tgroupInterval = this.chooseInterval(0, modifiedDifference, this.groupCount, this.groupIntervals);\r\n\t\t\t\tif ($time.getDuration(groupInterval.timeUnit, groupInterval.count) < $time.getDuration(mainBaseInterval.timeUnit, mainBaseInterval.count)) {\r\n\t\t\t\t\tgroupInterval = { ...mainBaseInterval };\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\r\n\t\t\tthis._groupInterval = groupInterval;\r\n\t\t\tlet newId = groupInterval.timeUnit + groupInterval.count;\r\n\t\t\tif (this._currentDataSetId != newId) {\r\n\t\t\t\tthis._currentDataSetId = newId;\r\n\t\t\t\tthis.dispatch(\"groupperiodchanged\");\r\n\t\t\t}\r\n\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tif (series.baseAxis == this) {\r\n\t\t\t\t\tif (series.setDataSet(this._currentDataSetId)) {\r\n\t\t\t\t\t\tdataSetChanged = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tlet gridInterval: ITimeInterval = this.chooseInterval(0, difference, this._gridCount);\r\n\r\n\t\tif ($time.getDuration(gridInterval.timeUnit, gridInterval.count) < this.baseDuration) {\r\n\t\t\tgridInterval = { ...this.baseInterval };\r\n\t\t}\r\n\r\n\t\tthis._gridInterval = gridInterval;\r\n\t\tthis._nextGridUnit = $time.getNextUnit(gridInterval.timeUnit);\r\n\r\n\t\t// the following is needed to avoid grid flickering while scrolling\r\n\t\tthis._intervalDuration = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\t\tthis._gridDate = $time.round(\r\n\t\t\tnew Date(this.minZoomed - $time.getDuration(gridInterval.timeUnit, gridInterval.count)),\r\n\t\t\tgridInterval.timeUnit,\r\n\t\t\tgridInterval.count,\r\n\t\t\tthis._firstWeekDay,\r\n\t\t\tthis._df.utc,\r\n\t\t\tnew Date(this.min),\r\n\t\t\tthis._df.timezoneMinutes,\r\n\t\t\tthis._df.timezone\r\n\t\t);\r\n\r\n\t\t// tell series start/end\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series.baseAxis == this) {\r\n\t\t\t\tlet field = <keyof XYSeriesDataItem>series.getAxisField(this);\r\n\r\n\t\t\t\tlet minZoomed = $time.round(\r\n\t\t\t\t\tnew Date(this._minZoomed + this.baseDuration * 0.05),\r\n\t\t\t\t\tthis.baseInterval.timeUnit, this.baseInterval.count,\r\n\t\t\t\t\tthis._firstWeekDay,\r\n\t\t\t\t\tthis._df.utc,\r\n\t\t\t\t\tundefined,\r\n\t\t\t\t\tthis._df.timezoneMinutes,\r\n\t\t\t\t\tthis._df.timezone\r\n\t\t\t\t).getTime();\r\n\t\t\t\tlet minZoomedStr = minZoomed.toString();\r\n\t\t\t\tlet startDataItem = series.dataItemsByAxis.getKey(this.uid).getKey(minZoomedStr + series.currentDataSetId);\r\n\r\n\t\t\t\tlet startIndex: number = 0;\r\n\t\t\t\tif (this.start != 0) {\r\n\t\t\t\t\tif (startDataItem) {\r\n\t\t\t\t\t\tstartDataItem = this.findFirst(startDataItem, minZoomed, field);\r\n\t\t\t\t\t\tstartIndex = startDataItem.index;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tstartIndex = series.dataItems.findClosestIndex(this._minZoomed, (x) => <number>x[field], \"left\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// 1 millisecond is removed so that if only first item is selected, it would not count in the second.\r\n\t\t\t\tlet baseInterval = this.baseInterval;\r\n\t\t\t\tlet maxZoomed = $time.add(\r\n\t\t\t\t\t$time.round(\r\n\t\t\t\t\t\tnew Date(this._maxZoomed),\r\n\t\t\t\t\t\tbaseInterval.timeUnit,\r\n\t\t\t\t\t\tbaseInterval.count,\r\n\t\t\t\t\t\tthis._firstWeekDay,\r\n\t\t\t\t\t\tthis._df.utc,\r\n\t\t\t\t\t\tundefined,\r\n\t\t\t\t\t\tthis._df.timezoneMinutes,\r\n\t\t\t\t\t\tthis._df.timezone\r\n\t\t\t\t\t),\r\n\t\t\t\t\tbaseInterval.timeUnit,\r\n\t\t\t\t\tbaseInterval.count,\r\n\t\t\t\t\tthis._df.utc\r\n\t\t\t\t).getTime();\r\n\r\n\t\t\t\tlet maxZoomedStr = maxZoomed.toString();\r\n\t\t\t\tlet endDataItem = series.dataItemsByAxis.getKey(this.uid).getKey(maxZoomedStr + series.currentDataSetId);\r\n\t\t\t\tlet endIndex: number = series.dataItems.length;\r\n\t\t\t\tif (this.end != 1) {\r\n\t\t\t\t\tif (endDataItem) {\r\n\t\t\t\t\t\tendIndex = endDataItem.index;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tmaxZoomed -= 1;\r\n\t\t\t\t\t\tendIndex = series.dataItems.findClosestIndex(maxZoomed, (x) => <number>x[field], \"right\");\r\n\t\t\t\t\t\t// not good - if end is in the gap, indexes go like 5,4,3,4,2,1\r\n\t\t\t\t\t\t//if (endIndex < series.dataItems.length) {\r\n\t\t\t\t\t\tendIndex++;\r\n\t\t\t\t\t\t//}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (series.max(this) < minZoomed) {\r\n\t\t\t\t\tseries.startIndex = series.dataItems.length;\r\n\t\t\t\t\tseries.endIndex = series.dataItems.length;\r\n\t\t\t\t\tseries.outOfRange = true;\r\n\t\t\t\t}\r\n\t\t\t\telse if (series.min(this) > maxZoomed) {\r\n\t\t\t\t\tseries.startIndex = 0;\r\n\t\t\t\t\tseries.endIndex = 0;\r\n\t\t\t\t\tseries.outOfRange = true;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tseries.outOfRange = false;\r\n\t\t\t\t\tseries.startIndex = startIndex;\r\n\t\t\t\t\tseries.endIndex = endIndex;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//\tconsole.log(series.name, startIndex, endIndex);\r\n\r\n\t\t\t\tif (!dataSetChanged && series.dataRangeInvalid) {\r\n\t\t\t\t\tseries.validateDataRange();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tprotected findFirst(dataItem: XYSeriesDataItem, time: number, key: string): XYSeriesDataItem {\r\n\t\tlet index = dataItem.index;\r\n\r\n\t\tif (index > 0) {\r\n\t\t\tlet series = dataItem.component;\r\n\t\t\tlet previousDataItem = series.dataItems.getIndex(index - 1);\r\n\r\n\t\t\tlet previousDate = (<any>previousDataItem)[key];\r\n\r\n\t\t\tif (!previousDate || previousDate.getTime() < time) {\r\n\t\t\t\treturn dataItem;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn this.findFirst(previousDataItem, time, key);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn dataItem;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * (Re)validates data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tsuper.validateData();\r\n\t\tif (!$type.isNumber(this.baseInterval.count)) {\r\n\t\t\tthis.baseInterval.count = 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic get minDifference(): number {\r\n\t\tlet minDifference = Number.MAX_VALUE;\r\n\r\n\t\tthis.series.each((series) => {\r\n\t\t\tif (minDifference > this._minDifference[series.uid]) {\r\n\t\t\t\tminDifference = this._minDifference[series.uid];\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tif (minDifference == Number.MAX_VALUE || minDifference == 0) {\r\n\t\t\tminDifference = $time.getDuration(\"day\");\r\n\t\t}\r\n\r\n\t\treturn minDifference;\r\n\t}\r\n\r\n\t/**\r\n\t * [dataChangeUpdate description]\r\n\t *\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic seriesDataChangeUpdate(series: XYSeries): void {\r\n\t\tthis._minDifference[series.uid] = Number.MAX_VALUE;\r\n\t}\r\n\r\n\t/**\r\n\t * [postProcessSeriesDataItems description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic postProcessSeriesDataItems(series?: XYSeries): void {\r\n\t\tthis._firstWeekDay = this.getFirstWeekDay();\r\n\t\tif (series) {\r\n\t\t\tthis.seriesGroupUpdate(series);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tthis.seriesGroupUpdate(series);\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tthis.addEmptyUnitsBreaks();\r\n\t}\r\n\r\n\tprotected seriesGroupUpdate(series: XYSeries) {\r\n\t\tif (JSON.stringify(series._baseInterval[this.uid]) != JSON.stringify(this.mainBaseInterval)) {\r\n\r\n\t\t\tseries._baseInterval[this.uid] = this.mainBaseInterval;\r\n\r\n\t\t\tseries.mainDataSet.each((dataItem) => {\r\n\t\t\t\tthis.postProcessSeriesDataItem(dataItem);\r\n\t\t\t});\r\n\r\n\t\t\tif (this.groupData) {\r\n\t\t\t\tthis.groupSeriesData(series);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates series group data.\r\n\t * \r\n\t * @param  series  Series\r\n\t * @ignore\r\n\t */\r\n\tpublic groupSeriesData(series: XYSeries): void {\r\n\t\tif (series.baseAxis == this && series.dataItems.length > 0 && !series.dataGrouped) {\r\n\r\n\t\t\tseries.bulletsContainer.removeChildren();\r\n\r\n\t\t\t// make array of intervals which will be used;\r\n\t\t\tlet intervals: ITimeInterval[] = [];\r\n\t\t\tlet mainBaseInterval = this.mainBaseInterval;\r\n\t\t\tlet mainIntervalDuration = $time.getDuration(mainBaseInterval.timeUnit, mainBaseInterval.count);\r\n\r\n\t\t\tthis.groupIntervals.each((interval) => {\r\n\t\t\t\tlet intervalDuration = $time.getDuration(interval.timeUnit, interval.count);\r\n\t\t\t\tif ((intervalDuration > mainIntervalDuration && intervalDuration < (this.max - this.min)) || this.groupInterval) {\r\n\t\t\t\t\tintervals.push(interval);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tif (series._dataSets) {\r\n\t\t\t\tseries._dataSets.each((key, dataItems) => {\r\n\t\t\t\t\tdataItems.each((dataItem) => {\r\n\t\t\t\t\t\tdataItem.dispose();\r\n\t\t\t\t\t})\r\n\t\t\t\t\tdataItems.clear();\r\n\t\t\t\t})\r\n\t\t\t\tseries._dataSets.clear();\r\n\t\t\t}\r\n\r\n\t\t\tseries.dataGrouped = true;\r\n\r\n\t\t\t$array.each(intervals, (interval) => {\r\n\r\n\t\t\t\t//let mainBaseInterval = this._mainBaseInterval;\r\n\t\t\t\tlet key = \"date\" + this.axisLetter;\r\n\r\n\t\t\t\t// create data set\r\n\t\t\t\tlet dataSetId = interval.timeUnit + interval.count;\r\n\t\t\t\t// todo: check where this clone goes\r\n\t\t\t\tlet dataSet = new OrderedListTemplate(series.mainDataSet.template.clone());\r\n\r\n\t\t\t\tseries.dataSets.setKey(dataSetId, dataSet);\r\n\r\n\t\t\t\tlet dataItems = series.mainDataSet;\r\n\t\t\t\tlet previousTime: number = Number.NEGATIVE_INFINITY;\r\n\t\t\t\tlet i = 0;\r\n\t\t\t\tlet newDataItem: XYSeriesDataItem;\r\n\r\n\t\t\t\tlet dataFields: string[] = [];\r\n\r\n\t\t\t\t$object.each(series.dataFields, (dfkey, df) => {\r\n\t\t\t\t\tlet dfk = <string>dfkey;\r\n\t\t\t\t\tif (dfk != key && dfk.indexOf(\"Show\") == -1) {\r\n\t\t\t\t\t\tdataFields.push(dfk);\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\r\n\t\t\t\tlet roundedDate: Date;\r\n\t\t\t\tdataItems.each((dataItem) => {\r\n\t\t\t\t\tlet date = dataItem.getDate(key);\r\n\t\t\t\t\tif (date) {\r\n\t\t\t\t\t\tlet time = date.getTime();\r\n\t\t\t\t\t\troundedDate = $time.round(\r\n\t\t\t\t\t\t\tnew Date(time),\r\n\t\t\t\t\t\t\tinterval.timeUnit,\r\n\t\t\t\t\t\t\tinterval.count,\r\n\t\t\t\t\t\t\tthis._df.firstDayOfWeek,\r\n\t\t\t\t\t\t\tthis._df.utc,\r\n\t\t\t\t\t\t\tundefined,\r\n\t\t\t\t\t\t\tthis._df.timezoneMinutes,\r\n\t\t\t\t\t\t\tthis._df.timezone\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\tlet currentTime = roundedDate.getTime();\r\n\t\t\t\t\t\t// changed period\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (previousTime < currentTime) {\r\n\r\n\t\t\t\t\t\t\tif (newDataItem && series._adapterO) {\r\n\t\t\t\t\t\t\t\t$array.each(dataFields, (vkey) => {\r\n\t\t\t\t\t\t\t\t\tnewDataItem.values[vkey].value = series._adapterO.apply(\"groupDataItem\", {\r\n\t\t\t\t\t\t\t\t\t\tdataItem: newDataItem,\r\n\t\t\t\t\t\t\t\t\t\tinterval: interval,\r\n\t\t\t\t\t\t\t\t\t\tdataField: <any>vkey,\r\n\t\t\t\t\t\t\t\t\t\tdate: roundedDate,\r\n\t\t\t\t\t\t\t\t\t\tvalue: newDataItem.values[vkey].value\r\n\t\t\t\t\t\t\t\t\t}).value;\r\n\r\n\t\t\t\t\t\t\t\t\tnewDataItem.values[vkey].workingValue = newDataItem.values[vkey].value\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tnewDataItem = dataSet.create();\r\n\r\n\t\t\t\t\t\t\tnewDataItem.dataContext = {};\r\n\r\n\t\t\t\t\t\t\tnewDataItem.setWorkingLocation(\"dateX\", series.dataItems.template.locations.dateX, 0);\r\n\t\t\t\t\t\t\tnewDataItem.setWorkingLocation(\"openDateX\", series.dataItems.template.locations.openDateX, 0);\r\n\t\t\t\t\t\t\tnewDataItem.setWorkingLocation(\"dateY\", series.dataItems.template.locations.dateY, 0);\r\n\t\t\t\t\t\t\tnewDataItem.setWorkingLocation(\"openDateY\", series.dataItems.template.locations.openDateY, 0);\r\n\r\n\t\t\t\t\t\t\tnewDataItem.component = series;\r\n\t\t\t\t\t\t\t// other Dates?\r\n\t\t\t\t\t\t\tnewDataItem.setDate(key, roundedDate);\r\n\t\t\t\t\t\t\tnewDataItem._index = i;\r\n\t\t\t\t\t\t\ti++;\r\n\r\n\t\t\t\t\t\t\t$array.each(dataFields, (vkey) => {\r\n\t\t\t\t\t\t\t\t//let groupFieldName = vkey + \"Group\";\r\n\t\t\t\t\t\t\t\tlet dvalues = dataItem.values[vkey];\r\n\t\t\t\t\t\t\t\tif (dvalues) {\r\n\t\t\t\t\t\t\t\t\tlet value = dvalues.value;\r\n\r\n\t\t\t\t\t\t\t\t\tif (series._adapterO) {\r\n\t\t\t\t\t\t\t\t\t\tvalue = series._adapterO.apply(\"groupValue\", {\r\n\t\t\t\t\t\t\t\t\t\t\tdataItem: dataItem,\r\n\t\t\t\t\t\t\t\t\t\t\tinterval: interval,\r\n\t\t\t\t\t\t\t\t\t\t\tdataField: <any>vkey,\r\n\t\t\t\t\t\t\t\t\t\t\tdate: roundedDate,\r\n\t\t\t\t\t\t\t\t\t\t\tvalue: value\r\n\t\t\t\t\t\t\t\t\t\t}).value;\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\tlet values = newDataItem.values[vkey];\r\n\t\t\t\t\t\t\t\t\tif ($type.isNumber(value)) {\r\n\r\n\t\t\t\t\t\t\t\t\t\tvalues.value = value;\r\n\t\t\t\t\t\t\t\t\t\tvalues.workingValue = value;\r\n\r\n\t\t\t\t\t\t\t\t\t\tvalues.open = value;\r\n\t\t\t\t\t\t\t\t\t\tvalues.close = value;\r\n\t\t\t\t\t\t\t\t\t\tvalues.low = value;\r\n\t\t\t\t\t\t\t\t\t\tvalues.high = value;\r\n\t\t\t\t\t\t\t\t\t\tvalues.sum = value;\r\n\t\t\t\t\t\t\t\t\t\tvalues.average = value;\r\n\t\t\t\t\t\t\t\t\t\tvalues.count = 1;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\tvalues.count = 0;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t})\r\n\r\n\t\t\t\t\t\t\tthis.postProcessSeriesDataItem(newDataItem, interval);\r\n\r\n\t\t\t\t\t\t\t$object.each(series.propertyFields, (key, fieldValue) => {\r\n\t\t\t\t\t\t\t\tconst f: string = <string>key;\r\n\t\t\t\t\t\t\t\tlet value: any = (<any>dataItem.properties)[key];\r\n\r\n\t\t\t\t\t\t\t\tif ($type.hasValue(value)) {\r\n\t\t\t\t\t\t\t\t\tnewDataItem.hasProperties = true;\r\n\t\t\t\t\t\t\t\t\tnewDataItem.setProperty(f, value);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\tnewDataItem.groupDataItems = [dataItem];\r\n\t\t\t\t\t\t\tpreviousTime = currentTime;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif (newDataItem) {\r\n\t\t\t\t\t\t\t\t$array.each(dataFields, (vkey) => {\r\n\t\t\t\t\t\t\t\t\tlet groupFieldName = (<any>series.groupFields)[vkey];\r\n\t\t\t\t\t\t\t\t\tlet dvalues = dataItem.values[vkey];\r\n\t\t\t\t\t\t\t\t\tif (dvalues) {\r\n\t\t\t\t\t\t\t\t\t\tlet value = dvalues.value;\r\n\r\n\t\t\t\t\t\t\t\t\t\tif (series._adapterO) {\r\n\t\t\t\t\t\t\t\t\t\t\tvalue = series._adapterO.apply(\"groupValue\", {\r\n\t\t\t\t\t\t\t\t\t\t\t\tdataItem: dataItem,\r\n\t\t\t\t\t\t\t\t\t\t\t\tinterval: interval,\r\n\t\t\t\t\t\t\t\t\t\t\t\tdataField: <any>vkey,\r\n\t\t\t\t\t\t\t\t\t\t\t\tdate: roundedDate,\r\n\t\t\t\t\t\t\t\t\t\t\t\tvalue: value\r\n\t\t\t\t\t\t\t\t\t\t\t}).value;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\t\t\t\t\t\tlet values = newDataItem.values[vkey];\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tif (!$type.isNumber(values.open)) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tvalues.open = value;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tvalues.close = value;\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tif (values.low > value || !$type.isNumber(values.low)) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tvalues.low = value;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\tif (values.high < value || !$type.isNumber(values.high)) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tvalues.high = value;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\tif ($type.isNumber(values.sum)) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tvalues.sum += value;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\t\t\tvalues.sum = value;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\tvalues.count++;\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tvalues.average = values.sum / values.count;\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tif ($type.isNumber(values[groupFieldName])) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tvalues.value = values[groupFieldName];\r\n\t\t\t\t\t\t\t\t\t\t\t\tvalues.workingValue = values.value;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t$utils.copyProperties(dataItem.properties, newDataItem.properties);\r\n\r\n\t\t\t\t\t\t\t\t$object.each(series.propertyFields, (key, fieldValue) => {\r\n\t\t\t\t\t\t\t\t\tconst f: string = <string>key;\r\n\t\t\t\t\t\t\t\t\tlet value: any = (<any>dataItem.properties)[key];\r\n\t\t\t\t\t\t\t\t\tif ($type.hasValue(value)) {\r\n\t\t\t\t\t\t\t\t\t\tnewDataItem.hasProperties = true;\r\n\t\t\t\t\t\t\t\t\t\tnewDataItem.setProperty(f, value);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t\tnewDataItem.groupDataItems.push(dataItem);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (newDataItem) {\r\n\t\t\t\t\t\t$utils.copyProperties(dataItem.dataContext, newDataItem.dataContext);\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\tif (newDataItem && series._adapterO) {\r\n\r\n\t\t\t\t\t$array.each(dataFields, (vkey) => {\r\n\t\t\t\t\t\tnewDataItem.values[vkey].value = series._adapterO.apply(\"groupDataItem\", {\r\n\t\t\t\t\t\t\tdataItem: newDataItem,\r\n\t\t\t\t\t\t\tinterval: interval,\r\n\t\t\t\t\t\t\tdataField: <any>vkey,\r\n\t\t\t\t\t\t\tdate: roundedDate,\r\n\t\t\t\t\t\t\tvalue: newDataItem.values[vkey].value\r\n\t\t\t\t\t\t}).value;\r\n\r\n\t\t\t\t\t\tnewDataItem.values[vkey].workingValue = newDataItem.values[vkey].value;\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tthis.calculateZoom();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected getDFFormatter() {\r\n\t\tthis._df = this.dateFormatter;\r\n\t}\r\n\r\n\t/**\r\n\t * [postProcessSeriesDataItem description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param dataItem Data item\r\n\t */\r\n\tpublic postProcessSeriesDataItem(dataItem: XYSeriesDataItem, interval?: ITimeInterval): void {\r\n\t\t// we need to do this for all series data items not only added recently, as baseInterval might change\r\n\t\tlet intervalID = \"\";\r\n\t\tif (interval) {\r\n\t\t\tintervalID = interval.timeUnit + interval.count;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tinterval = this.mainBaseInterval;\r\n\t\t}\r\n\r\n\t\tlet series: XYSeries = dataItem.component;\r\n\t\tlet dataItemsByAxis = series.dataItemsByAxis.getKey(this.uid);\r\n\r\n\t\t$object.each(dataItem.dates, (key) => {\r\n\t\t\tlet date: Date = dataItem.getDate(key);\r\n\t\t\tlet time = date.getTime();\r\n\r\n\t\t\tlet startDate: Date = $time.round(\r\n\t\t\t\tnew Date(time),\r\n\t\t\t\tinterval.timeUnit,\r\n\t\t\t\tinterval.count,\r\n\t\t\t\tthis._firstWeekDay,\r\n\t\t\t\tthis._df.utc,\r\n\t\t\t\tundefined,\r\n\t\t\t\tthis._df.timezoneMinutes,\r\n\t\t\t\tthis._df.timezone\r\n\t\t\t);\r\n\t\t\tlet startTime = startDate.getTime();\r\n\t\t\tlet endDate: Date = $time.add(new Date(startTime), interval.timeUnit, interval.count, this._df.utc);\r\n\r\n\t\t\tdataItem.setCalculatedValue(key, startTime, \"open\");\r\n\t\t\tdataItem.setCalculatedValue(key, endDate.getTime(), \"close\");\r\n\t\t\tdataItemsByAxis.setKey(startTime + intervalID, dataItem);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Collapses empty stretches of date/time scale by creating [[AxisBreak]]\r\n\t * elements for them.\r\n\t *\r\n\t * Can be used to automatically remove strethes without data, like weekends.\r\n\t *\r\n\t * No, need to call this manually. It will automatically be done if\r\n\t * `skipEmptyPeriods = true`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected addEmptyUnitsBreaks(): void {\r\n\r\n\t\tif (this.skipEmptyPeriods && $type.isNumber(this.min) && $type.isNumber(this.max)) {\r\n\t\t\tlet timeUnit: TimeUnit = this.baseInterval.timeUnit;\r\n\t\t\tlet count: number = this.baseInterval.count;\r\n\r\n\t\t\tif (this._axisBreaks) {\r\n\t\t\t\tthis._axisBreaks.clear(); // TODO: what about breaks added by user?\r\n\t\t\t}\r\n\r\n\t\t\tlet date: Date = $time.round(\r\n\t\t\t\tnew Date(this.min),\r\n\t\t\t\ttimeUnit,\r\n\t\t\t\tcount,\r\n\t\t\t\tthis._firstWeekDay,\r\n\t\t\t\tthis._df.utc,\r\n\t\t\t\tundefined,\r\n\t\t\t\tthis._df.timezoneMinutes,\r\n\t\t\t\tthis._df.timezone\r\n\t\t\t);\r\n\t\t\tlet axisBreak: DateAxisBreak;\r\n\r\n\t\t\twhile (date.getTime() < this.max - this.baseDuration) {\r\n\t\t\t\t$time.add(date, timeUnit, count, this._df.utc);\r\n\r\n\t\t\t\tlet startTime: number = date.getTime();\r\n\t\t\t\tlet startTimeStr: string = startTime.toString();\r\n\r\n\t\t\t\tlet hasData = $iter.contains(this.series.iterator(), (series) => {\r\n\t\t\t\t\treturn !!series.dataItemsByAxis.getKey(this.uid).getKey(startTimeStr + series.currentDataSetId);\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// open break if not yet opened\r\n\t\t\t\tif (!hasData) {\r\n\t\t\t\t\tif (!axisBreak) {\r\n\t\t\t\t\t\taxisBreak = <DateAxisBreak>this.axisBreaks.create();\r\n\t\t\t\t\t\taxisBreak.startDate = new Date(startTime);\r\n\t\t\t\t\t\tthis._gapBreaks = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// close if already opened\r\n\t\t\t\t\tif (axisBreak) {\r\n\t\t\t\t\t\t// close at end time minus one millisecond\r\n\t\t\t\t\t\taxisBreak.endDate = new Date(startTime - 1);\r\n\t\t\t\t\t\taxisBreak = undefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates positioning of Axis breaks after something changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic fixAxisBreaks(): void {\r\n\t\tsuper.fixAxisBreaks();\r\n\t\tlet axisBreaks = this._axisBreaks;\r\n\t\tif (axisBreaks) {\r\n\t\t\tif (axisBreaks.length > 0) {\r\n\t\t\t\t// process breaks\r\n\t\t\t\taxisBreaks.each((axisBreak) => {\r\n\t\t\t\t\tlet breakGridCount: number = Math.ceil(this._gridCount * (Math.min(this.end, axisBreak.endPosition) - Math.max(this.start, axisBreak.startPosition)) / (this.end - this.start));\r\n\t\t\t\t\taxisBreak.gridInterval = this.chooseInterval(0, axisBreak.adjustedEndValue - axisBreak.adjustedStartValue, breakGridCount);\r\n\t\t\t\t\tlet gridDate = $time.round(\r\n\t\t\t\t\t\tnew Date(axisBreak.adjustedStartValue),\r\n\t\t\t\t\t\taxisBreak.gridInterval.timeUnit,\r\n\t\t\t\t\t\taxisBreak.gridInterval.count,\r\n\t\t\t\t\t\tthis._firstWeekDay,\r\n\t\t\t\t\t\tthis._df.utc,\r\n\t\t\t\t\t\tundefined,\r\n\t\t\t\t\t\tthis._df.timezoneMinutes,\r\n\t\t\t\t\t\tthis._df.timezone\r\n\t\t\t\t\t);\r\n\t\t\t\t\tif (gridDate.getTime() > axisBreak.startDate.getTime()) {\r\n\t\t\t\t\t\t$time.add(gridDate, axisBreak.gridInterval.timeUnit, axisBreak.gridInterval.count, this._df.utc);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\taxisBreak.gridDate = gridDate;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected getFirstWeekDay(): number {\r\n\t\tif (this._df) {\r\n\t\t\treturn this._df.firstDayOfWeek;\r\n\t\t}\r\n\t\treturn 1;\r\n\t}\r\n\r\n\t/**\r\n\t * [getGridDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param date           [description]\r\n\t * @param intervalCount  [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getGridDate(date: Date, intervalCount: number): Date {\r\n\t\tlet timeUnit: TimeUnit = this._gridInterval.timeUnit;\r\n\t\tlet realIntervalCount: number = this._gridInterval.count;\r\n\t\t// round date\r\n\t\t$time.round(\r\n\t\t\tdate,\r\n\t\t\ttimeUnit,\r\n\t\t\t1,\r\n\t\t\tthis._firstWeekDay,\r\n\t\t\tthis._df.utc,\r\n\t\t\tundefined,\r\n\t\t\tthis._df.timezoneMinutes,\r\n\t\t\tthis._df.timezone\r\n\t\t);\r\n\r\n\t\tlet prevTimestamp: number = date.getTime();\r\n\r\n\t\tlet newDate: Date = $time.copy(date);\r\n\t\t// modify date by adding intervalcount\r\n\t\tlet timestamp: number = $time.add(newDate, timeUnit, intervalCount, this._df.utc).getTime();\r\n\r\n\t\t// if it's axis break, get first rounded date which is not in a break\r\n\t\tlet axisBreak: DateAxisBreak = <DateAxisBreak>this.isInBreak(timestamp);\r\n\t\tif (axisBreak && axisBreak.endDate) {\r\n\t\t\tnewDate = new Date(axisBreak.endDate.getTime());\r\n\t\t\t$time.round(\r\n\t\t\t\tnewDate,\r\n\t\t\t\ttimeUnit,\r\n\t\t\t\trealIntervalCount,\r\n\t\t\t\tthis._firstWeekDay,\r\n\t\t\t\tthis._df.utc,\r\n\t\t\t\tundefined,\r\n\t\t\t\tthis._df.timezoneMinutes,\r\n\t\t\t\tthis._df.timezone\r\n\t\t\t);\r\n\t\t\tif (newDate.getTime() < axisBreak.endDate.getTime()) {\r\n\t\t\t\t$time.add(newDate, timeUnit, realIntervalCount, this._df.utc);\r\n\t\t\t}\r\n\t\t\ttimestamp = newDate.getTime();\r\n\t\t}\r\n\r\n\t\t// get duration between grid lines with break duration removed\r\n\t\tlet durationBreaksRemoved: number = this.adjustDifference(prevTimestamp, timestamp);\r\n\t\t// calculate how many time units fit to this duration\r\n\t\tlet countBreaksRemoved: number = Math.round(durationBreaksRemoved / $time.getDuration(timeUnit));\r\n\r\n\t\t// if less units fit, add one and repeat\r\n\t\tif (countBreaksRemoved < realIntervalCount) {\r\n\t\t\treturn this.getGridDate(date, intervalCount + realIntervalCount);\r\n\t\t}\r\n\r\n\t\treturn newDate;\r\n\t}\r\n\r\n\t/**\r\n\t * [getBreaklessDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param axisBreak  [description]\r\n\t * @param timeUnit   [description]\r\n\t * @param count      [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getBreaklessDate(axisBreak: DateAxisBreak, timeUnit: TimeUnit, count: number): Date {\r\n\t\tlet date = new Date(axisBreak.endValue);\r\n\t\t$time.round(\r\n\t\t\tdate,\r\n\t\t\ttimeUnit,\r\n\t\t\tcount,\r\n\t\t\tthis._firstWeekDay,\r\n\t\t\tthis._df.utc,\r\n\t\t\tundefined,\r\n\t\t\tthis._df.timezoneMinutes,\r\n\t\t\tthis._df.timezone\r\n\t\t);\r\n\t\t$time.add(date, timeUnit, count, this._df.utc);\r\n\r\n\t\tlet timestamp = date.getTime();\r\n\r\n\t\taxisBreak = <DateAxisBreak>this.isInBreak(timestamp);\r\n\t\tif (axisBreak) {\r\n\t\t\treturn this.getBreaklessDate(axisBreak, timeUnit, count);\r\n\t\t}\r\n\t\treturn date;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates all Axis elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validateAxisElements(): void {\r\n\t\tif ($type.isNumber(this.max) && $type.isNumber(this.min)) {\r\n\r\n\t\t\tthis.calculateZoom();\r\n\r\n\t\t\t// first regular items\r\n\t\t\tlet timestamp = this._gridDate.getTime();\r\n\t\t\tlet timeUnit = this._gridInterval.timeUnit;\r\n\t\t\tlet intervalCount = this._gridInterval.count;\r\n\t\t\tlet prevGridDate = $time.copy(this._gridDate);\r\n\r\n\t\t\tlet dataItemsIterator = this._dataItemsIterator;\r\n\t\t\tthis.resetIterators();\r\n\r\n\t\t\twhile (timestamp <= this._maxZoomed) {\r\n\t\t\t\tlet date = this.getGridDate($time.copy(prevGridDate), intervalCount);\r\n\t\t\t\ttimestamp = date.getTime();\r\n\r\n\t\t\t\tlet endDate = $time.copy(date); // you might think it's easier to add intervalduration to timestamp, however it won't work for months or years which are not of the same length\r\n\t\t\t\tendDate = $time.add(endDate, timeUnit, intervalCount, this._df.utc);\r\n\r\n\t\t\t\tlet format = this.dateFormats.getKey(timeUnit);\r\n\r\n\t\t\t\tif (this.markUnitChange && prevGridDate) {\r\n\t\t\t\t\tif ($time.checkChange(date, prevGridDate, this._nextGridUnit, this._df.utc)) {\r\n\t\t\t\t\t\tif (timeUnit !== \"year\") {\r\n\t\t\t\t\t\t\tformat = this.periodChangeDateFormats.getKey(timeUnit);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet text = this._df.format(date, format);\r\n\r\n\t\t\t\tlet dataItem = dataItemsIterator.find((x) => x.text === text);\r\n\t\t\t\tif (dataItem.__disabled) {\r\n\t\t\t\t\tdataItem.__disabled = false;\r\n\t\t\t\t}\r\n\t\t\t\tthis.appendDataItem(dataItem);\r\n\r\n\t\t\t\tdataItem.axisBreak = undefined;\r\n\t\t\t\tdataItem.date = date;\r\n\t\t\t\tdataItem.endDate = endDate;\r\n\r\n\t\t\t\tdataItem.text = text;\r\n\r\n\t\t\t\tthis.validateDataElement(dataItem);\r\n\r\n\t\t\t\tprevGridDate = date;\r\n\t\t\t}\r\n\r\n\t\t\t// breaks later\r\n\t\t\tlet renderer: AxisRenderer = this.renderer;\r\n\r\n\t\t\tif (this._axisBreaks) {\r\n\t\t\t\t$iter.each(this._axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\t\tif (axisBreak.breakSize > 0) {\r\n\t\t\t\t\t\tlet timeUnit: TimeUnit = axisBreak.gridInterval.timeUnit;\r\n\t\t\t\t\t\tlet intervalCount: number = axisBreak.gridInterval.count;\r\n\r\n\t\t\t\t\t\t// only add grid if gap is bigger then minGridDistance\r\n\t\t\t\t\t\tif ($math.getDistance(axisBreak.startPoint, axisBreak.endPoint) > renderer.minGridDistance * 4) {\r\n\t\t\t\t\t\t\tlet timestamp: number = axisBreak.gridDate.getTime();\r\n\r\n\t\t\t\t\t\t\tlet prevGridDate;\r\n\t\t\t\t\t\t\tlet count: number = 0;\r\n\t\t\t\t\t\t\twhile (timestamp <= axisBreak.adjustedMax) {\r\n\t\t\t\t\t\t\t\tlet date: Date = $time.copy(axisBreak.gridDate);\r\n\t\t\t\t\t\t\t\ttimestamp = $time.add(date, timeUnit, intervalCount * count, this._df.utc).getTime();\r\n\t\t\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t\t\t\tif (timestamp > axisBreak.adjustedStartValue && timestamp < axisBreak.adjustedEndValue) {\r\n\t\t\t\t\t\t\t\t\tlet endDate = $time.copy(date); // you might think it's easier to add intervalduration to timestamp, however it won't work for months or years which are not of the same length\r\n\t\t\t\t\t\t\t\t\tendDate = $time.add(endDate, timeUnit, intervalCount, this._df.utc);\r\n\r\n\t\t\t\t\t\t\t\t\tlet format = this.dateFormats.getKey(timeUnit);\r\n\r\n\t\t\t\t\t\t\t\t\tif (this.markUnitChange && prevGridDate) {\r\n\t\t\t\t\t\t\t\t\t\tif ($time.checkChange(date, prevGridDate, this._nextGridUnit, this._df.utc)) {\r\n\t\t\t\t\t\t\t\t\t\t\tif (timeUnit !== \"year\") {\r\n\t\t\t\t\t\t\t\t\t\t\t\tformat = this.periodChangeDateFormats.getKey(timeUnit);\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\tlet text: string = this._df.format(date, format);\r\n\r\n\t\t\t\t\t\t\t\t\tlet dataItem: this[\"_dataItem\"] = dataItemsIterator.find((x) => x.text === text);\r\n\t\t\t\t\t\t\t\t\tif (dataItem.__disabled) {\r\n\t\t\t\t\t\t\t\t\t\tdataItem.__disabled = false;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t//this.processDataItem(dataItem);\r\n\t\t\t\t\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\t\t\t\t\tdataItem.axisBreak = axisBreak;\r\n\t\t\t\t\t\t\t\t\taxisBreak.dataItems.moveValue(dataItem);\r\n\r\n\t\t\t\t\t\t\t\t\tdataItem.date = date;\r\n\t\t\t\t\t\t\t\t\tdataItem.endDate = endDate;\r\n\t\t\t\t\t\t\t\t\tdataItem.text = text;\r\n\t\t\t\t\t\t\t\t\tprevGridDate = date;\r\n\t\t\t\t\t\t\t\t\tthis.validateDataElement(dataItem);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\r\n\t\tdataItem.itemIndex = this._axisItemCount;\r\n\t\tthis._axisItemCount++;\r\n\r\n\t\tif ($type.isNumber(this.max) && $type.isNumber(this.min)) {\r\n\t\t\tlet renderer: AxisRenderer = this.renderer;\r\n\r\n\t\t\tlet timestamp = dataItem.value;\r\n\t\t\tlet endTimestamp = dataItem.endValue;\r\n\r\n\t\t\tif (!$type.isNumber(endTimestamp)) {\r\n\t\t\t\tendTimestamp = timestamp;\r\n\t\t\t}\r\n\r\n\t\t\tlet position: number = this.valueToPosition(timestamp);\r\n\t\t\tlet endPosition: number = this.valueToPosition(endTimestamp);\r\n\t\t\tlet fillEndPosition = endPosition;\r\n\r\n\t\t\tif (!dataItem.isRange && this._gridInterval.count > this.baseInterval.count) {\r\n\t\t\t\tendPosition = position + (endPosition - position) / (this._gridInterval.count / this.baseInterval.count);\r\n\t\t\t}\r\n\r\n\t\t\tdataItem.position = position;\r\n\r\n\t\t\tlet tick: AxisTick = dataItem.tick;\r\n\t\t\tif (tick && !tick.disabled) {\r\n\t\t\t\trenderer.updateTickElement(tick, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet grid: Grid = dataItem.grid;\r\n\t\t\tif (grid && !grid.disabled) {\r\n\t\t\t\trenderer.updateGridElement(grid, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet fill: AxisFill = dataItem.axisFill;\r\n\t\t\tif (fill && !fill.disabled) {\r\n\t\t\t\trenderer.updateFillElement(fill, position, fillEndPosition);\r\n\t\t\t\tif (!dataItem.isRange) {\r\n\t\t\t\t\tthis.fillRule(dataItem);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet mask: AxisFill = dataItem.mask;\r\n\t\t\tif (mask) {\r\n\t\t\t\trenderer.updateFillElement(mask, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tif (dataItem.bullet) {\r\n\t\t\t\trenderer.updateBullet(dataItem.bullet, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet label: AxisLabel = dataItem.label;\r\n\t\t\tif (label && !label.disabled) {\r\n\t\t\t\tlet location = label.location;\r\n\r\n\r\n\r\n\t\t\t\tif (location == 0) {\r\n\t\t\t\t\tif (this._gridInterval.count == 1 && this._gridInterval.timeUnit != \"week\" && !dataItem.isRange) {\r\n\t\t\t\t\t\tlocation = 0.5;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlocation = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\trenderer.updateLabelElement(label, position, endPosition, location);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A duration in milliseconds of the `baseInterval`.\r\n\t *\r\n\t * @return Duration (ms)\r\n\t */\r\n\tpublic get baseDuration(): number {\r\n\t\treturn $time.getDuration(this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts min/max values.\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @todo Description (review)\r\n\t * @param min  Min timestamp\r\n\t * @param max  Max timestamp\r\n\t * @return Adjusted min/max step\r\n\t */\r\n\tpublic adjustMinMax(min: number, max: number): IMinMaxStep {\r\n\t\treturn { min: min, max: max, step: this.baseDuration };\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts the minimum timestamp as per cell start location.\r\n\t *\r\n\t * @param value  Value\r\n\t * @return Adjusted value\r\n\t */\r\n\tprotected fixMin(value: number) {\r\n\t\t// like this because months are not equal\r\n\t\tlet interval = this.baseInterval;\r\n\r\n\t\tlet startTime = $time.round(\r\n\t\t\tnew Date(value),\r\n\t\t\tinterval.timeUnit,\r\n\t\t\tinterval.count,\r\n\t\t\tthis._firstWeekDay,\r\n\t\t\tthis._df.utc,\r\n\t\t\tundefined,\r\n\t\t\tthis._df.timezoneMinutes,\r\n\t\t\tthis._df.timezone\r\n\t\t).getTime();\r\n\t\tlet endTime = $time.add(new Date(startTime), interval.timeUnit, interval.count, this._df.utc).getTime();\r\n\r\n\t\treturn startTime + (endTime - startTime) * this.startLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts the maximum timestamp as per cell start location.\r\n\t *\r\n\t * @param value  Value\r\n\t * @return Adjusted value\r\n\t */\r\n\tprotected fixMax(value: number) {\r\n\t\t// like this because months are not equal\r\n\t\tlet interval = this.baseInterval;\r\n\r\n\t\tlet startTime = $time.round(\r\n\t\t\tnew Date(value),\r\n\t\t\tinterval.timeUnit,\r\n\t\t\tinterval.count,\r\n\t\t\tthis._firstWeekDay,\r\n\t\t\tthis._df.utc,\r\n\t\t\tundefined,\r\n\t\t\tthis._df.timezoneMinutes,\r\n\t\t\tthis._df.timezone\r\n\t\t).getTime();\r\n\t\tlet endTime = $time.add(new Date(startTime), interval.timeUnit, interval.count, this._df.utc).getTime();\r\n\r\n\t\treturn startTime + (endTime - startTime) * this.endLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * [chooseInterval description]\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @todo Description\r\n\t * @param index      [description]\r\n\t * @param duration   [description]\r\n\t * @param gridCount  [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic chooseInterval(index: number, duration: number, gridCount: number, intervals?: List<ITimeInterval>): ITimeInterval {\r\n\t\tif (!intervals) {\r\n\t\t\tintervals = this.gridIntervals;\r\n\t\t}\r\n\r\n\t\tlet gridInterval: ITimeInterval = intervals.getIndex(index);\r\n\r\n\t\tlet intervalDuration: number = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\r\n\t\tlet lastIndex: number = intervals.length - 1;\r\n\t\tif (index >= lastIndex) {\r\n\t\t\treturn { ...intervals.getIndex(lastIndex) };\r\n\t\t}\r\n\r\n\t\tlet count: number = Math.ceil(duration / intervalDuration);\r\n\r\n\t\tif (duration < intervalDuration && index > 0) {\r\n\t\t\treturn { ...intervals.getIndex(index - 1) };\r\n\t\t}\r\n\t\tif (count <= gridCount) {\r\n\t\t\treturn { ...intervals.getIndex(index) };\r\n\t\t} else {\r\n\t\t\tif (index + 1 < intervals.length) {\r\n\t\t\t\treturn this.chooseInterval(index + 1, duration, gridCount, intervals);\r\n\t\t\t} else {\r\n\t\t\t\treturn { ...intervals.getIndex(index) };\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Formats the value according to axis' own [[DateFormatter]].\r\n\t *\r\n\t * @param value  Source value\r\n\t * @return Formatted value\r\n\t */\r\n\tpublic formatLabel(value: number): string {\r\n\t\treturn this._df.format(value);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a Date to an asbolute pixel position within Axis.\r\n\t *\r\n\t * @param date  Date\r\n\t * @return Position (px)\r\n\t */\r\n\tpublic dateToPosition(date: Date): number {\r\n\t\treturn this.valueToPosition(date.getTime());\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a numeric timestamp or a `Date` to a relative position on axis.\r\n\t *\r\n\t * @param date  Date or a timestamp\r\n\t * @return Relative position\r\n\t */\r\n\tpublic anyToPosition(date: Date | number): number {\r\n\t\tif (date instanceof Date) {\r\n\t\t\treturn this.dateToPosition(date);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.valueToPosition(date);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts date to orientation point (x, y, angle) on axis\r\n\t *\r\n\t * @param date Date\r\n\t * @return IOrientationPoint\r\n\t */\r\n\tpublic dateToPoint(date: Date): IOrientationPoint {\r\n\t\tlet position = this.dateToPosition(date);\r\n\t\tlet point = this.renderer.positionToPoint(position);\r\n\t\tlet angle = this.renderer.positionToAngle(position);\r\n\t\treturn { x: point.x, y: point.y, angle: angle };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a numeric value to orientation (x, y, angle) point on axis\r\n\t *\r\n\t * @param value  Value\r\n\t * @return Orientation point\r\n\t */\r\n\tpublic anyToPoint(date: Date | number): IOrientationPoint {\r\n\t\tif (date instanceof Date) {\r\n\t\t\treturn this.dateToPoint(date);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.valueToPoint(date);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts pixel position within Axis to a corresponding Date.\r\n\t *\r\n\t * @param position  Position (px)\r\n\t * @return Date\r\n\t */\r\n\tpublic positionToDate(position: number): Date {\r\n\t\treturn new Date(this.positionToValue(position));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the relative position on axis for series' data item's value.\r\n\t *\r\n\t * @since 4.5.14\r\n\t * @param  dataItem  Data item\r\n\t * @param  key       Data field to get value from\r\n\t * @param  location  Location (0-1)\r\n\t * @return           Relative position\r\n\t */\r\n\tpublic getPositionX(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\t//let stack: number = dataItem.getValue(\"valueX\", \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\tlet position = this.valueToPosition(value);\r\n\t\tif (range) {\r\n\t\t\tposition = $math.fitToRange(position, range.start, range.end);\r\n\t\t}\r\n\r\n\t\treturn position;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns relative position on axis for series' data item's value.\r\n\t *\r\n\t * @since 4.5.14\r\n\t * @param  dataItem  Data item\r\n\t * @param  key       Data field to get value from\r\n\t * @param  location  Location (0-1)\r\n\t * @return           Relative position\r\n\t */\r\n\tpublic getPositionY(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\tlet stack: number = dataItem.getValue(\"valueX\", \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\tlet position = this.valueToPosition(value + stack);\r\n\t\tif (range) {\r\n\t\t\tposition = $math.fitToRange(position, range.start, range.end);\r\n\t\t}\r\n\r\n\t\treturn position;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an angle for series data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       Data field to get value from\r\n\t * @param location  Location (0-1)\r\n\t * @param stackKey  Stack ID\r\n\t * @param range Range to fit in\r\n\t * @return Angle\r\n\t */\r\n\tpublic getAngle(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\tlet stack: number = dataItem.getValue(stackKey, \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\tlet position = this.valueToPosition(value + stack);\r\n\t\tif (range) {\r\n\t\t\tposition = $math.fitToRange(position, range.start, range.end);\r\n\t\t}\r\n\r\n\t\treturn this.positionToAngle(position);\r\n\t}\r\n\r\n\t/**\r\n\t * [getTimeByLocation description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param dataItem  [description]\r\n\t * @param key       [description]\r\n\t * @param location  [description]\r\n\t * @return [description]\r\n\t */\r\n\tprotected getTimeByLocation(dataItem: XYSeriesDataItem, key: string, location: number): number {\r\n\r\n\t\tif (!$type.hasValue(key)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = dataItem.workingLocations[key];\r\n\r\n\t\t\tif (!$type.isNumber(location)) {\r\n\t\t\t\tlocation = 0;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet startTime: number = dataItem.values[key][\"open\"];\r\n\t\tlet endTime: number = dataItem.values[key][\"close\"];\r\n\r\n\t\tlet workingValue = dataItem.values[key].workingValue;\r\n\t\tlet value = dataItem.values[key].value;\r\n\r\n\t\tlet difference = value - workingValue;\r\n\t\tstartTime -= difference;\r\n\t\tendTime -= difference;\r\n\r\n\t\tif ($type.isNumber(startTime) && $type.isNumber(endTime)) {\r\n\t\t\treturn startTime + (endTime - startTime) * location;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes a related series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic processSeriesDataItem(dataItem: XYSeriesDataItem, axisLetter?: string): void {\r\n\t\tlet series = dataItem.component;\r\n\t\tlet time: number;\r\n\r\n\t\tlet date: Date = (<any>dataItem)[\"date\" + axisLetter];\r\n\r\n\t\tif ($type.isNumber(this.timezoneOffset)) {\r\n\t\t\tdate.setTime(date.getTime() + (date.getTimezoneOffset() - this.timezoneOffset) * 60000)\r\n\t\t\tdataItem.setValue(\"date\" + axisLetter, date.getTime(), 0);\r\n\t\t}\r\n\t\telse if ($type.hasValue(this.timezone)) {\r\n\t\t\tdate = $time.setTimezone(date, this.timezone);\r\n\t\t\tdataItem.setValue(\"date\" + axisLetter, date.getTime(), 0);\r\n\t\t\t(<any>dataItem)[\"date\" + axisLetter] = date;\r\n\t\t}\r\n\r\n\t\tif (date) {\r\n\t\t\ttime = date.getTime();\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet openDate: Date = (<any>dataItem)[\"openDate\" + axisLetter];\r\n\t\tlet prevSeriesTime: number = this._prevSeriesTime[series.uid];\r\n\r\n\r\n\t\tlet openTime: number;\r\n\t\tif (openDate) {\r\n\t\t\topenTime = openDate.getTime();\r\n\t\t}\r\n\r\n\t\tif ($type.isNumber(openTime)) {\r\n\t\t\tlet difference = Math.abs(time - openTime);\r\n\r\n\t\t\tif (this._minDifference[series.uid] > difference) {\r\n\t\t\t\tthis._minDifference[series.uid] = difference;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet differece: number = time - prevSeriesTime;\r\n\r\n\t\tif (differece > 0) {\r\n\t\t\tif (this._minDifference[series.uid] > differece) {\r\n\t\t\t\tthis._minDifference[series.uid] = differece;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._prevSeriesTime[series.uid] = time;\r\n\r\n\t\tif (series._baseInterval[this.uid]) {\r\n\t\t\tthis.postProcessSeriesDataItem(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [updateAxisBySeries description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic updateAxisBySeries() {\r\n\t\tsuper.updateAxisBySeries();\r\n\r\n\t\tlet baseInterval: ITimeInterval = this.chooseInterval(0, this.minDifference, 1);\r\n\r\n\t\t// handle short months\r\n\r\n\t\tif (this.minDifference >= $time.getDuration(\"day\", 27) && baseInterval.timeUnit == \"week\") {\r\n\t\t\tbaseInterval.timeUnit = \"month\";\r\n\t\t\tbaseInterval.count = 1;\r\n\t\t}\r\n\t\tif (baseInterval.timeUnit == \"month\") {\r\n\t\t\tif (this.minDifference >= $time.getDuration(\"day\", 29 * 2) && baseInterval.count == 1) {\r\n\t\t\t\tbaseInterval.count = 2;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.minDifference >= $time.getDuration(\"day\", 29 * 3) && baseInterval.count == 2) {\r\n\t\t\t\tbaseInterval.count = 3;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.minDifference >= $time.getDuration(\"day\", 29 * 6) && baseInterval.count == 5) {\r\n\t\t\t\tbaseInterval.count = 6;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// handle daylight saving\r\n\t\tif (this.minDifference >= $time.getDuration(\"hour\", 23) && baseInterval.timeUnit == \"hour\") {\r\n\t\t\tbaseInterval.timeUnit = \"day\";\r\n\t\t\tbaseInterval.count = 1;\r\n\t\t}\r\n\r\n\t\tif (this.minDifference >= $time.getDuration(\"week\", 1) - $time.getDuration(\"hour\", 1) && baseInterval.timeUnit == \"day\") {\r\n\t\t\tbaseInterval.timeUnit = \"week\";\r\n\t\t\tbaseInterval.count = 1;\r\n\t\t}\r\n\r\n\t\tif (this.minDifference >= $time.getDuration(\"year\", 1) - $time.getDuration(\"day\", 1.01) && baseInterval.timeUnit == \"month\") {\r\n\t\t\tbaseInterval.timeUnit = \"year\";\r\n\t\t\tbaseInterval.count = 1;\r\n\t\t}\r\n\r\n\t\tthis._baseIntervalReal = baseInterval;\r\n\t\tthis._mainBaseInterval = baseInterval;\r\n\r\n\t\t// no need to invalidate\r\n\t}\r\n\r\n\t/**\r\n\t * A base interval (granularity) of data.\r\n\t *\r\n\t * Used to indicate what are the base units of your data.\r\n\t *\r\n\t * For example, if you have a data set that has a data point every 5 minutes,\r\n\t * you may want to set this to `{ timeUnit: \"minute\", count: 5 }`.\r\n\t *\r\n\t * If not set, the Axis will try to determine the setting by its own, looking\r\n\t * at actual data.\r\n\t *\r\n\t * For best results, try to follow these values for `count`:\r\n\t *\r\n\t * When unit is \"month\", use 12 / count = round number\r\n\t * When unit is \"hour\", use 24 / count = round number\r\n\t * When unit is \"second\" and \"minute\", use 60 / count = round number\r\n\t *\r\n\t * @param timeInterval base interval\r\n\t */\r\n\tpublic set baseInterval(timeInterval: ITimeInterval) {\r\n\t\tif (JSON.stringify(this._baseInterval) != JSON.stringify(timeInterval)) {\r\n\t\t\tthis._baseInterval = timeInterval;\r\n\t\t\tthis._mainBaseInterval = timeInterval;\r\n\t\t\tif (!$type.isNumber(timeInterval.count)) {\r\n\t\t\t\ttimeInterval.count = 1;\r\n\t\t\t}\r\n\t\t\tthis.invalidate();\r\n\t\t\tthis.postProcessSeriesDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Base interval\r\n\t */\r\n\tpublic get baseInterval(): ITimeInterval {\r\n\t\tif (this._groupInterval) {\r\n\t\t\treturn this._groupInterval;\r\n\t\t}\r\n\t\telse if (this._baseInterval) {\r\n\t\t\treturn this._baseInterval;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._baseIntervalReal;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates granularity of the data of source (unaggregated) data.\r\n\t *\r\n\t * @since 4.7.0\r\n\t * @return Granularity of the main data set\r\n\t */\r\n\tpublic get mainBaseInterval(): ITimeInterval {\r\n\t\tif (this._baseInterval) {\r\n\t\t\treturn this._baseInterval;\r\n\t\t}\r\n\t\telse if (this._mainBaseInterval) {\r\n\t\t\treturn this._mainBaseInterval;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._baseIntervalReal;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * If enabled, axis will automatically collapse empty (without data points)\r\n\t * periods of time, i.e. weekends.\r\n\t *\r\n\t * An \"empty\" period is considered a stretch of time in the length of current\r\n\t * `baseInterval` without a single data point in it.\r\n\t *\r\n\t * For each such empty period, axis will automatically create an\r\n\t * [[AxisBreak]]. By default they will be invisible. You can still configure\r\n\t * them by accessing `axis.breaks.template`.\r\n\t *\r\n\t * [More info about breaks](https://www.amcharts.com/docs/v4/concepts/axes/#Breaks).\r\n\t *\r\n\t * Important notes:\r\n\t * * If you set this property to `true`, you can not add your custom axis breaks to this axis anymore.\r\n\t * * Using this feature affects performance. Use only if you need it.\r\n\t * * Setting this to `true` will reset appearance of breaks. If you want to modify appearance, do it *after* you set `skipEmptyPeriods`.\r\n\t * * Some axis label overlapping might happen.\r\n\t * * This setting is not compatible with `groupData = true`.\r\n\t *\r\n\t * @default false\r\n\t * @param value  Remove empty stretches of time?\r\n\t */\r\n\tpublic set skipEmptyPeriods(value: boolean) {\r\n\r\n\t\tif (value) {\r\n\t\t\tlet breakTemplate = this.axisBreaks.template;\r\n\t\t\tbreakTemplate.startLine.disabled = true;\r\n\t\t\tbreakTemplate.endLine.disabled = true;\r\n\t\t\tbreakTemplate.fillShape.disabled = true;\r\n\t\t\tbreakTemplate.breakSize = 0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this._gapBreaks) {\r\n\t\t\t\tthis.axisBreaks.clear();\r\n\t\t\t\tthis._gapBreaks = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.setPropertyValue(\"skipEmptyPeriods\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t\tthis.postProcessSeriesDataItems();\r\n\t\t\tthis.invalidateSeries();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Remove empty stretches of time?\r\n\t */\r\n\tpublic get skipEmptyPeriods(): boolean {\r\n\t\treturn this.getPropertyValue(\"skipEmptyPeriods\");\r\n\t}\r\n\r\n\t/**\r\n\t * A special date format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t *\r\n\t * @param value  Date format\r\n\t */\r\n\tpublic set tooltipDateFormat(value: string | Intl.DateTimeFormatOptions) {\r\n\t\tthis.setPropertyValue(\"tooltipDateFormat\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Date format\r\n\t */\r\n\tpublic get tooltipDateFormat(): string | Intl.DateTimeFormatOptions {\r\n\t\treturn this.getPropertyValue(\"tooltipDateFormat\");\r\n\t}\r\n\r\n\t/**\r\n\t * Use `periodChangeDateFormats` to apply different formats to the first\r\n\t * label in bigger time unit.\r\n\t *\r\n\t * @default true\r\n\t * @param value  Use different format for period beginning?\r\n\t */\r\n\tpublic set markUnitChange(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"markUnitChange\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Use different format for period beginning?\r\n\t */\r\n\tpublic get markUnitChange(): boolean {\r\n\t\treturn this.getPropertyValue(\"markUnitChange\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a tooltip, based on specific relative position\r\n\t * within axis.\r\n\t *\r\n\t * The label will be formatted as per [[DateFormatter]] set for the whole\r\n\t * chart, or explicitly for this Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Position\r\n\t * @return Label (formatted date)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet text: string;\r\n\t\tlet date = this.positionToDate(position);\r\n\t\tdate = $time.round(\r\n\t\t\tdate,\r\n\t\t\tthis.baseInterval.timeUnit,\r\n\t\t\tthis.baseInterval.count,\r\n\t\t\tthis._firstWeekDay,\r\n\t\t\tthis._df.utc,\r\n\t\t\tnew Date(this.min),\r\n\t\t\tthis._df.timezoneMinutes,\r\n\t\t\tthis._df.timezone\r\n\t\t);\r\n\r\n\t\tthis.tooltipDate = date;\r\n\r\n\t\tif ($type.hasValue(this.tooltipDateFormat)) {\r\n\t\t\ttext = this._df.format(date, this.tooltipDateFormat);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet dateFormat = this.dateFormats.getKey(this.baseInterval.timeUnit);\r\n\t\t\tif (dateFormat) {\r\n\t\t\t\ttext = this._df.format(date, dateFormat);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttext = this.getPositionLabel(position);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn text;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"getTooltipText\", text);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Takes an absolute position within axis and adjust it to a specific position within base interval. (cell)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position Source position\r\n\t * @param location  Location in the cell\r\n\t * @return Adjusted position\r\n\t */\r\n\tpublic roundPosition(position: number, location?: AxisItemLocation, axisLocation?: number): number {\r\n\t\tlet baseInterval = this.baseInterval;\r\n\t\tlet timeUnit = baseInterval.timeUnit;\r\n\t\tlet count = baseInterval.count;\r\n\r\n\t\tlet date: Date = this.positionToDate(position);\r\n\r\n\t\t$time.round(\r\n\t\t\tdate,\r\n\t\t\ttimeUnit,\r\n\t\t\tcount,\r\n\t\t\tthis._firstWeekDay,\r\n\t\t\tthis._df.utc,\r\n\t\t\tundefined,\r\n\t\t\tthis._df.timezoneMinutes,\r\n\t\t\tthis._df.timezone\r\n\t\t);\r\n\r\n\t\tif (location > 0) {\r\n\t\t\t$time.add(date, timeUnit, location * count, this._df.utc);\r\n\t\t}\r\n\r\n\t\tif (axisLocation > 0 && axisLocation < 1) {\r\n\t\t\tdate.setTime(date.getTime() + this.baseDuration * axisLocation);\r\n\t\t}\r\n\r\n\t\tif (this.isInBreak(date.getTime())) {\r\n\t\t\twhile (date.getTime() < this.max) {\r\n\t\t\t\t$time.add(date, timeUnit, count, this._df.utc);\r\n\t\t\t\tif (!this.isInBreak(date.getTime())) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn this.dateToPosition(date);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an relative position of the start of the cell (period), that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param position  Relative position\r\n\t * @return Cell start relative position\r\n\t */\r\n\tpublic getCellStartPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an relative position of the end of the cell (period), that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param position  Relative position\r\n\t * @return Cell end relative position\r\n\t */\r\n\tpublic getCellEndPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 1);\r\n\t\t//return this.dateToPosition($time.add(this.positionToDate(this.roundPosition(position, 1)), this.baseInterval.timeUnit, this.baseInterval.count));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a Series data item that corresponds to the specific pixel position\r\n\t * of the Axis.\r\n\t *\r\n\t * If `findNearest` (third parameter) is set to `true`, the method will try\r\n\t * to locate nearest available data item if none is found directly under\r\n\t * `position`.\r\n\t *\r\n\t * @param series       Series\r\n\t * @param position     Position (px)\r\n\t * @param findNearest  Should axis try to find nearest tooltip if there is no data item at exact position\r\n\t * @return Data item\r\n\t */\r\n\tpublic getSeriesDataItem(series: XYSeries, position: number, findNearest?: boolean): XYSeriesDataItem {\r\n\r\n\t\tlet value: number = this.positionToValue(position);\r\n\r\n\t\tlet location = 0.5;\r\n\t\tif (this.axisLetter == \"Y\") {\r\n\t\t\tlocation = series.dataItems.template.locations.dateY;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlocation = series.dataItems.template.locations.dateX;\r\n\t\t}\r\n\r\n\t\tlet deltaValue = value - location * this.baseDuration;\r\n\r\n\t\tlet date: Date = $time.round(\r\n\t\t\tnew Date(value),\r\n\t\t\tthis.baseInterval.timeUnit,\r\n\t\t\tthis.baseInterval.count,\r\n\t\t\tthis._firstWeekDay,\r\n\t\t\tthis._df.utc,\r\n\t\t\tundefined,\r\n\t\t\tthis._df.timezoneMinutes,\r\n\t\t\tthis._df.timezone\r\n\t\t);\r\n\t\tlet nextDate: Date = $time.round(\r\n\t\t\tnew Date(value + this.baseDuration),\r\n\t\t\tthis.baseInterval.timeUnit,\r\n\t\t\tthis.baseInterval.count,\r\n\t\t\tthis._firstWeekDay,\r\n\t\t\tthis._df.utc,\r\n\t\t\tundefined,\r\n\t\t\tthis._df.timezoneMinutes,\r\n\t\t\tthis._df.timezone\r\n\t\t);\r\n\r\n\t\tif (nextDate.getTime() > date.getTime()) {\r\n\t\t\tif (Math.abs(nextDate.getTime() - deltaValue) < Math.abs(deltaValue - date.getTime())) {\r\n\t\t\t\tdate = nextDate;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet dataItemsByAxis = series.dataItemsByAxis.getKey(this.uid);\r\n\r\n\t\tlet dataItem = dataItemsByAxis.getKey(date.getTime() + series.currentDataSetId);\r\n\r\n\t\t// todo:  alternatively we can find closiest here\r\n\t\tif (!dataItem && findNearest) {\r\n\r\n\t\t\tlet key: \"dateX\" | \"dateY\";\r\n\r\n\t\t\tif (this.axisLetter == \"Y\") {\r\n\t\t\t\tkey = \"dateY\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tkey = \"dateX\";\r\n\t\t\t}\r\n\r\n\t\t\tdataItem = series.dataItems.getIndex(series.dataItems.findClosestIndex(date.getTime(), (x) => {\r\n\t\t\t\tif (x[key]) {\r\n\t\t\t\t\treturn <number>x[key].getTime();\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn -Infinity;\r\n\t\t\t\t}\r\n\t\t\t}, \"any\"));\r\n\t\t}\r\n\r\n\t\treturn dataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a formatted date based on position in axis scale.\r\n\t *\r\n\t * Please note that `position` represents position within axis which may be\r\n\t * zoomed and not correspond to Cursor's `position`.\r\n\t *\r\n\t * To convert Cursor's `position` to Axis' `position` use `toAxisPosition()` method.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/tutorials/tracking-cursors-position-via-api/#Tracking_Cursor_s_position} For more information about cursor tracking.\r\n\t * @param position  Relative position on axis (0-1)\r\n\t * @return Position label\r\n\t */\r\n\tpublic getPositionLabel(position: number): string {\r\n\t\t// @todo Better format recognition\r\n\t\tlet date = this.positionToDate(position);\r\n\t\treturn this._df.format(date, this.getCurrentLabelFormat());\r\n\t}\r\n\r\n\t/**\r\n\t * Returns label date format based on currently used time units\r\n\t *\r\n\t * @return Format\r\n\t */\r\n\tprotected getCurrentLabelFormat(): string | Intl.DateTimeFormatOptions {\r\n\t\treturn this.dateFormats.getKey(this._gridInterval ? this._gridInterval.timeUnit : \"day\");\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes an Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic initRenderer(): void {\r\n\t\tsuper.initRenderer();\r\n\t\tlet renderer = this.renderer;\r\n\t\tif (renderer) {\r\n\t\t\t// Set defaults\r\n\t\t\trenderer.ticks.template.location = 0;\r\n\t\t\trenderer.grid.template.location = 0;\r\n\t\t\trenderer.labels.template.location = 0;\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Coordinates of the actual axis start.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Base point\r\n\t */\r\n\tpublic get basePoint(): IPoint {\r\n\t\treturn { x: 0, y: 0 };\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected animateMinMax(min: number, max: number): Animation {\r\n\t\tlet animation = this.animate([{ property: \"_minAdjusted\", from: this._minAdjusted, to: min }, { property: \"_maxAdjusted\", from: this._maxAdjusted, to: max }], this.rangeChangeDuration, this.rangeChangeEasing);\r\n\t\tanimation.events.on(\"animationprogress\", () => {\r\n\t\t\tthis.dispatch(\"extremeschanged\");\r\n\t\t})\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates axis data items when series extremes change\r\n\t */\r\n\tprotected handleExtremesChange() {\r\n\t\tsuper.handleExtremesChange();\r\n\r\n\t\tif (this.groupData) {\r\n\t\t\tlet id = this.baseInterval.timeUnit + this.baseInterval.count;\r\n\t\t\tthis.groupMin[id] = this._finalMin;\r\n\t\t\tthis.groupMax[id] = this._finalMax;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Zooms axis to specific Dates.\r\n\t *\r\n\t * @param startDate       Start date\r\n\t * @param endValue        End date\r\n\t * @param skipRangeEvent  Do not invoke events\r\n\t * @param instantly       Do not play zoom animations\r\n\t */\r\n\tpublic zoomToDates(startDate: Date, endDate: Date, skipRangeEvent?: boolean, instantly?: boolean, adjust?: boolean): void {\r\n\t\tstartDate = this._df.parse(startDate);\r\n\t\tendDate = this._df.parse(endDate);\r\n\t\tthis.zoomToValues(startDate.getTime(), endDate.getTime(), skipRangeEvent, instantly, adjust);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axis to specific values.\r\n\t *\r\n\t * @param startValue      Start value\r\n\t * @param endValue        End value\r\n\t * @param skipRangeEvent  Do not invoke events\r\n\t * @param instantly       Do not play zoom animations\r\n\t */\r\n\tpublic zoomToValues(startValue: number, endValue: number, skipRangeEvent?: boolean, instantly?: boolean, adjust?: boolean): void {\r\n\t\tif (!this.groupData) {\r\n\t\t\tlet start: number = (startValue - this.min) / (this.max - this.min);\r\n\t\t\tlet end: number = (endValue - this.min) / (this.max - this.min);\r\n\r\n\t\t\tthis.zoom({ start: start, end: end }, skipRangeEvent, instantly);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet difference = this.adjustDifference(startValue, endValue);\r\n\t\t\tlet isEnd = false;\r\n\t\t\tif (endValue == this.max) {\r\n\t\t\t\tisEnd = true;\r\n\t\t\t}\r\n\t\t\tlet isStart = false;\r\n\t\t\tif (startValue == this.min) {\r\n\t\t\t\tisStart = true;\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.hasValue(difference)) {\r\n\t\t\t\tlet mainBaseInterval = this.mainBaseInterval;\r\n\t\t\t\tlet groupInterval = this.chooseInterval(0, difference, this.groupCount, this.groupIntervals);\r\n\r\n\t\t\t\tif ((groupInterval.timeUnit == mainBaseInterval.timeUnit && groupInterval.count < mainBaseInterval.count) || $time.getDuration(groupInterval.timeUnit, 1) < $time.getDuration(mainBaseInterval.timeUnit, 1)) {\r\n\t\t\t\t\tgroupInterval = { ...mainBaseInterval };\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet id = groupInterval.timeUnit + groupInterval.count;\r\n\t\t\t\tlet min = this.groupMin[id];\r\n\t\t\t\tlet max = this.groupMax[id];\r\n\r\n\t\t\t\tif (!$type.isNumber(min) || !$type.isNumber(max)) {\r\n\t\t\t\t\tmin = Number.POSITIVE_INFINITY;\r\n\t\t\t\t\tmax = Number.NEGATIVE_INFINITY;\r\n\t\t\t\t\tthis.series.each((series) => {\r\n\t\t\t\t\t\tlet seriesMin = series.min(this);\r\n\t\t\t\t\t\tlet seriesMax = series.max(this);\r\n\r\n\t\t\t\t\t\tif (series._dataSets) {\r\n\t\t\t\t\t\t\tlet ds = series._dataSets.getKey(groupInterval.timeUnit + groupInterval.count);\r\n\r\n\t\t\t\t\t\t\tif (ds) {\r\n\t\t\t\t\t\t\t\tlet mindi = ds.getIndex(0);\r\n\t\t\t\t\t\t\t\tlet maxdi = ds.getIndex(ds.length - 1);\r\n\r\n\t\t\t\t\t\t\t\tif (mindi) {\r\n\t\t\t\t\t\t\t\t\tif (series.xAxis == this) {\r\n\t\t\t\t\t\t\t\t\t\tseriesMin = mindi.dateX.getTime();\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse if (series.yAxis == this) {\r\n\t\t\t\t\t\t\t\t\t\tseriesMin = mindi.dateY.getTime();\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tif (maxdi) {\r\n\t\t\t\t\t\t\t\t\tif (series.xAxis == this) {\r\n\t\t\t\t\t\t\t\t\t\tseriesMax = maxdi.dateX.getTime();\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse if (series.yAxis == this) {\r\n\t\t\t\t\t\t\t\t\t\tseriesMax = maxdi.dateY.getTime();\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tseriesMax = $time.round(\r\n\t\t\t\t\t\t\t$time.add(new Date(seriesMax), groupInterval.timeUnit, 1, this._df.utc),\r\n\t\t\t\t\t\t\tgroupInterval.timeUnit,\r\n\t\t\t\t\t\t\t1,\r\n\t\t\t\t\t\t\tthis._df.firstDayOfWeek,\r\n\t\t\t\t\t\t\tthis._df.utc,\r\n\t\t\t\t\t\t\tundefined,\r\n\t\t\t\t\t\t\tthis._df.timezoneMinutes,\r\n\t\t\t\t\t\t\tthis._df.timezone\r\n\t\t\t\t\t\t).getTime();\r\n\r\n\t\t\t\t\t\tif (seriesMin < min) {\r\n\t\t\t\t\t\t\tmin = seriesMin;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (seriesMax > max) {\r\n\t\t\t\t\t\t\tmax = seriesMax;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t\tthis.groupMin[id] = min;\r\n\t\t\t\t\tthis.groupMax[id] = max;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tstartValue = $math.fitToRange(startValue, min, max);\r\n\t\t\t\tendValue = $math.fitToRange(endValue, min, max);\r\n\r\n\t\t\t\tif (adjust) {\r\n\t\t\t\t\tif (isEnd) {\r\n\t\t\t\t\t\tstartValue = endValue - difference;\r\n\t\t\t\t\t\tstartValue = $math.fitToRange(startValue, min, max);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (isStart) {\r\n\t\t\t\t\t\tendValue = startValue + difference;\r\n\t\t\t\t\t\tendValue = $math.fitToRange(endValue, min, max);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet start: number = (startValue - min) / (max - min);\r\n\t\t\t\tlet end: number = (endValue - min) / (max - min);\r\n\r\n\t\t\t\tthis.zoom({ start: start, end: end }, skipRangeEvent, instantly);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Adds `baseInterval` to \"as is\" fields.\r\n\t *\r\n\t * @param field  Field name\r\n\t * @return Assign as is?\r\n\t */\r\n\tprotected asIs(field: string): boolean {\r\n\t\treturn field == \"baseInterval\" || super.asIs(field);\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties and related data from a different instance of Axis.\r\n\t *\r\n\t * @param source Source Axis\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.dateFormats = source.dateFormats;\r\n\t\tthis.periodChangeDateFormats = source.periodChangeDateFormats;\r\n\t\tthis.groupIntervals.clear();\r\n\t\tsource.groupIntervals.each((interval) => {\r\n\t\t\tthis.groupIntervals.push({ ...interval });\r\n\t\t})\r\n\r\n\t\tthis.gridIntervals.clear();\r\n\t\tsource.gridIntervals.each((interval) => {\r\n\t\t\tthis.gridIntervals.push({ ...interval });\r\n\t\t})\r\n\r\n\t\tif (source._baseInterval) {\r\n\t\t\tthis.baseInterval = source._baseInterval;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Shows Axis tooltip at specific relative position within Axis. (0-1)\r\n\t *\r\n\t * @param position Position (0-1)\r\n\t * @param local or global position\r\n\t */\r\n\tpublic showTooltipAtPosition(position: number, local?: boolean) {\r\n\r\n\t\tif (!local) {\r\n\t\t\tposition = this.toAxisPosition(position);\r\n\t\t}\r\n\r\n\t\tif (this.snapTooltip) {\r\n\t\t\t// rounding is not good, pen/aac4e7f66f019d36b2447f050c600c13 (no last tootltip shown)\r\n\t\t\tlet actualDate = this.positionToDate(position) //$time.round(this.positionToDate(position), this.baseInterval.timeUnit, 1, this.getFirstWeekDay(), this.dateFormatter.utc, undefined, this._df.timezoneMinutes, this._df.timezone);\r\n\r\n\t\t\tlet actualTime = actualDate.getTime();\r\n\t\t\tlet closestDate: Date;\r\n\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tif (series.baseAxis == this) {\r\n\t\t\t\t\tlet dataItem = this.getSeriesDataItem(series, position, true);\r\n\r\n\t\t\t\t\tif (dataItem) {\r\n\t\t\t\t\t\tlet date: Date;\r\n\t\t\t\t\t\tif (series.xAxis == this) {\r\n\t\t\t\t\t\t\tdate = dataItem.dateX;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (series.yAxis == this) {\r\n\t\t\t\t\t\t\tdate = dataItem.dateY;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (!closestDate) {\r\n\t\t\t\t\t\t\tclosestDate = date;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif (Math.abs(closestDate.getTime() - actualTime) > Math.abs(date.getTime() - actualTime)) {\r\n\t\t\t\t\t\t\t\tclosestDate = date;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tif (closestDate) {\r\n\t\t\t\tlet closestTime = closestDate.getTime();\r\n\t\t\t\tclosestDate = $time.round(\r\n\t\t\t\t\tnew Date(closestTime),\r\n\t\t\t\t\tthis.baseInterval.timeUnit,\r\n\t\t\t\t\tthis.baseInterval.count,\r\n\t\t\t\t\tthis._firstWeekDay,\r\n\t\t\t\t\tthis._df.utc,\r\n\t\t\t\t\tundefined,\r\n\t\t\t\t\tthis._df.timezoneMinutes,\r\n\t\t\t\t\tthis._df.timezone\r\n\t\t\t\t);\r\n\t\t\t\tclosestTime = closestDate.getTime();\r\n\r\n\t\t\t\tlet tooltipLocation = this.renderer.tooltipLocation;\r\n\t\t\t\tif (tooltipLocation == 0) {\r\n\t\t\t\t\ttooltipLocation = 0.0001;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tclosestDate = new Date(closestDate.getTime() + this.baseDuration * tooltipLocation);\r\n\t\t\t\tposition = this.dateToPosition(closestDate);\r\n\r\n\t\t\t\tif (this.chart.cursor && this.chart.cursor.snapToSeries) {\r\n\t\t\t\t\t//void\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.series.each((series) => {\r\n\r\n\t\t\t\t\t\tlet dataItem = series.dataItemsByAxis.getKey(this.uid).getKey(closestTime + series.currentDataSetId);\r\n\t\t\t\t\t\tlet point = series.showTooltipAtDataItem(dataItem);\r\n\t\t\t\t\t\tif (point) {\r\n\t\t\t\t\t\t\tthis.chart._seriesPoints.push({ series: series, point: point });\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t// check, otherwise column tooltip will be hidden\r\n\t\t\t\t\t\t\tif (series.tooltipText || series.tooltipHTML) {\r\n\t\t\t\t\t\t\t\tseries.hideTooltip();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//this.chart.sortSeriesTooltips(seriesPoints);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.showTooltipAtPosition(position, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Should the nearest tooltip be shown if no data item is found on the\r\n\t * current cursor position.\r\n\t *\r\n\t * @default true\r\n\t * @param value  Should snap?\r\n\t */\r\n\tpublic set snapTooltip(value: boolean) {\r\n\t\tthis.setPropertyValue(\"snapTooltip\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Should snap?\r\n\t */\r\n\tpublic get snapTooltip(): boolean {\r\n\t\treturn this.getPropertyValue(\"snapTooltip\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if data should be aggregated to composide data items if there\r\n\t * are more data items in selected range than `groupCount`.\r\n\t *\r\n\t * Grouping will occur automatically, based on current selection range, and\r\n\t * will change dynamically when user zooms in/out the chart.\r\n\t *\r\n\t * NOTE: This works only if [[DateAxis]] is base axis of an [[XYSeries]].\r\n\t *\r\n\t * The related [[XYSeries]] also needs to be set up to take advantage of, by\r\n\t * setting its [`groupFields`](https://www.amcharts.com/docs/v4/reference/xyseries/#groupFields_property).\r\n\t *\r\n\t * The group intervals to aggregate data to is defined by `groupIntervals`\r\n\t * property.\r\n\t *\r\n\t * ```TypeScript\r\n\t * let dateAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n\t * dateAxis.groupData = true;\r\n\t * \r\n\t * let valueAxis = chart.xAxes.push(new am4charts.valueAxis());\r\n\t * \r\n\t * let series = chart.series.push(new am4charts.LineSeries());\r\n\t * series.dataFields.dateX = \"date\";\r\n\t * series.dataFields.valueY = \"value\";\r\n\t * series.groupFields.valueY = \"average\";\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * var dateAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n\t * dateAxis.groupData = true;\r\n\t * \r\n\t * var valueAxis = chart.xAxes.push(new am4charts.valueAxis());\r\n\t * \r\n\t * var series = chart.series.push(new am4charts.LineSeries());\r\n\t * series.dataFields.dateX = \"date\";\r\n\t * series.dataFields.valueY = \"value\";\r\n\t * series.groupFields.valueY = \"average\";\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"xAxes\": [{\r\n\t *     \"type\": \"DateAxis\",\r\n\t *     \"groupData\": true\r\n\t *   }],\r\n\t *   \"yAxes\": [{\r\n\t *     \"type\": \"ValueAxis\"\r\n\t *   }],\r\n\t *   \"series\": [{\r\n\t *     \"type\": \"LineSeries\",\r\n\t *     \"dataFields\": {\r\n\t *       \"dateX\": \"date\",\r\n\t *       \"valueY\": \"value\"\r\n\t *     },\r\n\t *     \"groupFields\": {\r\n\t *       \"valueY\": \"average\"\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @default false\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/date-axis/#Dynamic_data_item_grouping} for more information about dynamic data item grouping.\r\n\t * @since 4.7.0\r\n\t * @param  value  Group data points?\r\n\t */\r\n\tpublic set groupData(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"groupData\", value)) {\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tseries.setDataSet(\"\");\r\n\r\n\t\t\t\tif (value && !series.dataGrouped && series.inited) {\r\n\t\t\t\t\tseries._baseInterval[this.uid] = this.mainBaseInterval;\r\n\t\t\t\t\tthis.groupSeriesData(series);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tthis._currentDataSetId = \"\"\r\n\t\t\tthis._groupInterval = undefined;\r\n\t\t\tthis.invalidate();\r\n\t\t\tthis.invalidateSeries();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Group data points?\r\n\t */\r\n\tpublic get groupData(): boolean {\r\n\t\treturn this.getPropertyValue(\"groupData\");\r\n\t}\r\n\r\n\t/**\r\n\t * Disables automatic selection of data grouping intervals and always uses\r\n\t * `groupInterval` if set. Works only if `groupData = true`.\r\n\t * \r\n\t * @since 4.9.24\r\n\t * @param  value  Interval\r\n\t */\r\n\tpublic set groupInterval(value: ITimeInterval) {\r\n\t\tif (this.setPropertyValue(\"groupInterval\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t\tthis.invalidateSeries();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Interval\r\n\t */\r\n\tpublic get groupInterval(): ITimeInterval {\r\n\t\treturn this.getPropertyValue(\"groupInterval\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates threshold of data items in selected range at which to start\r\n\t * aggregating data items if `groupData = true`.\r\n\t * \r\n\t * @default 200\r\n\t * @since 4.7.0\r\n\t * @param  value  Number of data items\r\n\t */\r\n\tpublic set groupCount(value: number) {\r\n\t\tthis.setPropertyValue(\"groupCount\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Number of data items\r\n\t */\r\n\tpublic get groupCount(): number {\r\n\t\treturn this.getPropertyValue(\"groupCount\");\r\n\t}\r\n\r\n\t/**\r\n\t * If set will recalculate all timestamps in data by applying specific offset\r\n\t * in minutes.\r\n\t *\r\n\t * IMPORTANT: do not set `timezoneOffset` on both `DateAxis` and `dateFormatter`. It\r\n\t * will skew your results by applying offset twice.\r\n\t * \r\n\t * @since 4.8.5\r\n\t * @param  value Time zone offset in minutes\r\n\t */\r\n\tpublic set timezoneOffset(value: number) {\r\n\t\tthis.setPropertyValue(\"timezoneOffset\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @todo Timezone offset in minutes\r\n\t */\r\n\tpublic get timezoneOffset(): number {\r\n\t\treturn this.getPropertyValue(\"timezoneOffset\");\r\n\t}\r\n\r\n\t/**\r\n\t * If set will recalculate all timestamps in data to specific named timezone,\r\n\t * e.g. `\"America/Vancouver\"`, `\"Australia/Sydney\"`, `\"UTC\"`, etc.\r\n\t *\r\n\t * IMPORTANT: it is no longer recommended to use this setting. Please \r\n\t * set`timezone` on `dateFormatter`.\r\n\t *\r\n\t * @deprecated\r\n\t * @since 4.10.1\r\n\t * @param  value Time zone\r\n\t */\r\n\tpublic set timezone(value: string) {\r\n\t\tthis.setPropertyValue(\"timezone\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Timezone\r\n\t */\r\n\tpublic get timezone(): string {\r\n\t\treturn this.getPropertyValue(\"timezone\");\r\n\t}\r\n\r\n\t/**\r\n\t * Current grid interval.\r\n\t *\r\n\t * @return Grid interval\r\n\t */\r\n\tpublic get gridInterval(): ITimeInterval {\r\n\t\treturn this._gridInterval;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic makeGap(dataItem: LineSeriesDataItem, previous: LineSeriesDataItem): boolean {\r\n\t\tlet series = dataItem.component;\r\n\t\tif (dataItem && previous) {\r\n\t\t\tif (!series.connect && $type.isNumber(series.autoGapCount)) {\r\n\t\t\t\tif (series.baseAxis == this) {\r\n\t\t\t\t\tlet date = dataItem.dates[\"date\" + this.axisLetter];\r\n\t\t\t\t\tlet prevDate = previous.dates[\"date\" + this.axisLetter];\r\n\r\n\t\t\t\t\tif (date && prevDate) {\r\n\t\t\t\t\t\tlet time = date.getTime();\r\n\t\t\t\t\t\tlet prevTime = prevDate.getTime();\r\n\r\n\t\t\t\t\t\tif (time - prevTime > series.autoGapCount * this.baseDuration) {\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * @return base value\r\n\t */\r\n\tpublic get baseValue(): number {\r\n\t\treturn this.min;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DateAxis\"] = DateAxis;\r\nregistry.registeredClasses[\"DateAxisDataItem\"] = DateAxisDataItem;\r\n","/**\r\n * Module, defining Axis Renderer for vertical axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRenderer, IAxisRendererProperties, IAxisRendererAdapters, IAxisRendererEvents } from \"./AxisRenderer\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { Axis } from \"./Axis\";\r\nimport { Grid } from \"./Grid\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { AxisBreak } from \"./AxisBreak\";\r\nimport { AxisBullet } from \"./AxisBullet\";\r\nimport { WavedLine } from \"../../core/elements/WavedLine\";\r\nimport { WavedRectangle } from \"../../core/elements/WavedRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { VerticalCenter } from \"../../core/defs/VerticalCenter\";\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererX]].\r\n */\r\nexport interface IAxisRendererXProperties extends IAxisRendererProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererX]].\r\n */\r\nexport interface IAxisRendererXEvents extends IAxisRendererEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRendererX]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererXAdapters extends IAxisRendererAdapters, IAxisRendererXProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for horizontal axis.\r\n *\r\n * @see {@link IAxisRendererEvents} for a list of available events\r\n * @see {@link IAxisRendererAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererX extends AxisRenderer {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisRendererXProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisRendererXAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererXEvents;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"AxisRendererX\";\r\n\r\n\t\tthis.minGridDistance = 120;\r\n\r\n\t\tthis.opposite = false;\r\n\r\n\t\tthis.rotation = 0;\r\n\r\n\t\tthis.width = percent(100);\r\n\r\n\t\tthis.labels.template.horizontalCenter = \"middle\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t* @ignore\r\n\t*/\r\n\tpublic setAxis(axis: Axis) {\r\n\t\tsuper.setAxis(axis);\r\n\t\taxis.layout = \"vertical\";\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic updateGridContainer() {\r\n\t\tlet axis = this.axis;\r\n\t\tif (axis) {\r\n\t\t\tlet gridContainer = this.gridContainer;\r\n\t\t\tgridContainer.x = axis.pixelX;\r\n\t\t\tgridContainer.width = axis.axisLength;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Called when rendered is attached to an Axis, as well as a property of\r\n\t * Axis that might affect the appearance is updated.\r\n\t *\r\n\t * E.g. `axis.opposite`, `axis.inside`, etc.\r\n\t *\r\n\t * This method is called **before** draw, so that any related setting\r\n\t * changed in this method can be changed.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic processRenderer(): void {\r\n\t\tsuper.processRenderer();\r\n\r\n\t\t// can not do this in init, as axis is set later\r\n\t\tlet axis = this.axis;\r\n\r\n\t\tif (axis) {\r\n\t\t\tif (!(axis.width instanceof Percent)) {\r\n\t\t\t\taxis.width = percent(100);\r\n\t\t\t}\r\n\r\n\t\t\t// @todo Is thi sneeded?\r\n\t\t\t$utils.used(this.line);\r\n\r\n\t\t\tlet title: Label = axis.title;\r\n\t\t\ttitle.rotation = 0;\r\n\t\t\ttitle.align = \"center\";\r\n\r\n\t\t\tif (this.opposite) {\r\n\t\t\t\tthis.line.toFront();\r\n\t\t\t\ttitle.toBack();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttitle.toFront();\r\n\t\t\t\tthis.toBack();\r\n\t\t\t\tthis.line.toBack();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates some of the Axis tooltip's visual properties, related to\r\n\t * rendering of the Axis.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateTooltip() {\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tif (axis) {\r\n\t\t\tlet bigNum: number = 1000;\r\n\t\t\tlet bbx: number = this.line.pixelX;\r\n\t\t\tlet bby: number = this.line.pixelY;\r\n\t\t\tlet bbw: number = this.axisLength;\r\n\r\n\t\t\tlet bbh: number = bigNum;\r\n\r\n\t\t\t// top\r\n\t\t\tif (this.opposite) {\r\n\t\t\t\tif (!this.inside) {\r\n\t\t\t\t\tbby = - bigNum;\r\n\t\t\t\t\tbbh = bigNum;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// bottom\r\n\t\t\telse {\r\n\t\t\t\tif (this.inside) {\r\n\t\t\t\t\tbby = - bigNum;\r\n\t\t\t\t\tbbh = bigNum;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.axis.updateTooltip(\"vertical\", { x: bbx, y: bby, width: bbw, height: bbh });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param label        Label element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: AxisLabel, position: number, endPosition: number, location?: number) {\r\n\r\n\t\tif (!$type.hasValue(location)) {\r\n\t\t\tlocation = label.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tlabel.isMeasured = !label.inside;\r\n\r\n\t\tlet deltaY = 0;\r\n\t\tlet verticalCenter: VerticalCenter;\r\n\t\tlet maxHeight = this.gridContainer.maxHeight;\r\n\t\tif (this.opposite) {\r\n\t\t\tif (label.inside) {\r\n\t\t\t\tverticalCenter = \"top\";\r\n\t\t\t\tif (label.valign == \"bottom\") {\r\n\t\t\t\t\tdeltaY = maxHeight;\r\n\t\t\t\t\tverticalCenter = \"bottom\";\r\n\t\t\t\t}\r\n\t\t\t\tif (label.valign == \"middle\") {\r\n\t\t\t\t\tdeltaY = maxHeight / 2;\r\n\t\t\t\t\tverticalCenter = \"middle\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tverticalCenter = \"bottom\";\r\n\t\t\t}\r\n\r\n\t\t\tpoint.y = deltaY;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (label.inside) {\r\n\t\t\t\tverticalCenter = \"bottom\";\r\n\t\t\t\tif (label.valign == \"top\") {\r\n\t\t\t\t\tdeltaY = -maxHeight;\r\n\t\t\t\t\tverticalCenter = \"top\";\r\n\t\t\t\t}\r\n\t\t\t\tif (label.valign == \"middle\") {\r\n\t\t\t\t\tdeltaY = -maxHeight / 2;\r\n\t\t\t\t\tverticalCenter = \"middle\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tverticalCenter = \"top\";\r\n\t\t\t}\r\n\r\n\t\t\tpoint.y += deltaY;\r\n\t\t}\r\n\r\n\t\tif (label.rotation == 0) {\r\n\t\t\t// Apply fuzzy logic to verticalCenter only if labels are not rotated\r\n\t\t\tlabel.verticalCenter = verticalCenter;\r\n\t\t}\r\n\r\n\t\tthis.positionItem(label, point);\r\n\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\tlet axis = this.axis;\r\n\t\treturn (axis.measuredWidth - axis.pixelPaddingRight - axis.pixelPaddingLeft) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @param position2  Position (0-1) Position on the second axis\r\n\t * @return Point\r\n\t */\r\n\tpublic positionToPoint(position: number, position2?: number): IPoint {\r\n\t\treturn { x: this.positionToCoordinate(position), y: 0 };\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a point at specific coordinates to a relative position (0-1)\r\n\t * on the axis.\r\n\t *\r\n\t * @param point  Point\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic pointToPosition(point: IPoint) {\r\n\t\treturn this.coordinateToPosition(point.x, point.y);\r\n\t}\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param startPosition  Starting position\r\n\t * @param endPosition    End position\r\n\t * @return SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number): string {\r\n\t\tlet x1: number = $math.fitToRange(this.positionToCoordinate(startPosition), 0, this.axisLength);\r\n\t\tlet x2: number = $math.fitToRange(this.positionToCoordinate(endPosition), 0, this.axisLength);\r\n\r\n\t\tlet w: number = Math.abs(x2 - x1);\r\n\t\tlet h: number = this.getHeight();\r\n\t\tlet x: number = Math.min(x1, x2);\r\n\t\tlet y: number = 0;\r\n\r\n\t\treturn $path.rectToPath({\r\n\t\t\tx: x,\r\n\t\t\ty: y,\r\n\t\t\twidth: w,\r\n\t\t\theight: h\r\n\t\t}, true);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Updates and positions an axis break element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axisBreak Break element\r\n\t */\r\n\tpublic updateBreakElement(axisBreak: AxisBreak): void {\r\n\t\tsuper.updateBreakElement(axisBreak);\r\n\r\n\t\tlet startLine = axisBreak.startLine;\r\n\t\tlet endLine = axisBreak.endLine;\r\n\t\tlet fillShape = axisBreak.fillShape;\r\n\r\n\t\tlet startPoint: IPoint = axisBreak.startPoint;\r\n\t\tlet endPoint: IPoint = axisBreak.endPoint;\r\n\r\n\t\tlet y1: number = axisBreak.pixelMarginLeft;\r\n\t\tlet y2: number = this.getHeight() - axisBreak.pixelMarginTop - axisBreak.pixelMarginBottom;\r\n\r\n\t\tstartPoint.x = $math.fitToRange(startPoint.x, -1, this.axisLength + 1);\r\n\t\tendPoint.x = $math.fitToRange(endPoint.x, -1, this.axisLength + 1);\r\n\r\n\t\tif (startPoint.x == endPoint.x && (startPoint.x < 0 || startPoint.x > this.axisLength)) {\r\n\t\t\taxisBreak.fillShape.__disabled = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\taxisBreak.fillShape.__disabled = false;\r\n\t\t}\r\n\r\n\t\tstartLine.y = y1;\r\n\t\tstartLine.width = 0;\r\n\t\tstartLine.height = y2;\r\n\r\n\t\tendLine.y = y1;\r\n\t\tendLine.width = 0;\r\n\t\tendLine.height = y2;\r\n\r\n\t\tfillShape.height = y2;\r\n\t\tfillShape.width = Math.abs(endPoint.x - startPoint.x);\r\n\t\tfillShape.y = y1;\r\n\t\tfillShape.x = startPoint.x;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number): void {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\t//point.x = $utils.spritePointToSprite({x:point.x, y:0}, this, this.gridContainer).x;\r\n\r\n\t\tgrid.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: this.getHeight() });\r\n\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param tick         Tick element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number, endPosition: number): void {\r\n\t\tposition = position + (endPosition - position) * tick.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tlet tickLength = tick.length;\r\n\r\n\t\tpoint.y = $utils.spritePointToSprite({ x: 0, y: this.line.pixelY }, this.line.parent, this.gridContainer).y;\r\n\r\n\t\tif (this.opposite) {\r\n\t\t\ttickLength *= (tick.inside ? 1 : -1);\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttickLength *= (tick.inside ? -1 : 1);\r\n\t\t}\r\n\r\n\t\ttick.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: tickLength });\r\n\r\n\t\tthis.positionItem(tick, point);\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine(): void {\r\n\t\tthis.line.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: this.axisLength, y: 0 });\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tlet h: number = this.getHeight();\r\n\t\tlet w: number = this.axisLength;\r\n\t\tlet baseGrid: Sprite = this.baseGrid;\r\n\r\n\t\tlet x: number = axis.basePoint.x;\r\n\t\tif (x < -0.2 || x > w + 0.2) {\r\n\t\t\tbaseGrid.hide(0);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet y = $utils.spritePointToSprite({ x: 0, y: 0 }, this.gridContainer, baseGrid.parent).y;\r\n\t\t\tbaseGrid.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: h });\r\n\t\t\tbaseGrid.moveTo({ x: x, y: y });\r\n\t\t\tbaseGrid.show(0);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates visual elements for and axis break.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axisBreak Axis break\r\n\t */\r\n\tpublic createBreakSprites(axisBreak: AxisBreak): void {\r\n\t\taxisBreak.startLine = new WavedLine();\r\n\t\taxisBreak.endLine = new WavedLine();\r\n\t\tlet wavedRectangle: WavedRectangle = new WavedRectangle();\r\n\t\twavedRectangle.setWavedSides(false, true, false, true);\r\n\t\taxisBreak.fillShape = wavedRectangle;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic toAxisPosition(value: number): number {\r\n\t\tlet inversedPosition = value;\r\n\t\tlet axis = this.axis;\r\n\r\n\t\tif (axis) {\r\n\t\t\tlet relativePositionSprite = axis.relativePositionSprite;\r\n\r\n\t\t\tlet x = axis.pixelX;\r\n\t\t\tif (relativePositionSprite) {\r\n\t\t\t\tx = $utils.spritePointToSprite({ x: this.pixelX, y: 0 }, this.parent, relativePositionSprite).x;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\trelativePositionSprite = axis.parent;\r\n\t\t\t}\r\n\r\n\t\t\tif(relativePositionSprite){\r\n\t\t\t\tlet relativeX = x / relativePositionSprite.innerWidth;\r\n\t\t\t\tlet relativeWidth = axis.axisLength / relativePositionSprite.innerWidth;\r\n\r\n\t\t\t\treturn (inversedPosition - relativeX) / relativeWidth;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions axis bullets.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet       AxisBullet element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateBullet(bullet: Sprite, position: number, endPosition: number): void {\r\n\t\tlet location = 0.5;\r\n\t\tif (bullet instanceof AxisBullet) {\r\n\t\t\tlocation = bullet.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tpoint.y = $utils.spritePointToSprite({ x: 0, y: this.line.pixelY }, this.line.parent, this.gridContainer).y;\r\n\r\n\t\tthis.positionItem(bullet, point);\r\n\r\n\t\tthis.toggleVisibility(bullet, position, 0, 1);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererX\"] = AxisRendererX;\r\n\r\n/**\r\n * Add default responsive rules\r\n */\r\n\r\n/**\r\n * Put labels inside plot area.\r\n * Disable first and last labels.\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.heightXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof AxisRendererX) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.inside = true;\r\n\t\t\tstate.properties.maxLabelPosition = 0.9;\r\n\t\t\tstate.properties.minLabelPosition = 0.1;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n\r\n/**\r\n * Disable labels altogather on very small charts\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.heightXXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof AxisRendererX) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.disabled = true;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});","/**\r\n * A module which defines functionality related to Category Axis Break.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { AxisBreak, IAxisBreakProperties, IAxisBreakAdapters, IAxisBreakEvents } from \"./AxisBreak\";\r\nimport { CategoryAxis } from \"./CategoryAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[CategoryAxisBreak]].\r\n */\r\nexport interface ICategoryAxisBreakProperties extends IAxisBreakProperties {\r\n\r\n\t/**\r\n\t * Category break starts on.\r\n\t */\r\n\tstartCategory?: string;\r\n\r\n\t/**\r\n\t * Category break ends on.\r\n\t */\r\n\tendCategory?: string;\r\n\r\n\t/**\r\n\t * Location where break starts within cell (0-1).\r\n\t */\r\n\tstartLocation?: number;\r\n\r\n\t/**\r\n\t * Location where break ends within cell (0-1).\r\n\t */\r\n\tendLocation?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[CategoryAxisBreak]].\r\n */\r\nexport interface ICategoryAxisBreakEvents extends IAxisBreakEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CategoryAxisBreak]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICategoryAxisBreakAdapters extends IAxisBreakAdapters, ICategoryAxisBreakProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Base class to define \"breaks\" in axes\r\n * @see {@link ICategoryAxisBreakEvents} for a list of available events\r\n * @see {@link ICategoryAxisBreakAdapters} for a list of available Adapters\r\n */\r\nexport class CategoryAxisBreak extends AxisBreak {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICategoryAxisBreakProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICategoryAxisBreakAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICategoryAxisBreakEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Axis this break is used for.\r\n\t */\r\n\tpublic _axisType: CategoryAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxisBreak\";\r\n\t\tthis.properties.startLocation = 0.5;\r\n\t\tthis.properties.endLocation = 0.5;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Pixel position of the break's start.\r\n\t *\r\n\t * @return Position (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get startPosition(): number {\r\n\t\tif (this.axis) {\r\n\t\t\treturn this.axis.indexToPosition(this.adjustedStartValue, this.startLocation);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Pixel position of the break's end.\r\n\t *\r\n\t * @return Position (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get endPosition(): number {\r\n\t\tif (this.axis) {\r\n\t\t\treturn this.axis.indexToPosition(this.adjustedEndValue, this.endLocation);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A category break starts on.\r\n\t *\r\n\t * @param value Start category\r\n\t */\r\n\tpublic set startCategory(value: string) {\r\n\t\tif (this.setPropertyValue(\"startCategory\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataItems();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start category\r\n\t */\r\n\tpublic get startCategory(): string {\r\n\t\treturn this.getPropertyValue(\"startCategory\");\r\n\t}\r\n\r\n\t/**\r\n\t * A category break ends on.\r\n\t *\r\n\t * @param value  End category\r\n\t */\r\n\tpublic set endCategory(value: string) {\r\n\t\tif (this.setPropertyValue(\"endCategory\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataItems();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return End category\r\n\t */\r\n\tpublic get endCategory(): string {\r\n\t\treturn this.getPropertyValue(\"endCategory\");\r\n\t}\r\n\r\n\t/**\r\n\t * An index of start category.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set startValue(value: number) {\r\n\t\tif (this.setPropertyValue(\"startValue\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataItems();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get startValue(): number {\r\n\t\tlet category: string = this.getPropertyValue(\"startCategory\");\r\n\t\tif (category) {\r\n\t\t\treturn this.axis.categoryToIndex(category);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.getPropertyValue(\"startValue\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * An index of end category or a end value.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set endValue(value: number) {\r\n\t\tif (this.setPropertyValue(\"endValue\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataItems();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get endValue(): number {\r\n\t\tlet category: string = this.getPropertyValue(\"endCategory\");\r\n\t\tif (category) {\r\n\t\t\treturn this.axis.categoryToIndex(category);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.getPropertyValue(\"endValue\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates where within starting category break should begin.\r\n\t *\r\n\t * Values range from `0` (start) to `1` (end), with default being `0.5` (middle).\r\n\t *\r\n\t * E.g. if you want to a break to fully encompass start and end categories,\r\n\t * you should set `startLocation = 0` and `endLocation = 1`.\r\n\t *\r\n\t * @since 4.9.17\r\n\t * @default 0.5\r\n\t * @param  value  Break start location\r\n\t */\r\n\tpublic set startLocation(value: number) {\r\n\t\tif (this.setPropertyValue(\"startLocation\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataItems();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Break start location\r\n\t */\r\n\tpublic get startLocation(): number {\r\n\t\treturn this.getPropertyValue(\"startLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates where within ending category break should end.\r\n\t *\r\n\t * Values range from `0` (start) to `1` (end), with default being `0.5` (middle).\r\n\t *\r\n\t * E.g. if you want to a break to fully encompass start and end categories,\r\n\t * you should set `startLocation = 0` and `endLocation = 1`.\r\n\t *\r\n\t * @since 4.9.17\r\n\t * @default 0.5\r\n\t * @param  value  Break end location\r\n\t */\r\n\tpublic set endLocation(value: number) {\r\n\t\tif (this.setPropertyValue(\"endLocation\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataItems();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Break end location\r\n\t */\r\n\tpublic get endLocation(): number {\r\n\t\treturn this.getPropertyValue(\"endLocation\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CategoryAxisBreak\"] = CategoryAxisBreak;\r\n","/**\r\n * Category axis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Axis, AxisItemLocation, AxisDataItem, IAxisProperties, IAxisDataFields, IAxisAdapters, IAxisEvents, IAxisDataItemAdapters } from \"./Axis\";\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { AxisRendererX } from \"./AxisRendererX\";\r\nimport { AxisRendererY } from \"./AxisRendererY\";\r\nimport { SerialChart } from \"../types/SerialChart\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { ColumnSeries } from \"../series/ColumnSeries\";\r\nimport { CategoryAxisBreak } from \"./CategoryAxisBreak\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CategoryAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CategoryAxisDataItem extends AxisDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: CategoryAxis;\r\n\r\n\tpublic seriesDataItems: { [index: string]: XYSeriesDataItem[] } = {};\r\n\r\n\tpublic deltaAnimation: Animation;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICategoryAxisDataItemAdapters;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxisDataItem\";\r\n\t\tthis.text = \"{category}\";\r\n\r\n\t\tthis.locations.category = 0;\r\n\t\tthis.locations.endCategory = 1;\r\n\r\n\t\tthis.deltaPosition = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Category.\r\n\t *\r\n\t * @param value  Category\r\n\t */\r\n\tpublic set category(value: string) {\r\n\t\tlet oldCategory = this.properties.category;\r\n\t\tthis.setProperty(\"category\", value);\r\n\t\tif ($type.hasValue(oldCategory) && oldCategory != value) {\r\n\t\t\tif (this.component) {\r\n\t\t\t\tthis.component.validateDataElement(this);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Category\r\n\t */\r\n\tpublic get category(): string {\r\n\t\tif (this._adapterO) {\r\n\t\t\tif (this._adapterO.isEnabled(\"category\")) {\r\n\t\t\t\treturn this._adapterO.apply(\"category\", this.properties.category);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.properties.category;\r\n\t}\r\n\r\n\t/**\r\n\t * End category.\r\n\t *\r\n\t * Used for items that span several categories, like [[CategoryAxisBreak]].\r\n\t *\r\n\t * @param value  End category\r\n\t */\r\n\tpublic set endCategory(value: string) {\r\n\t\tthis.setProperty(\"endCategory\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End category\r\n\t */\r\n\tpublic get endCategory(): string {\r\n\t\treturn this.properties.endCategory;\r\n\t}\r\n\r\n\tpublic set deltaPosition(value: number) {\r\n\t\tif (value != this.properties.deltaCoordinate) {\r\n\t\t\tthis.setProperty(\"deltaCoordinate\", value);\r\n\t\t\tif (this.component) {\r\n\t\t\t\tthis.component.invalidateDataItems();\r\n\t\t\t\tthis.component.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic get deltaPosition(): number {\r\n\t\treturn this.properties.deltaCoordinate;\r\n\t}\r\n}\r\n\r\n/**\r\n * Defines adapters for [[DataItem]]\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICategoryAxisDataItemAdapters extends IAxisDataItemAdapters {\r\n\tcategory: string;\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CategoryAxis]].\r\n */\r\nexport interface ICategoryAxisDataFields extends IAxisDataFields {\r\n\r\n\t/**\r\n\t * A field that holds category information.\r\n\t */\r\n\tcategory?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[CategoryAxis]].\r\n */\r\nexport interface ICategoryAxisProperties extends IAxisProperties {\r\n\tsortBySeries?: ColumnSeries;\r\n}\r\n\r\n/**\r\n * Defines events for [[CategoryAxis]].\r\n */\r\nexport interface ICategoryAxisEvents extends IAxisEvents { }\r\n\r\n/**\r\n * Defines adapter for [[CategoryAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICategoryAxisAdapters extends IAxisAdapters, ICategoryAxisProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create a category-based axis for the chart.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Clients\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Clients\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"CategoryAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Clients\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link ICategoryAxisEvents} for a list of available Events\r\n * @see {@link ICategoryAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class CategoryAxis<T extends AxisRenderer = AxisRenderer> extends Axis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t */\r\n\tpublic _dataFields: ICategoryAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICategoryAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICategoryAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICategoryAxisEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t */\r\n\tpublic _dataItem: CategoryAxisDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the axis breaks.\r\n\t */\r\n\tpublic _axisBreak: CategoryAxisBreak;\r\n\r\n\t/**\r\n\t * A reference to chart the axis is for.\r\n\t */\r\n\tpublic chart: SerialChart;\r\n\r\n\t/**\r\n\t * Frequency of the labels on axis.\r\n\t */\r\n\tprotected _frequency: number;\r\n\r\n\t/**\r\n\t * A collection that holds Axis' data items sorted by each category.\r\n\t */\r\n\tpublic dataItemsByCategory: Dictionary<string, this[\"_dataItem\"]> = new Dictionary<string, this[\"_dataItem\"]>();\r\n\r\n\t/**\r\n\t * last data item is used for the closing grid\r\n\t */\r\n\tprotected _lastDataItem: CategoryAxisDataItem;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxis\";\r\n\r\n\t\t// Set field name\r\n\t\tthis.axisFieldName = \"category\";\r\n\r\n\t\tthis._lastDataItem = this.createDataItem();\r\n\t\tthis._lastDataItem.component = this;\r\n\t\tthis._disposers.push(this._lastDataItem);\r\n\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t\tlet dataItemsByCategory = this.dataItemsByCategory;\r\n\t\tthis.addDisposer(this.mainDataSet.events.on(\"removed\", function(event) {\r\n\t\t\tdataItemsByCategory.removeKey(event.oldValue.category);\r\n\t\t}))\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[DataItem]] of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new CategoryAxisDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[AxisBreak]] of the appropriate type.\r\n\t *\r\n\t * @return Axis break\r\n\t */\r\n\tprotected createAxisBreak(): this[\"_axisBreak\"] {\r\n\t\treturn new CategoryAxisBreak();\r\n\t}\r\n\r\n\t/**\r\n\t * Processes a related series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic processSeriesDataItem(dataItem: XYSeriesDataItem, axisLetter?: string): void {\r\n\t\tsuper.processSeriesDataItem(dataItem, axisLetter);\r\n\t\tlet category: string = (<any>dataItem)[\"category\" + this.axisLetter];\r\n\t\tif ($type.hasValue(category)) {\r\n\t\t\tlet categoryAxisDataItem: this[\"_dataItem\"] = this.dataItemsByCategory.getKey(category);\r\n\t\t\tif (categoryAxisDataItem) {\r\n\t\t\t\tlet seriesId = dataItem.component.uid;\r\n\t\t\t\tlet seriesDataItems = categoryAxisDataItem.seriesDataItems[seriesId];\r\n\t\t\t\tif (!seriesDataItems) {\r\n\t\t\t\t\tseriesDataItems = [];\r\n\t\t\t\t\tcategoryAxisDataItem.seriesDataItems[seriesId] = seriesDataItems;\r\n\t\t\t\t}\r\n\t\t\t\tseriesDataItems.push(dataItem);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdataItem.component.dataItems.remove(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates the data range.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validateDataRange(): void {\r\n\r\n\t\tsuper.validateDataRange();\r\n\r\n\t\t$iter.each(this._series.iterator(), (series) => {\r\n\t\t\tif ((series.xAxis instanceof CategoryAxis) && (series.yAxis instanceof CategoryAxis)) {\r\n\t\t\t\tseries.invalidateDataRange();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet startIndex = this.positionToIndex(this.start);\r\n\t\t\t\tlet endIndex = this.positionToIndex(this.end);\r\n\r\n\t\t\t\tif (endIndex >= this.dataItems.length) {\r\n\t\t\t\t\tendIndex--;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet seriesId = series.uid;\r\n\t\t\t\tlet minIndex: number;\r\n\t\t\t\tlet maxIndex: number;\r\n\r\n\t\t\t\tfor (let i = startIndex; i <= endIndex; i++) {\r\n\t\t\t\t\tlet axisDataItem = this.dataItems.getIndex(i);\r\n\t\t\t\t\tif (axisDataItem) {\r\n\t\t\t\t\t\tlet seriesDataItems = axisDataItem.seriesDataItems[seriesId];\r\n\r\n\t\t\t\t\t\tif (seriesDataItems) {\r\n\t\t\t\t\t\t\tfor (let i = 0; i < seriesDataItems.length; i++) {\r\n\t\t\t\t\t\t\t\tlet seriesDataItem = seriesDataItems[i];\r\n\t\t\t\t\t\t\t\tif (seriesDataItem) {\r\n\t\t\t\t\t\t\t\t\tlet index = seriesDataItem.index;\r\n\t\t\t\t\t\t\t\t\tif (!$type.isNumber(minIndex) || index < minIndex) {\r\n\t\t\t\t\t\t\t\t\t\tminIndex = index;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tif (!$type.isNumber(maxIndex) || index > maxIndex) {\r\n\t\t\t\t\t\t\t\t\t\tmaxIndex = index;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ($type.isNumber(minIndex)) {\r\n\t\t\t\t\tseries.startIndex = minIndex;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tseries.start = this.start;\r\n\t\t\t\t}\r\n\t\t\t\tif ($type.isNumber(maxIndex)) {\r\n\t\t\t\t\tseries.endIndex = maxIndex + 1;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tseries.end = this.end;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// range might not change, but axis breaks might.\r\n\t\t\t\tif (this._axisBreaks && this._axisBreaks.length > 0) {\r\n\t\t\t\t\tseries.invalidateDataRange();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Validates the whole axis. Causes it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tlet dataCount: number = this.dataItems.length;\r\n\r\n\t\tlet startIndex = $math.fitToRange(Math.floor(this.start * dataCount - 1), 0, dataCount);\r\n\t\tlet endIndex = $math.fitToRange(Math.ceil(this.end * dataCount), 0, dataCount);\r\n\r\n\t\tif (this.renderer.invalid) {\r\n\t\t\tthis.renderer.validate();\r\n\t\t}\r\n\r\n\t\t// find frequency at which we'll show items\r\n\t\tlet maxCount: number = this.renderer.axisLength / Math.max(this.renderer.minGridDistance, 1 / Number.MAX_SAFE_INTEGER);\r\n\t\tlet frequency: number = Math.min(this.dataItems.length, Math.ceil((endIndex - startIndex) / maxCount));\r\n\r\n\t\tthis._startIndex = Math.floor(startIndex / frequency) * frequency;\r\n\t\tthis._endIndex = Math.ceil(this.end * dataCount);\r\n\r\n\t\tthis.fixAxisBreaks();\r\n\r\n\t\tif (this._startIndex == this._endIndex) {\r\n\t\t\tthis._endIndex++;\r\n\t\t}\r\n\r\n\t\tthis._frequency = frequency;\r\n\r\n\t\tif (this.axisLength <= 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.maxZoomFactor = this.dataItems.length;\r\n\t\tif (this.dataItems.length <= 0) {\r\n\t\t\tthis.maxZoomFactor = 1;\r\n\t\t}\r\n\r\n\t\tthis.resetIterators();\r\n\r\n\t\t// it's important to use protected variables here, as getters will return 0 - length\r\n\t\t// TODO use iterator instead\r\n\t\t// @ todo: not solved cat axis item fading\r\n\t\tstartIndex = $math.max(0, this._startIndex - this._frequency);\r\n\t\tendIndex = $math.min(this.dataItems.length, this._endIndex + this._frequency);\r\n\r\n\t\tlet itemIndex = 0;\r\n\r\n\t\tfor (let i = 0; i < startIndex; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tdataItem.__disabled = true;\r\n\t\t}\r\n\r\n\t\tfor (let i = endIndex, len = this.dataItems.length; i < len; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tdataItem.__disabled = true;\r\n\t\t}\r\n\r\n\t\tfor (let i = startIndex; i < endIndex; i++) {\r\n\t\t\tif (i < this.dataItems.length) {\r\n\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\t\t\t\tif (i / this._frequency == Math.round(i / this._frequency)) {\r\n\t\t\t\t\tlet axisBreak: CategoryAxisBreak = this.isInBreak(i);\r\n\t\t\t\t\tif (!axisBreak) {\r\n\t\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\t\tthis.validateDataElement(dataItem, itemIndex);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\titemIndex++;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t//previously we disabled all before, but this is better for cpu\r\n\t\t\t\t\t//this.validateDataElement(dataItem, itemIndex); // helps to solve shrinking // not good - creates all items\r\n\t\t\t\t\tdataItem.__disabled = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.appendDataItem(this._lastDataItem);\r\n\t\tthis.validateDataElement(this._lastDataItem, itemIndex + 1, this.dataItems.length);\r\n\r\n\t\tif (this._axisBreaks) {\r\n\t\t\tlet axisBreaks = this._axisBreaks;\r\n\r\n\t\t\taxisBreaks.each((axisBreak) => {\r\n\t\t\t\tlet adjustedStartValue: number = axisBreak.adjustedStartValue;\r\n\t\t\t\tlet adjustedEndValue: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\t\tif ($math.intersect({ start: adjustedStartValue, end: adjustedEndValue }, { start: this._startIndex, end: this._endIndex })) {\r\n\r\n\t\t\t\t\tfor (let b = adjustedStartValue; b <= adjustedEndValue; b++) {\r\n\t\t\t\t\t\tlet dataItem = this.dataItems.getIndex(b);\r\n\t\t\t\t\t\tdataItem.__disabled = true;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet frequency: number = $math.fitToRange(Math.ceil(this._frequency / axisBreak.breakSize), 1, adjustedEndValue - adjustedStartValue);\r\n\t\t\t\t\tlet itemIndex = 0;\r\n\t\t\t\t\tif (axisBreak.breakSize > 0) {\r\n\t\t\t\t\t\t// TODO use iterator instead\r\n\t\t\t\t\t\tfor (let b = adjustedStartValue; b <= adjustedEndValue; b = b + frequency) {\r\n\t\t\t\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(b);\r\n\t\t\t\t\t\t\tdataItem.__disabled = false;\r\n\t\t\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\t\t\tthis.validateDataElement(dataItem, itemIndex);\r\n\t\t\t\t\t\t\titemIndex++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tthis.validateBreaks();\r\n\t\tthis.validateAxisRanges();\r\n\r\n\t\tthis.ghostLabel.invalidate(); // solves font issue\r\n\t\tthis.renderer.invalidateLayout();\r\n\t}\r\n\r\n\t/**\r\n\t * [validateDataElement description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param dataItem   [description]\r\n\t * @param itemIndex  [description]\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"], itemIndex?: number, index?: number): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\tdataItem.itemIndex = this._axisItemCount;\r\n\t\tthis._axisItemCount++;\r\n\r\n\t\t//dataItem.__disabled = false;\r\n\r\n\t\tlet renderer: AxisRenderer = this.renderer;\r\n\t\tif (!$type.isNumber(index)) {\r\n\t\t\tindex = this.categoryToIndex(dataItem.category);\r\n\t\t}\r\n\r\n\t\tlet endIndex = this.categoryToIndex(dataItem.endCategory);\r\n\r\n\t\tif (!$type.isNumber(endIndex)) {\r\n\t\t\tendIndex = index;\r\n\t\t}\r\n\r\n\t\tlet position: number = this.indexToPosition(index, dataItem.locations.category);\r\n\t\tlet endPosition: number = this.indexToPosition(endIndex, dataItem.locations.endCategory);\r\n\r\n\t\tdataItem.position = position;\r\n\r\n\t\tlet fillEndIndex: number;\r\n\t\tlet fillPosition: number;\r\n\t\tlet fillEndPosition: number;\r\n\r\n\t\tif (dataItem.isRange) {\r\n\t\t\tfillEndIndex = endIndex;\r\n\t\t\tfillPosition = this.indexToPosition(index, dataItem.locations.category);\r\n\t\t\tfillEndPosition = this.indexToPosition(fillEndIndex, dataItem.locations.endCategory);\r\n\t\t}\r\n\r\n\t\tdataItem.point = renderer.positionToPoint(position);\r\n\r\n\t\tlet tick: AxisTick = dataItem.tick;\r\n\t\tif (tick && !tick.disabled) {\r\n\t\t\trenderer.updateTickElement(tick, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet grid: Grid = dataItem.grid;\r\n\t\tif (grid && !grid.disabled) {\r\n\t\t\trenderer.updateGridElement(grid, position, endPosition);\r\n\t\t}\r\n\r\n\r\n\t\tlet label: AxisLabel = dataItem.label;\r\n\t\tif (label && !label.disabled) {\r\n\t\t\t// theorethically this might result problems if category text changes, the range text won't change. But otherwise range.label.text = \"custom text\" won't work, which is not intuitive.\r\n\t\t\tif (!dataItem.isRange || label.text == undefined) {\r\n\t\t\t\tdataItem.text = dataItem.text;\r\n\t\t\t}\r\n\r\n\t\t\trenderer.updateLabelElement(label, position, endPosition);\r\n\r\n\t\t\tif ((renderer instanceof AxisRendererY && dataItem.label.measuredWidth > this.ghostLabel.measuredWidth) || (renderer instanceof AxisRendererX && dataItem.label.measuredHeight > this.ghostLabel.measuredHeight)) {\r\n\t\t\t\tif (dataItem.label.html) {\r\n\t\t\t\t\tthis.ghostLabel.html = dataItem.label.currentText;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.ghostLabel.text = dataItem.label.currentText;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet fill: AxisFill = dataItem.axisFill;\r\n\t\tif (fill && !fill.disabled) {\r\n\r\n\t\t\tif (!dataItem.isRange) {\r\n\t\t\t\tfillEndIndex = index + this._frequency;\r\n\t\t\t\tfillPosition = this.indexToPosition(index, fill.location);\r\n\t\t\t\tfillEndPosition = this.indexToPosition(fillEndIndex, fill.location);\r\n\t\t\t}\r\n\r\n\t\t\trenderer.updateFillElement(fill, fillPosition, fillEndPosition);\r\n\t\t\tif (!dataItem.isRange) {\r\n\t\t\t\tthis.fillRule(dataItem, itemIndex);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (dataItem.bullet) {\r\n\t\t\trenderer.updateBullet(dataItem.bullet, position, endPosition);\r\n\t\t}\r\n\r\n\r\n\t\tlet mask: AxisFill = dataItem.mask;\r\n\t\tif (mask) {\r\n\t\t\trenderer.updateFillElement(mask, fillPosition, fillEndPosition);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tthis.dataItemsByCategory.clear();\r\n\t\tsuper.disposeData();\r\n\t}\r\n\r\n\t/**\r\n\t * Processes the axis data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem     Data item\r\n\t * @param dataContext  The raw data that corresponds to this data item\r\n\t */\r\n\tpublic processDataItem(dataItem: this[\"_dataItem\"], dataContext: Object): void {\r\n\t\tif (dataItem) {\r\n\t\t\t// creat a collection for fast access\r\n\t\t\tsuper.processDataItem(dataItem, dataContext);\r\n\t\t\t// check if such category already exists\r\n\t\t\t//let existingDataItem: CategoryAxisDataItem = this.dataItemsByCategory.getKey(dataItem.category);\r\n\t\t\t//if (existingDataItem && existingDataItem != dataItem) {\r\n\t\t\t//\tthis.dataItems.remove(existingDataItem);\r\n\t\t\t//}\r\n\r\n\t\t\tif ($type.hasValue(dataItem.category)) {\r\n\t\t\t\tthis.dataItemsByCategory.setKey(dataItem.category, dataItem);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tprotected getDataItem(dataContext?: any): this[\"_dataItem\"] {\r\n\t\tlet category: string = <string>(dataContext[this.dataFields.category]);\r\n\t\tif ($type.hasValue(category)) {\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItemsByCategory.getKey(category);\r\n\r\n\t\t\tif (dataItem) {\r\n\t\t\t\treturn dataItem;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn this.dataItems.create();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a category index to an actual screen coordinate on the axis.\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t *\r\n\t * @param index     Index\r\n\t * @param location  Location (0-1)\r\n\t * @return Position (px)\r\n\t */\r\n\tpublic indexToPosition(index: number, location?: AxisItemLocation | number): number {\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = 0.5;\r\n\t\t}\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\tlet difference: number = this.adjustDifference(startIndex, endIndex);\r\n\r\n\t\tlet startLocation = this.startLocation;\r\n\t\tlet endLocation = this.endLocation;\r\n\r\n\t\tdifference -= startLocation;\r\n\t\tdifference -= (1 - endLocation);\r\n\r\n\t\tif (this._axisBreaks) {\r\n\t\t\tlet axisBreaks = this._axisBreaks;\r\n\r\n\t\t\t$iter.eachContinue(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\tlet breakStartIndex: number = axisBreak.adjustedStartValue;\r\n\t\t\t\tlet breakEndIndex: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\t\tif (index < startIndex || !$type.isNumber(breakStartIndex) || !$type.isNumber(breakEndIndex)) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ($math.intersect({ start: breakStartIndex, end: breakEndIndex }, { start: startIndex, end: endIndex })) {\r\n\t\t\t\t\tbreakStartIndex = Math.max(startIndex, breakStartIndex);\r\n\t\t\t\t\tbreakEndIndex = Math.min(endIndex, breakEndIndex);\r\n\r\n\t\t\t\t\tlet breakSize: number = axisBreak.breakSize;\r\n\r\n\t\t\t\t\t// value to the right of break end\r\n\t\t\t\t\tif (index > breakEndIndex) {\r\n\t\t\t\t\t\tstartIndex += (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// value to the left of break start\r\n\t\t\t\t\telse if (index < breakStartIndex) {\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// value within break\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tindex = breakStartIndex + (index - breakStartIndex) * breakSize;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tlet deltaPosition = 0;\r\n\t\tlet dataItem = this.dataItems.getIndex(index);\r\n\t\tif (dataItem) {\r\n\t\t\tdeltaPosition = dataItem.deltaPosition;\r\n\t\t}\r\n\r\n\t\treturn $math.round(deltaPosition + (index + location - startLocation - startIndex) / difference, 5);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a string category name to relative position on axis.\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t *\r\n\t * @param category  Category name\r\n\t * @param location  Location (0-1)\r\n\t * @return Position\r\n\t */\r\n\tpublic categoryToPosition(category: string, location?: AxisItemLocation): number {\r\n\t\tlet index: number = this.categoryToIndex(category);\r\n\t\treturn this.indexToPosition(index, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a string category name to a orientation point (x, y, angle) on axis\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t * @param category  Category name\r\n\t * @param location  Location (0-1)\r\n\t * @return Orientation point\r\n\t */\r\n\tpublic categoryToPoint(category: string, location?: AxisItemLocation): IOrientationPoint {\r\n\t\tlet position = this.categoryToPosition(category, location);\r\n\t\tlet point = this.renderer.positionToPoint(position);\r\n\t\tlet angle = this.renderer.positionToAngle(position);\r\n\t\treturn { x: point.x, y: point.y, angle: angle };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a string category name to a orientation point (x, y, angle) on axis\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t * @param category  Category name\r\n\t * @param location  Location (0-1)\r\n\t * @return Orientation point\r\n\t */\r\n\tanyToPoint(category: string, location?: AxisItemLocation): IOrientationPoint {\r\n\t\treturn this.categoryToPoint(category, location);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a string category name to relative position on axis.\r\n\t *\r\n\t * An alias to `categoryToPosition()`.\r\n\t *\r\n\t * @param category  Category name\r\n\t * @param location  Location (0-1)\r\n\t * @return Relative position\r\n\t */\r\n\tpublic anyToPosition(category: string, location?: AxisItemLocation): number {\r\n\t\treturn this.categoryToPosition(category, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts named category to an index of data item it corresponds to.\r\n\t *\r\n\t * @param category  Category\r\n\t * @return Data item index\r\n\t */\r\n\tpublic categoryToIndex(category: string): number {\r\n\t\tif ($type.hasValue(category)) {\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItemsByCategory.getKey(category);\r\n\t\t\tif (dataItem) {\r\n\t\t\t\treturn dataItem.index;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the axis to specific named ctaegories.\r\n\t *\r\n\t * @param startCategory  Start category\r\n\t * @param endCategory    End category\r\n\t */\r\n\tpublic zoomToCategories(startCategory: string, endCategory: string): void {\r\n\t\tthis.zoomToIndexes(this.categoryToIndex(startCategory), this.categoryToIndex(endCategory) + 1);\r\n\t}\r\n\r\n\t/**\r\n\t * [getAnyRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param start         [description]\r\n\t * @param end           [description]\r\n\t * @param startLocation [description]\r\n\t * @param endLocation   [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getAnyRangePath(start: string, end: string, startLocation?: AxisItemLocation, endLocation?: AxisItemLocation): string {\r\n\t\tlet startPos: number = this.categoryToPosition(start, startLocation);\r\n\t\tlet endPos: number = this.categoryToPosition(end, endLocation);\r\n\t\treturn this.getPositionRangePath(startPos, endPos); // Base class (Axis) gets range shape from AxisRenderer\r\n\t}\r\n\r\n\t/**\r\n\t * Takes an absolute position (px) within axis and adjust it to a specific\r\n\t * `location` within category it corresponds to.\r\n\t *\r\n\t * @param position  Source position (px)\r\n\t * @param location  Location within category (0-1)\r\n\t * @return Adjusted position (px)\r\n\t */\r\n\tpublic roundPosition(position: number, location?: AxisItemLocation): number {\r\n\t\tlet index: number = this.positionToIndex(position);\r\n\t\treturn this.indexToPosition(index, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Finds and returns first series data item with specific category\r\n\t * @param series    Target series\r\n\t * @param category  Category\r\n\t * @return XYSeriesDataItem data item\r\n\t */\r\n\tpublic getFirstSeriesDataItem(series: XYSeries, category: string): XYSeriesDataItem {\r\n\r\n\t\tfor (let i = 0; i < series.dataItems.length; i++) {\r\n\t\t\tlet dataItem = series.dataItems.getIndex(i);\r\n\t\t\tif (series.xAxis == this) {\r\n\t\t\t\tif (dataItem.categoryX == category) {\r\n\t\t\t\t\treturn dataItem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (series.yAxis == this) {\r\n\t\t\t\tif (dataItem.categoryY == category) {\r\n\t\t\t\t\treturn dataItem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Finds and returns last series data item with specific category.\r\n\t * @param series    Target series\r\n\t * @param category  Category\r\n\t * @return XYSeriesDataItem data item\r\n\t */\r\n\tpublic getLastSeriesDataItem(series: XYSeries, category: string): XYSeriesDataItem {\r\n\r\n\t\tfor (let i = series.dataItems.length - 1; i >= 0; i--) {\r\n\t\t\tlet dataItem = series.dataItems.getIndex(i);\r\n\t\t\tif (series.xAxis == this) {\r\n\t\t\t\tif (dataItem.categoryX == category) {\r\n\t\t\t\t\treturn dataItem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (series.yAxis == this) {\r\n\t\t\t\tif (dataItem.categoryY == category) {\r\n\t\t\t\t\treturn dataItem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// todo: optimize\r\n\tpublic getSeriesDataItemByCategory(category: string, series: XYSeries): XYSeriesDataItem {\r\n\t\tlet seriesDataItem: XYSeriesDataItem;\r\n\t\tseries.dataItems.each((dataItem) => {\r\n\t\t\tif (series.xAxis == this) {\r\n\t\t\t\tif (dataItem.categoryX == category) {\r\n\t\t\t\t\tseriesDataItem = dataItem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (series.yAxis == this) {\r\n\t\t\t\tif (dataItem.categoryY == category) {\r\n\t\t\t\t\tseriesDataItem = dataItem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn seriesDataItem;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns a data item from Series that corresponds to a specific absolute\r\n\t * position on the Axis.\r\n\t *\r\n\t * @param series    Target series\r\n\t * @param position  Position (px)\r\n\t * @return XYSeriesDataItem data item\r\n\t */\r\n\tpublic getSeriesDataItem(series: XYSeries, position: number, findNearest?: boolean): XYSeriesDataItem {\r\n\r\n\t\tif ($type.isNumber(position)) {\r\n\r\n\t\t\tlet index = this.positionToIndex(position);\r\n\r\n\t\t\tif (index >= this.dataItems.length) {\r\n\t\t\t\tindex--;\r\n\t\t\t}\r\n\r\n\t\t\tlet dataItem = this.dataItems.getIndex(index);\r\n\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tlet category = dataItem.category;\r\n\t\t\t\tlet sdi: XYSeriesDataItem;\r\n\r\n\t\t\t\tlet seriesDataItem = series.dataItems.getIndex(index);\r\n\t\t\t\tif (seriesDataItem) {\r\n\t\t\t\t\tif (series.xAxis == this) {\r\n\t\t\t\t\t\tif (seriesDataItem.categoryX == category) {\r\n\t\t\t\t\t\t\treturn seriesDataItem;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (series.yAxis == this) {\r\n\t\t\t\t\t\tif (seriesDataItem.categoryY == category) {\r\n\t\t\t\t\t\t\treturn seriesDataItem;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tseries.dataItems.each((dataItem) => {\r\n\t\t\t\t\tif (series.xAxis == this) {\r\n\t\t\t\t\t\tif (dataItem.categoryX == category) {\r\n\t\t\t\t\t\t\tif (!sdi) {\r\n\t\t\t\t\t\t\t\tsdi = dataItem;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (Math.abs(index - sdi.index) > Math.abs(index - dataItem.index)) {\r\n\t\t\t\t\t\t\t\tsdi = dataItem;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (series.yAxis == this) {\r\n\t\t\t\t\t\tif (dataItem.categoryY == category) {\r\n\t\t\t\t\t\t\tif (!sdi) {\r\n\t\t\t\t\t\t\t\tsdi = dataItem;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (Math.abs(index - sdi.index) > Math.abs(index - dataItem.index)) {\r\n\t\t\t\t\t\t\t\tsdi = dataItem;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\r\n\t\t\t\t//@todo\r\n\t\t\t\tif (findNearest) {\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn sdi;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns the X coordinate for series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       Category\r\n\t * @param location  Location (0-1)\r\n\t * @return X coordinate (px)\r\n\t */\r\n\tpublic getX(dataItem: XYSeriesDataItem, key?: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\tlet position = this.getPositionX(dataItem, key, location, stackKey, range);\r\n\r\n\t\tif ($type.isNaN(position)) {\r\n\t\t\treturn this.basePoint.x;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.renderer.positionToPoint(position).x;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative position on axis for series' data item.\r\n\t *\r\n\t * @since 4.5.14\r\n\t * @param  dataItem  Data item\r\n\t * @param  key       Category\r\n\t * @param  location  Location (0-1)\r\n\t * @return           Relative position\r\n\t */\r\n\tpublic getPositionX(dataItem: XYSeriesDataItem, key?: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\tlet position;\r\n\t\tif ($type.hasValue(key)) {\r\n\t\t\tposition = this.categoryToPosition(dataItem.categories[key], location);\r\n\t\t}\r\n\r\n\t\tif (range) {\r\n\t\t\tposition = $math.fitToRange(position, range.start, range.end);\r\n\t\t}\r\n\r\n\t\treturn position;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the Y coordinate for series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       Category\r\n\t * @param location  Location (0-1)\r\n\t * @return Y coordinate (px)\r\n\t */\r\n\tpublic getY(dataItem: XYSeriesDataItem, key?: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\r\n\t\tlet position = this.getPositionY(dataItem, key, location, stackKey, range);\r\n\r\n\t\tif ($type.isNaN(position)) {\r\n\t\t\treturn this.basePoint.y;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.renderer.positionToPoint(position).y;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative position on axis for series' data item.\r\n\t *\r\n\t * @since 4.5.14\r\n\t * @param  dataItem  Data item\r\n\t * @param  key       Category\r\n\t * @param  location  Location (0-1)\r\n\t * @return           Relative position\r\n\t */\r\n\tpublic getPositionY(dataItem: XYSeriesDataItem, key?: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\tlet position;\r\n\t\tif ($type.hasValue(key)) {\r\n\t\t\tposition = this.categoryToPosition(dataItem.categories[key], location);\r\n\t\t}\r\n\r\n\t\tif (range) {\r\n\t\t\tposition = $math.fitToRange(position, range.start, range.end);\r\n\t\t}\r\n\r\n\t\treturn position;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an angle for series data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       Category\r\n\t * @param location  Location (0-1)\r\n\t * @param stackKey  Stack key (?)\r\n\t * @param range Range to fit in\r\n\t * @return Angle\r\n\t */\r\n\tpublic getAngle(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\tlet position = this.categoryToPosition(dataItem.categories[key], location);\r\n\r\n\t\tif (range) {\r\n\t\t\tposition = $math.fitToRange(position, range.start, range.end);\r\n\t\t}\r\n\r\n\t\treturn this.positionToAngle(position);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an absolute pixel coordinate of the start of the cell (category),\r\n\t * that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param position  Position (px)\r\n\t * @return Cell start position (px)\r\n\t */\r\n\tpublic getCellStartPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an absolute pixel coordinate of the end of the cell (category),\r\n\t * that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param position  Position (px)\r\n\t * @return Cell end position (px)\r\n\t */\r\n\tpublic getCellEndPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a category tooltip, based on specific position\r\n\t * within axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Position (px)\r\n\t * @return Label (category)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(this.positionToIndex(position));\r\n\r\n\t\tif (dataItem) {\r\n\t\t\tthis.tooltipDataItem = dataItem;\r\n\t\t\tthis.tooltip.dataItem = dataItem;\r\n\t\t\tif (this.tooltipText) {\r\n\t\t\t\treturn this.tooltipText;\r\n\t\t\t}\r\n\r\n\t\t\tif (!this._adapterO) {\r\n\t\t\t\treturn dataItem.category;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn this._adapterO.apply(\"getTooltipText\", dataItem.category);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an index of the category that corresponds to specific pixel\r\n\t * position within axis.\r\n\t *\r\n\t * @param position  Position (px)\r\n\t * @return Category index\r\n\t */\r\n\tpublic positionToIndex(position: number): number {\r\n\t\tposition = $math.round(position, 10);\r\n\t\tif (position < 0) {\r\n\t\t\tposition = 0;\r\n\t\t}\r\n\r\n\t\tif (position > 1) {\r\n\t\t\tposition = 1;\r\n\t\t}\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\t\tlet difference: number = endIndex - startIndex - this.startLocation - (1 - this.endLocation);\r\n\r\n\t\tposition += 1 / difference * this.startLocation;\r\n\t\tlet index: number = null;\r\n\r\n\t\tif (this._axisBreaks) {\r\n\t\t\tlet axisBreaks = this._axisBreaks;\r\n\r\n\t\t\t// in case we have some axis breaks\r\n\t\t\t$iter.eachContinue(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\tlet breakStartPosition: number = axisBreak.startPosition;\r\n\t\t\t\tlet breakEndPosition: number = axisBreak.endPosition;\r\n\r\n\t\t\t\tlet breakStartIndex: number = axisBreak.adjustedStartValue;\r\n\t\t\t\tlet breakEndIndex: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\t\tbreakStartIndex = $math.max(breakStartIndex, startIndex);\r\n\t\t\t\tbreakEndIndex = $math.min(breakEndIndex, endIndex);\r\n\r\n\t\t\t\tlet breakSize: number = axisBreak.breakSize;\r\n\r\n\t\t\t\tdifference -= (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\r\n\t\t\t\t// position to the right of break end\r\n\t\t\t\tif (position > breakEndPosition) {\r\n\t\t\t\t\tstartIndex += (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\t\t\t\t}\r\n\t\t\t\t// position to the left of break start\r\n\t\t\t\telse if (position < breakStartPosition) {\r\n\r\n\t\t\t\t}\r\n\t\t\t\t// value within break\r\n\t\t\t\telse {\r\n\t\t\t\t\tlet breakPosition = (position - breakStartPosition) / (breakEndPosition - breakStartPosition);\r\n\t\t\t\t\tindex = breakStartIndex + Math.round(breakPosition * (breakEndIndex - breakStartIndex));\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(index)) {\r\n\t\t\tindex = Math.floor(position * difference + startIndex);\r\n\t\t}\r\n\t\tif (index >= this.dataItems.length) {\r\n\t\t\tindex = this.dataItems.length - 1;\r\n\t\t}\r\n\t\t// not good, when panning out of bounds, each time one less item gets selected\r\n\t\t//if (index >= endIndex) {\r\n\t\t//\tindex--;\r\n\t\t//}\r\n\r\n\t\treturn index;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns category based on position.\r\n\t *\r\n\t * Please note that `position` represents position within axis which may be\r\n\t * zoomed and not correspond to Cursor's `position`.\r\n\t *\r\n\t * To convert Cursor's `position` to Axis' `position` use `toAxisPosition()` method.\r\n\t *\r\n\t * This is a synonim of `getPositionLabel()` implemented here for consistentcy.\r\n\t *\r\n\t * @since 4.3.8\r\n\t * @see {@link https://www.amcharts.com/docs/v4/tutorials/tracking-cursors-position-via-api/#Tracking_Cursor_s_position} For more information about cursor tracking.\r\n\t * @param position  Relative position on axis (0-1)\r\n\t * @return Position label\r\n\t */\r\n\tpublic positionToCategory(position: number): string {\r\n\t\treturn this.getPositionLabel(position);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns category based on position.\r\n\t *\r\n\t * Please note that `position` represents position within axis which may be\r\n\t * zoomed and not correspond to Cursor's `position`.\r\n\t *\r\n\t * To convert Cursor's `position` to Axis' `position` use `toAxisPosition()` method.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/tutorials/tracking-cursors-position-via-api/#Tracking_Cursor_s_position} For more information about cursor tracking.\r\n\t * @param position  Relative position on axis (0-1)\r\n\t * @return Position label\r\n\t */\r\n\tpublic getPositionLabel(position: number): string {\r\n\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(this.positionToIndex(position));\r\n\t\tif (dataItem) {\r\n\t\t\treturn dataItem.category;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Coordinates of the actual axis start.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Base point\r\n\t */\r\n\tpublic get basePoint(): IPoint {\r\n\t\t// This makes base grid to be drawn at the end of the axis and adds extra\r\n\t\t// grid which we need to nicely close the chart.\r\n\t\treturn this.renderer.positionToPoint(1);\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes Axis' renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic initRenderer(): void {\r\n\t\tsuper.initRenderer();\r\n\r\n\t\tlet renderer = this.renderer;\r\n\t\trenderer.baseGrid.disabled = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Current frequency of labels of the axis.\r\n\t *\r\n\t * Normally it would be 1, but when labels start to be hidden due\r\n\t * to `minGridDistance` this read-only property will increase.\r\n\t *\r\n\t * @readonly\r\n\t * @since 4.2.0\r\n\t * @return Label frequency\r\n\t */\r\n\tpublic get frequency(): number {\r\n\t\treturn this._frequency;\r\n\t}\r\n\r\n\t/**\r\n\t * If set to a reference of [[ColumnSeries]] the categories will be sorted\r\n\t * by actual values.\r\n\t *\r\n\t * The categories are ordered in descending order (from highest values to\r\n\t * lowest). To reverse the order, use axis renderer's `inversed` setting.\r\n\t * E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * categoryAxis.sortBySeries = series;\r\n\t * categoryAxis.renderer.inversed = true;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * categoryAxis.sortBySeries = series;\r\n\t * categoryAxis.renderer.inversed = true;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"xAxes\": [{\r\n\t *     // ...\r\n\t *     \"sortBySeries\": \"s1\",\r\n\t *     \"renderer\": {\r\n\t *       // ...\r\n\t *       \"inversed\": true\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @since 4.8.7\r\n\t * @param  value  Sort categories?\r\n\t */\r\n\tpublic set sortBySeries(value: ColumnSeries) {\r\n\t\tthis.setPropertyValue(\"sortBySeries\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Sort categories?\r\n\t */\r\n\tpublic get sortBySeries(): ColumnSeries {\r\n\t\treturn this.getPropertyValue(\"sortBySeries\");\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\tif ($type.hasValue(config.sortBySeries) && $type.isString(config.sortBySeries)) {\r\n\t\t\t\tif (this.map.hasKey(config.sortBySeries)) {\r\n\t\t\t\t\tconfig.sortBySeries = this.map.getKey(config.sortBySeries);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.addDelayedMap(\"sortBySeries\", config.sortBySeries);\r\n\t\t\t\t\tdelete config.sortBySeries;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CategoryAxis\"] = CategoryAxis;\r\nregistry.registeredClasses[\"CategoryAxisDataItem\"] = CategoryAxisDataItem;\r\n","/**\r\n * XY series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Series, SeriesDataItem, ISeriesProperties, ISeriesDataFields, ISeriesAdapters, ISeriesEvents } from \"./Series\";\r\nimport { Sprite, visualProperties } from \"../../core/Sprite\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { XYCursor } from \"../cursors/XYCursor\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { CalculatedValue } from \"../../core/Component\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $time from \"../../core/utils/Time\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport { ITimeInterval } from \"../../core/defs/ITimeInterval\";\r\nimport { options } from \"../../core/Options\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYSeriesDataItem extends SeriesDataItem {\r\n\r\n\t/**\r\n\t * [_minX description]\r\n\t *\r\n\t * @todo Descripion\r\n\t */\r\n\tprotected _minX: number;\r\n\r\n\t/**\r\n\t * [_maxX description]\r\n\t *\r\n\t * @todo Descripion\r\n\t */\r\n\tprotected _maxX: number;\r\n\r\n\t/**\r\n\t * [_minY description]\r\n\t *\r\n\t * @todo Descripion\r\n\t */\r\n\tprotected _minY: number;\r\n\r\n\t/**\r\n\t * [_maxY description]\r\n\t *\r\n\t * @todo Descripion\r\n\t */\r\n\tprotected _maxY: number;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t * \r\n\t * @ignore\r\n\t */\r\n\tpublic _component!: XYSeries;\r\n\r\n\t/**\r\n\t * References to any aggregate data items this data item is part of.\r\n\t *\r\n\t * @ignore\r\n\t * @since 4.7.0\r\n\t */\r\n\tpublic groupDataItems: this[];\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"XYSeriesDataItem\";\r\n\r\n\t\tthis.values.customValue = {};\r\n\r\n\t\tthis.values.valueX = { stack: 0 };\r\n\t\tthis.values.valueY = { stack: 0 };\r\n\t\tthis.values.openValueX = {};\r\n\t\tthis.values.openValueY = {};\r\n\r\n\t\tthis.values.dateX = {};\r\n\t\tthis.values.dateY = {};\r\n\t\tthis.values.openDateX = {};\r\n\t\tthis.values.openDateY = {};\r\n\r\n\t\tthis.setLocation(\"dateX\", 0.5, 0);\r\n\t\tthis.setLocation(\"dateY\", 0.5, 0);\r\n\r\n\t\tthis.setLocation(\"categoryX\", 0.5, 0);\r\n\t\tthis.setLocation(\"categoryY\", 0.5, 0);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value on X value axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set valueX(value: number) {\r\n\t\tthis.setValue(\"valueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get valueX(): number {\r\n\t\treturn this.values.valueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's custom numeric value.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set customValue(value: number) {\r\n\t\tthis.setValue(\"customValue\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get customValue(): number {\r\n\t\treturn this.values.customValue.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value on Y value axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set valueY(value: number) {\r\n\t\tthis.setValue(\"valueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get valueY(): number {\r\n\t\treturn this.values.valueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's date value on X date-based axis.\r\n\t *\r\n\t * @param date  Date\r\n\t */\r\n\tpublic set dateX(date: Date) {\r\n\t\tthis.setDate(\"dateX\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Date\r\n\t */\r\n\tpublic get dateX(): Date {\r\n\t\treturn this.getDate(\"dateX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's date value on Y date-based axis.\r\n\t *\r\n\t * @param date  Date\r\n\t */\r\n\tpublic set dateY(date: Date) {\r\n\t\tthis.setDate(\"dateY\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Date\r\n\t */\r\n\tpublic get dateY(): Date {\r\n\t\treturn this.getDate(\"dateY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's category on X category axis.\r\n\t *\r\n\t * @param category  Category\r\n\t */\r\n\tpublic set categoryX(category: string) {\r\n\t\tthis.setCategory(\"categoryX\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Category\r\n\t */\r\n\tpublic get categoryX(): string {\r\n\t\treturn this.categories.categoryX;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's category on Y category axis.\r\n\t *\r\n\t * @param category  Category\r\n\t */\r\n\tpublic set categoryY(category: string) {\r\n\t\tthis.setCategory(\"categoryY\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Category\r\n\t */\r\n\tpublic get categoryY(): string {\r\n\t\treturn this.categories.categoryY;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open numeric value on X value axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set openValueX(value: number) {\r\n\t\tthis.setValue(\"openValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get openValueX(): number {\r\n\t\treturn this.values.openValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open numeric value on Y value axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set openValueY(value: number) {\r\n\t\tthis.setValue(\"openValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get openValueY(): number {\r\n\t\treturn this.values.openValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open date value on X date-based axis.\r\n\t *\r\n\t * @param date  Date\r\n\t */\r\n\tpublic set openDateX(date: Date) {\r\n\t\tthis.setDate(\"openDateX\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Date\r\n\t */\r\n\tpublic get openDateX(): Date {\r\n\t\treturn this.getDate(\"openDateX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open date value on Y date-based axis.\r\n\t *\r\n\t * @param date  Date\r\n\t */\r\n\tpublic set openDateY(date: Date) {\r\n\t\tthis.setDate(\"openDateY\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Date\r\n\t */\r\n\tpublic get openDateY(): Date {\r\n\t\treturn this.getDate(\"openDateY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open category on X category axis.\r\n\t *\r\n\t * @param category  Category\r\n\t */\r\n\tpublic set openCategoryX(category: string) {\r\n\t\tthis.setCategory(\"openCategoryX\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Category\r\n\t */\r\n\tpublic get openCategoryX(): string {\r\n\t\treturn this.categories.openCategoryX;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open category on Y category axis.\r\n\t *\r\n\t * @param category  Category\r\n\t */\r\n\tpublic set openCategoryY(category: string) {\r\n\t\tthis.setCategory(\"openCategoryY\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Category\r\n\t */\r\n\tpublic get openCategoryY(): string {\r\n\t\treturn this.categories.openCategoryY;\r\n\t}\r\n\r\n\t/**\r\n\t * Return smallest value out of all item's value fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param fields      Fields to check in\r\n\t * @param working     Include working (temporary) values\r\n\t * @param stackValue  If item is in a stack, the value item starts as\r\n\t * @return Value\r\n\t */\r\n\tpublic getMin(fields: string[], working?: boolean, stackValue?: number): number {\r\n\t\t//if (this.visible) {  // dumped because of non smooth zooming\r\n\t\tlet min: number;\r\n\r\n\t\tif (!$type.isNumber(stackValue)) {\r\n\t\t\tstackValue = 0;\r\n\t\t}\r\n\r\n\t\t$array.each(fields, (field) => {\r\n\t\t\tlet value: number;\r\n\r\n\t\t\tif (working) {\r\n\t\t\t\tvalue = this.getWorkingValue(field);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = this.getValue(field);\r\n\t\t\t}\r\n\r\n\t\t\tvalue += stackValue;\r\n\r\n\t\t\tif (value < min || !$type.isNumber(min)) {\r\n\t\t\t\tmin = value;\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn min;\r\n\t\t//}\r\n\t}\r\n\r\n\t/**\r\n\t * Return biggest value out of all item's value fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param fields      Fields to check in\r\n\t * @param working     Include working (temporary) values\r\n\t * @param stackValue  If item is in a stack, the value item starts as\r\n\t * @return Value\r\n\t */\r\n\tpublic getMax(fields: string[], working?: boolean, stackValue?: number): number {\r\n\t\t//if (this.visible) { // dumped because of non smooth zooming\r\n\t\tlet max: number;\r\n\r\n\t\tif (!$type.isNumber(stackValue)) {\r\n\t\t\tstackValue = 0;\r\n\t\t}\r\n\r\n\t\t$array.each(fields, (field) => {\r\n\t\t\tlet value: number;\r\n\r\n\t\t\tif (working) {\r\n\t\t\t\tvalue = this.getWorkingValue(field);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = this.getValue(field);\r\n\t\t\t}\r\n\r\n\t\t\tvalue += stackValue;\r\n\r\n\t\t\tif (value > max || !$type.isNumber(max)) {\r\n\t\t\t\tmax = value;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn max;\r\n\t\t//}\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * Defines property set for a [[XYSeries]] tooltip event that contains information about dataItem\r\n */\r\nexport type XYSeriesTooltipEvent = {\r\n\r\n\t/**\r\n\t * Shift in coordinates after dragging.\r\n\t */\r\n\tdataItem: XYSeriesDataItem;\r\n};\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesDataFields extends ISeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value for horizontal axis.\r\n\t */\r\n\tvalueX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value for vertical axis.\r\n\t */\r\n\tvalueY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds category for horizontal axis.\r\n\t */\r\n\tcategoryX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds category for vertical axis.\r\n\t */\r\n\tcategoryY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds date for horizontal axis.\r\n\t */\r\n\tdateX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds date for vertical axis.\r\n\t */\r\n\tdateY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open numeric value for horizontal\r\n\t * axis.\r\n\t */\r\n\topenValueX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open numeric value for vertical\r\n\t * axis.\r\n\t */\r\n\topenValueY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open category for horizontal axis.\r\n\t */\r\n\topenCategoryX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open category for vertical axis.\r\n\t */\r\n\topenCategoryY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open date for horizontal axis.\r\n\t */\r\n\topenDateX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open date for vertical axis.\r\n\t */\r\n\topenDateY?: string;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a horizontal axis value for the\r\n\t * item.\r\n\t */\r\n\tvalueXShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a vertical axis value for the\r\n\t * item.\r\n\t */\r\n\tvalueYShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a horizontal axis open value for\r\n\t * the item.\r\n\t */\r\n\topenValueXShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a vertical axis open value for\r\n\t * the item.\r\n\t */\r\n\topenValueYShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value for some custom data.\r\n\t */\r\n\tcustomValue?: string;\r\n}\r\n\r\n\r\n/**\r\n * Defines types of the aggregate value.\r\n *\r\n * @since 4.7.0\r\n */\r\nexport type GroupField = \"open\" | \"close\" | \"low\" | \"high\" | \"average\" | \"sum\";\r\n\r\n/**\r\n * Defines data fields that can be calculated for aggregate values.\r\n * \r\n * @since 4.7.0\r\n */\r\nexport interface IXYSeriesGroupFields {\r\n\r\n\t/**\r\n\t * Indicates how to calculate aggregate value for `valueX` data field.\r\n\t *\r\n\t * @default \"close\"\r\n\t */\r\n\tvalueX?: GroupField;\r\n\r\n\t/**\r\n\t * Indicates how to calculate aggregate value for `valueY` data field.\r\n\t * \r\n\t * @default \"close\"\r\n\t */\r\n\tvalueY?: GroupField;\r\n\r\n\t/**\r\n\t * Indicates how to calculate aggregate value for `customValue` value data field.\r\n\t * \r\n\t * @default \"close\"\r\n\t */\r\n\tcustomValue?: GroupField;\r\n\r\n\t/**\r\n\t * Indicates how to calculate aggregate value for `openValueX` data field.\r\n\t * \r\n\t * @default \"open\"\r\n\t */\r\n\topenValueX?: GroupField;\r\n\r\n\t/**\r\n\t * Indicates how to calculate aggregate value for `openValueY` data field.\r\n\t * \r\n\t * @default \"open\"\r\n\t */\r\n\topenValueY?: GroupField;\r\n}\r\n\r\n/**\r\n * Defines properties for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesProperties extends ISeriesProperties {\r\n\r\n\t/**\r\n\t * Can items from this series be included into stacks?\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tstacked?: boolean;\r\n\r\n\t/**\r\n\t * Should the nearest tooltip be shown if no data item is found on the\r\n\t * current cursor position\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tsnapTooltip?: boolean;\r\n\r\n\t/**\r\n\t * Indicates if series should display a tooltip for chart's cursor.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tcursorTooltipEnabled?: boolean;\r\n\r\n\t/**\r\n\t * Indicates if series should apply hover state on bullets/columns/etc when\r\n\t * cursor is over the data item.\r\n\t * \r\n\t * @default true\r\n\t */\r\n\tcursorHoverEnabled?: boolean;\r\n\r\n\t/**\r\n\t * Indicates if series' values should be excluded when calculating totals.\r\n\t * \r\n\t * @default false\r\n\t */\r\n\texcludeFromTotal?: boolean;\r\n\r\n\r\n\t/**\r\n\t * Indicates if series' tooltip should be hidden while series axis range is\r\n\t * animating (zooming)\r\n\t *\r\n\t * @since 4.7.16\r\n\t * @default true\r\n\t */\r\n\thideTooltipWhileZooming?: boolean;\r\n\r\n\t/**\r\n\t * Should series bullets be masked?\r\n\t * @default true\r\n\t * @since 4.7.17\r\n\t */\r\n\tmaskBullets?: boolean;\r\n\r\n\t/**\r\n\t * [boolean description]\r\n\t *\r\n\t * @since 4.9.34\r\n\t * @default true\r\n\t */\r\n\tstackToNegative?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesEvents extends ISeriesEvents {\r\n\t/**\r\n\t * Invoked when series tooltip was shown on some particular data item\r\n\t */\r\n\ttooltipshownat: XYSeriesTooltipEvent;\r\n}\r\n\r\n/**\r\n * Defines adapters for [[XYSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYSeriesAdapters extends ISeriesAdapters, IXYSeriesProperties {\r\n\r\n\t/**\r\n\t * Applied to a source value that is being used to calculate aggregate values\r\n\t * for a grouped data item.\r\n\t * \r\n\t * applied only if `groupData = true` is set on the related `DateAxis`.\r\n\t *\r\n\t * @since 4.9.35\r\n\t * @see {@link https://www.amcharts.com/docs/v4/tutorials/using-custom-functions-for-data-item-grouping/} for more information\r\n\t */\r\n\tgroupValue: {\r\n\t\tdataItem: XYSeriesDataItem,\r\n\t\tinterval: ITimeInterval,\r\n\t\tdataField: IXYSeriesDataFields,\r\n\t\tdate: Date,\r\n\t\tvalue: number\r\n\t}\r\n\r\n\t/**\r\n\t * Applied to a calculated aggregate data item and its values, so that\r\n\t * specific logic can be applied to calculation of derivative values.\r\n\t *\r\n\t * User's code needs to modify specific value in `values` object, most\r\n\t * probably `close` as it's the default grouping field.\r\n\t * \r\n\t * Applied only * if `groupData = true` is set on the related `DateAxis`.\r\n\t *\r\n\t * @since 4.9.36\r\n\t * @see {@link https://www.amcharts.com/docs/v4/tutorials/using-custom-functions-for-data-item-grouping/} for more information\r\n\t */\r\n\tgroupDataItem: {\r\n\t\tdataItem: XYSeriesDataItem,\r\n\t\tinterval: ITimeInterval,\r\n\t\tdataField: IXYSeriesDataFields,\r\n\t\tdate: Date,\r\n\t\tvalue: number\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines Series for [[XYChart]].\r\n *\r\n * @see {@link IXYSeriesEvents} for a list of available Events\r\n * @see {@link IXYSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class XYSeries extends Series {\r\n\r\n\t/**\r\n\t * Defines type of the group fields.\r\n\t * \r\n\t * @ignore\r\n\t * @since 4.7.0\r\n\t */\r\n\tpublic _groupFields: IXYSeriesGroupFields;\r\n\r\n\t/**\r\n\t * Indicates which of the series' `dataFields` to calculate aggregate values\r\n\t * for.\r\n\t *\r\n\t * Available data fields for all [[XYSeries]] are:\r\n\t * `valueX`, `valueY`, `openValueX`, and `openValueY`.\r\n\t *\r\n\t * [[CandlestickSeries]] adds:\r\n\t * `lowValueX`, `lowValueY`, `highValueX`, and `highValueY`.\r\n\t *\r\n\t * Available options:\r\n\t * `\"open\"`, `\"close\"`, `\"low\"`, `\"high\"`, `\"average\"`, `\"sum\"`.\r\n\t *\r\n\t * Defaults are as follows:\r\n\t * * `valueX`: `\"close\"`\r\n\t * * `valueY`: `\"close\"`\r\n\t * * `openValueX`: `\"open\"`\r\n\t * * `openValueY`: `\"open\"`\r\n\t * * `lowValueX`: `\"low\"`\r\n\t * * `lowValueY`: `\"low\"`\r\n\t * * `highValueX`: `\"high\"`\r\n\t * * `highValueY`: `\"high\"`\r\n\t *\r\n\t * Is required only if data being plotted on a `DateAxis` and\r\n\t * its `groupData` is set to `true`.\r\n\t *\r\n\t * ```TypeScript\r\n\t * let dateAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n\t * dateAxis.groupData = true;\r\n\t *\r\n\t * let valueAxis = chart.xAxes.push(new am4charts.valueAxis());\r\n\t *\r\n\t * let series = chart.series.push(new am4charts.LineSeries());\r\n\t * series.dataFields.dateX = \"date\";\r\n\t * series.dataFields.valueY = \"value\";\r\n\t * series.groupFields.valueY = \"average\";\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * var dateAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n\t * dateAxis.groupData = true;\r\n\t *\r\n\t * var valueAxis = chart.xAxes.push(new am4charts.valueAxis());\r\n\t *\r\n\t * var series = chart.series.push(new am4charts.LineSeries());\r\n\t * series.dataFields.dateX = \"date\";\r\n\t * series.dataFields.valueY = \"value\";\r\n\t * series.groupFields.valueY = \"average\";\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"xAxes\": [{\r\n\t *     \"type\": \"DateAxis\",\r\n\t *     \"groupData\": true\r\n\t *   }],\r\n\t *   \"yAxes\": [{\r\n\t *     \"type\": \"ValueAxis\"\r\n\t *   }],\r\n\t *   \"series\": [{\r\n\t *     \"type\": \"LineSeries\",\r\n\t *     \"dataFields\": {\r\n\t *       \"dateX\": \"date\",\r\n\t *       \"valueY\": \"value\"\r\n\t *     },\r\n\t *     \"groupFields\": {\r\n\t *       \"valueY\": \"average\"\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * The above setup will ensure, that if there are many data items within\r\n\t * selected range, they will be grouped into aggregated data points, using\r\n\t * average value of all the values.\r\n\t *\r\n\t * For example if we have 2 years worth of daily data (~700 data items), when\r\n\t * fully zoomed out, the chart would show ~100 data items instead: one for\r\n\t * each week in those two years.\r\n\t *\r\n\t * Grouping will occur automatically, based on current selection range, and\r\n\t * will change dynamically when user zooms in/out the chart.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/date-axis/#Dynamic_data_item_grouping} for more information about dynamic data item grouping.\r\n\t * @since 4.7.0\r\n\t */\r\n\tpublic groupFields: this[\"_groupFields\"] = {};\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IXYSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IXYSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IXYSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IXYSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: XYSeriesDataItem;\r\n\r\n\t/**\r\n\t * X axis the series is attached to.\r\n\t */\r\n\tprotected _xAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * Y axis the series is attached to.\r\n\t */\r\n\tprotected _yAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: XYChart;\r\n\r\n\t/**\r\n\t * The main (base) axis.\r\n\t *\r\n\t * This is the axis that series fills will go to, or grow animations will\r\n\t * happen from.\r\n\t */\r\n\tprotected _baseAxis: Axis;\r\n\r\n\t/**\r\n\t * Total data item count.\r\n\t */\r\n\tprotected _count: Dictionary<string, number>;\r\n\r\n\t/**\r\n\t * Data item count in current selection.\r\n\t */\r\n\tprotected _scount: Dictionary<string, number>;\r\n\r\n\t/**\r\n\t * [_xField description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _xField: string;\r\n\r\n\t/**\r\n\t * [_yField description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _yField: string;\r\n\r\n\t/**\r\n\t * [_xOpenField description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _xOpenField: string;\r\n\r\n\t/**\r\n\t * [_yOpenField description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _yOpenField: string;\r\n\r\n\t/**\r\n\t * [_tooltipXField description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _tooltipXField: string;\r\n\r\n\t/**\r\n\t * [_tooltipYField description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _tooltipYField: string;\r\n\r\n\t/**\r\n\t * [_xValueFields description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _xValueFields: Array<string> = [];\r\n\r\n\t/**\r\n\t * [_yValueFields description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _yValueFields: Array<string> = [];\r\n\r\n\t/**\r\n\t * Series which is stacked on top of this series, if any.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic stackedSeries: XYSeries;\r\n\r\n\t/**\r\n\t * Dataitem of previously shown tooltip, used to avoid multiple\r\n\t * tooltipshownat dispatches.\r\n\t */\r\n\tprotected _prevTooltipDataItem: XYSeriesDataItem;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _baseInterval: { [index: string]: ITimeInterval } = {};\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic dataGrouped = false;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic usesShowFields: boolean = false;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _dataSetChanged: boolean = false;\r\n\r\n\r\n\tprotected _maxxX: number = 100000;\r\n\tprotected _maxxY: number = 100000;\r\n\r\n\tprotected _propertiesChanged: boolean = false;\r\n\r\n\t/**\r\n\t * If this series was used to create a series for scrollbar, this is a reference to it.\r\n\t */\r\n\tpublic scrollbarSeries: this;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic outOfRange: boolean = false;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYSeries\";\r\n\t\tthis.isMeasured = false;\r\n\r\n\r\n\t\tthis.groupFields.valueX = \"close\";\r\n\t\tthis.groupFields.valueY = \"close\";\r\n\t\tthis.groupFields.customValue = \"close\";\r\n\r\n\t\tthis.groupFields.openValueX = \"open\";\r\n\t\tthis.groupFields.openValueY = \"open\";\r\n\r\n\t\tthis.cursorTooltipEnabled = true;\r\n\r\n\t\tthis.cursorHoverEnabled = true;\r\n\t\tthis.excludeFromTotal = false;\r\n\r\n\t\tthis.mainContainer.mask = new Sprite();\r\n\t\tthis.mainContainer.mask.setElement(this.paper.add(\"path\"));\r\n\r\n\t\tthis.stacked = false;\r\n\t\tthis.snapTooltip = false;\r\n\r\n\t\tthis._showBullets = false;\r\n\r\n\t\tthis.tooltip.pointerOrientation = \"horizontal\";\r\n\r\n\t\tthis.properties.stackToNegative = true;\r\n\r\n\t\tthis.hideTooltipWhileZooming = true;\r\n\t\tthis.setPropertyValue(\"maskBullets\", true);\r\n\r\n\t\tthis.tooltip.events.on(\"hidden\", () => {\r\n\t\t\tthis.returnBulletDefaultState();\r\n\t\t}, undefined, false)\r\n\r\n\t\tthis._disposers.push(this._xAxis);\r\n\t\tthis._disposers.push(this._yAxis);\r\n\r\n\t\tthis.observe(visualProperties, () => {\r\n\t\t\tif (this.inited) {\r\n\t\t\t\tthis._propertiesChanged = true;\r\n\t\t\t\tif (this.legendDataItem) {\r\n\t\t\t\t\tthis.legendDataItem.childrenCreated = false;\r\n\t\t\t\t}\r\n\t\t\t\tif (this.chart && this.chart.legend) {\r\n\t\t\t\t\tthis.chart.legend.invalidateDataItems();\r\n\t\t\t\t}\r\n\t\t\t\tthis.invalidate();\r\n\t\t\t}\r\n\t\t}, undefined, false);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"X/Y Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new XYSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic resetExtremes() {\r\n\t\tthis._tmin.clear();\r\n\t\tthis._tmax.clear();\r\n\r\n\t\tthis._smin.clear();\r\n\t\tthis._smax.clear();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic dataChangeUpdate() {\r\n\t\tthis.dataGrouped = false;\r\n\t\tthis._baseInterval = {};\r\n\t\tthis._currentDataSetId = \"\";\r\n\r\n\t\tthis.resetExtremes();\r\n\r\n\t\tif (this.xAxis) {\r\n\t\t\tthis.xAxis.seriesDataChangeUpdate(this);\r\n\t\t}\r\n\r\n\t\tif (this.yAxis) {\r\n\t\t\tthis.yAxis.seriesDataChangeUpdate(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the series' data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tthis._baseInterval = {};\r\n\t\tlet dataFields = this.dataFields;\r\n\t\tif (dataFields.valueYShow || dataFields.openValueXShow || dataFields.openValueXShow || dataFields.openValueYShow) {\r\n\t\t\tthis.usesShowFields = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.usesShowFields = false;\r\n\t\t}\r\n\r\n\t\tthis.defineFields();\r\n\r\n\t\tif (this.data.length > 0) {\r\n\t\t\tthis.dataChangeUpdate();\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tthis.updateItemReaderText();\r\n\t\tif (this.chart) {\r\n\t\t\tif (!$type.hasValue(this.dataFields[<keyof this[\"_dataFields\"]>this._xField]) || !$type.hasValue(this.dataFields[<keyof this[\"_dataFields\"]>this._yField])) {\r\n\t\t\t\tthrow Error(\"Data fields for series \\\"\" + (this.name ? this.name : this.uid) + \"\\\" are not properly defined.\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// 4.7.21 solves 51540\r\n\t\tif (this.inited && this.isHidden) {\r\n\t\t\tthis.hide(0);\r\n\t\t}\r\n\r\n\t\tthis.dataGrouped = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes data item.\r\n\t *\r\n\t * @param dataItem     Data item\r\n\t * @param dataContext  Raw data\r\n\t * @param index        Index of the data item\r\n\t */\r\n\tprotected processDataItem(dataItem: this[\"_dataItem\"], dataContext?: Object): void {\r\n\t\ttry {\r\n\t\t\tsuper.processDataItem(dataItem, dataContext);\r\n\r\n\t\t\tthis.xAxis.processSeriesDataItem(dataItem, \"X\");\r\n\t\t\tthis.yAxis.processSeriesDataItem(dataItem, \"Y\");\r\n\r\n\t\t\tthis.setInitialWorkingValues(dataItem);\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t\tif (this._chart) {\r\n\t\t\t\tthis._chart.raiseCriticalError(e);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * When validating raw data, instead of processing data item, we update it\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param item\r\n\t */\r\n\tprotected updateDataItem(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.updateDataItem(dataItem);\r\n\r\n\t\t//dataItem.events.disable();\r\n\t\tthis.xAxis.processSeriesDataItem(dataItem, \"X\");\r\n\t\tthis.yAxis.processSeriesDataItem(dataItem, \"Y\");\r\n\t\t//dataItem.events.enable();\t\t\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Inits data item's working values.\r\n\t *\r\n\t * @param dataItem  Data item\r\n\t * @param index     Data item's index\r\n\t */\r\n\r\n\tprotected setInitialWorkingValues(dataItem: this[\"_dataItem\"]): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tsuper.disposeData();\r\n\t\tlet xAxis = this.xAxis;\r\n\t\tlet yAxis = this.yAxis;\r\n\r\n\t\tif (xAxis) {\r\n\t\t\tlet dataItemsX = this.dataItemsByAxis.getKey(xAxis.uid);\r\n\t\t\tif (dataItemsX) {\r\n\t\t\t\tdataItemsX.clear();\r\n\t\t\t}\r\n\t\t\tif (xAxis instanceof CategoryAxis) {\r\n\t\t\t\tthis.clearCatAxis(xAxis);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (yAxis) {\r\n\t\t\tlet dataItemsY = this.dataItemsByAxis.getKey(yAxis.uid);\r\n\t\t\tif (dataItemsY) {\r\n\t\t\t\tdataItemsY.clear();\r\n\t\t\t}\r\n\t\t\tif (yAxis instanceof CategoryAxis) {\r\n\t\t\t\tthis.clearCatAxis(yAxis);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected clearCatAxis(axis: CategoryAxis) {\r\n\t\tlet uid = this.uid;\r\n\t\taxis.dataItems.each((dataItem) => {\r\n\t\t\tif (dataItem.seriesDataItems[uid]) {\r\n\t\t\t\tdataItem.seriesDataItems[uid] = [];\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sets up which data fields to use for data access.\r\n\t */\r\n\tprotected defineFields() {\r\n\t\tlet xAxis: Axis = this.xAxis;\r\n\t\tlet yAxis: Axis = this.yAxis;\r\n\t\tif (xAxis && yAxis) {\r\n\t\t\tlet xAxisFieldName: string = xAxis.axisFieldName;\r\n\t\t\tlet xField: $type.Keyof<this[\"_dataFields\"]> = <$type.Keyof<this[\"_dataFields\"]>>(xAxisFieldName + \"X\");\r\n\t\t\tlet xOpenField: $type.Keyof<this[\"_dataFields\"]> = <$type.Keyof<this[\"_dataFields\"]>>(\"open\" + $utils.capitalize(xAxisFieldName) + \"X\");\r\n\r\n\t\t\tlet yAxisFieldName: string = yAxis.axisFieldName;\r\n\t\t\tlet yField: $type.Keyof<this[\"_dataFields\"]> = <$type.Keyof<this[\"_dataFields\"]>>(yAxisFieldName + \"Y\");\r\n\t\t\tlet yOpenField: $type.Keyof<this[\"_dataFields\"]> = <$type.Keyof<this[\"_dataFields\"]>>(\"open\" + $utils.capitalize(yAxisFieldName) + \"Y\");\r\n\r\n\t\t\tthis._xField = xField;\r\n\t\t\tthis._yField = yField;\r\n\r\n\t\t\tif (this.dataFields[xOpenField]) {\r\n\t\t\t\tthis._xOpenField = xOpenField;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.dataFields[yOpenField]) {\r\n\t\t\t\tthis._yOpenField = yOpenField;\r\n\t\t\t}\r\n\r\n\t\t\tif (!this.dataFields[yOpenField] && this.baseAxis == yAxis) {\r\n\t\t\t\tthis._yOpenField = yField;\r\n\t\t\t}\r\n\r\n\t\t\tif (!this.dataFields[xOpenField] && this.baseAxis == xAxis) {\r\n\t\t\t\tthis._xOpenField = xField;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.stacked && this.baseAxis == xAxis) {\r\n\t\t\t\tthis._xOpenField = xField;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.stacked && this.baseAxis == yAxis) {\r\n\t\t\t\tthis._yOpenField = yField;\r\n\t\t\t}\r\n\r\n\t\t\tif ((xAxis instanceof CategoryAxis) && (yAxis instanceof CategoryAxis)) {\r\n\t\t\t\tif (!this._yOpenField) {\r\n\t\t\t\t\tthis._yOpenField = yField;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis._xValueFields = [];\r\n\t\t\tthis._yValueFields = [];\r\n\r\n\t\t\tthis.addValueField(xAxis, <any>this._xValueFields, <any>this._xField);\r\n\t\t\tthis.addValueField(xAxis, <any>this._xValueFields, <any>this._xOpenField);\r\n\r\n\t\t\tthis.addValueField(yAxis, <any>this._yValueFields, <any>this._yField);\r\n\t\t\tthis.addValueField(yAxis, <any>this._yValueFields, <any>this._yOpenField);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [axis description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param axis    Axis\r\n\t * @param fields  Fields (?)\r\n\t * @param field   Field\r\n\t */\r\n\tprotected addValueField<Key extends keyof this[\"_dataFields\"]>(axis: Axis, fields: Array<Key>, field: Key): void {\r\n\t\tif (axis instanceof ValueAxis) {\r\n\t\t\tif ($type.hasValue(this.dataFields[field]) && fields.indexOf(field) == -1) {\r\n\t\t\t\tfields.push(field);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets category field from the category axis.\r\n\t *\r\n\t * User might set field for category axis only, but not for series. In such\r\n\t * case, we take field value from axis and set it for series.\r\n\t *\r\n\t * @param field  Field\r\n\t * @param axis   Axis\r\n\t */\r\n\tprotected setCategoryAxisField<Key extends keyof this[\"_dataFields\"]>(field: Key, axis: CategoryAxis): void {\r\n\t\tif (!$type.hasValue(this.dataFields[field])) {\r\n\t\t\tthis.dataFields[field] = <any>axis.dataFields.category;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets date field from the date axis.\r\n\t *\r\n\t * User might set field for category axis only, but not for series. In such\r\n\t * case, we take field value from axis and set it for series.\r\n\t *\r\n\t * @param field  Field\r\n\t * @param axis   Axis\r\n\t */\r\n\tprotected setDateAxisField<Key extends keyof this[\"_dataFields\"]>(field: Key, axis: DateAxis): void {\r\n\t\tif (!$type.hasValue(this.dataFields[field])) {\r\n\t\t\tthis.dataFields[field] = <any>axis.dataFields.date;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Performs after-draw tasks, e.g. creates masks.\r\n\t */\r\n\tprotected afterDraw(): void {\r\n\t\tsuper.afterDraw();\r\n\t\tthis.createMask();\r\n\t}\r\n\r\n\t/**\r\n\t * Create a mask for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic createMask(): void {\r\n\t\t// this mask from which we cut out ranges. does not work well if ranges overlap.\r\n\t\tif (this.mainContainer.mask) {\r\n\t\t\tlet path: string = this.getMaskPath();\r\n\r\n\t\t\t// @todo: this approach won't work well on circluar or other non x/y axes\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (range) => {\r\n\t\t\t\tif (range.axisFill.fillPath) {\r\n\t\t\t\t\trange.axisFill.validate();\r\n\t\t\t\t\tpath += range.axisFill.fillPath;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tthis.mainContainer.mask.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to use as series mask.\r\n\t *\r\n\t * @return SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tif (this.xAxis && this.yAxis) {\r\n\t\t\treturn $path.rectToPath({\r\n\t\t\t\tx: 0,\r\n\t\t\t\ty: 0,\r\n\t\t\t\twidth: this.xAxis.axisLength,\r\n\t\t\t\theight: this.yAxis.axisLength\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn \"\";\r\n\t}\r\n\r\n\t/**\r\n\t * Returns axis data field to use.\r\n\t *\r\n\t * @param axis  Axis\r\n\t * @return Field name\r\n\t */\r\n\tpublic getAxisField(axis: Axis): string {\r\n\t\tif (axis == this.xAxis) {\r\n\t\t\treturn this.xField;\r\n\t\t}\r\n\t\tif (axis == this.yAxis) {\r\n\t\t\treturn this.yField;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems() {\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\tthis._maxxX = $math.max(100000, chart.plotContainer.maxWidth * 2);\r\n\t\t\tthis._maxxY = $math.max(100000, chart.plotContainer.maxHeight * 2);\r\n\t\t}\r\n\r\n\t\t// this helps date axis to check which baseInterval we should use\r\n\t\tlet xAxis = this.xAxis;\r\n\t\tlet yAxis = this.yAxis;\r\n\t\tif (xAxis && yAxis) {\r\n\t\t\txAxis.updateAxisBySeries();\r\n\t\t\tyAxis.updateAxisBySeries();\r\n\t\t}\r\n\r\n\t\tsuper.validateDataItems();\r\n\r\n\t\tif (xAxis && yAxis) {\r\n\t\t\txAxis.postProcessSeriesDataItems(this);\r\n\t\t\tyAxis.postProcessSeriesDataItems(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data range.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataRange() {\r\n\t\tlet xAxis = this.xAxis;\r\n\t\tlet yAxis = this.yAxis;\r\n\r\n\t\tif (xAxis && yAxis) {\r\n\t\t\tif (xAxis.dataRangeInvalid) {\r\n\t\t\t\txAxis.validateDataRange();\r\n\t\t\t}\r\n\r\n\t\t\tif (yAxis.dataRangeInvalid) {\r\n\t\t\t\tyAxis.validateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tlet xAxis = this.xAxis;\r\n\t\tlet yAxis = this.yAxis;\r\n\r\n\t\tif (xAxis && yAxis) {\r\n\t\t\tif (xAxis.invalid) {\r\n\t\t\t\txAxis.validate();\r\n\t\t\t}\r\n\r\n\t\t\tif (yAxis.invalid) {\r\n\t\t\t\tyAxis.validate();\r\n\t\t\t}\r\n\r\n\t\t\tthis.y = yAxis.pixelY;\r\n\t\t\tthis.x = xAxis.pixelX;\r\n\r\n\r\n\t\t\tthis._showBullets = true;\r\n\t\t\tlet minBulletDistance: number = this.minBulletDistance;\r\n\t\t\tif ($type.isNumber(minBulletDistance)) {\r\n\t\t\t\tif (this.baseAxis.axisLength / (this.endIndex - this.startIndex) < minBulletDistance) {\r\n\t\t\t\t\tthis._showBullets = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.updateTooltip();\r\n\r\n\t\tif ((xAxis instanceof DateAxis && xAxis.groupData && !this.dataGrouped) || (yAxis instanceof DateAxis && yAxis.groupData && !this.dataGrouped)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tlet chart = this.chart;\r\n\t\tlet maskBullets = this.maskBullets;\r\n\t\tif (chart && maskBullets) {\r\n\t\t\tif (chart.className == \"XYChart\") {\r\n\t\t\t\tif (chart.leftAxesContainer.layout == \"vertical\" || chart.rightAxesContainer.layout == \"vertical\") {\r\n\t\t\t\t\tif (this.yAxis) {\r\n\t\t\t\t\t\tthis.bulletsContainer.mask = this.yAxis.renderer.gridContainer;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tthis.bulletsContainer.mask = undefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (chart.topAxesContainer.layout == \"horizontal\" || chart.bottomAxesContainer.layout == \"horizontal\") {\r\n\t\t\t\t\tif (this.xAxis) {\r\n\t\t\t\t\t\tthis.bulletsContainer.mask = this.xAxis.renderer.gridContainer;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tthis.bulletsContainer.mask = undefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * X axis the series is attached to.\r\n\t *\r\n\t * @param axis  Axis\r\n\t */\r\n\tpublic set xAxis(axis: Axis) {\r\n\t\tthis.setXAxis(axis);\r\n\t}\r\n\r\n\tprotected setXAxis(axis: Axis) {\r\n\t\tlet oldAxis = this._xAxis.get();\r\n\t\tif (oldAxis != axis) {\r\n\t\t\tif (oldAxis) {\r\n\t\t\t\tthis.dataItemsByAxis.removeKey(oldAxis.uid);\r\n\t\t\t\t// TODO why is this here ?\r\n\t\t\t\tthis._xAxis.dispose();\r\n\t\t\t\t// temp @todo: why it is not disposed?\r\n\t\t\t\toldAxis.series.removeValue(this);\r\n\t\t\t}\r\n\r\n\t\t\tthis._xAxis.set(axis, axis.registerSeries(this));\r\n\r\n\t\t\tthis.dataItemsByAxis.setKey(axis.uid, new Dictionary<string, this[\"_dataItem\"]>());\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Axis\r\n\t */\r\n\tpublic get xAxis(): Axis {\r\n\t\tif (this.chart) {\r\n\t\t\tif (!this._xAxis.get()) {\r\n\t\t\t\tconst axis = this.chart.xAxes.getIndex(0);\r\n\r\n\t\t\t\tif (!axis) {\r\n\t\t\t\t\tthrow Error(\"There are no X axes on chart.\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.xAxis = axis;\r\n\t\t\t}\r\n\t\t\treturn this._xAxis.get();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Y axis the series is attached to.\r\n\t *\r\n\t * @param axis  Axis\r\n\t */\r\n\tpublic set yAxis(axis: Axis) {\r\n\t\tthis.setYAxis(axis);\r\n\t}\r\n\r\n\tprotected setYAxis(axis: Axis) {\r\n\t\tlet oldAxis = this._yAxis.get();\r\n\t\tif (oldAxis != axis) {\r\n\t\t\tif (oldAxis) {\r\n\t\t\t\tthis.dataItemsByAxis.removeKey(oldAxis.uid);\r\n\t\t\t\t// TODO why is this here ?\r\n\t\t\t\tthis._yAxis.dispose();\r\n\t\t\t\t// temp @todo: why it is not disposed?\r\n\t\t\t\toldAxis.series.removeValue(this);\r\n\t\t\t}\r\n\r\n\t\t\tthis._yAxis.set(axis, axis.registerSeries(this));\r\n\r\n\t\t\tif (axis.chart instanceof XYChart) {\r\n\t\t\t\taxis.chart.handleYAxisSet(this);\r\n\t\t\t}\r\n\r\n\t\t\tthis.dataItemsByAxis.setKey(axis.uid, new Dictionary<string, this[\"_dataItem\"]>());\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Axis\r\n\t */\r\n\tpublic get yAxis(): Axis {\r\n\t\tif (this.chart) {\r\n\t\t\tif (!this._yAxis.get()) {\r\n\t\t\t\tconst axis = this.chart.yAxes.getIndex(0);\r\n\r\n\t\t\t\tif (!axis) {\r\n\t\t\t\t\tthrow Error(\"There are no Y axes on chart.\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.yAxis = axis;\r\n\t\t\t}\r\n\r\n\t\t\treturn this._yAxis.get();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * The main (base) axis.\r\n\t *\r\n\t * This is the axis that series fills will go to, or grow animations will\r\n\t * happen from.\r\n\t *\r\n\t * @param value  Axis\r\n\t */\r\n\tpublic set baseAxis(value: Axis) {\r\n\t\tif (this._baseAxis != value) {\r\n\t\t\tthis._baseAxis = value;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Axis\r\n\t */\r\n\tpublic get baseAxis(): Axis {\r\n\t\tlet xAxis = this.xAxis;\r\n\t\tlet yAxis = this.yAxis;\r\n\r\n\t\tif (!this._baseAxis && xAxis && yAxis) {\r\n\t\t\tif (yAxis instanceof DateAxis) {\r\n\t\t\t\tthis._baseAxis = yAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (xAxis instanceof DateAxis) {\r\n\t\t\t\tthis._baseAxis = xAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (yAxis instanceof CategoryAxis) {\r\n\t\t\t\tthis._baseAxis = yAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (xAxis instanceof CategoryAxis) {\r\n\t\t\t\tthis._baseAxis = xAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (!this._baseAxis) {\r\n\t\t\t\tthis._baseAxis = xAxis;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._baseAxis;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds one or several (array) of data items to the existing data.\r\n\t *\r\n\t * @param rawDataItem One or many raw data item objects\r\n\t */\r\n\tpublic addData(rawDataItem: Object | Object[], removeCount?: number, skipRaw?: boolean): void {\r\n\t\tsuper.addData(rawDataItem, removeCount, skipRaw);\r\n\t\tconst scrollbarSeries = this.scrollbarSeries;\r\n\t\tif (scrollbarSeries) {\r\n\t\t\tthis.scrollbarSeries.addData(rawDataItem, removeCount, true);\r\n\t\t}\r\n\t}\r\n\r\n\tprotected setData(value: any[]) {\r\n\t\tsuper.setData(value);\r\n\t\tif (this.scrollbarSeries) {\r\n\t\t\tthis.scrollbarSeries.setData(value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Makes the chart use particular data set.\r\n\t *\r\n\t * If `id` is not provided or there is no such data set, main data will be\r\n\t * used.\r\n\t *\r\n\t * @ignore\r\n\t * @since 4.7.0\r\n\t * @param  id  Data set id\r\n\t */\r\n\tpublic setDataSet(id: string): boolean {\r\n\t\tlet changed = super.setDataSet(id);\r\n\r\n\t\tif (changed) {\r\n\r\n\t\t\tthis._dataSetChanged = true;\r\n\t\t\tlet dataItems = this.dataItems;\r\n\r\n\t\t\tthis.resetExtremes();\r\n\r\n\t\t\tif (dataItems && dataItems.length > 0) {\r\n\r\n\t\t\t\tlet xAxis = this.xAxis;\r\n\t\t\t\tlet yAxis = this.yAxis;\r\n\r\n\t\t\t\tthis._prevStartIndex = undefined;\r\n\t\t\t\tthis._prevEndIndex = undefined;\r\n\t\t\t\tthis._startIndex = undefined;\r\n\t\t\t\tthis._endIndex = undefined;\r\n\r\n\t\t\t\tif (!this.appeared) {\r\n\t\t\t\t\tthis.processValues(false); // this will slow down!\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (xAxis instanceof DateAxis && xAxis == this.baseAxis) {\r\n\t\t\t\t\tthis._tmin.setKey(xAxis.uid, dataItems.getIndex(0).dateX.getTime());\r\n\t\t\t\t\tthis._tmax.setKey(xAxis.uid, dataItems.getIndex(dataItems.length - 1).dateX.getTime());\r\n\t\t\t\t\tthis.dispatch(\"extremeschanged\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (yAxis instanceof DateAxis && yAxis == this.baseAxis) {\r\n\t\t\t\t\tthis._tmin.setKey(yAxis.uid, dataItems.getIndex(0).dateY.getTime());\r\n\t\t\t\t\tthis._tmax.setKey(yAxis.uid, dataItems.getIndex(dataItems.length - 1).dateY.getTime());\r\n\t\t\t\t\tthis.dispatch(\"extremeschanged\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn changed;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Processes values after data items' were added.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItems  Data items\r\n\t */\r\n\tpublic processValues(working: boolean): void {\r\n\t\tsuper.processValues(working);\r\n\r\n\t\tlet xAxis = this.xAxis;\r\n\t\tlet yAxis = this.yAxis;\r\n\r\n\t\tif (!xAxis || !yAxis) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet dataItems = this.dataItems;\r\n\r\n\t\tlet minX = Infinity;\r\n\t\tlet maxX = - Infinity;\r\n\r\n\t\tlet minY = Infinity;\r\n\t\tlet maxY = - Infinity;\r\n\r\n\t\tlet startIndex = this.startIndex;\r\n\t\tlet endIndex = this.endIndex;\r\n\r\n\t\tlet workingStartIndex = startIndex;\r\n\t\tlet workingEndIndex = endIndex;\r\n\r\n\t\tif (!working) {\r\n\t\t\tstartIndex = 0;\r\n\t\t\tendIndex = this.dataItems.length;\r\n\t\t}\r\n\r\n\t\tfor (let i = startIndex; i < endIndex; i++) {\r\n\t\t\tlet dataItem = dataItems.getIndex(i);\r\n\r\n\t\t\tthis.getStackValue(dataItem, working);\r\n\r\n\t\t\tlet stackX = dataItem.getValue(\"valueX\", \"stack\");\r\n\t\t\tlet stackY = dataItem.getValue(\"valueY\", \"stack\");\r\n\r\n\t\t\tminX = $math.min(dataItem.getMin(this._xValueFields, working, stackX), minX);\r\n\t\t\tminY = $math.min(dataItem.getMin(this._yValueFields, working, stackY), minY);\r\n\r\n\t\t\tmaxX = $math.max(dataItem.getMax(this._xValueFields, working, stackX), maxX);\r\n\t\t\tmaxY = $math.max(dataItem.getMax(this._yValueFields, working, stackY), maxY);\r\n\r\n\t\t\t// if it's stacked, pay attention to stack value\r\n\t\t\tif (this.stacked) {\r\n\t\t\t\tif (this.baseAxis == xAxis) {\r\n\t\t\t\t\tif (stackY < minY) {\r\n\t\t\t\t\t\tminY = stackY\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (stackY > maxY) {\r\n\t\t\t\t\t\tmaxY = stackY;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.baseAxis == yAxis) {\r\n\t\t\t\t\tif (stackX < minX) {\r\n\t\t\t\t\t\tminX = stackX;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (stackX > maxX) {\r\n\t\t\t\t\t\tmaxX = stackX;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\t// this is mainly for value axis to calculate total and perecent.total of each series category\r\n\t\txAxis.processSeriesDataItems();\r\n\t\tyAxis.processSeriesDataItems();\r\n\r\n\t\tlet xAxisId: string = xAxis.uid;\r\n\t\tlet yAxisId: string = yAxis.uid;\r\n\r\n\t\tif (this.xAxis instanceof ValueAxis && (minX == Infinity || maxX == -Infinity)) {\r\n\t\t\tthis._smin.setKey(xAxisId, undefined);\r\n\t\t\tthis._smax.setKey(xAxisId, undefined);\r\n\t\t\tthis.dispatchImmediately(\"selectionextremeschanged\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (this.yAxis instanceof ValueAxis && (minY == Infinity || maxY == -Infinity)) {\r\n\t\t\tthis._smin.setKey(yAxisId, undefined);\r\n\t\t\tthis._smax.setKey(yAxisId, undefined);\r\n\t\t\tthis.dispatchImmediately(\"selectionextremeschanged\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (!working) {\r\n\t\t\tif (this._tmin.getKey(xAxisId) != minX || this._tmax.getKey(xAxisId) != maxX || this._tmin.getKey(yAxisId) != minY || this._tmax.getKey(yAxisId) != maxY) {\r\n\t\t\t\tthis._tmin.setKey(xAxisId, minX);\r\n\t\t\t\tthis._tmax.setKey(xAxisId, maxX);\r\n\t\t\t\tthis._tmin.setKey(yAxisId, minY);\r\n\t\t\t\tthis._tmax.setKey(yAxisId, maxY);\r\n\r\n\t\t\t\tlet stackedSeries = this.stackedSeries;\r\n\t\t\t\tif (stackedSeries) {\r\n\t\t\t\t\tif (stackedSeries.isDisposed()) {\r\n\t\t\t\t\t\tthis.stackedSeries = undefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tstackedSeries.processValues(false);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tthis.dispatchImmediately(\"extremeschanged\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (startIndex != workingStartIndex || endIndex != workingEndIndex) {\r\n\t\t\tminX = Infinity;\r\n\t\t\tmaxX = - Infinity;\r\n\r\n\t\t\tminY = Infinity;\r\n\t\t\tmaxY = - Infinity;\r\n\r\n\t\t\tfor (let i = workingStartIndex; i < workingEndIndex; i++) {\r\n\t\t\t\tlet dataItem = dataItems.getIndex(i);\r\n\r\n\t\t\t\tthis.getStackValue(dataItem, working);\r\n\r\n\t\t\t\tlet stackX = dataItem.getValue(\"valueX\", \"stack\");\r\n\t\t\t\tlet stackY = dataItem.getValue(\"valueY\", \"stack\");\r\n\r\n\t\t\t\tminX = $math.min(dataItem.getMin(this._xValueFields, working, stackX), minX);\r\n\r\n\t\t\t\tminY = $math.min(dataItem.getMin(this._yValueFields, working, stackY), minY);\r\n\r\n\t\t\t\tmaxX = $math.max(dataItem.getMax(this._xValueFields, working, stackX), maxX);\r\n\t\t\t\tmaxY = $math.max(dataItem.getMax(this._yValueFields, working, stackY), maxY);\r\n\r\n\t\t\t\t// if it's stacked, pay attention to stack value\r\n\t\t\t\tif (this.stacked) {\r\n\t\t\t\t\tif (this.baseAxis == xAxis) {\r\n\t\t\t\t\t\tif (stackY < minY) {\r\n\t\t\t\t\t\t\tminY = stackY\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (stackY > maxY) {\r\n\t\t\t\t\t\t\tmaxY = stackY;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.baseAxis == yAxis) {\r\n\t\t\t\t\t\tif (stackX < minX) {\r\n\t\t\t\t\t\t\tminX = stackX;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (stackX > maxX) {\r\n\t\t\t\t\t\t\tmaxX = stackX;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.xAxis instanceof ValueAxis && (minX == Infinity || maxX == -Infinity)) {\r\n\t\t\tthis._smin.setKey(xAxisId, undefined);\r\n\t\t\tthis._smax.setKey(xAxisId, undefined);\r\n\t\t\tthis.dispatchImmediately(\"selectionextremeschanged\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (this.yAxis instanceof ValueAxis && (minY == Infinity || maxY == -Infinity)) {\r\n\t\t\tthis._smin.setKey(yAxisId, undefined);\r\n\t\t\tthis._smax.setKey(yAxisId, undefined);\r\n\t\t\tthis.dispatchImmediately(\"selectionextremeschanged\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (this._smin.getKey(xAxisId) != minX || this._smax.getKey(xAxisId) != maxX || this._smin.getKey(yAxisId) != minY || this._smax.getKey(yAxisId) != maxY) {\r\n\t\t\tthis._smin.setKey(xAxisId, minX);\r\n\t\t\tthis._smax.setKey(xAxisId, maxX);\r\n\t\t\tthis._smin.setKey(yAxisId, minY);\r\n\t\t\tthis._smax.setKey(yAxisId, maxY);\r\n\r\n\t\t\tif (this.appeared || this.start != 0 || this.end != 1 || this.dataItems != this.mainDataSet) {\r\n\t\t\t\t/// new, helps to handle issues with change percent\r\n\t\t\t\tlet changed = false;\r\n\r\n\t\t\t\tif (yAxis instanceof ValueAxis && !(yAxis instanceof DateAxis)) {\r\n\t\t\t\t\tlet tmin = this._tmin.getKey(yAxisId);\r\n\r\n\t\t\t\t\tif (!$type.isNumber(tmin) || ((this.usesShowFields || this._dataSetChanged || (xAxis instanceof DateAxis && xAxis.groupData && this.isShowing)) && minY < tmin) || (this.stackedSeries && !this.isHidden)) {\r\n\t\t\t\t\t\tthis._tmin.setKey(yAxisId, minY);\r\n\t\t\t\t\t\tchanged = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet tmax = this._tmax.getKey(yAxisId);\r\n\t\t\t\t\tif (!$type.isNumber(tmax) || ((this.usesShowFields || this._dataSetChanged || (xAxis instanceof DateAxis && xAxis.groupData && this.isShowing)) && maxY > tmax) || (this.stackedSeries && !this.isHidden)) {\r\n\t\t\t\t\t\tthis._tmax.setKey(yAxisId, maxY);\r\n\t\t\t\t\t\tchanged = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (xAxis instanceof ValueAxis && !(xAxis instanceof DateAxis)) {\r\n\t\t\t\t\tlet tmin = this._tmin.getKey(xAxisId);\r\n\t\t\t\t\tif (!$type.isNumber(tmin) || ((this.usesShowFields || this._dataSetChanged || (yAxis instanceof DateAxis && yAxis.groupData && this.isShowing)) && minX < tmin) || (this.stackedSeries && !this.isHidden)) {\r\n\t\t\t\t\t\tthis._tmin.setKey(xAxisId, minX);\r\n\t\t\t\t\t\tchanged = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet tmax = this._tmax.getKey(xAxisId);\r\n\t\t\t\t\tif (!$type.isNumber(tmax) || ((this.usesShowFields || this._dataSetChanged || (yAxis instanceof DateAxis && yAxis.groupData && this.isShowing)) && maxX > tmax) || (this.stackedSeries && !this.isHidden)) {\r\n\t\t\t\t\t\tthis._tmax.setKey(xAxisId, maxX);\r\n\t\t\t\t\t\tchanged = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (changed) {\r\n\t\t\t\t\tthis.dispatchImmediately(\"extremeschanged\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.start == 0 && this.end == 1) {\r\n\t\t\t\t\t// yes, its ok. otherwise min/max won't be updated when zooming out\r\n\t\t\t\t\tthis._dataSetChanged = false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.dispatchImmediately(\"selectionextremeschanged\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!working && this.stacked) {\r\n\t\t\tthis.processValues(true);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Hides element's [[Tooltip]].\r\n\t *\r\n\t * @see {@link Tooltip}\r\n\t */\r\n\tpublic hideTooltip(duration?: number) {\r\n\t\tsuper.hideTooltip(duration);\r\n\t\tthis.returnBulletDefaultState();\r\n\t\tthis._prevTooltipDataItem = undefined;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Shows series tooltip at specific position.\r\n\t *\r\n\t * @param xPosition  X\r\n\t * @param yPosition  Y\r\n\t */\r\n\tpublic showTooltipAtPosition(xPosition: number, yPosition: number): IPoint {\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"];\r\n\r\n\t\tif (this.visible && !this.isHiding && !this.isShowing) {\r\n\r\n\t\t\tlet xAxis: Axis = this._xAxis.get();\r\n\t\t\tlet yAxis: Axis = this._yAxis.get();\r\n\r\n\t\t\tif (xAxis == this.baseAxis) {\r\n\t\t\t\tdataItem = <this[\"_dataItem\"]>xAxis.getSeriesDataItem(this, xAxis.toAxisPosition(xPosition), this.snapTooltip);\r\n\t\t\t}\r\n\t\t\tif (yAxis == this.baseAxis) {\r\n\t\t\t\tdataItem = <this[\"_dataItem\"]>yAxis.getSeriesDataItem(this, yAxis.toAxisPosition(yPosition), this.snapTooltip);\r\n\t\t\t}\r\n\r\n\t\t\tlet point = this.showTooltipAtDataItem(dataItem);\r\n\r\n\t\t\tif (point) {\r\n\t\t\t\treturn point;\r\n\t\t\t}\r\n\r\n\t\t\t// so that if tooltip is shown on columns or bullets for it not to be hidden\r\n\t\t\tif (!this.tooltipText && !this.tooltipHTML) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.hideTooltip();\r\n\t}\r\n\r\n\tprotected getAdjustedXLocation(dataItem: this[\"_dataItem\"], field: string, bulletLocationX?: number) {\r\n\t\treturn dataItem.locations[field];\r\n\t}\r\n\r\n\tprotected getAdjustedYLocation(dataItem: this[\"_dataItem\"], field: string, bulletLocationY?: number) {\r\n\t\treturn dataItem.locations[field];\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Shows series tooltip at specific dataItem.\r\n\t *\r\n\t * @param dataItem\r\n\t */\r\n\tpublic showTooltipAtDataItem(dataItem: this[\"_dataItem\"]): IPoint {\r\n\r\n\t\tlet cursor = <XYCursor>this.chart.cursor;\r\n\t\tif (cursor && cursor.hideSeriesTooltipsOnSelection && cursor.selection.visible && cursor.downPoint) {\r\n\t\t\tthis.hideTooltip();\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.returnBulletDefaultState(dataItem);\r\n\t\tif (dataItem && dataItem.visible) {\r\n\r\n\t\t\tthis.updateLegendValue(dataItem);\r\n\t\t\tif (this.cursorTooltipEnabled) {\r\n\t\t\t\tthis.tooltipDataItem = dataItem;\r\n\r\n\t\t\t\t// todo: add tooltipXField and tooltipYField.\r\n\t\t\t\tlet tooltipXField = this.tooltipXField;\r\n\t\t\t\tlet tooltipYField = this.tooltipYField;\r\n\r\n\t\t\t\tif ($type.hasValue((<any>dataItem)[tooltipXField]) && $type.hasValue((<any>dataItem)[tooltipYField])) {\r\n\r\n\t\t\t\t\tlet tooltipPoint = this.getPoint(dataItem, tooltipXField, tooltipYField, this.getAdjustedXLocation(dataItem, tooltipXField), this.getAdjustedYLocation(dataItem, tooltipYField));\r\n\r\n\t\t\t\t\tif (tooltipPoint) {\r\n\r\n\t\t\t\t\t\tif (this.chart.className == \"XYChart\" && (tooltipPoint.y < -1 || tooltipPoint.y > this.yAxis.pixelHeight + 1 || tooltipPoint.x < -1 || tooltipPoint.x > this.xAxis.pixelWidth + 1)) {\r\n\t\t\t\t\t\t\t// void\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthis.tooltipX = tooltipPoint.x;\r\n\t\t\t\t\t\t\tthis.tooltipY = tooltipPoint.y;\r\n\r\n\t\t\t\t\t\t\tif (this._prevTooltipDataItem != dataItem) {\r\n\r\n\t\t\t\t\t\t\t\tthis.dispatchImmediately(\"tooltipshownat\", {\r\n\t\t\t\t\t\t\t\t\ttype: \"tooltipshownat\",\r\n\t\t\t\t\t\t\t\t\ttarget: this,\r\n\t\t\t\t\t\t\t\t\tdataItem: dataItem\r\n\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t\tthis._prevTooltipDataItem = dataItem;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif (this.cursorHoverEnabled) {\r\n\t\t\t\t\t\t\t\tfor (let sprite of dataItem.sprites) {\r\n\t\t\t\t\t\t\t\t\tif (!sprite.parent.visible || sprite.isHidden || sprite.__disabled || sprite.disabled || sprite.isHiding) {\r\n\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\tif (!sprite.interactions.isRealHover) {\r\n\t\t\t\t\t\t\t\t\t\t\tsprite.dispatchImmediately(\"over\");\r\n\t\t\t\t\t\t\t\t\t\t\tsprite.interactions.isRealHover = true;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tsprite.isHover = true;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif (this.showTooltip()) {\r\n\t\t\t\t\t\t\t\treturn $utils.spritePointToSvg({ x: tooltipPoint.x, y: tooltipPoint.y }, this);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.updateLegendValue(dataItem, true);\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * Returns default state to bullets when tooltip is shown at some other data\r\n\t * item or hidden\r\n\t */\r\n\tprotected returnBulletDefaultState(dataItem?: XYSeriesDataItem) {\r\n\t\tif (this._prevTooltipDataItem && this._prevTooltipDataItem != dataItem) {\r\n\t\t\tfor (let sprite of this._prevTooltipDataItem.sprites) {\r\n\t\t\t\tif (!sprite.isDisposed()) {\r\n\t\t\t\t\tconst fireEvent = sprite.interactions.isRealHover;\r\n\t\t\t\t\tsprite.isHover = false;\r\n\t\t\t\t\tif (fireEvent) {\r\n\t\t\t\t\t\tsprite.dispatchImmediately(\"out\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._prevTooltipDataItem = undefined;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprotected shouldCreateBullet(dataItem: this[\"_dataItem\"], bulletTemplate: Bullet): boolean {\r\n\t\t// use series xField/yField if bullet doesn't have fields set\r\n\t\tlet xField: string = bulletTemplate.xField;\r\n\t\tif (!$type.hasValue(xField)) {\r\n\t\t\txField = this.xField;\r\n\t\t}\r\n\r\n\t\tlet yField: string = bulletTemplate.yField;\r\n\t\tif (!$type.hasValue(yField)) {\r\n\t\t\tyField = this.yField;\r\n\t\t}\r\n\r\n\t\tif ((this.xAxis instanceof ValueAxis && !dataItem.hasValue([xField])) || (this.yAxis instanceof ValueAxis && !dataItem.hasValue([yField]))) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (bulletTemplate.disabled) {\r\n\t\t\tlet disabledField = bulletTemplate.propertyFields.disabled;\r\n\t\t\tlet dataContext = <any>dataItem.dataContext;\r\n\t\t\tif (dataContext && dataContext[disabledField] === false) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic updateTooltip() {\r\n\t\tif (!this.hideTooltipWhileZooming && this.tooltip && !this.tooltip.isHidden && !this.isHiding && !this.isHidden && this.tooltipDataItem) {\r\n\t\t\tthis.showTooltipAtDataItem(<this[\"_dataItem\"]>this.tooltipDataItem);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic positionBullet(bullet: Bullet) {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: XYSeriesDataItem = <XYSeriesDataItem>bullet.dataItem;\r\n\r\n\t\t// use series xField/yField if bullet doesn't have fields set\r\n\t\tlet xField: string = bullet.xField;\r\n\t\tif (!$type.hasValue(xField)) {\r\n\t\t\txField = this.xField;\r\n\t\t}\r\n\r\n\t\tlet yField: string = bullet.yField;\r\n\t\tif (!$type.hasValue(yField)) {\r\n\t\t\tyField = this.yField;\r\n\t\t}\r\n\r\n\t\tlet xAxis = this.xAxis;\r\n\t\tlet yAxis = this.yAxis;\r\n\r\n\t\tif ((xAxis instanceof ValueAxis && !dataItem.hasValue([xField])) || (yAxis instanceof ValueAxis && !dataItem.hasValue([yField]))) {\r\n\t\t\tbullet.visible = false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet bulletLocationX: number = this.getBulletLocationX(bullet, xField);\r\n\t\t\tlet bulletLocationY: number = this.getBulletLocationY(bullet, yField);\r\n\r\n\t\t\tlet point = this.getPoint(dataItem, xField, yField, bulletLocationX, bulletLocationY);\r\n\t\t\tif (point) {\r\n\t\t\t\tlet xOpenField = this.xOpenField;\r\n\t\t\t\tlet yOpenField = this.yOpenField;\r\n\r\n\t\t\t\tlet positionX: number;\r\n\t\t\t\tlet positionY: number;\r\n\r\n\r\n\t\t\t\tif (xAxis instanceof DateAxis) {\r\n\r\n\t\t\t\t\tif (!$type.isNumber(bulletLocationX)) {\r\n\t\t\t\t\t\tbulletLocationX = 0;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet openValue: number;\r\n\t\t\t\t\tlet closeValue: number = dataItem.getWorkingValue(xField);\r\n\r\n\t\t\t\t\tif (!xOpenField) {\r\n\t\t\t\t\t\tif (xAxis == this.baseAxis) {\r\n\t\t\t\t\t\t\topenValue = xAxis.baseValue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\topenValue = dataItem.getWorkingValue(xOpenField);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!$type.isNumber(openValue)) {\r\n\t\t\t\t\t\topenValue = closeValue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet stack: number = dataItem.getValue(\"valueX\", \"stack\");\r\n\t\t\t\t\topenValue += stack;\r\n\t\t\t\t\tcloseValue += stack;\r\n\r\n\t\t\t\t\tif (openValue == closeValue) {\r\n\t\t\t\t\t\tlet baseInterval = xAxis.baseInterval;\r\n\t\t\t\t\t\tlet dateFormatter = xAxis.dateFormatter;\r\n\t\t\t\t\t\topenValue = $time.round(new Date(openValue), baseInterval.timeUnit, baseInterval.count, dateFormatter.firstDayOfWeek, dateFormatter.utc, undefined, dateFormatter.timezoneMinutes).getTime();\r\n\t\t\t\t\t\tcloseValue = $time.add(new Date(openValue), baseInterval.timeUnit, baseInterval.count, dateFormatter.utc).getTime();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet middleValue: number;\r\n\t\t\t\t\tif (xAxis == this.baseAxis) {\r\n\t\t\t\t\t\tmiddleValue = openValue + (closeValue - openValue) * bulletLocationX;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tmiddleValue = openValue + (closeValue - openValue) * (1 - bulletLocationX);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tpositionX = xAxis.valueToPosition(middleValue);\r\n\t\t\t\t}\r\n\t\t\t\telse if (xAxis instanceof ValueAxis) {\r\n\r\n\t\t\t\t\tif (!$type.isNumber(bulletLocationX)) {\r\n\t\t\t\t\t\tbulletLocationX = 0;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet openValue: number;\r\n\t\t\t\t\tlet closeValue: number = dataItem.getWorkingValue(xField);\r\n\r\n\t\t\t\t\tif (!xOpenField) {\r\n\t\t\t\t\t\topenValue = xAxis.baseValue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\topenValue = dataItem.getWorkingValue(xOpenField);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet stack: number = dataItem.getValue(\"valueX\", \"stack\");\r\n\t\t\t\t\topenValue += stack;\r\n\t\t\t\t\tcloseValue += stack;\r\n\r\n\t\t\t\t\tlet middleValue = openValue + (closeValue - openValue) * (1 - bulletLocationX);\r\n\r\n\t\t\t\t\tpositionX = xAxis.valueToPosition(middleValue);\r\n\t\t\t\t}\r\n\t\t\t\telse if (xAxis instanceof CategoryAxis) {\r\n\r\n\t\t\t\t\tlet rightLocation = this.getAdjustedXLocation(dataItem, xField, bullet.locationX);\r\n\t\t\t\t\tlet leftLocation = this.getAdjustedXLocation(dataItem, xOpenField, bullet.locationX);\r\n\r\n\t\t\t\t\tpositionX = xAxis.categoryToPosition((<any>dataItem)[xField], rightLocation);\r\n\t\t\t\t\tlet openPositionX: number;\r\n\r\n\r\n\t\t\t\t\tif (xOpenField) {\r\n\t\t\t\t\t\topenPositionX = xAxis.categoryToPosition((<any>dataItem)[xOpenField], leftLocation);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!$type.isNumber(openPositionX)) {\r\n\t\t\t\t\t\topenPositionX = 1;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tpositionX = openPositionX + (positionX - openPositionX) * bulletLocationX;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (yAxis instanceof DateAxis) {\r\n\t\t\t\t\tif (!$type.isNumber(bulletLocationY)) {\r\n\t\t\t\t\t\tbulletLocationY = 0;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet openValue: number;\r\n\t\t\t\t\tlet closeValue: number = dataItem.getWorkingValue(yField);\r\n\r\n\t\t\t\t\tif (!yOpenField) {\r\n\t\t\t\t\t\tif (yAxis == this.baseAxis) {\r\n\t\t\t\t\t\t\topenValue = yAxis.baseValue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\topenValue = dataItem.getWorkingValue(yOpenField);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!$type.isNumber(openValue)) {\r\n\t\t\t\t\t\topenValue = closeValue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet stack: number = dataItem.getValue(\"valueY\", \"stack\");\r\n\t\t\t\t\topenValue += stack;\r\n\t\t\t\t\tcloseValue += stack;\r\n\r\n\t\t\t\t\tif (openValue == closeValue) {\r\n\t\t\t\t\t\tlet baseInterval = yAxis.baseInterval;\r\n\t\t\t\t\t\tlet dateFormatter = yAxis.dateFormatter;\r\n\t\t\t\t\t\topenValue = $time.round(new Date(openValue), baseInterval.timeUnit, baseInterval.count, dateFormatter.firstDayOfWeek, dateFormatter.utc, undefined, dateFormatter.timezoneMinutes).getTime();\r\n\t\t\t\t\t\tcloseValue = $time.add(new Date(openValue), baseInterval.timeUnit, baseInterval.count, dateFormatter.utc).getTime();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet middleValue: number;\r\n\r\n\t\t\t\t\tif (yAxis == this.baseAxis) {\r\n\t\t\t\t\t\tmiddleValue = openValue + (closeValue - openValue) * bulletLocationY;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tmiddleValue = openValue + (closeValue - openValue) * (1 - bulletLocationY);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tpositionY = yAxis.valueToPosition(middleValue);\r\n\t\t\t\t}\r\n\t\t\t\telse if (yAxis instanceof ValueAxis) {\r\n\r\n\t\t\t\t\tif (!$type.isNumber(bulletLocationY)) {\r\n\t\t\t\t\t\tbulletLocationY = 0;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet openValue: number;\r\n\t\t\t\t\tlet closeValue: number = dataItem.getWorkingValue(yField);\r\n\r\n\t\t\t\t\tif (!yOpenField) {\r\n\t\t\t\t\t\topenValue = yAxis.baseValue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\topenValue = dataItem.getWorkingValue(yOpenField);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet stack: number = dataItem.getValue(\"valueY\", \"stack\");\r\n\t\t\t\t\topenValue += stack;\r\n\t\t\t\t\tcloseValue += stack;\r\n\r\n\t\t\t\t\tlet middleValue = openValue + (closeValue - openValue) * (1 - bulletLocationY);\r\n\r\n\t\t\t\t\tpositionY = yAxis.valueToPosition(middleValue);\r\n\t\t\t\t}\r\n\t\t\t\telse if (yAxis instanceof CategoryAxis) {\r\n\t\t\t\t\tpositionY = yAxis.categoryToPosition((<any>dataItem)[yField], bulletLocationY);\r\n\r\n\t\t\t\t\tlet topLocation = this.getAdjustedYLocation(dataItem, yField, bullet.locationY);\r\n\t\t\t\t\tlet bottomLocation = this.getAdjustedYLocation(dataItem, yOpenField, bullet.locationY);\r\n\r\n\t\t\t\t\tpositionY = yAxis.categoryToPosition((<any>dataItem)[yField], topLocation);\r\n\t\t\t\t\tlet openPositionY: number;\r\n\r\n\t\t\t\t\tif (yOpenField) {\r\n\t\t\t\t\t\topenPositionY = yAxis.categoryToPosition((<any>dataItem)[yOpenField], bottomLocation);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!$type.isNumber(openPositionY)) {\r\n\t\t\t\t\t\topenPositionY = 1;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tpositionY = openPositionY + (positionY - openPositionY) * bulletLocationY;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbullet.visible = true;\r\n\t\t\t\tthis.positionBulletReal(bullet, positionX, positionY);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tbullet.visible = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprotected positionBulletReal(bullet: Sprite, positionX: number, positionY: number) {\r\n\t\tbullet.x = this.xAxis.renderer.positionToPoint(positionX, positionY).x;\r\n\t\tbullet.y = this.yAxis.renderer.positionToPoint(positionY, positionX).y;\r\n\t}\r\n\r\n\t/**\r\n\t * returns bullet x location\r\n\t * @ignore\r\n\t */\r\n\tprotected getBulletLocationX(bullet: Bullet, field: string): number {\r\n\t\tlet bulletLocation: number = bullet.locationX;\r\n\t\tlet dataItem = bullet.dataItem;\r\n\t\tif (!$type.isNumber(bulletLocation)) {\r\n\t\t\tbulletLocation = dataItem.workingLocations[field];\r\n\t\t}\r\n\t\treturn bulletLocation;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns bullet x location\r\n\t * @ignore\r\n\t */\r\n\tprotected getBulletLocationY(bullet: Bullet, field: string): number {\r\n\t\tlet bulletLocation: number = bullet.locationY;\r\n\t\tlet dataItem = bullet.dataItem;\r\n\t\tif (!$type.isNumber(bulletLocation)) {\r\n\t\t\tbulletLocation = dataItem.workingLocations[field];\r\n\t\t}\r\n\t\treturn bulletLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * This method must be called if you update Series' data fields that might\r\n\t * affect stacking of the series.\r\n\t *\r\n\t * Since individual `dataField` changes are not being monitored, you need\r\n\t * todo it manually for changes to take affect.\r\n\t *\r\n\t * @since 4.7.21\r\n\t */\r\n\tpublic updateStacking(): void {\r\n\t\tthis.invalidateDataItems();\r\n\t\tif (this.chart) {\r\n\t\t\tthis.chart.series.each((series) => {\r\n\t\t\t\tif (series.baseAxis == this.baseAxis) {\r\n\t\t\t\t\tseries.stackedSeries = undefined;\r\n\t\t\t\t\tseries.invalidateDataItems();\r\n\t\t\t\t\tseries.invalidateProcessedData();\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Can items from this series be included into stacks?\r\n\t * \r\n\t * Note: proper stacking is only possible if series have the same number\r\n\t * of data items. To ensure this, don't set data directly on series\r\n\t * but do this on chart instead.\r\n\t *\r\n\t * @default false\r\n\t * @param stacked  Can be stacked?\r\n\t */\r\n\tpublic set stacked(stacked: boolean) {\r\n\t\tif (this.setPropertyValue(\"stacked\", stacked, true)) {\r\n\t\t\tthis.updateStacking();\r\n\r\n\t\t\tlet xAxis = this.xAxis;\r\n\t\t\tlet yAxis = this.yAxis;\r\n\r\n\t\t\tif (!stacked) {\r\n\t\t\t\tlet field: string;\r\n\r\n\t\t\t\tif (xAxis != this.baseAxis && xAxis instanceof ValueAxis) {\r\n\t\t\t\t\tfield = this.xField;\r\n\t\t\t\t}\r\n\t\t\t\tif (yAxis != this.baseAxis && yAxis instanceof ValueAxis) {\r\n\t\t\t\t\tfield = this.yField;\r\n\t\t\t\t}\r\n\t\t\t\tif (field) {\r\n\t\t\t\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\t\t\t\tdataItem.setCalculatedValue(field, 0, \"stack\");\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Can be stacked?\r\n\t */\r\n\tpublic get stacked(): boolean {\r\n\t\treturn this.getPropertyValue(\"stacked\");\r\n\t}\r\n\r\n\t/**\r\n\t * Should the nearest tooltip be shown if no data item is found on the\r\n\t * current cursor position? In order this to work, you should set snapTooltip = false on the series baseAxis.\r\n\t *\r\n\t * @default false\r\n\t * @param value  Should snap?\r\n\t */\r\n\tpublic set snapTooltip(value: boolean) {\r\n\t\tthis.setPropertyValue(\"snapTooltip\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Should snap?\r\n\t */\r\n\tpublic get snapTooltip(): boolean {\r\n\t\treturn this.getPropertyValue(\"snapTooltip\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Shows hidden series.\r\n\t *\r\n\t * @param duration  Duration of reveal animation (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\r\n\t\tif (this.appeared && this.xAxis instanceof DateAxis && this.xAxis.groupData) {\r\n\t\t\tthis._tmin.setKey(this.yAxis.uid, undefined);\r\n\t\t\tthis._tmax.setKey(this.yAxis.uid, undefined);\r\n\t\t}\r\n\t\tif (this.appeared && this.yAxis instanceof DateAxis && this.yAxis.groupData) {\r\n\t\t\tthis._tmin.setKey(this.xAxis.uid, undefined);\r\n\t\t\tthis._tmax.setKey(this.xAxis.uid, undefined);\r\n\t\t}\r\n\r\n\t\tlet fields: string[];\r\n\t\tif (this.xAxis instanceof ValueAxis && this.xAxis != this.baseAxis) {\r\n\t\t\tfields = this._xValueFields;\r\n\t\t}\r\n\r\n\t\tif (this.yAxis instanceof ValueAxis && this.yAxis != this.baseAxis) {\r\n\t\t\tfields = this._yValueFields;\r\n\t\t}\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\t\tlet delay: number = 0;\r\n\r\n\t\tlet interpolationDuration = this.defaultState.transitionDuration;\r\n\t\tif ($type.isNumber(duration)) {\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\t\tif (!options.animationsEnabled) {\r\n\t\t\tinterpolationDuration = 0;\r\n\t\t}\r\n\r\n\t\tlet anim: Animation;\r\n\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\t\t\tlet realDuration = interpolationDuration;\r\n\t\t\tif (i < this.startIndex - 10 || i > this.endIndex + 10) {\r\n\t\t\t\trealDuration = 0;\r\n\t\t\t\tdelay = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.sequencedInterpolation && realDuration > 0) {\r\n\t\t\t\tdelay = this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n\t\t\t}\r\n\t\t\tanim = dataItem.show(realDuration, delay, fields);\r\n\t\t});\r\n\r\n\t\t// other data sets\r\n\t\tthis.dataSets.each((key, dataSet) => {\r\n\t\t\tif (dataSet != this.dataItems) {\r\n\t\t\t\tdataSet.each((dataItem) => {\r\n\t\t\t\t\tdataItem.events.disable();\r\n\t\t\t\t\tdataItem.show(0, 0, fields);\r\n\t\t\t\t\tdataItem.events.enable();\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tif (this.mainDataSet != this.dataItems) {\r\n\t\t\tthis.mainDataSet.each((dataItem) => {\r\n\t\t\t\tdataItem.events.disable();\r\n\t\t\t\tdataItem.show(0, 0, fields);\r\n\t\t\t\tdataItem.events.enable();\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tlet animation = super.show(duration);\r\n\r\n\t\tif (anim && !anim.isFinished()) {\r\n\t\t\tanimation = anim;\r\n\t\t}\r\n\r\n\t\tif (this.hidden) {\r\n\t\t\tthis.dispatchImmediately(\"selectionextremeschanged\");\r\n\t\t\tthis.hidden = false;\r\n\t\t}\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides series.\r\n\t *\r\n\t * @param duration  Duration of hiding animation (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\t\tlet fields: string[];\r\n\t\tlet value: number;\r\n\t\tlet xAxis: Axis = this.xAxis;\r\n\r\n\t\tif (xAxis instanceof ValueAxis && xAxis != this.baseAxis) {\r\n\t\t\tfields = this._xValueFields;\r\n\t\t\t// animate to zero if 0 is within zoomMin/zoomMax\r\n\t\t\tif (this.stacked || (xAxis.minZoomed < xAxis.baseValue && xAxis.maxZoomed > xAxis.baseValue) || this.stackedSeries) {\r\n\t\t\t\tvalue = xAxis.baseValue;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = xAxis.min;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet yAxis: Axis = this.yAxis;\r\n\t\tif (yAxis instanceof ValueAxis && yAxis != this.baseAxis) {\r\n\t\t\tfields = this._yValueFields;\r\n\t\t\t// animate to zero if 0 is within zoomMin/zoomMax\r\n\t\t\tif (this.stacked || (yAxis.minZoomed < yAxis.baseValue && yAxis.maxZoomed > yAxis.baseValue) || this.stackedSeries) {\r\n\t\t\t\tvalue = yAxis.baseValue;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = yAxis.min;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//if ($type.hasValue(fields)) {\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\tlet interpolationDuration = this.hiddenState.transitionDuration;\r\n\t\tif ($type.isNumber(duration)) {\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\tif (!options.animationsEnabled) {\r\n\t\t\tinterpolationDuration = 0;\r\n\t\t}\r\n\r\n\t\tlet delay: number = 0;\r\n\t\tlet anim: Animation;\r\n\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\t\t\tlet realDuration = interpolationDuration;\r\n\r\n\t\t\tif (i < this.startIndex - 10 || i > this.endIndex + 10) {\r\n\t\t\t\trealDuration = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (realDuration == 0) {\r\n\t\t\t\tdataItem.hide(0, 0, value, fields);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this.sequencedInterpolation && realDuration > 0) {\r\n\t\t\t\t\tdelay = this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n\t\t\t\t}\r\n\t\t\t\tanim = dataItem.hide(realDuration, delay, value, fields);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\t\t// other data sets\r\n\t\tthis.dataSets.each((key, dataSet) => {\r\n\t\t\tif (dataSet != this.dataItems) {\r\n\t\t\t\tdataSet.each((dataItem) => {\r\n\t\t\t\t\tdataItem.events.disable();\r\n\t\t\t\t\tdataItem.hide(0, 0, value, fields);\r\n\t\t\t\t\tdataItem.events.enable();\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tif (this.mainDataSet != this.dataItems) {\r\n\t\t\tthis.mainDataSet.each((dataItem) => {\r\n\t\t\t\tdataItem.events.disable();\r\n\t\t\t\tdataItem.hide(0, 0, value, fields);\r\n\t\t\t\tdataItem.events.enable();\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tlet animation = super.hide(interpolationDuration);\r\n\t\tif (animation && !animation.isFinished()) {\r\n\t\t\tanimation.delay(delay);\r\n\t\t}\r\n\r\n\t\tif (anim && !anim.isFinished()) {\r\n\t\t\tanimation = anim;\r\n\t\t}\r\n\r\n\t\t// helps to avoid flicker. otherwise columns will show up at full size and only on next frame will animate from 0\r\n\t\tthis.validateDataElements();\r\n\t\t//}\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemWorkingValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataItemWorkingValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t\tsuper.handleDataItemWorkingValueChange(dataItem, name);\r\n\r\n\t\t// to calculate stack values\r\n\t\tlet axisSeries: List<XYSeries> = <List<XYSeries>>this.baseAxis.series;\r\n\r\n\t\t$iter.each(axisSeries.iterator(), (series) => {\r\n\t\t\tif (series.stacked || series.stackedSeries) {\r\n\t\t\t\tseries.invalidateProcessedData();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [getStackValue description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic getStackValue(dataItem: this[\"_dataItem\"], working?: boolean): void {\r\n\t\t// todo: here wer stack x and y values only. question is - what should we do with other values, like openX, openY?\r\n\t\t// if this series is not stacked or new stack begins, return.\r\n\r\n\t\tlet xAxis = this.xAxis;\r\n\t\tlet yAxis = this.yAxis;\r\n\r\n\t\tif (!this.stacked || !xAxis || !yAxis) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// it might seem that it's better to go through base axis series, but we do not maintain the same order as in chart.series there.\r\n\t\t\tlet chart: XYChart = this.chart;\r\n\t\t\tlet index: number = chart.series.indexOf(this);\r\n\r\n\t\t\tlet field: string;\r\n\r\n\t\t\tif (xAxis != this.baseAxis && xAxis instanceof ValueAxis) {\r\n\t\t\t\tfield = this.xField;\r\n\t\t\t}\r\n\t\t\tif (yAxis != this.baseAxis && yAxis instanceof ValueAxis) {\r\n\t\t\t\tfield = this.yField;\r\n\t\t\t}\r\n\r\n\t\t\tif (!field) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t//this is good for removing series, otherwise stack values will remain the same and chart won't pay atention when adding/removing series\t\t\t\r\n\t\t\tdataItem.setCalculatedValue(field, 0, \"stack\");\r\n\r\n\t\t\t$iter.eachContinue(chart.series.range(0, index).backwards().iterator(), (prevSeries) => {\r\n\t\t\t\t// stacking is only possible if both axes are the same\r\n\t\t\t\tif (prevSeries.xAxis == xAxis && prevSeries.yAxis == yAxis && prevSeries.className == this.className) {\r\n\t\t\t\t\t// saving value\r\n\t\t\t\t\tprevSeries.stackedSeries = this;\r\n\r\n\t\t\t\t\tlet prevDataItem = prevSeries.dataItems.getIndex(dataItem.index); // indexes should match\r\n\r\n\t\t\t\t\tif (prevDataItem && prevDataItem.hasValue(this._xValueFields) && prevDataItem.hasValue(this._yValueFields)) {\r\n\r\n\t\t\t\t\t\tlet value = dataItem.getValue(field);\r\n\t\t\t\t\t\tlet prevValue: number;\r\n\t\t\t\t\t\tlet prevRealValue = prevDataItem.getValue(field) + prevDataItem.getValue(field, \"stack\");\r\n\r\n\t\t\t\t\t\tif (working) {\r\n\t\t\t\t\t\t\tprevValue = prevDataItem.getWorkingValue(field) + prevDataItem.getValue(field, \"stack\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tprevValue = prevDataItem.getValue(field) + prevDataItem.getValue(field, \"stack\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (this.stackToNegative) {\r\n\t\t\t\t\t\t\tif ((value >= 0 && prevRealValue >= 0) || (value < 0 && prevRealValue < 0)) {\r\n\t\t\t\t\t\t\t\tdataItem.setCalculatedValue(field, prevValue, \"stack\");\r\n\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tdataItem.setCalculatedValue(field, prevValue, \"stack\");\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (!prevSeries.stacked) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * This setting indicates how negative values are treated in stacked stacked\r\n\t * series.\r\n\t *\r\n\t * If set to `true` (default), negative values will stack on the base line.\r\n\t *\r\n\t * If set to `false`, negative value will stack in relation to the previous\r\n\t * value in the stack.\r\n\t *\r\n\t * @since 4.9.34\r\n\t * @param  value  Stack to base line\r\n\t */\r\n\tpublic set stackToNegative(value: boolean) {\r\n\t\tthis.setPropertyValue(\"stackToNegative\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Stack to base line\r\n\t */\r\n\tpublic get stackToNegative(): boolean {\r\n\t\treturn this.getPropertyValue(\"stackToNegative\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [xField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return [description]\r\n\t */\r\n\tpublic get xField(): string {\r\n\t\treturn this._xField;\r\n\t}\r\n\r\n\t/**\r\n\t * [yField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return [description]\r\n\t */\r\n\tpublic get yField(): string {\r\n\t\treturn this._yField;\r\n\t}\r\n\r\n\t/**\r\n\t * [xOpenField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return [description]\r\n\t */\r\n\tpublic get xOpenField(): string {\r\n\t\treturn this._xOpenField;\r\n\t}\r\n\r\n\t/**\r\n\t * [yOpenField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return [description]\r\n\t */\r\n\tpublic get yOpenField(): string {\r\n\t\treturn this._yOpenField;\r\n\t}\r\n\r\n\t/**\r\n\t * [tooltipXField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set tooltipXField(value: string) {\r\n\t\tthis._tooltipXField = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return [description]\r\n\t */\r\n\tpublic get tooltipXField(): string {\r\n\t\tif (this._tooltipXField) {\r\n\t\t\treturn this._tooltipXField;\r\n\t\t}\r\n\t\treturn this._xField;\r\n\t}\r\n\r\n\t/**\r\n\t * [tooltipYField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set tooltipYField(value: string) {\r\n\t\tthis._tooltipYField = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return [description]\r\n\t */\r\n\tpublic get tooltipYField(): string {\r\n\t\tif (this._tooltipYField) {\r\n\t\t\treturn this._tooltipYField;\r\n\t\t}\r\n\t\treturn this._yField;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns lowest value in the series for the specific axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis  Axis\r\n\t * @return value\r\n\t */\r\n\tpublic min(axis: ValueAxis): number {\r\n\t\treturn this._tmin.getKey(axis.uid);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns highest value in the series for the specific axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis  Axis\r\n\t * @return value\r\n\t */\r\n\tpublic max(axis: ValueAxis): number {\r\n\t\treturn this._tmax.getKey(axis.uid);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns lowest value in the series for the specific axis within current\r\n\t * selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis  Axis\r\n\t * @return value\r\n\t */\r\n\tpublic selectionMin(axis: ValueAxis): number {\r\n\t\tlet value = this._smin.getKey(axis.uid);\r\n\t\t// not good, because bad if there are no items with values in selection\r\n\t\t//if (!$type.isNumber(value)) {\r\n\t\t//value = this.min(axis);\r\n\t\t//}\t\t\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns highest value in the series for the specific axis within current\r\n\t * selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis  Axis\r\n\t * @return value\r\n\t */\r\n\tpublic selectionMax(axis: ValueAxis): number {\r\n\t\tlet value = this._smax.getKey(axis.uid);\r\n\t\t// not good, because bad if there are no items with values in selection\r\n\t\t//if (!$type.isNumber(value)) {\r\n\t\t//value = this.max(axis);\r\n\t\t//}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up base axes\r\n\t\t\tif ($type.hasValue(config.baseAxis) && $type.isString(config.baseAxis)) {\r\n\t\t\t\tif (this.map.hasKey(config.baseAxis)) {\r\n\t\t\t\t\tconfig.baseAxis = this.map.getKey(config.baseAxis);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.processingErrors.push(\"[XYSeries (\" + (this.name || \"unnamed\") + \")] No axis with id \\\"\" + config.baseAxis + \"\\\" found for `baseAxis`.\");\r\n\t\t\t\t\tdelete config.baseAxis;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxis) && $type.isString(config.xAxis)) {\r\n\t\t\t\tif (this.map.hasKey(config.xAxis)) {\r\n\t\t\t\t\tconfig.xAxis = this.map.getKey(config.xAxis);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.processingErrors.push(\"[XYSeries (\" + (this.name || \"unnamed\") + \")] No axis with id \\\"\" + config.xAxis + \"\\\" found for `xAxis`.\");\r\n\t\t\t\t\tdelete config.xAxis;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxis) && $type.isString(config.yAxis)) {\r\n\t\t\t\tif (this.map.hasKey(config.yAxis)) {\r\n\t\t\t\t\tconfig.yAxis = this.map.getKey(config.yAxis);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.processingErrors.push(\"[XYSeries (\" + (this.name || \"unnamed\") + \")] No axis with id \\\"\" + config.yAxis + \"\\\" found for `yAxis`.\");\r\n\t\t\t\t\tdelete config.yAxis;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up axis ranges\r\n\t\t\tif ($type.hasValue(config.axisRanges) && $type.isArray(config.axisRanges)) {\r\n\t\t\t\tfor (let i = 0, len = config.axisRanges.length; i < len; i++) {\r\n\t\t\t\t\tlet range = config.axisRanges[i];\r\n\t\t\t\t\tif (!$type.hasValue(range.type)) {\r\n\t\t\t\t\t\trange.type = \"AxisDataItem\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ($type.hasValue(range.axis) && $type.isString(range.axis) && this.map.hasKey(range.axis)) {\r\n\t\t\t\t\t\trange.component = this.map.getKey(range.axis);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(range.component) && $type.isString(range.component) && this.map.hasKey(range.component)) {\r\n\t\t\t\t\t\trange.component = this.map.getKey(range.component);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Parse date fields based on the series fields\r\n\t\t\tif (!$type.hasValue(config.dataFields) || !$type.isObject(config.dataFields)) {\r\n\t\t\t\tthis.processingErrors.push(\"`dataFields` is not set for series [\" + (this.name || \"unnamed\") + \"]\");\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an [[IPoint]] coordinates of the specific Serie's data point.\r\n\t *\r\n\t * @param    dataItem   Data item\r\n\t * @param    xKey       Name of X data field\r\n\t * @param    yKey       Name of Y data field\r\n\t * @param    locationX  X location\r\n\t * @param    locationY  Y location\r\n\t * @param    stackKeyX  ?\r\n\t * @param    stackKeyY  ?\r\n\t * @returns             Coordinates\r\n\t */\r\n\tpublic getPoint(dataItem: XYSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string): IPoint {\r\n\t\tif (this.xAxis && this.yAxis) {\r\n\t\t\tlet x: number = this.xAxis.getX(dataItem, xKey, locationX);\r\n\t\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY);\r\n\r\n\t\t\tx = $math.fitToRange(x, -this._maxxX, this._maxxX); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\t\ty = $math.fitToRange(y, -this._maxxY, this._maxxY); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\t\treturn { x: x, y: y };\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Updates item reader text based on the type and set up of axis.\r\n\t */\r\n\tprotected updateItemReaderText(): void {\r\n\r\n\t\t// We do not want to overwrite this if `itemReaderText` was changed by\r\n\t\t// user code.\r\n\t\tif (this._itemReaderTextChanged) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet text = \"\"\r\n\t\t$object.each(this.dataFields, (key, val) => {\r\n\t\t\ttext += \"{\" + key + \"} \";\r\n\t\t});\r\n\t\tthis.itemReaderText = text;\r\n\t\tthis._itemReaderTextChanged = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if series should display a tooltip for chart's cursor.\r\n\t *\r\n\t * If set to `true` (default), the tooltips set for all series item's\r\n\t * elements like columns and bullets will be automatically shown\r\n\t * when [[XYCursor]] passes over category/date, even if its not hovered\r\n\t * directly over the item.\r\n\t *\r\n\t * Set this to `false` to disable such behavior and display item-specific\r\n\t * tooltips only when hovered directly over them\r\n\t *\r\n\t * @default true\r\n\t * @param value Display tooltip?\r\n\t */\r\n\tpublic set cursorTooltipEnabled(value: boolean) {\r\n\t\tthis.setPropertyValue(\"cursorTooltipEnabled\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Display tooltip?\r\n\t */\r\n\tpublic get cursorTooltipEnabled(): boolean {\r\n\t\treturn this.getPropertyValue(\"cursorTooltipEnabled\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if series should apply hover state on bullets/columns/etc when\r\n\t * cursor is over the data item.\r\n\t *\r\n\t * If set to `true` (default) and chart cursor is enabled on th chart,\r\n\t * hovering over date/category will trigger hover states on related Series\r\n\t * items like bullets and columns.\r\n\t *\r\n\t * @default true\r\n\t * @since 4.2.2\r\n\t * @param  value  Hover enabled?\r\n\t */\r\n\tpublic set cursorHoverEnabled(value: boolean) {\r\n\t\tthis.setPropertyValue(\"cursorHoverEnabled\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Hover enabled?\r\n\t */\r\n\tpublic get cursorHoverEnabled(): boolean {\r\n\t\treturn this.getPropertyValue(\"cursorHoverEnabled\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if series' values should be excluded when calculating totals.\r\n\t * \r\n\t * @default false\r\n\t * @since 4.4.9\r\n\t * @param  value  Exclude from totals?\r\n\t */\r\n\tpublic set excludeFromTotal(value: boolean) {\r\n\t\tthis.setPropertyValue(\"excludeFromTotal\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Exclude from totals?\r\n\t */\r\n\tpublic get excludeFromTotal(): boolean {\r\n\t\treturn this.getPropertyValue(\"excludeFromTotal\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if series' tooltip should be hidden while series axis range is\r\n\t * animating (zooming).\r\n\t * \r\n\t * @default true\r\n\t * @since 4.7.16\r\n\t * @param  value  Hide tooltip while zooming?\r\n\t */\r\n\tpublic set hideTooltipWhileZooming(value: boolean) {\r\n\t\tthis.setPropertyValue(\"hideTooltipWhileZooming\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Hide tooltip while zooming?\r\n\t */\r\n\tpublic get hideTooltipWhileZooming(): boolean {\r\n\t\treturn this.getPropertyValue(\"hideTooltipWhileZooming\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Indicates if series' bullets should be masked.\r\n\t * \r\n\t * @default true\r\n\t * @since 4.7.17\r\n\t * @param  value  Mask bullets?\r\n\t */\r\n\tpublic set maskBullets(value: boolean) {\r\n\t\tthis.setPropertyValue(\"maskBullets\", value)\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\tif (value) {\r\n\t\t\t\tthis.bulletsContainer.parent = chart.bulletsContainer;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.bulletsContainer.parent = chart.axisBulletsContainer;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Mask bullets?\r\n\t */\r\n\tpublic get maskBullets(): boolean {\r\n\t\treturn this.getPropertyValue(\"maskBullets\");\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[Series]].\r\n\t *\r\n\t * @param source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tthis.groupFields = $utils.copyProperties(source.groupFields, {});\r\n\t\tsuper.copyFrom(source);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Destroys this object and all related data.\r\n\t */\r\n\tpublic dispose() {\r\n\t\tif (this.scrollbarSeries) {\r\n\t\t\tthis.scrollbarSeries.dispose();\r\n\t\t}\r\n\t\tsuper.dispose();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYSeries\"] = XYSeries;\r\nregistry.registeredClasses[\"XYSeriesDataItem\"] = XYSeriesDataItem;\r\n","/**\r\n * A module with functionality for buildin a scrollbar with an XY graph in it.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Scrollbar, IScrollbarProperties, IScrollbarAdapters, IScrollbarEvents } from \"../../core/elements/Scrollbar\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { List, IListEvents } from \"../../core/utils/List\";\r\nimport { XYSeries } from \"../series/XYSeries\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { DesaturateFilter } from \"../../core/rendering/filters/DesaturateFilter\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { options } from \"../../core/Options\";\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[XYChartScrollbar]].\r\n */\r\nexport interface IXYChartScrollbarProperties extends IScrollbarProperties { }\r\n\r\n/**\r\n * Defines events for [[XYChartScrollbar]].\r\n */\r\nexport interface IXYChartScrollbarEvents extends IScrollbarEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChartScrollbar]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChartScrollbarAdapters extends IScrollbarAdapters, IXYChartScrollbarProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A special version of the Scrollbar that has an XY chart in it.\r\n *\r\n * Used mainly as an advanced scrollbar with a preview for other XY charts.\r\n *\r\n * However, can be used as standalone element.\r\n *\r\n * @see {@link IXYChartScrollbarEvents} for a list of available events\r\n * @see {@link IXYChartScrollbarAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class XYChartScrollbar extends Scrollbar {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IXYChartScrollbarProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IXYChartScrollbarAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IXYChartScrollbarEvents;\r\n\r\n\t/**\r\n\t * An [[XYSeries]] used to draw a graph on the Scrollbar.\r\n\t */\r\n\tprotected _series: List<XYSeries>;\r\n\r\n\t/**\r\n\t * A chart element Scrollbar is for.\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart>();\r\n\r\n\t/**\r\n\t * A chart instance that shows mini-chart within Scrollbar.\r\n\t */\r\n\tprotected _scrollbarChart: XYChart;\r\n\r\n\t/**\r\n\t * [_unselectedOverlay description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _unselectedOverlay: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChartScrollbar\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\t\tthis.padding(0, 0, 0, 0);\r\n\r\n\t\tlet scrollbarChart: XYChart = this.createChild(XYChart);\r\n\t\tscrollbarChart.shouldClone = false;\r\n\t\tscrollbarChart.margin(0, 0, 0, 0);\r\n\t\tscrollbarChart.padding(0, 0, 0, 0);\r\n\t\tscrollbarChart.interactionsEnabled = false;\r\n\r\n\t\tthis._scrollbarChart = scrollbarChart;\r\n\t\tif (!$utils.isIE()) {\r\n\t\t\tlet filter = new DesaturateFilter();\r\n\t\t\tfilter.filterUnits = \"userSpaceOnUse\";\r\n\t\t\tscrollbarChart.plotContainer.filters.push(filter);\r\n\t\t}\r\n\t\tthis._disposers.push(this._scrollbarChart);\r\n\r\n\t\tthis.minHeight = 60;\r\n\t\tthis.minWidth = 60;\r\n\r\n\t\tlet unselectedOverlay: Sprite = this.createChild(Sprite);\r\n\t\tunselectedOverlay.shouldClone = false;\r\n\t\tunselectedOverlay.setElement(this.paper.add(\"path\"));\r\n\t\tunselectedOverlay.fill = interfaceColors.getFor(\"background\");\r\n\t\tunselectedOverlay.fillOpacity = 0.8;\r\n\t\tunselectedOverlay.interactionsEnabled = false;\r\n\t\tunselectedOverlay.isMeasured = false;\r\n\t\tunselectedOverlay.toBack();\r\n\t\tthis._unselectedOverlay = unselectedOverlay;\r\n\t\tthis._disposers.push(this._unselectedOverlay);\r\n\r\n\t\tscrollbarChart.toBack();\r\n\r\n\t\tthis.background.cornerRadius(0, 0, 0, 0);\r\n\r\n\t\tlet thumbBackground = this.thumb.background;\r\n\t\tthumbBackground.cornerRadius(0, 0, 0, 0);\r\n\t\tthumbBackground.fillOpacity = 0;\r\n\t\tthumbBackground.fill = interfaceColors.getFor(\"background\");\r\n\r\n\t\tlet hoverState = thumbBackground.states.getKey(\"hover\");\r\n\t\tif (hoverState) {\r\n\t\t\thoverState.properties.fillOpacity = 0.2;\r\n\t\t}\r\n\r\n\t\tlet downState = thumbBackground.states.getKey(\"down\");\r\n\t\tif (downState) {\r\n\t\t\tdownState.properties.fillOpacity = 0.4;\r\n\t\t}\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A list of series that are used to draw graph(s) on the scrollbar.\r\n\t *\r\n\t * @readonly\r\n\t * @return Series\r\n\t */\r\n\tpublic get series(): List<XYSeries> {\r\n\t\tif (!this._series) {\r\n\t\t\tthis._series = new List<XYSeries>();\r\n\t\t\tthis._disposers.push(this._series.events.on(\"inserted\", this.handleSeriesAdded, this, false));\r\n\t\t\tthis._disposers.push(this._series.events.on(\"removed\", this.handleSeriesRemoved, this, false));\r\n\t\t}\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new series when they are pushed into a `series` list.\r\n\t *\r\n\t * @param event Event\r\n\t */\r\n\tprotected handleSeriesAdded(event: IListEvents<XYSeries>[\"inserted\"]) {\r\n\t\tlet sourceSeries: XYSeries = event.newValue;\r\n\t\tif (!sourceSeries.xAxis || !sourceSeries.yAxis) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet scrollbarChart: XYChart = this.scrollbarChart;\r\n\t\tscrollbarChart.zoomOutButton.disabled = true;\r\n\r\n\t\tthis.chart = sourceSeries.chart;\r\n\r\n\t\tscrollbarChart.dateFormatter.inputDateFormat = this.chart.dateFormatter.inputDateFormat;\r\n\r\n\t\t// Ensure that scrollbar chart shares the same locale as parent chart\r\n\t\tscrollbarChart.language.locale = this.chart.language.locale;\r\n\r\n\t\tlet addXAxis: boolean = true;\r\n\t\tlet addYAxis: boolean = true;\r\n\r\n\t\t// check if we haven't added clone of x or y axis before\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series != sourceSeries) {\r\n\t\t\t\tif (series.xAxis == sourceSeries.xAxis && this.scrollbarChart.xAxes.length > 0) {\r\n\t\t\t\t\taddXAxis = false;\r\n\t\t\t\t}\r\n\t\t\t\tif (series.yAxis == sourceSeries.yAxis && this.scrollbarChart.yAxes.length > 0) {\r\n\t\t\t\t\taddYAxis = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tsourceSeries.events.on(\"beforedisposed\", () => {\r\n\t\t\tthis.series.removeValue(sourceSeries)\r\n\t\t})\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet series: XYSeries = <XYSeries>sourceSeries.clone();\r\n\r\n\t\tif(options.onlyShowOnViewport || options.queue){\r\n\t\t\tthis.addDisposer(this.chart.events.on(\"removedfromqueue\", function(){\r\n\t\t\t\tscrollbarChart.invalidateData();\r\n\t\t\t}))\r\n\t\t}\r\n\r\n\t\tif($utils.isIE()){\r\n\t\t\tseries.stroke = color(\"#aaaaaa\");\r\n\t\t\tseries.fill = series.stroke;\r\n\t\t\tseries.propertyFields.fill = undefined;\r\n\t\t\tseries.propertyFields.stroke = undefined;\r\n\t\t}\r\n\t\tsourceSeries.scrollbarSeries = series;\r\n\r\n\t\tif (addXAxis) {\r\n\r\n\t\t\tlet xAxis = sourceSeries.xAxis.clone();\r\n\t\t\tscrollbarChart.xAxes.moveValue(xAxis);\r\n\t\t\txAxis.title.disabled = true;\r\n\t\t\txAxis.rangeChangeDuration = 0;\r\n\t\t\t//xAxis.id = sourceSeries.uid;\r\n\t\t\tlet renderer = xAxis.renderer;\r\n\t\t\trenderer.ticks.template.disabled = true;\r\n\t\t\trenderer.inside = true;\r\n\t\t\trenderer.labels.template.inside = true;\r\n\t\t\trenderer.line.strokeOpacity = 0;\r\n\t\t\trenderer.minLabelPosition = 0.02;\r\n\t\t\trenderer.maxLabelPosition = 0.98;\r\n\t\t\trenderer.line.disabled = true;\r\n\t\t\trenderer.axisFills.template.disabled = true;\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t\trenderer.grid.template.strokeOpacity = 0.05;\r\n\t\t\trenderer.minWidth = undefined;\r\n\t\t\trenderer.minHeight = undefined;\r\n\t\t\trenderer.padding(0, 0, 0, 0);\r\n\t\t\trenderer.chart = scrollbarChart;\r\n\t\t\trenderer.margin(0, 0, 0, 0);\r\n\r\n\t\t\txAxis.width = percent(100);\r\n\r\n\t\t\tlet labelsTemplate = renderer.labels.template;\r\n\t\t\tlabelsTemplate.fillOpacity = 0.5;\r\n\t\t\txAxis.maxZoomCount = undefined;\r\n\t\t\txAxis.minZoomCount = undefined;\r\n\r\n\t\t\tif (xAxis instanceof DateAxis) {\r\n\t\t\t\tlet vAxis = <DateAxis>xAxis;\r\n\t\t\t\tlet sourceAxis = <DateAxis>sourceSeries.xAxis;\r\n\t\t\t\tvAxis.groupCount = sourceAxis.groupCount * 5;\r\n\t\t\t\tvAxis.min = undefined;\r\n\t\t\t\tvAxis.max = undefined;\r\n\t\t\t\tthis._disposers.push(vAxis.clonedFrom.events.on(\"extremeschanged\", () => {\r\n\t\t\t\t\tif ($type.isNumber(vAxis.clonedFrom.minDefined)) {\r\n\t\t\t\t\t\tvAxis.min = vAxis.clonedFrom.minDefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ($type.isNumber(vAxis.clonedFrom.maxDefined)) {\r\n\t\t\t\t\t\tvAxis.max = vAxis.clonedFrom.maxDefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t}, undefined, false))\r\n\t\t\t}\r\n\t\t\telse if (xAxis instanceof ValueAxis) {\r\n\t\t\t\tlet vAxis = <ValueAxis>xAxis;\r\n\t\t\t\tvAxis.min = undefined;\r\n\t\t\t\tvAxis.max = undefined;\r\n\t\t\t\tif (!$type.isNumber(vAxis.clonedFrom.minDefined)) {\r\n\t\t\t\t\tvAxis.min = undefined;\r\n\t\t\t\t}\r\n\t\t\t\tif (!$type.isNumber(vAxis.clonedFrom.maxDefined)) {\r\n\t\t\t\t\tvAxis.max = undefined;\r\n\t\t\t\t}\r\n\t\t\t\tthis._disposers.push(vAxis.clonedFrom.events.on(\"extremeschanged\", () => {\r\n\t\t\t\t\tif ($type.isNumber(vAxis.clonedFrom.minDefined)) {\r\n\t\t\t\t\t\tvAxis.min = vAxis.clonedFrom.min;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ($type.isNumber(vAxis.clonedFrom.maxDefined)) {\r\n\t\t\t\t\t\tvAxis.max = vAxis.clonedFrom.max;\r\n\t\t\t\t\t}\r\n\t\t\t\t}, undefined, false))\r\n\t\t\t}\r\n\r\n\r\n\t\t\tseries.xAxis = xAxis;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.scrollbarChart.xAxes.each((xAxis) => {\r\n\t\t\t\tif (xAxis.clonedFrom == sourceSeries.xAxis) {\r\n\t\t\t\t\tseries.xAxis = xAxis;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\r\n\r\n\t\tif (addYAxis) {\r\n\t\t\tlet yAxis: Axis = <Axis>sourceSeries.yAxis.clone();\r\n\t\t\tscrollbarChart.yAxes.moveValue(yAxis);\r\n\t\t\tyAxis.title.disabled = true;\r\n\t\t\tyAxis.rangeChangeDuration = 0;\r\n\r\n\t\t\tlet renderer = yAxis.renderer;\r\n\t\t\trenderer.ticks.template.disabled = true;\r\n\t\t\trenderer.inside = true;\r\n\t\t\trenderer.labels.template.inside = true;\r\n\t\t\trenderer.line.strokeOpacity = 0;\r\n\t\t\trenderer.minLabelPosition = 0.02;\r\n\t\t\trenderer.maxLabelPosition = 0.98;\r\n\t\t\trenderer.line.disabled = true;\r\n\t\t\trenderer.axisFills.template.disabled = true;\r\n\t\t\trenderer.grid.template.stroke = interfaceColors.getFor(\"background\");\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t\trenderer.grid.template.strokeOpacity = 0.05;\r\n\t\t\trenderer.minWidth = undefined;\r\n\t\t\trenderer.minHeight = undefined;\r\n\t\t\trenderer.chart = scrollbarChart;\r\n\t\t\trenderer.padding(0, 0, 0, 0);\r\n\t\t\trenderer.margin(0, 0, 0, 0);\r\n\t\t\tyAxis.height = percent(100);\r\n\r\n\t\t\tlet labelsTemplate = renderer.labels.template;\r\n\t\t\tlabelsTemplate.fillOpacity = 0.5;\r\n\r\n\t\t\tseries.yAxis = yAxis;\r\n\r\n\t\t\tyAxis.maxZoomCount = undefined;\r\n\t\t\tyAxis.minZoomCount = undefined;\r\n\r\n\t\t\tif (yAxis instanceof DateAxis) {\r\n\t\t\t\tlet vAxis = <ValueAxis>yAxis;\r\n\t\t\t\tvAxis.min = undefined;\r\n\t\t\t\tvAxis.max = undefined;\r\n\t\t\t\tlet sourceAxis = <DateAxis>sourceSeries.yAxis;\r\n\t\t\t\tyAxis.groupCount = sourceAxis.groupCount * 5;\r\n\r\n\t\t\t\tthis._disposers.push(vAxis.clonedFrom.events.on(\"extremeschanged\", () => {\r\n\t\t\t\t\tif ($type.isNumber(vAxis.clonedFrom.minDefined)) {\r\n\t\t\t\t\t\tvAxis.min = vAxis.clonedFrom.minDefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ($type.isNumber(vAxis.clonedFrom.maxDefined)) {\r\n\t\t\t\t\t\tvAxis.max = vAxis.clonedFrom.maxDefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t}))\r\n\t\t\t}\r\n\r\n\t\t\telse if (yAxis instanceof ValueAxis) {\r\n\t\t\t\tlet vAxis = <ValueAxis>yAxis;\r\n\t\t\t\tvAxis.min = undefined;\r\n\t\t\t\tvAxis.max = undefined;\r\n\r\n\t\t\t\tif (!$type.isNumber(vAxis.clonedFrom.minDefined)) {\r\n\t\t\t\t\tvAxis.min = undefined;\r\n\t\t\t\t}\r\n\t\t\t\tif (!$type.isNumber(vAxis.clonedFrom.maxDefined)) {\r\n\t\t\t\t\tvAxis.max = undefined;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._disposers.push(vAxis.clonedFrom.events.on(\"extremeschanged\", () => {\r\n\t\t\t\t\tif ($type.isNumber(vAxis.clonedFrom.minDefined)) {\r\n\t\t\t\t\t\tvAxis.min = vAxis.clonedFrom.minDefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ($type.isNumber(vAxis.clonedFrom.maxDefined)) {\r\n\t\t\t\t\t\tvAxis.max = vAxis.clonedFrom.maxDefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t}))\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.scrollbarChart.yAxes.each((yAxis) => {\r\n\t\t\t\tif (yAxis.clonedFrom == sourceSeries.yAxis) {\r\n\t\t\t\t\tseries.yAxis = yAxis;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tseries.rangeChangeDuration = 0;\r\n\t\tseries.interpolationDuration = 0;\r\n\t\tseries.defaultState.transitionDuration = 0;\r\n\t\tseries.showOnInit = false;\r\n\r\n\t\tthis._disposers.push(series.events.on(\"validated\", this.zoomOutAxes, this, false));\r\n\r\n\t\t// data might be set drectly on series\r\n\t\tthis._disposers.push(sourceSeries.events.on(\"datavalidated\", () => {\r\n\t\t\tif (series.data != sourceSeries.data) { // data setter doesn't check this\r\n\t\t\t\tseries.data = sourceSeries.data;\r\n\t\t\t}\r\n\t\t}, undefined, false));\r\n\t\tseries.defaultState.properties.visible = true;\r\n\r\n\t\tscrollbarChart.series.push(series);\r\n\r\n\t\tthis.updateByOrientation();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected updateByOrientation() {\r\n\t\tif (this._scrollbarChart) {\r\n\t\t\t$iter.each(this._scrollbarChart.xAxes.iterator(), (xAxis) => {\r\n\t\t\t\tlet renderer = xAxis.renderer;\r\n\t\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\t\trenderer.grid.template.disabled = true;\r\n\t\t\t\t\trenderer.labels.template.disabled = true;\r\n\t\t\t\t\trenderer.minGridDistance = 10;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\trenderer.grid.template.disabled = false;\r\n\t\t\t\t\trenderer.labels.template.disabled = false;\r\n\t\t\t\t\trenderer.minGridDistance = xAxis.clonedFrom.renderer.minGridDistance;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\r\n\t\t\t$iter.each(this._scrollbarChart.yAxes.iterator(), (yAxis) => {\r\n\t\t\t\tlet renderer = yAxis.renderer;\r\n\t\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\t\trenderer.grid.template.disabled = true;\r\n\t\t\t\t\trenderer.labels.template.disabled = true;\r\n\t\t\t\t\trenderer.minGridDistance = 10;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\trenderer.grid.template.disabled = false;\r\n\t\t\t\t\trenderer.labels.template.disabled = false;\r\n\t\t\t\t\trenderer.minGridDistance = yAxis.clonedFrom.renderer.minGridDistance;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Cleans up after series are removed from Scrollbar.\r\n\t *\r\n\t * @param event  Event\r\n\t */\r\n\tprotected handleSeriesRemoved(event: IListEvents<XYSeries>[\"removed\"]) {\r\n\t\tlet sourceSeries: XYSeries = event.oldValue;\r\n\t\tlet scrollbarChart = this.scrollbarChart;\r\n\r\n\t\tscrollbarChart.series.each((series) => {\r\n\t\t\tif (series && series.clonedFrom == sourceSeries) {\r\n\t\t\t\tscrollbarChart.series.removeValue(series);\r\n\t\t\t}\r\n\t\t})\r\n\t\tif (scrollbarChart.series.length == 0) {\r\n\t\t\tscrollbarChart.xAxes.clear();\r\n\t\t\tscrollbarChart.yAxes.clear();\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tsourceSeries.events.off(\"validated\", this.zoomOutAxes, this);\r\n\t\t}\r\n\t\tcatch (err) {\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A chart element that is used to display graphs in the Scrollbar.\r\n\t *\r\n\t * This is not the same as `chart`. It's a totally independent instance of\r\n\t * [[XYChart]] with separate config, series, etc.\r\n\t *\r\n\t * It can be configured just like any other [[XYChart]].\r\n\t *\r\n\t * @readonly\r\n\t * @return Scrollbar's internal chart\r\n\t */\r\n\tpublic get scrollbarChart(): XYChart {\r\n\t\treturn this._scrollbarChart;\r\n\t}\r\n\r\n\t/**\r\n\t * A chart that Scrollbar belongs to.\r\n\t *\r\n\t * @param chart  Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart) {\r\n\t\tif (this._chart.get() !== chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"datavalidated\", this.handleDataChanged, this, false));\r\n\t\t\tthis.handleDataChanged();\r\n\t\t\tthis._scrollbarChart.dataProvider = chart; // this makes scrollbar chart do not validate data untill charts' data is validated\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): XYChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Sprite]] object representing overlay that is used to dim area of the\r\n\t * scrollbar that is currently not selected.\r\n\t *\r\n\t * Use its `fillOpacity` to set opacity of the fill, with `0` (zero)\r\n\t * completely disabling the dimming, and `1` making unselected area completely\r\n\t * blank.\r\n\t *\r\n\t * @since 4.6.1\r\n\t * @readonly\r\n\t * @return Unselected area curtain element\r\n\t */\r\n\tpublic get unselectedOverlay(): Sprite {\r\n\t\treturn this._unselectedOverlay;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Scrollbar's internal chart's data when the main chart's data\r\n\t * changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataChanged() {\r\n\t\tif (this.chart.data != this.scrollbarChart.data) {\r\n\t\t\tthis.scrollbarChart.data = this.chart.data;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// add data is handled in XYChart\r\n\t\t\t// invalidating all data caused the problem: https://github.com/amcharts/amcharts4/issues/2096\r\n\t\t\tthis.scrollbarChart.invalidateRawData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms out all axes on the internal chart.\r\n\t */\r\n\tprotected zoomOutAxes() {\r\n\t\tlet scrollbarChart: XYChart = this.scrollbarChart;\r\n\t\t$iter.each(scrollbarChart.xAxes.iterator(), (x) => {\r\n\t\t\tx.zoom({ start: 0, end: 1 }, true, true);\r\n\t\t});\r\n\t\t$iter.each(scrollbarChart.yAxes.iterator(), (y) => {\r\n\t\t\ty.zoom({ start: 0, end: 1 }, true, true);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Updates scrollbar thumb.\r\n\t */\r\n\tprotected updateThumb() {\r\n\t\tsuper.updateThumb();\r\n\t\tif (this._unselectedOverlay) {\r\n\t\t\tlet thumb = this.thumb;\r\n\t\t\tlet x: number = thumb.pixelX || 0;\r\n\t\t\tlet y: number = thumb.pixelY || 0;\r\n\t\t\tlet w: number = thumb.pixelWidth || 0;\r\n\t\t\tlet h: number = thumb.pixelHeight || 0;\r\n\r\n\t\t\tlet path: string = \"\";\r\n\r\n\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\tpath = $path.rectToPath({\r\n\t\t\t\t\tx: -1,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: x,\r\n\t\t\t\t\theight: h\r\n\t\t\t\t});\r\n\r\n\t\t\t\tpath += $path.rectToPath({\r\n\t\t\t\t\tx: x + w,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: (this.pixelWidth || 0) - x - w,\r\n\t\t\t\t\theight: h\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tpath = $path.rectToPath({\r\n\t\t\t\t\tx: 0,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: w,\r\n\t\t\t\t\theight: y\r\n\t\t\t\t});\r\n\r\n\t\t\t\tpath += $path.rectToPath({\r\n\t\t\t\t\tx: 0,\r\n\t\t\t\t\ty: y + h,\r\n\t\t\t\t\twidth: w,\r\n\t\t\t\t\theight: (this.pixelHeight || 0) - y - h\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tthis._unselectedOverlay.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tlet series = config.series[i];\r\n\t\t\t\t\tif ($type.hasValue(series) && $type.isString(series)) {\r\n\t\t\t\t\t\tif (this.map.hasKey(series)) {\r\n\t\t\t\t\t\t\tconfig.series[i] = this.map.getKey(series);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthrow Error(\"XYChartScrollbar error: Series with id `\" + series + \"` does not exist.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChartScrollbar\"] = XYChartScrollbar;\r\n","/**\r\n * XY Chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, ISerialChartProperties, ISerialChartDataFields, ISerialChartAdapters, ISerialChartEvents, SerialChartDataItem } from \"./SerialChart\";\r\nimport { Sprite, ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { List, IListEvents, ListDisposer } from \"../../core/utils/List\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { Optional } from \"../../core/utils/Type\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { AxisRendererX } from \"../axes/AxisRendererX\";\r\nimport { AxisRendererY } from \"../axes/AxisRendererY\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { Scrollbar, IScrollbarEvents } from \"../../core/elements/Scrollbar\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\nimport { XYCursor, IXYCursorEvents } from \"../cursors/XYCursor\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IDisposer, Disposer } from \"../../core/utils/Disposer\";\r\nimport { Button } from \"../../core/elements/Button\";\r\nimport { ZoomOutButton } from \"../../core/elements/ZoomOutButton\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { Ordering } from \"../../core/utils/Order\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { XYChartScrollbar } from \"../elements/XYChartScrollbar\";\r\n\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $number from \"../../core/utils/Number\";\r\n\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYChartDataItem extends SerialChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: XYChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYChart]].\r\n */\r\nexport interface IXYChartDataFields extends ISerialChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[XYChart]].\r\n */\r\nexport interface IXYChartProperties extends ISerialChartProperties {\r\n\r\n\t/**\r\n\t * A container that is used as a maske for bullets so that they can't\r\n\t * \"spill\" outside of the plot area.\r\n\t */\r\n\tmaskBullets?: boolean;\r\n\r\n\t/**\r\n\t * Specifies what should chart do if when mouse wheel is rotated.\r\n\t *\r\n\t * @default \"none\"\r\n\t */\r\n\tmouseWheelBehavior?: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\";\r\n\r\n\t/**\r\n\t * Specifies what should chart do if when horizontal mouse wheel is rotated.\r\n\t *\r\n\t * @default \"none\"\r\n\t */\r\n\thorizontalMouseWheelBehavior?: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\";\r\n\r\n\t/**\r\n\t * Specifies if chart should arrange series tooltips so that they won't\r\n\t * overlap.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tarrangeTooltips?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[XYChart]].\r\n */\r\nexport interface IXYChartEvents extends ISerialChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChartAdapters extends ISerialChartAdapters, IXYChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates an XY chart, and any derivative chart, like Serial, Date-based, etc.\r\n *\r\n * Basically this is a chart type, that is used to display any chart\r\n * information in a square plot area.\r\n *\r\n * The horizontal and vertical scale is determined by the type of Axis.\r\n *\r\n * The plot types are determined by type of Series.\r\n *\r\n * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * let categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * let series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"XYChart\");\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * var series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Category axis\r\n * \t\"xAxes\": [{\r\n * \t\t\"type\": \"CategoryAxis\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Value axis\r\n * \t\"yAxes\": [{\r\n * \t\t\"type\": \"ValueAxis\"\r\n * \t}],\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"ColumnSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"categoryX\": \"country\",\r\n * \t\t\t\"valueY\": \"visits\"\r\n * \t\t},\r\n * \t\t\"name\": \"Web Traffic\"\r\n * \t}],\r\n *\r\n * \t// Cursor\r\n * \t\"cursor\": {},\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"USA\",\r\n * \t\t\"visits\": 3025\r\n * \t}, {\r\n * \t\t\"country\": \"China\",\r\n * \t\t\"visits\": 1882\r\n * \t}, {\r\n * \t\t\"country\": \"Japan\",\r\n * \t\t\"visits\": 1809\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"XYChart\");\r\n * ```\r\n *\r\n *\r\n * @see {@link IXYChartEvents} for a list of available Events\r\n * @see {@link IXYChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\r\n * @important\r\n */\r\nexport class XYChart extends SerialChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IXYChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IXYChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IXYChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IXYChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: XYSeries;\r\n\r\n\t/**\r\n\t * A list of horizontal axes.\r\n\t */\r\n\tprotected _xAxes: List<Axis<this[\"_xAxisRendererType\"]>>;\r\n\r\n\t/**\r\n\t * A list of vertical axes.\r\n\t */\r\n\tprotected _yAxes: List<Axis<this[\"_yAxisRendererType\"]>>;\r\n\r\n\t/**\r\n\t * A container that holds vertical axes and plot area.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic yAxesAndPlotContainer: Container\r\n\r\n\t/**\r\n\t * A container that holds top axes.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic topAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds bottom axes.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic bottomAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds left axes.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic leftAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds right axes.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic rightAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container for plot area.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic plotContainer: Container;\r\n\r\n\t/**\r\n\t * A reference to horizontal [[Scrollbar]].\r\n\t */\r\n\tprotected _scrollbarX: Scrollbar;\r\n\r\n\t/**\r\n\t * A reference to vertical [[Scrollbar]].\r\n\t */\r\n\tprotected _scrollbarY: Scrollbar;\r\n\r\n\t/**\r\n\t * A reference to chart's cursor.\r\n\t */\r\n\tpublic _cursor: XYCursor;\r\n\r\n\t/**\r\n\t * A container that chart's cursor is placed in.\r\n\t */\r\n\tprotected _cursorContainer: Container;\r\n\r\n\t/**\r\n\t * Defines the type of horizontal axis rederer.\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererX = AxisRendererX;\r\n\r\n\t/**\r\n\t * Defines the type of vertical axis rederer.\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererY = AxisRendererY;\r\n\r\n\t/**\r\n\t * Defines the type horizontal axis renderer.\r\n\t */\r\n\tpublic _xAxisRendererType: AxisRendererX;\r\n\r\n\t/**\r\n\t * Defines the type of vertical axis renderer.\r\n\t */\r\n\tpublic _yAxisRendererType: AxisRendererY;\r\n\r\n\t/**\r\n\t * A button which is used to zoom out the chart.\r\n\t */\r\n\tprotected _zoomOutButton: Button;\r\n\r\n\t/**\r\n\t * An element that is used as a mask to contain bullets from spilling out of\r\n\t * the plot area.\r\n\t */\r\n\tprotected _bulletMask: Sprite;\r\n\r\n\r\n\tprotected _panStartXRange: IRange;\r\n\r\n\tprotected _panStartYRange: IRange;\r\n\r\n\tprotected _panEndXRange: IRange;\r\n\r\n\tprotected _panEndYRange: IRange;\r\n\r\n\tprotected _mouseWheelDisposer: IDisposer;\r\n\r\n\tprotected _mouseWheelDisposer2: IDisposer;\r\n\r\n\tprotected _cursorXPosition: number;\r\n\r\n\tprotected _cursorYPosition: number;\r\n\r\n\t/**\r\n\t * Holds a reference to the container axis bullets are drawn in.\r\n\t */\r\n\tpublic axisBulletsContainer: Container;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _seriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"XYChart\";\r\n\r\n\t\t// Set defaults\r\n\t\t//this.margin(10, 10, 10, 10);\r\n\t\tthis.maskBullets = true;\r\n\t\tthis.arrangeTooltips = true;\r\n\r\n\t\t// Create main chart container\r\n\t\tlet chartContainer = this.chartContainer;\r\n\t\tchartContainer.layout = \"vertical\";\r\n\t\tthis.padding(15, 15, 15, 15);\r\n\r\n\t\t// Create top axes container\r\n\t\tlet topAxesCont = chartContainer.createChild(Container);\r\n\t\ttopAxesCont.shouldClone = false;\r\n\t\ttopAxesCont.layout = \"vertical\";\r\n\t\ttopAxesCont.width = percent(100);\r\n\t\ttopAxesCont.zIndex = 1;\r\n\t\tthis.topAxesContainer = topAxesCont;\r\n\r\n\t\t// Create vertical axes and plot area container\r\n\t\t// Plot area and vertical axes share the whole width of the chart,\r\n\t\t// so we need to put then into a separate container so that layouting\r\n\t\t// engine takes care of the positioning\r\n\t\tlet yAxesAndPlotCont = chartContainer.createChild(Container);\r\n\t\tyAxesAndPlotCont.shouldClone = false;\r\n\t\tyAxesAndPlotCont.layout = \"horizontal\";\r\n\t\tyAxesAndPlotCont.width = percent(100);\r\n\t\tyAxesAndPlotCont.height = percent(100);\r\n\t\tyAxesAndPlotCont.zIndex = 0;\r\n\t\tthis.yAxesAndPlotContainer = yAxesAndPlotCont;\r\n\r\n\t\t// Create a container for bottom axes\r\n\t\tlet bottomAxesCont = chartContainer.createChild(Container);\r\n\t\tbottomAxesCont.shouldClone = false;\r\n\t\tbottomAxesCont.width = percent(100);\r\n\t\tbottomAxesCont.layout = \"vertical\";\r\n\t\tbottomAxesCont.zIndex = 1;\r\n\t\tthis.bottomAxesContainer = bottomAxesCont;\r\n\r\n\t\t// Create a container for left-side axes\r\n\t\tlet leftAxesCont = yAxesAndPlotCont.createChild(Container);\r\n\t\tleftAxesCont.shouldClone = false;\r\n\t\tleftAxesCont.layout = \"horizontal\";\r\n\t\tleftAxesCont.height = percent(100);\r\n\t\tleftAxesCont.contentAlign = \"right\";\r\n\t\tleftAxesCont.events.on(\"transformed\", this.updateXAxesMargins, this, false);\r\n\t\tleftAxesCont.zIndex = 1;\r\n\t\tthis.leftAxesContainer = leftAxesCont;\r\n\r\n\t\t// Create a container for plot area\r\n\t\tlet plotCont = yAxesAndPlotCont.createChild(Container);\r\n\t\tplotCont.shouldClone = false;\r\n\t\tplotCont.height = percent(100);\r\n\t\tplotCont.width = percent(100);\r\n\t\t// Create transparend background for plot container so that hover works\r\n\t\t// on all of it\r\n\t\tplotCont.background.fillOpacity = 0;\r\n\t\tthis.plotContainer = plotCont;\r\n\r\n\t\t// must go below plot container\r\n\t\tthis.mouseWheelBehavior = \"none\";\r\n\r\n\t\tthis._cursorContainer = plotCont;\r\n\r\n\t\t// Create a container for right-side axes\r\n\t\tlet rightAxesCont = yAxesAndPlotCont.createChild(Container);\r\n\t\trightAxesCont.shouldClone = false;\r\n\t\trightAxesCont.layout = \"horizontal\";\r\n\t\trightAxesCont.height = percent(100);\r\n\t\trightAxesCont.zIndex = 1;\r\n\t\trightAxesCont.events.on(\"transformed\", this.updateXAxesMargins, this, false);\r\n\t\tthis.rightAxesContainer = rightAxesCont;\r\n\r\n\t\tthis.seriesContainer.parent = plotCont;\r\n\t\tthis.bulletsContainer.parent = plotCont;\r\n\r\n\t\tlet zoomOutButton = plotCont.createChild(ZoomOutButton);\r\n\t\tzoomOutButton.shouldClone = false;\r\n\t\tzoomOutButton.align = \"right\";\r\n\t\tzoomOutButton.valign = \"top\";\r\n\t\tzoomOutButton.zIndex = Number.MAX_SAFE_INTEGER;\r\n\t\tzoomOutButton.marginTop = 5;\r\n\t\tzoomOutButton.marginRight = 5;\r\n\r\n\t\tzoomOutButton.hide(0);\r\n\t\tthis.zoomOutButton = zoomOutButton;\r\n\r\n\t\t// Create a container for bullets\r\n\t\tlet axisBulletsContainer: Container = this.plotContainer.createChild(Container);\r\n\t\taxisBulletsContainer.shouldClone = false;\r\n\t\taxisBulletsContainer.width = percent(100);\r\n\t\taxisBulletsContainer.height = percent(100);\r\n\t\taxisBulletsContainer.isMeasured = false;\r\n\t\taxisBulletsContainer.zIndex = 4;\r\n\t\taxisBulletsContainer.layout = \"none\";\r\n\t\tthis.axisBulletsContainer = axisBulletsContainer;\r\n\r\n\t\tthis._bulletMask = this.plotContainer;\r\n\r\n\t\tthis.events.on(\"beforedatavalidated\", () => {\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tseries.dataGrouped = false;\r\n\t\t\t\tseries._baseInterval = {};\r\n\t\t\t})\r\n\t\t}, this, false);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tthis.zoomOutButton.exportable = false;\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"X/Y chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tthis.seriesContainer.toFront();\r\n\t\tthis.bulletsContainer.toFront();\r\n\r\n\t\tif (this.maskBullets) {\r\n\t\t\tthis.bulletsContainer.mask = this._bulletMask;\r\n\t\t}\r\n\r\n\t\tthis.updateSeriesLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers a redrawing of all chart's series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updatePlotElements(): void {\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers data (re)validation which in turn can cause a redraw of the\r\n\t * whole chart or just aprticular series / elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\r\n\t\t// tell axes that data changed\r\n\t\tif (this._parseDataFrom == 0) {\r\n\t\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\t\taxis.dataChangeUpdate();\r\n\t\t\t});\r\n\r\n\t\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\t\taxis.dataChangeUpdate();\r\n\t\t\t});\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\tseries.dataChangeUpdate();\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates margins for horizontal axes based on settings and available space.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateXAxesMargins(): void {\r\n\r\n\t\tlet leftAxesWidth = this.leftAxesContainer.measuredWidth;\r\n\t\tlet rightAxesWidth = this.rightAxesContainer.measuredWidth;\r\n\t\tlet bottomAxesCont = this.bottomAxesContainer;\r\n\r\n\t\tif (bottomAxesCont.paddingLeft != leftAxesWidth || bottomAxesCont.paddingRight != rightAxesWidth) {\r\n\t\t\tbottomAxesCont.paddingLeft = leftAxesWidth;\r\n\t\t\tbottomAxesCont.paddingRight = rightAxesWidth;\r\n\t\t}\r\n\r\n\t\tlet topAxesCont = this.topAxesContainer;\r\n\r\n\t\tif (topAxesCont.paddingLeft != leftAxesWidth || topAxesCont.paddingRight != rightAxesWidth) {\r\n\t\t\ttopAxesCont.paddingLeft = leftAxesWidth;\r\n\t\t\ttopAxesCont.paddingRight = rightAxesWidth;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers a re-initialization of this element.\r\n\t *\r\n\t * Will result in complete redrawing of the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic reinit(): void {\r\n\t\tsuper.reinit();\r\n\r\n\t\tthis.series.each((series) => {\r\n\t\t\tseries.appeared = false;\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers an update on the horizontal axis when one of its properties\r\n\t * change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event An event object\r\n\t */\r\n\tpublic handleXAxisChange(event: AMEvent<AxisRenderer, ISpriteEvents>[\"propertychanged\"]) {\r\n\t\tthis.updateXAxis(event.target);\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers an update on the vertical axis when one of its properties\r\n\t * change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event An event object\r\n\t */\r\n\tpublic handleYAxisChange(event: AMEvent<AxisRenderer, ISpriteEvents>[\"propertychanged\"]) {\r\n\t\tthis.updateYAxis(event.target);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up a new horizontal (X) axis when it is added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Axis insert event\r\n\t */\r\n\tpublic processXAxis(event: IListEvents<Axis>[\"inserted\"]): void {\r\n\r\n\t\tlet axis: Axis = event.newValue;\r\n\t\taxis.chart = this;\r\n\r\n\t\tif (!axis.renderer) {\r\n\t\t\taxis.renderer = new this._axisRendererX();\r\n\t\t\taxis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleXAxisChange, this, false);\r\n\t\t}\r\n\t\taxis.axisLetter = \"X\";\r\n\r\n\t\taxis.events.on(\"startendchanged\", this.handleXAxisRangeChange, this, false);\r\n\t\t//axis.events.on(\"endchanged\", this.handleXAxisRangeChange, this, false);\r\n\r\n\t\t// Although axis does not use data directly, we set dataProvider here\r\n\t\t// (but not add to chart data users) to hold up rendering before data\r\n\t\t// is parsed (system handles this)\r\n\t\taxis.dataProvider = this;\r\n\r\n\t\tthis.updateXAxis(axis.renderer);\r\n\t\tthis.processAxis(axis);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up a new vertical (Y) axis when it is added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Axis insert event\r\n\t */\r\n\tpublic processYAxis(event: IListEvents<Axis>[\"inserted\"]): void {\r\n\r\n\t\tlet axis: Axis = event.newValue;\r\n\t\taxis.chart = this;\r\n\t\tif (!axis.renderer) {\r\n\t\t\taxis.renderer = new this._axisRendererY();\r\n\t\t\taxis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleYAxisChange, this, false);\r\n\t\t}\r\n\t\taxis.axisLetter = \"Y\";\r\n\r\n\t\taxis.events.on(\"startendchanged\", this.handleYAxisRangeChange, this, false);\r\n\t\t//axis.events.on(\"endchanged\", this.handleYAxisRangeChange, this, false);\r\n\r\n\t\t// Although axis does not use data directly, we set dataProvider here\r\n\t\t// (but not add to chart data users) to hold up rendering before data\r\n\t\t// is parsed (system handles this)\r\n\t\taxis.dataProvider = this;\r\n\r\n\t\tthis.updateYAxis(axis.renderer);\r\n\t\tthis.processAxis(axis);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates horizontal (X) scrollbar and other horizontal axis whenever axis'\r\n\t * value range changes.\r\n\t */\r\n\tprotected handleXAxisRangeChange() {\r\n\t\tlet range: IRange = this.getCommonAxisRange(this.xAxes);\r\n\t\tif (this.scrollbarX) {\r\n\t\t\tthis.zoomAxes(this.xAxes, range, true);\r\n\t\t}\r\n\t\tthis.toggleZoomOutButton();\r\n\t\tthis.updateScrollbar(this.scrollbarX, range);\r\n\t}\r\n\r\n\t/**\r\n\t * Shows or hides the Zoom Out button depending on whether the chart is fully\r\n\t * zoomed out or not.\r\n\t */\r\n\tpublic toggleZoomOutButton() {\r\n\t\tif (this.zoomOutButton) {\r\n\t\t\tlet show = false;\r\n\r\n\t\t\t$iter.eachContinue(this.xAxes.iterator(), (axis): boolean => {\r\n\t\t\t\tif (axis.toggleZoomOutButton) {\r\n\t\t\t\t\tif (axis.maxZoomCount > 0) {\r\n\t\t\t\t\t\tlet minZoomFactor: number = axis.maxZoomFactor / axis.maxZoomCount;\r\n\t\t\t\t\t\tif ($math.round(axis.end - axis.start, 3) < 1 / minZoomFactor) {\r\n\t\t\t\t\t\t\tshow = true;\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tif ($math.round(axis.start, 3) > 0 || $math.round(axis.end, 3) < 1) {\r\n\t\t\t\t\t\t\tshow = true;\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t\t$iter.eachContinue(this.yAxes.iterator(), (axis): boolean => {\r\n\t\t\t\tif (axis.toggleZoomOutButton) {\r\n\t\t\t\t\tif (axis.maxZoomCount > 0) {\r\n\t\t\t\t\t\tlet minZoomFactor: number = axis.maxZoomFactor / axis.maxZoomCount;\r\n\t\t\t\t\t\tif ($math.round(axis.end - axis.start, 3) < 1 / minZoomFactor) {\r\n\t\t\t\t\t\t\tshow = true;\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tif ($math.round(axis.start, 3) > 0 || $math.round(axis.end, 3) < 1) {\r\n\t\t\t\t\t\t\tshow = true;\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tif (!this.seriesAppeared) {\r\n\t\t\t\tshow = false;\r\n\t\t\t}\r\n\r\n\t\t\tif (show) {\r\n\t\t\t\tthis.zoomOutButton.show();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.zoomOutButton.hide();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * moved this check to a separate method so that we could override it in TreeMapSeries\r\n\t */\r\n\tprotected seriesAppeared(): boolean {\r\n\t\tlet appeared: boolean = false;\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (!series.appeared) {\r\n\t\t\t\tappeared = false;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn appeared;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates vertical (Y) scrollbar and other horizontal axis whenever axis'\r\n\t * value range changes.\r\n\t */\r\n\tprotected handleYAxisRangeChange() {\r\n\t\tlet range: IRange = this.getCommonAxisRange(this.yAxes);\r\n\r\n\t\tif (this.scrollbarY) {\r\n\t\t\tthis.zoomAxes(this.yAxes, range, true);\r\n\t\t}\r\n\t\tthis.toggleZoomOutButton();\r\n\t\tthis.updateScrollbar(this.scrollbarY, range);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates a relative scrollbar whenever data range of the axis changes.\r\n\t *\r\n\t * @param scrollbar  Scrollbar instance\r\n\t * @param range      New data (values) range of the axis\r\n\t */\r\n\tprotected updateScrollbar(scrollbar: Scrollbar, range: IRange): void {\r\n\t\tif (scrollbar) {\r\n\t\t\tscrollbar.skipRangeEvents();\r\n\t\t\tscrollbar.start = range.start;\r\n\t\t\tscrollbar.end = range.end;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a common range of values between a list of axes.\r\n\t *\r\n\t * This is used to synchronize the zoom between multiple axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axes  A list of axes\r\n\t * @return Common value range\r\n\t */\r\n\tpublic getCommonAxisRange(axes: List<Axis>): IRange {\r\n\t\tlet start: Optional<number>;\r\n\t\tlet end: Optional<number>;\r\n\r\n\t\taxes.each((axis) => {\r\n\t\t\tif (!axis.zoomable || (axis instanceof ValueAxis && axis.syncWithAxis)) {\r\n\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet axisStart = axis.start;\r\n\t\t\t\tlet axisEnd = axis.end;\r\n\r\n\t\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\t\taxisStart = 1 - axis.end;\r\n\t\t\t\t\taxisEnd = 1 - axis.start;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!$type.isNumber(start) || (axisStart < start)) {\r\n\t\t\t\t\tstart = axisStart;\r\n\t\t\t\t}\r\n\t\t\t\tif (!$type.isNumber(end) || (axisEnd > end)) {\r\n\t\t\t\t\tend = axisEnd;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn { start: start, end: end };\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the horizontal (X) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis  Axis\r\n\t */\r\n\tpublic updateXAxis(renderer: AxisRenderer) {\r\n\t\tlet axis = renderer.axis;\r\n\t\tif (renderer.opposite) {\r\n\t\t\taxis.parent = this.topAxesContainer;\r\n\t\t\taxis.toFront();\r\n\t\t}\r\n\t\telse {\r\n\t\t\taxis.parent = this.bottomAxesContainer;\r\n\t\t\taxis.toBack();\r\n\t\t}\r\n\t\tif (axis.renderer) {\r\n\t\t\taxis.renderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the vertical (Y) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis  Axis\r\n\t */\r\n\tpublic updateYAxis(renderer: AxisRenderer) {\r\n\t\tlet axis = renderer.axis;\r\n\t\tif (renderer.opposite) {\r\n\t\t\taxis.parent = this.rightAxesContainer;\r\n\t\t\taxis.toBack();\r\n\t\t}\r\n\t\telse {\r\n\t\t\taxis.parent = this.leftAxesContainer;\r\n\t\t\taxis.toFront();\r\n\t\t}\r\n\t\tif (axis.renderer) {\r\n\t\t\taxis.renderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates an Axis for use with this chart, e.g. sets proper renderer\r\n\t * and containers for placement.\r\n\t *\r\n\t * @param axis  Axis\r\n\t */\r\n\tprotected processAxis(axis: Axis): void {\r\n\t\t// Value axis does not use data directly, only category axis does\r\n\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\tthis._dataUsers.moveValue(axis);\r\n\t\t}\r\n\r\n\t\tlet renderer: AxisRenderer = axis.renderer;\r\n\r\n\t\trenderer.gridContainer.parent = this.plotContainer;\r\n\t\trenderer.gridContainer.toBack();\r\n\r\n\t\trenderer.breakContainer.parent = this.plotContainer;\r\n\t\trenderer.breakContainer.toFront();\r\n\t\trenderer.breakContainer.zIndex = 10;\r\n\r\n\t\taxis.addDisposer(new Disposer(() => {\r\n\t\t\tthis.dataUsers.removeValue(axis);\r\n\t\t}))\r\n\r\n\t\trenderer.bulletsContainer.parent = this.axisBulletsContainer;\r\n\r\n\t\tthis._disposers.push(axis.events.on(\"positionchanged\", () => {\r\n\t\t\tlet point = $utils.spritePointToSprite({ x: 0, y: 0 }, axis, this.axisBulletsContainer);\r\n\t\t\tif (axis.renderer instanceof AxisRendererY) {\r\n\t\t\t\trenderer.bulletsContainer.y = point.y;\r\n\t\t\t}\r\n\t\t\tif (axis.renderer instanceof AxisRendererX) {\r\n\t\t\t\trenderer.bulletsContainer.x = point.x;\r\n\t\t\t}\r\n\t\t}, undefined, false));\r\n\r\n\t\tthis.plotContainer.events.on(\"maxsizechanged\", () => {\r\n\t\t\tif (this.inited) {\r\n\t\t\t\taxis.invalidateDataItems();\r\n\t\t\t\tthis.updateSeriesMasks();\r\n\t\t\t}\r\n\t\t}, axis, false);\r\n\t}\r\n\r\n\t/**\r\n\t * This is done because for some reason IE doesn't change mask if path of a\r\n\t * mask changes.\r\n\t */\r\n\tprotected updateSeriesMasks(): void {\r\n\t\tif ($utils.isIE()) {\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tlet mask = series.mainContainer.mask;\r\n\t\t\t\tseries.mainContainer.mask = undefined;\r\n\t\t\t\tseries.mainContainer.mask = mask;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleSeriesRemoved(event: IListEvents<XYSeries>[\"removed\"]) {\r\n\t\tlet series = event.oldValue;\r\n\r\n\t\tif (series) {\r\n\t\t\tif (series.xAxis) {\r\n\t\t\t\tseries.xAxis.series.removeValue(series);\r\n\t\t\t\tseries.xAxis.invalidateProcessedData();\r\n\t\t\t}\r\n\t\t\tif (series.yAxis) {\r\n\t\t\t\tseries.yAxis.series.removeValue(series);\r\n\t\t\t\tseries.yAxis.invalidateProcessedData();\r\n\t\t\t}\r\n\t\t\t// otherwise extremes won't change\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tseries.resetExtremes();\r\n\t\t\t})\r\n\t\t}\r\n\t\tsuper.handleSeriesRemoved(event);\r\n\t}\r\n\r\n\t/**\r\n\t * A list of horizontal (X) axes.\r\n\t *\r\n\t * @return List of axes\r\n\t */\r\n\tpublic get xAxes(): List<Axis<this[\"_xAxisRendererType\"]>> {\r\n\t\tif (!this._xAxes) {\r\n\t\t\tthis._xAxes = new List<Axis<this[\"_xAxisRendererType\"]>>();\r\n\t\t\tthis._xAxes.events.on(\"inserted\", this.processXAxis, this, false);\r\n\t\t\tthis._xAxes.events.on(\"removed\", this.handleAxisRemoval, this, false);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._xAxes, false));\r\n\t\t}\r\n\r\n\t\treturn this._xAxes;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic handleAxisRemoval(event: IListEvents<Axis>[\"removed\"]) {\r\n\t\tlet axis = event.oldValue;\r\n\t\tthis.dataUsers.removeValue(axis); // need to remove, as it might not be disposed\r\n\t\tif (axis.autoDispose) {\r\n\t\t\taxis.dispose();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A list of vertical (Y) axes.\r\n\t *\r\n\t * @return List of axes\r\n\t */\r\n\tpublic get yAxes(): List<Axis<this[\"_yAxisRendererType\"]>> {\r\n\t\tif (!this._yAxes) {\r\n\t\t\tthis._yAxes = new List<Axis<this[\"_yAxisRendererType\"]>>();\r\n\t\t\tthis._yAxes.events.on(\"inserted\", this.processYAxis, this, false);\r\n\t\t\tthis._yAxes.events.on(\"removed\", this.handleAxisRemoval, this, false);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._yAxes, false));\r\n\t\t}\r\n\r\n\t\treturn this._yAxes;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new [[XYSeries]] object with required parameters when it is\r\n\t * added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Event\r\n\t */\r\n\tpublic handleSeriesAdded(event: IListEvents<XYSeries>[\"inserted\"]): void {\r\n\t\ttry {\r\n\t\t\tsuper.handleSeriesAdded(event);\r\n\t\t\tlet series: XYSeries = event.newValue;\r\n\r\n\t\t\tif (this.xAxes.length == 0 || this.yAxes.length == 0) {\r\n\t\t\t\tregistry.removeFromInvalidComponents(series);\r\n\t\t\t\tseries.dataInvalid = false;\r\n\t\t\t}\r\n\r\n\t\t\t$utils.used(series.xAxis); // this is enough to get axis, handled in getter\r\n\t\t\t$utils.used(series.yAxis); // this is enough to get axis, handled in getter\r\n\r\n\t\t\tseries.maskBullets = series.maskBullets;\r\n\r\n\t\t\tif (series.fill == undefined) {\r\n\t\t\t\tif (this.patterns) {\r\n\t\t\t\t\tif (!$type.hasValue(series.stroke)) {\r\n\t\t\t\t\t\tseries.stroke = this.colors.next();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tseries.fill = this.patterns.next();\r\n\t\t\t\t\tif ($type.hasValue(series.fillOpacity)) {\r\n\t\t\t\t\t\tseries.fill.backgroundOpacity = series.fillOpacity;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (series.stroke instanceof Color) {\r\n\t\t\t\t\t\tseries.fill.stroke = series.stroke;\r\n\t\t\t\t\t\tseries.fill.fill = series.stroke;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tseries.fill = this.colors.next();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.hasValue(series.stroke)) {\r\n\t\t\t\tseries.stroke = series.fill;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t\tthis.raiseCriticalError(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Chart's [[Cursor]].\r\n\t *\r\n\t * @param cursor  Cursor\r\n\t */\r\n\tpublic set cursor(cursor: this[\"_cursor\"]) {\r\n\t\tif (this._cursor != cursor) {\r\n\t\t\tif (this._cursor) {\r\n\t\t\t\tthis.removeDispose(this._cursor);\r\n\t\t\t}\r\n\r\n\t\t\tthis._cursor = cursor;\r\n\r\n\t\t\tif (cursor) {\r\n\t\t\t\t// TODO this is wrong, fix it\r\n\t\t\t\tthis._disposers.push(cursor);\r\n\t\t\t\tcursor.chart = this;\r\n\t\t\t\tcursor.shouldClone = false;\r\n\t\t\t\tcursor.parent = this._cursorContainer;\r\n\t\t\t\tcursor.events.on(\"cursorpositionchanged\", this.handleCursorPositionChange, this, false);\r\n\t\t\t\tcursor.events.on(\"zoomstarted\", this.handleCursorZoomStart, this, false);\r\n\t\t\t\tcursor.events.on(\"zoomended\", this.handleCursorZoomEnd, this, false);\r\n\t\t\t\tcursor.events.on(\"panstarted\", this.handleCursorPanStart, this, false);\r\n\t\t\t\tcursor.events.on(\"panning\", this.handleCursorPanning, this, false);\r\n\t\t\t\tcursor.events.on(\"panended\", this.handleCursorPanEnd, this, false);\r\n\t\t\t\tcursor.events.on(\"behaviorcanceled\", this.handleCursorCanceled, this, false);\r\n\t\t\t\tcursor.events.on(\"hidden\", this.handleHideCursor, this, false);\r\n\t\t\t\tcursor.zIndex = Number.MAX_SAFE_INTEGER - 1;\r\n\r\n\t\t\t\tif (this.tapToActivate) {\r\n\t\t\t\t\t// We need this in order to setup cursor properly\r\n\t\t\t\t\tthis.setTapToActivate(this.tapToActivate);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Cursor\r\n\t */\r\n\tpublic get cursor(): this[\"_cursor\"] {\r\n\t\treturn this._cursor;\r\n\t}\r\n\r\n\t/**\r\n\t * Performs tasks when the cursor's position changes, e.g. shows proper\r\n\t * tooltips on axes and series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleCursorPositionChange(): void {\r\n\r\n\t\tlet cursor = this.cursor;\r\n\r\n\t\tif (cursor.visible && !cursor.isHiding) {\r\n\t\t\tlet xPosition: number = this.cursor.xPosition;\r\n\t\t\tlet yPosition: number = this.cursor.yPosition;\r\n\r\n\t\t\tthis.showSeriesTooltip({\r\n\t\t\t\tx: xPosition,\r\n\t\t\t\ty: yPosition\r\n\t\t\t});\r\n\r\n\t\t\tlet exceptAxes: Axis[] = [];\r\n\t\t\tlet snapToSeries = cursor.snapToSeries;\r\n\r\n\t\t\tif (snapToSeries && !cursor.downPoint) {\r\n\t\t\t\tif (snapToSeries instanceof XYSeries) {\r\n\t\t\t\t\tsnapToSeries = [snapToSeries];\r\n\t\t\t\t}\r\n\t\t\t\tlet dataItems: XYSeriesDataItem[] = [];\r\n\r\n\t\t\t\t$array.each(snapToSeries, (snpSeries) => {\r\n\t\t\t\t\tif (!snpSeries.isHidden && !snpSeries.isHiding) {\r\n\r\n\t\t\t\t\t\tlet xAxis = snpSeries.xAxis;\r\n\t\t\t\t\t\tlet yAxis = snpSeries.yAxis;\r\n\r\n\t\t\t\t\t\tif (xAxis instanceof ValueAxis && !(xAxis instanceof DateAxis) && yAxis instanceof ValueAxis && !(yAxis instanceof DateAxis)) {\r\n\r\n\t\t\t\t\t\t\tsnpSeries.dataItems.each((dataItem) => {\r\n\t\t\t\t\t\t\t\tdataItems.push(dataItem);\r\n\t\t\t\t\t\t\t})\r\n\r\n\t\t\t\t\t\t\t$array.move(exceptAxes, snpSeries.yAxis);\r\n\t\t\t\t\t\t\t$array.move(exceptAxes, snpSeries.xAxis);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif (snpSeries.baseAxis == snpSeries.xAxis) {\r\n\t\t\t\t\t\t\t\t$array.move(exceptAxes, snpSeries.yAxis);\r\n\t\t\t\t\t\t\t\tdataItems.push(xAxis.getSeriesDataItem(snpSeries, xAxis.toAxisPosition(xPosition), true));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (snpSeries.baseAxis == snpSeries.yAxis) {\r\n\t\t\t\t\t\t\t\t$array.move(exceptAxes, snpSeries.xAxis);\r\n\t\t\t\t\t\t\t\tdataItems.push(yAxis.getSeriesDataItem(snpSeries, yAxis.toAxisPosition(yPosition), true));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\r\n\t\t\t\tlet closestDataItem = this.getClosest(dataItems, xPosition, yPosition);\r\n\r\n\t\t\t\tif (closestDataItem) {\r\n\t\t\t\t\tthis.series.each((series) => {\r\n\t\t\t\t\t\tlet closestSeries = closestDataItem.component;\r\n\t\t\t\t\t\tif (series != closestSeries) {\r\n\t\t\t\t\t\t\tseries.hideTooltip();\r\n\t\t\t\t\t\t\tif (series.xAxis != closestSeries.xAxis) {\r\n\t\t\t\t\t\t\t\tseries.xAxis.hideTooltip();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (series.yAxis != closestSeries.yAxis) {\r\n\t\t\t\t\t\t\t\tseries.yAxis.hideTooltip();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\r\n\t\t\t\t\tclosestDataItem.component.showTooltipAtDataItem(closestDataItem);\r\n\t\t\t\t\tcursor.handleSnap(closestDataItem.component);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t//}\r\n\t\t\tthis._seriesPoints = [];\r\n\r\n\t\t\tif (this._cursorXPosition != xPosition) {\r\n\t\t\t\tthis.showAxisTooltip(this.xAxes, xPosition, exceptAxes);\r\n\t\t\t}\r\n\t\t\tif (this._cursorYPosition != yPosition) {\r\n\t\t\t\tthis.showAxisTooltip(this.yAxes, yPosition, exceptAxes);\r\n\t\t\t}\r\n\t\t\tif (this.arrangeTooltips) {\r\n\t\t\t\tthis.sortSeriesTooltips(this._seriesPoints);\r\n\t\t\t}\r\n\r\n\t\t\tif (this.legend) {\r\n\t\t\t\tthis.legend.afterDraw();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Finds closest data item to position out of the array of items.\r\n\t *\r\n\t * @since 4.9.29\r\n\t * @param   dataItems  Array of items\r\n\t * @param              xPosition X position\r\n\t * @param              yPosition Y position\r\n\t * @return             Data item\r\n\t */\r\n\tpublic getClosest(dataItems: XYSeriesDataItem[], xPosition: number, yPosition: number): XYSeriesDataItem {\r\n\t\tlet minDistance = Infinity;\r\n\t\tlet closestDataItem: XYSeriesDataItem\r\n\r\n\t\t$array.eachContinue(dataItems, (dataItem) => {\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tlet xAxis = dataItem.component.xAxis;\r\n\t\t\t\tlet yAxis = dataItem.component.yAxis;\r\n\r\n\t\t\t\tlet xPos = xAxis.positionToCoordinate(xAxis.toGlobalPosition(xAxis.toAxisPosition(xPosition)));\r\n\t\t\t\tlet yPos = yAxis.positionToCoordinate(yAxis.toGlobalPosition(yAxis.toAxisPosition(yPosition)));\r\n\r\n\t\t\t\tlet xField = dataItem.component.xField;\r\n\t\t\t\tlet yField = dataItem.component.yField;\r\n\r\n\t\t\t\tif (xAxis instanceof ValueAxis && !$type.isNumber(dataItem.getValue(xField))) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t\tif (yAxis instanceof ValueAxis && !$type.isNumber(dataItem.getValue(yField))) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet dxPosition = xAxis.positionToCoordinate(xAxis.toGlobalPosition(xAxis.getPositionX(dataItem, xField, dataItem.locations[xField], \"valueX\")));\r\n\t\t\t\tlet dyPosition = yAxis.positionToCoordinate(yAxis.toGlobalPosition(yAxis.getPositionY(dataItem, yField, dataItem.locations[yField], \"valueY\")));\r\n\r\n\t\t\t\tlet distance = Math.sqrt(Math.pow(xPos - dxPosition, 2) + Math.pow(yPos - dyPosition, 2));\r\n\r\n\t\t\t\tif (distance < minDistance) {\r\n\t\t\t\t\tminDistance = distance;\r\n\t\t\t\t\tclosestDataItem = dataItem;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\treturn closestDataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides all cursor-related tooltips when the cursor itself is hidden.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleHideCursor(): void {\r\n\t\tthis.hideObjectTooltip(this.xAxes);\r\n\t\tthis.hideObjectTooltip(this.yAxes);\r\n\t\tthis.hideObjectTooltip(this.series);\r\n\t\tthis._cursorXPosition = undefined;\r\n\t\tthis._cursorYPosition = undefined;\r\n\r\n\t\tthis.updateSeriesLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates values for each series' legend item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSeriesLegend(): void {\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.updateLegendValue();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Hides a tooltip for a list of objects.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param sprites  A list of sprites to hide tooltip for\r\n\t */\r\n\tpublic hideObjectTooltip(sprites: List<Axis | XYSeries>): void {\r\n\t\t$iter.each(sprites.iterator(), (sprite) => {\r\n\t\t\tif (sprite.cursorTooltipEnabled) {\r\n\t\t\t\tsprite.hideTooltip(0);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Shows a tooltip for all chart's series, using specific coordinates as a\r\n\t * reference point.\r\n\t *\r\n\t * The tooltip might be shown at different coordinates depending on the\r\n\t * actual data point's position, overlapping with other tooltips, etc.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Reference point\r\n\t */\r\n\tpublic showSeriesTooltip(position?: IPoint): void {\r\n\r\n\t\tif (!position) {\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tseries.hideTooltip();\r\n\t\t\t});\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet seriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\r\n\t\tthis.series.each((series) => {\r\n\t\t\t//if (series.tooltipText || series.tooltipHTML) { // not good, bullets are not hovered then\r\n\r\n\t\t\tif ((series.xAxis instanceof DateAxis && series.xAxis.snapTooltip) || (series.yAxis instanceof DateAxis && series.yAxis.snapTooltip)) {\r\n\t\t\t\t// void\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet point = series.showTooltipAtPosition(position.x, position.y);\r\n\t\t\t\tif (point) {\r\n\t\t\t\t\tseries.tooltip.setBounds($utils.spriteRectToSvg({ x: 0, y: 0, width: this.pixelWidth, height: this.pixelHeight }, this));\r\n\t\t\t\t\tseriesPoints.push({ series: series, point: point });\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t//}\r\n\t\t});\r\n\r\n\t\tif (this.arrangeTooltips) {\r\n\t\t\tthis.sortSeriesTooltips(seriesPoints);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic sortSeriesTooltips(seriesPoints: { point: IPoint, series: XYSeries }[]) {\r\n\t\tif (seriesPoints.length > 0) {\r\n\t\t\tlet cursor = this.cursor;\r\n\r\n\t\t\tif (cursor && $type.isNumber(cursor.maxTooltipDistance)) {\r\n\r\n\t\t\t\tlet cursorPoint = $utils.spritePointToSvg({ x: cursor.point.x, y: cursor.point.y }, cursor);\r\n\r\n\t\t\t\tlet nearestSeries: XYSeries;\r\n\t\t\t\tlet nearestPoint: IPoint;\r\n\t\t\t\tlet smallestDistance: number = Infinity;\r\n\r\n\t\t\t\t$array.each(seriesPoints, (seriesPoint) => {\r\n\t\t\t\t\tlet series = seriesPoint.series;\r\n\t\t\t\t\tlet fixedPoint = seriesPoint.point;\r\n\t\t\t\t\tif (fixedPoint) {\r\n\t\t\t\t\t\tlet point = { x: fixedPoint.x, y: fixedPoint.y };\r\n\r\n\t\t\t\t\t\tlet distance = Math.abs($math.getDistance(point, cursorPoint));\r\n\t\t\t\t\t\tif (distance < smallestDistance) {\r\n\t\t\t\t\t\t\tnearestPoint = point;\r\n\t\t\t\t\t\t\tsmallestDistance = distance;\r\n\t\t\t\t\t\t\tnearestSeries = series;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\tlet newSeriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\t\t\t\tif (nearestSeries) {\r\n\r\n\t\t\t\t\t$array.each(seriesPoints, (seriesPoint) => {\r\n\t\t\t\t\t\tif (Math.abs($math.getDistance(seriesPoint.point, nearestPoint)) <= Math.abs(cursor.maxTooltipDistance)) {\r\n\t\t\t\t\t\t\tnewSeriesPoints.push({ series: seriesPoint.series, point: seriesPoint.point });\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tlet tooltipDataItem = seriesPoint.series.tooltipDataItem;\r\n\t\t\t\t\t\t\tif (tooltipDataItem) {\r\n\t\t\t\t\t\t\t\t$array.each(tooltipDataItem.sprites, (sprite) => {\r\n\t\t\t\t\t\t\t\t\tsprite.isHover = false;\r\n\t\t\t\t\t\t\t\t\tsprite.handleOutReal(); // to avoid flicker\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tseriesPoint.series.hideTooltip(0);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\r\n\t\t\t\t\tif (cursor.maxTooltipDistance < 0) {\r\n\t\t\t\t\t\tif (newSeriesPoints.length > 0) {\r\n\t\t\t\t\t\t\t$array.each(newSeriesPoints, (np) => {\r\n\t\t\t\t\t\t\t\tif (nearestSeries != np.series) {\r\n\t\t\t\t\t\t\t\t\tnp.series.hideTooltip(0);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tnewSeriesPoints = [{ series: nearestSeries, point: nearestPoint }];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tseriesPoints = newSeriesPoints;\r\n\t\t\t}\r\n\r\n\r\n\t\t\tlet topLeft = $utils.spritePointToSvg({ x: -0.5, y: -0.5 }, this.plotContainer);\r\n\t\t\tlet bottomRight = $utils.spritePointToSvg({ x: this.plotContainer.pixelWidth + 0.5, y: this.plotContainer.pixelHeight + 0.5 }, this.plotContainer);\r\n\r\n\t\t\tlet sum = 0;\r\n\t\t\tlet filteredSeriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\t\t\t$array.each(seriesPoints, (seriesPoint) => {\r\n\t\t\t\tlet point = seriesPoint.point;\r\n\t\t\t\tif (point && $math.isInRectangle(point, { x: topLeft.x, y: topLeft.y, width: bottomRight.x - topLeft.x, height: bottomRight.y - topLeft.y })) {\r\n\t\t\t\t\tfilteredSeriesPoints.push({ point: point, series: seriesPoint.series });\r\n\t\t\t\t\tsum += point.y;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tseriesPoints = filteredSeriesPoints;\r\n\r\n\t\t\tlet firstSeries = this.series.getIndex(0);\r\n\t\t\tlet inversed = false;\r\n\t\t\tif (firstSeries && firstSeries.yAxis && firstSeries.yAxis.renderer.inversed) {\r\n\t\t\t\tinversed = true;\r\n\t\t\t}\r\n\r\n\t\t\tif (inversed) {\r\n\t\t\t\tseriesPoints.sort((a, b) => $number.order(a.point.y, b.point.y))\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tseriesPoints.sort((a, b) => $number.order(b.point.y, a.point.y))\r\n\t\t\t\tseriesPoints.reverse();\r\n\t\t\t}\r\n\r\n\t\t\tlet averageY = sum / seriesPoints.length;\r\n\t\t\tlet maxY = $utils.svgPointToDocument({ x: 0, y: 0 }, this.svgContainer.SVGContainer).y;\r\n\r\n\t\t\tif (seriesPoints.length > 0) {\r\n\t\t\t\tlet top = topLeft.y;\r\n\t\t\t\tlet bottom = bottomRight.y;\r\n\r\n\t\t\t\t// TODO is this needed ?\r\n\t\t\t\t$utils.spritePointToDocument({ x: 0, y: top }, this);\r\n\r\n\t\t\t\tlet dropped = false;\r\n\r\n\t\t\t\tif (averageY > top + (bottom - top) / 2) {\r\n\t\t\t\t\tlet nextHeight = bottom;\r\n\t\t\t\t\tfor (let i = seriesPoints.length - 1; i >= 0; i--) {\r\n\t\t\t\t\t\tlet series = seriesPoints[i].series;\r\n\r\n\t\t\t\t\t\tlet tooltip = series.tooltip;\r\n\t\t\t\t\t\tlet pointY = seriesPoints[i].point.y;\r\n\r\n\t\t\t\t\t\ttooltip.setBounds({ x: 0, y: -maxY, width: this.pixelWidth, height: nextHeight + maxY });\r\n\r\n\t\t\t\t\t\tif (tooltip.invalid) {\r\n\t\t\t\t\t\t\ttooltip.validate();\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\ttooltip.toBack();\r\n\t\t\t\t\t\tnextHeight = $utils.spritePointToSvg({ x: 0, y: tooltip.label.pixelY - tooltip.pixelY + pointY - tooltip.pixelMarginTop }, tooltip).y;\r\n\r\n\t\t\t\t\t\tif (nextHeight < -maxY) {\r\n\t\t\t\t\t\t\tdropped = true;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (averageY <= top + (bottom - top) / 2 || dropped) {\r\n\t\t\t\t\tlet nextY = top;\r\n\t\t\t\t\tfor (let i = 0, len = seriesPoints.length; i < len; i++) {\r\n\t\t\t\t\t\tlet series = seriesPoints[i].series;\r\n\t\t\t\t\t\tlet pointY = seriesPoints[i].point.y;\r\n\t\t\t\t\t\tlet tooltip = series.tooltip;\r\n\t\t\t\t\t\ttooltip.setBounds({ x: 0, y: nextY, width: this.pixelWidth, height: bottom });\r\n\r\n\t\t\t\t\t\tif (tooltip.invalid) {\r\n\t\t\t\t\t\t\ttooltip.validate();\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\ttooltip.toBack();\r\n\r\n\t\t\t\t\t\tnextY = $utils.spritePointToSvg({ x: 0, y: tooltip.label.pixelY + tooltip.label.measuredHeight - tooltip.pixelY + pointY + tooltip.pixelMarginBottom }, tooltip).y;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Shows tooltips for a list of axes at specific position.\r\n\t *\r\n\t * Position might be X coordinate for horizontal axes, and Y coordinate for\r\n\t * vertical axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axes      List of axes to show tooltip on\r\n\t * @param position  Position (px)\r\n\t */\r\n\tpublic showAxisTooltip(axes: List<Axis>, position: number, except?: Axis[]): void {\r\n\t\t$iter.each(axes.iterator(), (axis) => {\r\n\t\t\tif (!except || except.indexOf(axis) == -1) {\r\n\t\t\t\tif (this.dataItems.length > 0 || axis.dataItems.length > 0) {\r\n\t\t\t\t\taxis.showTooltipAtPosition(position);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Recalculates the value range for the axis taking into account zoom level & inversed.\r\n\t *\r\n\t * @param axis   Axis\r\n\t * @param range  Range\r\n\t * @return Modified range\r\n\t */\r\n\tpublic getUpdatedRange(axis: Axis<this[\"_xAxisRendererType\"]>, range: IRange): IRange {\r\n\r\n\t\tif (!axis) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet start: number;\r\n\t\tlet end: number;\r\n\t\tlet inversed = axis.renderer.inversed;\r\n\r\n\t\tif (inversed) {\r\n\t\t\t$math.invertRange(range);\r\n\r\n\t\t\tstart = 1 - axis.end;\r\n\t\t\tend = 1 - axis.start;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstart = axis.start;\r\n\t\t\tend = axis.end;\r\n\t\t}\r\n\r\n\t\tlet difference: number = end - start;\r\n\r\n\t\treturn {\r\n\t\t\tstart: start + range.start * difference,\r\n\t\t\tend: start + range.end * difference\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user finishes zooming using chart\r\n\t * cursor, e.g. zooms axes.\r\n\t *\r\n\t * @param event Cursor's event\r\n\t */\r\n\tprotected handleCursorZoomEnd(event: IXYCursorEvents[\"zoomended\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\t\tif (behavior == \"zoomX\" || behavior == \"zoomXY\") {\r\n\t\t\tlet xRange: IRange = cursor.xRange;\r\n\t\t\tif (xRange && this.xAxes.length > 0) {\r\n\t\t\t\txRange = this.getUpdatedRange(this.xAxes.getIndex(0), xRange);\r\n\t\t\t\txRange.priority = \"start\";\r\n\t\t\t\tthis.zoomAxes(this.xAxes, xRange);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (behavior == \"zoomY\" || behavior == \"zoomXY\") {\r\n\t\t\tlet yRange: IRange = cursor.yRange;\r\n\t\t\tif (yRange && this.yAxes.length > 0) {\r\n\t\t\t\tyRange = this.getUpdatedRange(this.yAxes.getIndex(0), yRange);\r\n\t\t\t\tyRange.priority = \"start\";\r\n\t\t\t\tthis.zoomAxes(this.yAxes, yRange);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.handleHideCursor();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n\t *\r\n\t * @param event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanStart(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet xAxis = this.xAxes.getIndex(0);\r\n\t\tif (xAxis) {\r\n\t\t\tthis._panStartXRange = { start: xAxis.start, end: xAxis.end };\r\n\t\t\tif (xAxis.renderer.inversed) {\r\n\t\t\t\tthis._panStartXRange = $math.invertRange(this._panStartXRange)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet yAxis = this.yAxes.getIndex(0);\r\n\t\tif (yAxis) {\r\n\t\t\tthis._panStartYRange = { start: yAxis.start, end: yAxis.end };\r\n\t\t\tif (yAxis.renderer.inversed) {\r\n\t\t\t\tthis._panStartYRange = $math.invertRange(this._panStartYRange)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user ends panning\r\n\t *\r\n\t * @param event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanEnd(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\r\n\t\tif (this._panEndXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\r\n\t\t\tlet panEndRange = this._panEndXRange;\r\n\t\t\tlet panStartRange = this._panStartXRange;\r\n\t\t\tlet delta = 0;\r\n\r\n\t\t\tif (panEndRange.start < 0) {\r\n\t\t\t\tdelta = panEndRange.start;\r\n\t\t\t}\r\n\r\n\t\t\tif (panStartRange.end > 1) {\r\n\t\t\t\tif (panEndRange.end > panStartRange.end) {\r\n\t\t\t\t\tdelta = panEndRange.end - panStartRange.end;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (panEndRange.end > 1) {\r\n\t\t\t\tdelta = panEndRange.end - 1;\r\n\t\t\t}\r\n\r\n\t\t\tthis.zoomAxes(this.xAxes, { start: panEndRange.start - delta, end: panEndRange.end - delta }, false, cursor.snapOnPan);\r\n\t\t\tthis._panEndXRange = undefined;\r\n\t\t\tthis._panStartXRange = undefined;\r\n\t\t}\r\n\t\tif (this._panEndYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\r\n\t\t\tlet panEndRange = this._panEndYRange;\r\n\r\n\t\t\tlet delta = 0;\r\n\t\t\tif (panEndRange.start < 0) {\r\n\t\t\t\tdelta = panEndRange.start;\r\n\t\t\t}\r\n\t\t\tif (panEndRange.end > 1) {\r\n\t\t\t\tdelta = panEndRange.end - 1;\r\n\t\t\t}\r\n\r\n\t\t\tthis.zoomAxes(this.yAxes, { start: panEndRange.start - delta, end: panEndRange.end - delta }, false, cursor.snapOnPan);\r\n\t\t\tthis._panEndYRange = undefined;\r\n\t\t\tthis._panStartYRange = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleCursorCanceled(): void {\r\n\t\tthis._panEndXRange = undefined;\r\n\t\tthis._panStartXRange = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n\t *\r\n\t * @param event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanning(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\t\tlet maxPanOut = cursor.maxPanOut;\r\n\t\tif (this._panStartXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\r\n\t\t\tlet panStartRange = this._panStartXRange;\r\n\t\t\tlet range = cursor.xRange;\r\n\r\n\t\t\tlet axisRange = this.getCommonAxisRange(this.xAxes);\r\n\r\n\t\t\tlet difference = (panStartRange.end - panStartRange.start);\r\n\t\t\tlet delta = range.start * (axisRange.end - axisRange.start);\r\n\r\n\t\t\tlet newStart = Math.max(-maxPanOut, delta + panStartRange.start);\r\n\t\t\tlet newEnd = Math.min(delta + panStartRange.end, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStart <= 0) {\r\n\t\t\t\tnewEnd = newStart + difference;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEnd >= 1) {\r\n\t\t\t\tnewStart = newEnd - difference;\r\n\t\t\t}\r\n\r\n\t\t\tlet newRange = {\r\n\t\t\t\tstart: newStart,\r\n\t\t\t\tend: newEnd\r\n\t\t\t}\r\n\t\t\tthis._panEndXRange = newRange;\r\n\r\n\t\t\tthis.zoomAxes(this.xAxes, newRange, false, false, cursor.maxPanOut);\r\n\t\t}\r\n\r\n\t\tif (this._panStartYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\r\n\t\t\tlet panStartRange = this._panStartYRange;\r\n\t\t\tlet range = cursor.yRange;\r\n\r\n\t\t\tlet axisRange = this.getCommonAxisRange(this.yAxes);\r\n\r\n\t\t\tlet difference = panStartRange.end - panStartRange.start;\r\n\t\t\tlet delta = range.start * (axisRange.end - axisRange.start);\r\n\r\n\t\t\tlet newStart = Math.max(-maxPanOut, delta + panStartRange.start);\r\n\t\t\tlet newEnd = Math.min(delta + panStartRange.end, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStart <= 0) {\r\n\t\t\t\tnewEnd = newStart + difference;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEnd >= 1) {\r\n\t\t\t\tnewStart = newEnd - difference;\r\n\t\t\t}\r\n\r\n\t\t\tlet newRange = {\r\n\t\t\t\tstart: newStart,\r\n\t\t\t\tend: newEnd\r\n\t\t\t}\r\n\t\t\tthis._panEndYRange = newRange;\r\n\t\t\tthis.zoomAxes(this.yAxes, newRange, false, false, cursor.maxPanOut);\r\n\t\t}\r\n\r\n\t\tthis.handleHideCursor();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic handleYAxisSet(series: XYSeries) {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user starts zooming using chart\r\n\t * cursor, e.g. zooms axes.\r\n\t *\r\n\t * @param event Cursor's event\r\n\t */\r\n\tprotected handleCursorZoomStart(event: IXYCursorEvents[\"zoomstarted\"]): void {\r\n\r\n\t\t// Nothing here\r\n\t\t// This method is here only as a \"placeholder\" for extending classes to\r\n\t\t// override if necessary\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal (X) scrollbar.\r\n\t *\r\n\t * @param scrollbar Scrollbar\r\n\t */\r\n\tpublic set scrollbarX(scrollbar: Scrollbar) {\r\n\t\tif (this._scrollbarX) {\r\n\t\t\tthis.removeDispose(this._scrollbarX);\r\n\t\t}\r\n\t\tthis._scrollbarX = scrollbar;\r\n\r\n\t\tif (scrollbar) {\r\n\t\t\tthis._disposers.push(scrollbar);\r\n\t\t\tscrollbar.parent = this.topAxesContainer;\r\n\t\t\tscrollbar.shouldClone = false;\r\n\t\t\tscrollbar.startGrip.exportable = false;\r\n\t\t\tscrollbar.endGrip.exportable = false;\r\n\t\t\tscrollbar.toBack();\r\n\t\t\tscrollbar.orientation = \"horizontal\";\r\n\t\t\tscrollbar.events.on(\"rangechanged\", this.handleXScrollbarChange, this, false);\r\n\t\t\t// accessibility related\r\n\t\t\tscrollbar.adapter.add(\"positionValue\", (arg) => {\r\n\t\t\t\tlet xAxis = this.xAxes.getIndex(0);\r\n\t\t\t\tif (xAxis) {\r\n\t\t\t\t\targ.value = xAxis.getPositionLabel(\r\n\t\t\t\t\t\txAxis.renderer.inversed\r\n\t\t\t\t\t\t\t? 1 - arg.position\r\n\t\t\t\t\t\t\t: arg.position\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t\treturn arg;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Scrollbar\r\n\t */\r\n\tpublic get scrollbarX(): Scrollbar {\r\n\t\treturn this._scrollbarX;\r\n\t}\r\n\r\n\t/**\r\n\t * Vertical (Y) scrollbar.\r\n\t *\r\n\t * @param scrollbar Scrollbar\r\n\t */\r\n\tpublic set scrollbarY(scrollbar: Scrollbar) {\r\n\t\tif (this._scrollbarY) {\r\n\t\t\tthis.removeDispose(this._scrollbarY);\r\n\t\t}\r\n\t\tthis._scrollbarY = scrollbar;\r\n\r\n\t\tif (scrollbar) {\r\n\t\t\tthis._disposers.push(scrollbar);\r\n\t\t\tscrollbar.parent = this.rightAxesContainer;\r\n\t\t\tscrollbar.startGrip.exportable = false;\r\n\t\t\tscrollbar.shouldClone = false;\r\n\t\t\tscrollbar.endGrip.exportable = false;\r\n\t\t\tscrollbar.toFront();\r\n\t\t\tscrollbar.orientation = \"vertical\";\r\n\t\t\tscrollbar.events.on(\"rangechanged\", this.handleYScrollbarChange, this, false);\r\n\t\t\t// accessibility related\r\n\t\t\tscrollbar.adapter.add(\"positionValue\", (arg) => {\r\n\t\t\t\tlet yAxis = this.yAxes.getIndex(0);\r\n\t\t\t\tif (yAxis) {\r\n\t\t\t\t\targ.value = yAxis.getPositionLabel(arg.position);\r\n\t\t\t\t}\r\n\t\t\t\treturn arg;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Scrollbar\r\n\t */\r\n\tpublic get scrollbarY(): Scrollbar {\r\n\t\treturn this._scrollbarY;\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes affected by the horizontal (X) scrollbar when the selection\r\n\t * on it changes.\r\n\t *\r\n\t * @param event Scrollbar range change event\r\n\t */\r\n\tprotected handleXScrollbarChange(event: AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]): void {\r\n\r\n\t\tif (this.inited) {\r\n\t\t\tlet scrollbar: Scrollbar = event.target;\r\n\t\t\tlet range = scrollbar.range;\r\n\r\n\t\t\tif (range.start == 0) {\r\n\t\t\t\trange.priority = \"start\";\r\n\t\t\t}\r\n\r\n\t\t\tif (range.end == 1) {\r\n\t\t\t\trange.priority = \"end\";\r\n\t\t\t}\r\n\r\n\t\t\trange = this.zoomAxes(this.xAxes, range);\r\n\r\n\t\t\tscrollbar.fixRange(range);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes affected by the vertical (Y) scrollbar when the selection\r\n\t * on it changes.\r\n\t *\r\n\t * @param event Scrollbar range change event\r\n\t */\r\n\tprotected handleYScrollbarChange(event: AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]): void {\r\n\t\tif (this.inited) {\r\n\t\t\tlet scrollbar: Scrollbar = event.target;\r\n\t\t\tlet range = scrollbar.range;\r\n\t\t\tif (range.end == 1) {\r\n\t\t\t\trange.priority = \"end\";\r\n\t\t\t}\r\n\t\t\tif (range.start == 0) {\r\n\t\t\t\trange.priority = \"start\";\r\n\t\t\t}\r\n\t\t\trange = this.zoomAxes(this.yAxes, range);\r\n\t\t\tscrollbar.fixRange(range);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes that are affected by to specific relative range.\r\n\t *\r\n\t * @param axes       List of axes to zoom\r\n\t * @param range      Range of values to zoom to (0-1)\r\n\t * @param instantly  If set to `true` will skip zooming animation\r\n\t * @return Recalculated range that is common to all involved axes\r\n\t */\r\n\tprotected zoomAxes(axes: List<Axis<this[\"_xAxisRendererType\"]>>, range: IRange, instantly?: boolean, round?: boolean, declination?: number, stop?: boolean): IRange {\r\n\t\tlet realRange: IRange = { start: 0, end: 1 };\r\n\r\n\t\tthis.showSeriesTooltip(); // hides\r\n\r\n\t\tlet originalRange = range;\r\n\r\n\t\tif (!this.dataInvalid) {\r\n\t\t\t$iter.each(axes.iterator(), (axis) => {\r\n\r\n\t\t\t\tlet maxZoomFactor = axis.maxZoomFactor;\r\n\t\t\t\tif ($type.isNumber(axis.minZoomCount)) {\r\n\t\t\t\t\tmaxZoomFactor = maxZoomFactor / axis.minZoomCount\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (stop && 1 / (range.end - range.start) >= maxZoomFactor) {\r\n\t\t\t\t\t// void\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (axis.zoomable) {\r\n\t\t\t\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\t\t\t\trange = $math.invertRange(originalRange);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\trange = originalRange;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\taxis.hideTooltip(0);\r\n\r\n\t\t\t\t\t\tif (round) {\r\n\t\t\t\t\t\t\t//let diff = range.end - range.start;\r\n\t\t\t\t\t\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\t\t\t\t\t\tlet cellWidth = axis.getCellEndPosition(0) - axis.getCellStartPosition(0);\r\n\r\n\t\t\t\t\t\t\t\trange.start = axis.roundPosition(range.start + cellWidth / 2 - (axis.startLocation) * cellWidth, axis.startLocation);\r\n\t\t\t\t\t\t\t\trange.end = axis.roundPosition(range.end - cellWidth / 2 + (1 - axis.endLocation) * cellWidth, axis.endLocation);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\trange.start = axis.roundPosition(range.start + 0.0001, 0, axis.startLocation);\r\n\t\t\t\t\t\t\t\trange.end = axis.roundPosition(range.end + 0.0001, 0, axis.endLocation);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlet axisRange: IRange = axis.zoom(range, instantly, instantly, declination);\r\n\r\n\t\t\t\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\t\t\t\taxisRange = $math.invertRange(axisRange);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\trealRange = axisRange;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn realRange;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if bullet container is masked.\r\n\t *\r\n\t * If it is set to `true`, any bullets that do not fit into bullet container\r\n\t * will be clipped off. Settting to `false` will allow bullets to \"spill out\"\r\n\t * of the plot area so they are not cut off.\r\n\t *\r\n\t * @param value Mask bullet container?\r\n\t */\r\n\tpublic set maskBullets(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"maskBullets\", value, true) && this.bulletsContainer) {\r\n\t\t\tif (value) {\r\n\t\t\t\tthis.bulletsContainer.mask = this._bulletMask;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.bulletsContainer.mask = undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Mask bullet container?\r\n\t */\r\n\tpublic get maskBullets(): boolean {\r\n\t\treturn this.getPropertyValue(\"maskBullets\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if chart should arrange series tooltips so that they would not\r\n\t * overlap.\r\n\t *\r\n\t * If set to `true` (default), the chart will adjust vertical positions of\r\n\t * all simultaneously shown tooltips to avoid overlapping.\r\n\t *\r\n\t * However, if you have a vertically-arranged chart, it might not make sense,\r\n\t * because tooltips would most probably not be aligned horizontally. In this\r\n\t * case it would probably be a good idea to set this setting to `false`.\r\n\t *\r\n\t * @default true\r\n\t * @param value Arrange tooltips?\r\n\t */\r\n\tpublic set arrangeTooltips(value: boolean) {\r\n\t\tthis.setPropertyValue(\"arrangeTooltips\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Arrange tooltips?\r\n\t */\r\n\tpublic get arrangeTooltips(): boolean {\r\n\t\treturn this.getPropertyValue(\"arrangeTooltips\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Handles mouse wheel event.\r\n\t *\r\n\t * @param event  Original event\r\n\t */\r\n\tprotected handleWheel(event: AMEvent<Sprite, ISpriteEvents>[\"wheel\"]) {\r\n\t\tlet plotContainer = this.plotContainer;\r\n\t\tlet svgPoint: IPoint = $utils.documentPointToSvg(event.point, this.htmlContainer, this.svgContainer.cssScale);\r\n\t\tlet plotPoint = $utils.svgPointToSprite(svgPoint, plotContainer);\r\n\t\tlet shift = event.shift.y;\r\n\r\n\t\tthis.handleWheelReal(shift, this.mouseWheelBehavior, plotPoint);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Handles mouse wheel event.\r\n\t *\r\n\t * @param event  Original event\r\n\t */\r\n\tprotected handleHorizontalWheel(event: AMEvent<Sprite, ISpriteEvents>[\"wheel\"]) {\r\n\t\tlet plotContainer = this.plotContainer;\r\n\t\tlet svgPoint: IPoint = $utils.documentPointToSvg(event.point, this.htmlContainer, this.svgContainer.cssScale);\r\n\t\tlet plotPoint = $utils.svgPointToSprite(svgPoint, plotContainer);\r\n\r\n\t\tthis.handleWheelReal(event.shift.x, this.horizontalMouseWheelBehavior, plotPoint)\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected handleWheelReal(shift: number, mouseWheelBehavior: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\", plotPoint: IPoint) {\r\n\t\tif (shift != 0) {\r\n\t\t\tlet plotContainer = this.plotContainer;\r\n\r\n\t\t\tlet rangeX: IRange = this.getCommonAxisRange(this.xAxes);\r\n\t\t\tlet rangeY: IRange = this.getCommonAxisRange(this.yAxes);\r\n\r\n\t\t\tlet shiftStep = 0.1;\r\n\r\n\t\t\tlet maxPanOut = 0;\r\n\r\n\t\t\tif (mouseWheelBehavior == \"panX\" || mouseWheelBehavior == \"panXY\") {\r\n\r\n\t\t\t\tlet differenceX = rangeX.end - rangeX.start;\r\n\r\n\t\t\t\tlet newStartX = Math.max(-maxPanOut, rangeX.start + shiftStep * shift / 100 * (rangeX.end - rangeX.start));\r\n\t\t\t\tlet newEndX = Math.min(rangeX.end + shiftStep * shift / 100 * (rangeX.end - rangeX.start), 1 + maxPanOut);\r\n\r\n\t\t\t\tif (newStartX <= 0) {\r\n\t\t\t\t\tnewEndX = newStartX + differenceX;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (newEndX >= 1) {\r\n\t\t\t\t\tnewStartX = newEndX - differenceX;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.zoomAxes(this.xAxes, { start: newStartX, end: newEndX });\r\n\t\t\t}\r\n\r\n\t\t\tif (mouseWheelBehavior == \"panY\" || mouseWheelBehavior == \"panXY\") {\r\n\t\t\t\tshift *= -1;\r\n\t\t\t\tlet differenceY = rangeY.end - rangeY.start;\r\n\r\n\t\t\t\tlet newStartY = Math.max(-maxPanOut, rangeY.start + shiftStep * shift / 100 * (rangeY.end - rangeY.start));\r\n\t\t\t\tlet newEndY = Math.min(rangeY.end + shiftStep * shift / 100 * (rangeY.end - rangeY.start), 1 + maxPanOut);\r\n\r\n\t\t\t\tif (newStartY <= 0) {\r\n\t\t\t\t\tnewEndY = newStartY + differenceY;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (newEndY >= 1) {\r\n\t\t\t\t\tnewStartY = newEndY - differenceY;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.zoomAxes(this.yAxes, { start: newStartY, end: newEndY });\r\n\t\t\t}\r\n\r\n\t\t\tif (mouseWheelBehavior == \"zoomX\" || mouseWheelBehavior == \"zoomXY\") {\r\n\t\t\t\tlet locationX = plotPoint.x / plotContainer.maxWidth;\r\n\r\n\t\t\t\tlet location2X = this.xAxes.getIndex(0).toAxisPosition(locationX);\r\n\r\n\t\t\t\tlet newStartX = Math.max(-maxPanOut, rangeX.start - shiftStep * (rangeX.end - rangeX.start) * shift / 100 * locationX);\r\n\t\t\t\tnewStartX = Math.min(newStartX, location2X);\r\n\r\n\t\t\t\tlet newEndX = Math.min(rangeX.end + shiftStep * (rangeX.end - rangeX.start) * shift / 100 * (1 - locationX), 1 + maxPanOut);\r\n\t\t\t\tnewEndX = Math.max(newEndX, location2X);\r\n\r\n\t\t\t\tthis.zoomAxes(this.xAxes, { start: newStartX, end: newEndX }, undefined, undefined, undefined, true);\r\n\t\t\t}\r\n\r\n\t\t\tif (mouseWheelBehavior == \"zoomY\" || mouseWheelBehavior == \"zoomXY\") {\r\n\t\t\t\tlet locationY = plotPoint.y / plotContainer.maxHeight;\r\n\r\n\t\t\t\tlet location2Y = this.yAxes.getIndex(0).toAxisPosition(locationY);\r\n\r\n\t\t\t\tlet newStartY = Math.max(-maxPanOut, rangeY.start - shiftStep * (rangeY.end - rangeY.start) * shift / 100 * (1 - locationY));\r\n\t\t\t\tnewStartY = Math.min(newStartY, location2Y);\r\n\r\n\t\t\t\tlet newEndY = Math.min(rangeY.end + shiftStep * shift / 100 * locationY * (rangeY.end - rangeY.start), 1 + maxPanOut);\r\n\t\t\t\tnewEndY = Math.max(newEndY, location2Y);\r\n\r\n\t\t\t\tthis.zoomAxes(this.yAxes, { start: newStartY, end: newEndY }, undefined, undefined, undefined, true);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies action for when mouse wheel is used when over the chart.\r\n\t *\r\n\t * Options: Options: `\"zoomX\"`, `\"zoomY\"`, `\"zoomXY\"`, `\"panX\"`, `\"panY\"`,`\"panXY\"`, `\"none\"` (default).\r\n\t *\r\n\t * You can control sensitivity of wheel zooming via `mouseOptions`.\r\n\t *\r\n\t * @default \"none\"\r\n\t * @see {@link https://www.amcharts.com/docs/v4/reference/sprite/#mouseOptions_property} More information about `mouseOptions`\r\n\t * @param mouse wheel behavior\r\n\t */\r\n\tpublic set mouseWheelBehavior(value: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\") {\r\n\r\n\t\tif (this.setPropertyValue(\"mouseWheelBehavior\", value)) {\r\n\t\t\tif (value != \"none\") {\r\n\t\t\t\tthis._mouseWheelDisposer = this.plotContainer.events.on(\"wheel\", this.handleWheel, this, false);\r\n\t\t\t\tthis._disposers.push(this._mouseWheelDisposer);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this._mouseWheelDisposer) {\r\n\t\t\t\t\tthis.plotContainer.wheelable = false;\r\n\t\t\t\t\tthis.plotContainer.hoverable = false;\r\n\t\t\t\t\tthis._mouseWheelDisposer.dispose();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Mouse wheel behavior\r\n\t */\r\n\tpublic get mouseWheelBehavior(): \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"mouseWheelBehavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies action for when horizontal mouse wheel is used when over the chart.\r\n\t *\r\n\t * Options: Options: `\"zoomX\"`, `\"zoomY\"`, `\"zoomXY\"`, `\"panX\"`, `\"panY\"`, `\"panXY\"`, `\"none\"` (default).\r\n\t *\r\n\t * @default \"none\"\r\n\t * @see {@link https://www.amcharts.com/docs/v4/reference/sprite/#mouseOptions_property} More information about `mouseOptions`\r\n\t * @param mouse wheel behavior\r\n\t */\r\n\tpublic set horizontalMouseWheelBehavior(value: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\") {\r\n\r\n\t\tif (this.setPropertyValue(\"horizontalMouseWheelBehavior\", value)) {\r\n\t\t\tif (value != \"none\") {\r\n\t\t\t\tthis._mouseWheelDisposer2 = this.plotContainer.events.on(\"wheel\", this.handleHorizontalWheel, this, false);\r\n\t\t\t\tthis._disposers.push(this._mouseWheelDisposer2);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this._mouseWheelDisposer2) {\r\n\t\t\t\t\tthis.plotContainer.wheelable = false;\r\n\t\t\t\t\tthis.plotContainer.hoverable = false;\r\n\t\t\t\t\tthis._mouseWheelDisposer2.dispose();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Horizontal mouse wheel behavior\r\n\t */\r\n\tpublic get horizontalMouseWheelBehavior(): \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"horizontalMouseWheelBehavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * This function is called by the [[DataSource]]'s `dateFields` adapater\r\n\t * so that particular chart types can popuplate this setting with their\r\n\t * own type-specific data fields so they are parsed properly.\r\n\t *\r\n\t * @param fields  Array of date fields\r\n\t * @return Array of date fields populated with chart's date fields\r\n\t */\r\n\tprotected dataSourceDateFields(fields: string[]): string[] {\r\n\t\t// Process parent\r\n\t\tfields = super.dataSourceDateFields(fields);\r\n\r\n\t\t// Check if we have any series with date-fields\r\n\t\t$iter.each(this.series.iterator(), (series: this[\"_seriesType\"]) => {\r\n\t\t\tfields = this.populateDataSourceFields(\r\n\t\t\t\tfields,\r\n\t\t\t\t<any>series.dataFields,\r\n\t\t\t\t[\"dateX\", \"dateY\", \"openDateX\", \"openDateY\"]\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\treturn fields;\r\n\t}\r\n\r\n\t/**\r\n\t * This function is called by the [[DataSource]]'s `numberFields` adapater\r\n\t * so that particular chart types can popuplate this setting with their\r\n\t * own type-specific data fields so they are parsed properly.\r\n\t *\r\n\t * @param value  Array of number fields\r\n\t * @return Array of number fields populated with chart's number fields\r\n\t */\r\n\tprotected dataSourceNumberFields(fields: string[]): string[] {\r\n\t\tfields = super.dataSourceDateFields(fields);\r\n\r\n\t\t// Check if we have any series with date-fields\r\n\t\t$iter.each(this.series.iterator(), (series: this[\"_seriesType\"]) => {\r\n\t\t\tfields = this.populateDataSourceFields(\r\n\t\t\t\tfields,\r\n\t\t\t\t<any>series.dataFields,\r\n\t\t\t\t[\"valueX\", \"valueY\", \"openValueX\", \"openValueY\"]\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\treturn fields;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Save axis ranges for later processing\r\n\t\t\tlet xAxes: any[] = [];\r\n\t\t\tlet yAxes: any[] = [];\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.xAxes.length; i < len; i++) {\r\n\t\t\t\t\tif (!config.xAxes[i].type) {\r\n\t\t\t\t\t\tthrow Error(\"[XYChart error] No type set for xAxes[\" + i + \"].\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(config.xAxes[i][\"axisRanges\"])) {\r\n\r\n\t\t\t\t\t\t// Maybe convert string dates?\r\n\t\t\t\t\t\tfor (let x = 0, len = config.xAxes[i][\"axisRanges\"].length; x < len; x++) {\r\n\t\t\t\t\t\t\tlet range = config.xAxes[i][\"axisRanges\"][x];\r\n\t\t\t\t\t\t\tif ($type.hasValue(range.date) && $type.isString(range.date)) {\r\n\t\t\t\t\t\t\t\trange.date = this.dateFormatter.parse(range.date);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif ($type.hasValue(range.endDate) && $type.isString(range.endDate)) {\r\n\t\t\t\t\t\t\t\trange.endDate = this.dateFormatter.parse(range.endDate);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\txAxes.push({\r\n\t\t\t\t\t\t\taxisRanges: config.xAxes[i][\"axisRanges\"],\r\n\t\t\t\t\t\t\tindex: i\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tdelete (config.xAxes[i][\"axisRanges\"]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.yAxes.length; i < len; i++) {\r\n\t\t\t\t\tif (!config.yAxes[i].type) {\r\n\t\t\t\t\t\tthrow Error(\"[XYChart error] No type set for yAxes[\" + i + \"].\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(config.yAxes[i][\"axisRanges\"])) {\r\n\r\n\t\t\t\t\t\t// Maybe convert string dates?\r\n\t\t\t\t\t\tfor (let x = 0, len = config.yAxes[i][\"axisRanges\"].length; x < len; x++) {\r\n\t\t\t\t\t\t\tlet range = config.yAxes[i][\"axisRanges\"][x];\r\n\t\t\t\t\t\t\tif ($type.hasValue(range.date) && $type.isString(range.date)) {\r\n\t\t\t\t\t\t\t\trange.date = this.dateFormatter.parse(range.date);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif ($type.hasValue(range.endDate) && $type.isString(range.endDate)) {\r\n\t\t\t\t\t\t\t\trange.endDate = this.dateFormatter.parse(range.endDate);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tyAxes.push({\r\n\t\t\t\t\t\t\taxisRanges: config.yAxes[i][\"axisRanges\"],\r\n\t\t\t\t\t\t\tindex: i\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tdelete (config.yAxes[i][\"axisRanges\"]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"LineSeries\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up cursor\r\n\t\t\tif ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\r\n\t\t\t\tconfig.cursor.type = \"XYCursor\";\r\n\t\t\t}\r\n\r\n\t\t\t// Set up scrollbars\r\n\t\t\tif ($type.hasValue(config.scrollbarX) && !$type.hasValue(config.scrollbarX.type)) {\r\n\t\t\t\tconfig.scrollbarX.type = \"Scrollbar\";\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.hasValue(config.scrollbarY) && !$type.hasValue(config.scrollbarY.type)) {\r\n\t\t\t\tconfig.scrollbarY.type = \"Scrollbar\";\r\n\t\t\t}\r\n\r\n\t\t\tsuper.processConfig(config);\r\n\r\n\t\t\t// Finish up with ranges.\r\n\t\t\t// We need to do this here because series are processed last in JSON\r\n\t\t\t// config. Therefore their respective objects are not yet are available\r\n\t\t\t// when axis (and respectively their ranges) are being processed.\r\n\t\t\tif (yAxes.length) {\r\n\t\t\t\tfor (let i = 0, len = yAxes.length; i < len; i++) {\r\n\t\t\t\t\tthis.yAxes.getIndex(yAxes[i].index).config = {\r\n\t\t\t\t\t\taxisRanges: yAxes[i].axisRanges\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (xAxes.length) {\r\n\t\t\t\tfor (let i = 0, len = xAxes.length; i < len; i++) {\r\n\t\t\t\t\tthis.xAxes.getIndex(xAxes[i].index).config = {\r\n\t\t\t\t\t\taxisRanges: xAxes[i].axisRanges\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This function is used to sort element's JSON config properties, so that\r\n\t * some properties that absolutely need to be processed last, can be put at\r\n\t * the end.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param a  Element 1\r\n\t * @param b  Element 2\r\n\t * @return Sorting number\r\n\t */\r\n\tprotected configOrder(a: string, b: string): Ordering {\r\n\t\tif (a == b) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t// Must come last\r\n\t\telse if (a == \"scrollbarX\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"scrollbarX\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"scrollbarY\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"scrollbarY\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"cursor\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"cursor\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"series\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"series\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.configOrder(a, b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new Series of type suitable for this chart.\r\n\t *\r\n\t * @return New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new XYSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Button]] element that is used for zooming out the chart.\r\n\t *\r\n\t * This button appears only when chart is zoomed in, and disappears\r\n\t * autoamatically when it is zoome dout.\r\n\t *\r\n\t * @param button  Zoom out button\r\n\t */\r\n\tpublic set zoomOutButton(button: Button) {\r\n\t\tthis._zoomOutButton = button;\r\n\t\tif (button) {\r\n\t\t\tbutton.events.on(\"hit\", () => {\r\n\t\t\t\tthis.zoomAxes(this.xAxes, { start: 0, end: 1 });\r\n\t\t\t\tthis.zoomAxes(this.yAxes, { start: 0, end: 1 });\r\n\t\t\t}, undefined, false);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Zoom out button\r\n\t */\r\n\tpublic get zoomOutButton(): Button {\r\n\t\treturn this._zoomOutButton;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[XYChart]].\r\n\t *\r\n\t * @param source Source XYChart\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\r\n\t\tsource.xAxes.each((axis) => {\r\n\t\t\tlet a = this.xAxes.push(axis.clone());\r\n\t\t\ta.chart = this;\r\n\t\t\ta.renderer.chart = this;\r\n\t\t})\r\n\r\n\t\tsource.yAxes.each((axis) => {\r\n\t\t\tlet a = this.yAxes.push(axis.clone());\r\n\t\t\ta.renderer.chart = this;\r\n\t\t\ta.chart = this;\r\n\t\t})\r\n\r\n\t\t//this.xAxes.copyFrom(source.xAxes);\r\n\t\t//this.yAxes.copyFrom(source.yAxes);\r\n\r\n\t\tsuper.copyFrom(source);\r\n\r\n\t\t//this.zoomOutButton.copyFrom(source.zoomOutButton);\r\n\r\n\t\tif (source.cursor) {\r\n\t\t\tthis.cursor = source.cursor.clone();\r\n\t\t}\r\n\r\n\t\tif (source.scrollbarX) {\r\n\t\t\tthis.scrollbarX = source.scrollbarX.clone();\r\n\t\t}\r\n\r\n\t\tif (source.scrollbarY) {\r\n\t\t\tthis.scrollbarY = source.scrollbarY.clone();\r\n\t\t}\r\n\t\t//@todo copy all container properties\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tsuper.disposeData();\r\n\r\n\t\tlet scrollbarX = this.scrollbarX;\r\n\t\tif (scrollbarX && scrollbarX instanceof XYChartScrollbar) {\r\n\t\t\tscrollbarX.scrollbarChart.disposeData();\r\n\t\t}\r\n\r\n\t\tlet scrollbarY = this.scrollbarY;\r\n\t\tif (scrollbarY && scrollbarY instanceof XYChartScrollbar) {\r\n\t\t\tscrollbarY.scrollbarChart.disposeData();\r\n\t\t}\r\n\r\n\t\tthis.xAxes.each((axis) => {\r\n\t\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\t\taxis.disposeData();\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis.yAxes.each((axis) => {\r\n\t\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\t\taxis.disposeData();\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Adds one or several (array) of data items to the existing data.\r\n\t *\r\n\t * @param rawDataItem One or many raw data item objects\r\n\t */\r\n\tpublic addData(rawDataItem: Object | Object[], removeCount?: number): void {\r\n\t\tif (this.scrollbarX instanceof XYChartScrollbar) {\r\n\t\t\tthis.addScrollbarData(this.scrollbarX, removeCount);\r\n\t\t}\r\n\t\tif (this.scrollbarY instanceof XYChartScrollbar) {\r\n\t\t\tthis.addScrollbarData(this.scrollbarY, removeCount);\r\n\t\t}\r\n\r\n\t\tsuper.addData(rawDataItem, removeCount);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected addScrollbarData(scrollbar: XYChartScrollbar, removeCount: number) {\r\n\t\tlet chart = scrollbar.scrollbarChart;\r\n\t\tchart._parseDataFrom = chart.data.length;\r\n\t\tchart.invalidateData();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected removeScrollbarData(scrollbar: XYChartScrollbar, removeCount: number) {\r\n\t\tlet chart = scrollbar.scrollbarChart;\r\n\t\tif ($type.isNumber(removeCount)) {\r\n\t\t\twhile (removeCount > 0) {\r\n\t\t\t\tlet dataItem = this.dataItems.getIndex(0);\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tchart.dataItems.remove(dataItem);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tchart.dataUsers.each((dataUser) => {\r\n\t\t\t\t\tlet dataItem = dataUser.dataItems.getIndex(0);\r\n\t\t\t\t\tif (dataItem) {\r\n\t\t\t\t\t\tdataUser.dataItems.remove(dataItem);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tchart._parseDataFrom--;\r\n\r\n\t\t\t\tremoveCount--;\r\n\t\t\t}\r\n\r\n\t\t\tchart.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Removes elements from the beginning of data\r\n\t *\r\n\t * @param count number of elements to remove\r\n\t */\r\n\tpublic removeData(count: $type.Optional<number>) {\r\n\t\tif (this.scrollbarX instanceof XYChartScrollbar) {\r\n\t\t\tthis.removeScrollbarData(this.scrollbarX, count);\r\n\t\t}\r\n\t\tif (this.scrollbarY instanceof XYChartScrollbar) {\r\n\t\t\tthis.removeScrollbarData(this.scrollbarY, count);\r\n\t\t}\r\n\r\n\t\tsuper.removeData(count);\r\n\t}\r\n\r\n\t/**\r\n\t * @param  value  Tap to activate?\r\n\t */\r\n\tprotected setTapToActivate(value: boolean): void {\r\n\t\tsuper.setTapToActivate(value);\r\n\t\tif (this.cursor) {\r\n\t\t\tthis.cursor.interactions.isTouchProtected = value;\r\n\t\t\tthis.plotContainer.interactions.isTouchProtected = value;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleTapToActivate(): void {\r\n\t\tsuper.handleTapToActivate();\r\n\t\tif (this.cursor) {\r\n\t\t\tthis.cursor.interactions.isTouchProtected = false;\r\n\t\t\tthis.plotContainer.interactions.isTouchProtected = false;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleTapToActivateDeactivation(): void {\r\n\t\tsuper.handleTapToActivateDeactivation();\r\n\t\tif (this.cursor) {\r\n\t\t\tthis.cursor.interactions.isTouchProtected = true;\r\n\t\t\tthis.plotContainer.interactions.isTouchProtected = true;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChart\"] = XYChart;\r\n\r\n/**\r\n * Add default responsive rules\r\n */\r\n\r\n/**\r\n * Remove horizontal scrollbar on narrow charts.\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.maybeXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof XYChart && target.scrollbarX) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tlet sbstate = target.scrollbarX.states.create(stateId);\r\n\t\t\tsbstate.properties.disabled = true;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n\r\n/**\r\n * Remove vertical scrollbar on short charts.\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.maybeXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof XYChart && target.scrollbarY) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tlet sbstate = target.scrollbarY.states.create(stateId);\r\n\t\t\tsbstate.properties.disabled = true;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n","/**\r\n * Line series segment module.\r\n * @todo Add description about what this is\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, visualProperties } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { LineSeries } from \"./LineSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[LineSeriesSegment]].\r\n */\r\nexport interface ILineSeriesSegmentProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[LineSeriesSegment]].\r\n */\r\nexport interface ILineSeriesSegmentEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[LineSeriesSegment]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ILineSeriesSegmentAdapters extends IContainerAdapters, ILineSeriesSegmentProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Represents a line series segment.\r\n *\r\n * A line segment can be used to apply different properties to a part of the\r\n * line series, between two data points.\r\n *\r\n * @see {@link ILineSeriesSegmentEvents} for a list of available events\r\n * @see {@link ILineSeriesSegmentAdapters} for a list of available Adapters\r\n * @todo Example\r\n */\r\nexport class LineSeriesSegment extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ILineSeriesSegmentProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ILineSeriesSegmentAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ILineSeriesSegmentEvents;\r\n\r\n\t/**\r\n\t * Segment's line element.\r\n\t */\r\n\tpublic strokeSprite: Sprite;\r\n\r\n\t/**\r\n\t * Segment's fill element.\r\n\t */\r\n\tpublic fillSprite: Sprite;\r\n\r\n\tpublic series: LineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"LineSeriesSegment\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.interactionsEnabled = false;\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\t// Create fill element\r\n\t\tlet fillSprite = this.createChild(Sprite);\r\n\t\tthis.fillSprite = fillSprite;\r\n\t\tfillSprite.shouldClone = false;\r\n\t\tfillSprite.setElement(this.paper.add(\"path\"));\r\n\t\tfillSprite.isMeasured = false;\r\n\t\tthis._disposers.push(fillSprite);\r\n\r\n\r\n\t\t// Create line element\r\n\t\tlet strokeSprite = this.createChild(Sprite);\r\n\t\tthis.strokeSprite = strokeSprite;\r\n\t\tstrokeSprite.shouldClone = false;\r\n\t\tstrokeSprite.fill = color();\r\n\t\tstrokeSprite.setElement(this.paper.add(\"path\"));\r\n\t\tstrokeSprite.isMeasured = false;\r\n\t\tthis._disposers.push(strokeSprite);\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the series segment.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param points       Points to connect\r\n\t * @param closePoints  ?\r\n\t * @param smoothnessX  Horizontal bezier setting (?)\r\n\t * @param smoothnessY  Vertical bezier setting (?)\r\n\t */\r\n\tpublic drawSegment(points: IPoint[], closePoints: IPoint[], smoothnessX: number, smoothnessY: number): void {\r\n\t\tif (!this.disabled) {\r\n\t\t\tif (points.length > 0 && closePoints.length > 0 && $type.isNumber(points[0].x) && $type.isNumber(points[0].y)) {\r\n\t\t\t\t// first moveTo helps to avoid Chrome straight line in the mask bug.\r\n\t\t\t\tlet path: string = $path.moveTo({ x: points[0].x - 0.2, y: points[0].y - 0.2 }) + $path.moveTo(points[0])\r\n\r\n\t\t\t\tlet series = this.series;\r\n\r\n\t\t\t\tif (series.smoothing == \"bezier\") {\r\n\t\t\t\t\tpath += new $smoothing.Tension(smoothnessX, smoothnessY).smooth(points);\r\n\t\t\t\t}\r\n\t\t\t\telse if (series.smoothing == \"monotoneX\") {\r\n\t\t\t\t\tpath += new $smoothing.MonotoneX({ closed: false }).smooth(points);\r\n\t\t\t\t}\r\n\t\t\t\telse if (series.smoothing == \"monotoneY\") {\r\n\t\t\t\t\tpath += new $smoothing.MonotoneY({ closed: false }).smooth(points);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.strokeOpacity == 0 || this.strokeSprite.strokeOpacity == 0) {\r\n\t\t\t\t\t// like this and not if != 0, otherwise ranges stroke won't be drawn.\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.strokeSprite.path = path;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n\t\t\t\t\tif ($type.isNumber(closePoints[0].x) && $type.isNumber(closePoints[0].y)) {\r\n\t\t\t\t\t\tpath += $path.lineTo(closePoints[0]);\r\n\r\n\t\t\t\t\t\tif (series.smoothing == \"bezier\") {\r\n\t\t\t\t\t\t\tpath += new $smoothing.Tension(smoothnessX, smoothnessY).smooth(closePoints);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (series.smoothing == \"monotoneX\") {\r\n\t\t\t\t\t\t\tpath += new $smoothing.MonotoneX({ closed: false }).smooth(closePoints);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (series.smoothing == \"monotoneY\") {\r\n\t\t\t\t\t\t\tpath += new $smoothing.MonotoneY({ closed: false }).smooth(closePoints);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tpath += $path.lineTo(points[0]);\r\n\t\t\t\t\t\tpath += $path.closePath();\r\n\r\n\t\t\t\t\t\tthis.fillSprite.path = path;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.fillSprite.path = \"\";\r\n\t\t\t\tthis.strokeSprite.path = \"\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Copies properties from a [[Sprite]] to both line and fill elements.\r\n\t *\r\n\t * @param source Source [[Sprite]] to copy properties from\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\r\n\t\tlet lineElement = this.strokeSprite;\r\n\t\t$object.copyProperties(source, lineElement.properties, visualProperties);\r\n\t\tlineElement.events.copyFrom(source.strokeSprite.events);\r\n\t\tlineElement.fillOpacity = 0;\r\n\r\n\t\tlet fillElement = this.fillSprite;\r\n\t\t$object.copyProperties(source, fillElement.properties, visualProperties);\r\n\t\tfillElement.events.copyFrom(source.fillSprite.events);\r\n\t\tfillElement.strokeOpacity = 0;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LineSeriesSegment\"] = LineSeriesSegment;\r\n","/**\r\n * DurationAxis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ValueAxis, ValueAxisDataItem, IValueAxisProperties, IValueAxisDataFields, IValueAxisAdapters, IValueAxisEvents } from \"./ValueAxis\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { TimeUnit } from \"../../core/defs/TimeUnit\";\r\nimport { IMinMaxStep } from \"./ValueAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data item for [[DurationAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class DurationAxisDataItem extends ValueAxisDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: DurationAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DurationAxisDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[DurationAxis]].\r\n */\r\nexport interface IDurationAxisDataFields extends IValueAxisDataFields { }\r\n\r\n/**\r\n * Defines properties for [[DurationAxis]].\r\n */\r\nexport interface IDurationAxisProperties extends IValueAxisProperties { }\r\n\r\n/**\r\n * Defines events for [[DurationAxis]].\r\n */\r\nexport interface IDurationAxisEvents extends IValueAxisEvents { }\r\n\r\n/**\r\n * Defines adapters for [[DurationAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IDurationAxisAdapters extends IValueAxisAdapters, IDurationAxisProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create an axis that shows time durations.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.DurationAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Time\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.DurationAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Time\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"DurationAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Time\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} for mor information about duration formatters.\r\n * @see {@link IDurationAxisEvents} for a list of available Events\r\n * @see {@link IDurationAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class DurationAxis<T extends AxisRenderer = AxisRenderer> extends ValueAxis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t */\r\n\tpublic _dataFields: IDurationAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IDurationAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IDurationAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IDurationAxisEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t */\r\n\tpublic _dataItem: DurationAxisDataItem;\r\n\r\n\t/**\r\n\t * A base unit (granularity) of data.\r\n\t *\r\n\t * Used to indicate what are the base units of your data.\r\n\t */\r\n\tprotected _baseUnit: TimeUnit = \"second\";\r\n\r\n\t/**\r\n\t * A special duration format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t */\r\n\tprotected _tooltipDurationFormat: string;\r\n\r\n\t/**\r\n\t * Axis date format chosen dynamically based on min/max and baseUnit.\r\n\t *\r\n\t * @readonly\r\n\t */\r\n\tpublic axisDurationFormat: string;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"DurationAxis\";\r\n\r\n\t\tthis.setPropertyValue(\"maxZoomFactor\", 1000000);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Formats the value according to axis' own [[DurationFormatter]].\r\n\t *\r\n\t * @param value  Source value\r\n\t * @return Formatted value\r\n\t */\r\n\tpublic formatLabel(value: number, format?: string): string {\r\n\t\treturn this.durationFormatter.format(value, format || this.axisDurationFormat);\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts actual min and max scale values so that the axis starts and ends\r\n\t * at \"nice\" values, unless `strictMinMax` is set.\r\n\t *\r\n\t * The `difference` can be something else than `max - min`, because of the\r\n\t * axis breaks.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param min        [description]\r\n\t * @param max        [description]\r\n\t * @param difference [description]\r\n\t * @param gridCount  [description]\r\n\t * @param strictMode [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic adjustMinMax(min: number, max: number, difference: number, gridCount: number, strictMode?: boolean): IMinMaxStep {\r\n\r\n\t\tlet minMaxStep: IMinMaxStep;\r\n\r\n\t\tlet timeUnit = this.baseUnit;\r\n\t\t// we don't allow to go to smaller units, setting so to avoid invalidation\r\n\t\tthis.setPropertyValue(\"maxPrecision\", 0);\r\n\r\n\t\tif (timeUnit == \"millisecond\" || timeUnit == \"second\" || timeUnit == \"minute\" || timeUnit == \"hour\") {\r\n\t\t\t// will fail if 0\r\n\t\t\tif (gridCount <= 1) {\r\n\t\t\t\tgridCount = 1;\r\n\t\t\t}\r\n\r\n\t\t\tgridCount = Math.round(gridCount);\r\n\r\n\t\t\tlet initialMin: number = min;\r\n\t\t\tlet initialMax: number = max;\r\n\r\n\t\t\t// in case min and max is the same, use max\r\n\t\t\tif (difference === 0) {\r\n\t\t\t\tdifference = Math.abs(max);\r\n\t\t\t}\r\n\r\n\t\t\tlet step = difference / gridCount;\r\n\r\n\t\t\tlet divisors = [60, 30, 20, 15, 10, 2, 1];\r\n\t\t\tlet realDivisor = 1;\r\n\r\n\t\t\tif (timeUnit == \"hour\") {\r\n\t\t\t\tdivisors = [24, 12, 6, 4, 2, 1];\r\n\t\t\t}\r\n\r\n\t\t\tfor (let divisor of divisors) {\r\n\t\t\t\tif (difference / divisor > gridCount) {\r\n\t\t\t\t\trealDivisor = divisor;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlet count = Math.ceil(((max - min) / realDivisor) / gridCount);\r\n\r\n\t\t\tlet exponent: number = Math.log(Math.abs(count)) * Math.LOG10E;\r\n\t\t\tlet power = Math.pow(10, Math.floor(exponent)) / 10;\r\n\t\t\tlet reducedCount = count / power;\r\n\r\n\t\t\t// find closest to divisor\r\n\t\t\tlet closest = $math.closest(divisors, reducedCount);\r\n\t\t\tcount = closest * power;\r\n\r\n\t\t\tstep = realDivisor * count;\r\n\r\n\t\t\t// TODO can this be removed ?\r\n\t\t\tthis.durationFormatter.getValueUnit(step, this.baseUnit);\r\n\r\n\t\t\tmin = Math.floor(min / step) * step;\r\n\t\t\tmax = Math.ceil(max / step) * step;\r\n\r\n\t\t\tif (strictMode) {\r\n\t\t\t\tmin -= step;\r\n\t\t\t\tif (min < 0 && initialMin >= 0) {\r\n\t\t\t\t\tmin = 0;\r\n\t\t\t\t}\r\n\t\t\t\tmax += step;\r\n\r\n\t\t\t\tif (max > 0 && initialMax <= 0) {\r\n\t\t\t\t\tmax = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tminMaxStep = { min: min, max: max, step: step };\r\n\t\t}\r\n\t\telse {\r\n\t\t\tminMaxStep = super.adjustMinMax(min, max, difference, gridCount, strictMode);\r\n\t\t}\r\n\r\n\t\t// choose duration formatter based on step\r\n\t\tthis.axisDurationFormat = this.durationFormatter.getFormat(minMaxStep.step, minMaxStep.max, this.baseUnit);\r\n\r\n\t\treturn minMaxStep;\r\n\t}\r\n\r\n\t/**\r\n\t * A special duration format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} for mor information.\r\n\t * @param value  Duration format for axis labels\r\n\t */\r\n\tpublic set tooltipDurationFormat(value: string) {\r\n\t\tthis._tooltipDurationFormat = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Duration format for axis labels\r\n\t */\r\n\tpublic get tooltipDurationFormat(): string {\r\n\t\treturn this._tooltipDurationFormat;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a axis tooltip, based on specific position within\r\n\t * axis.\r\n\t *\r\n\t * The label will be formatted as per [[NumberFormatter]] set for the whole\r\n\t * chart, or explicitly for this Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Position (px)\r\n\t * @return Label (numeric value)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet value: number = $math.round(this.positionToValue(position), this._stepDecimalPlaces);\r\n\t\tlet valueStr = this.formatLabel(value, this.tooltipDurationFormat)\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn valueStr;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"getTooltipText\", valueStr);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A base unit (granularity) of data.\r\n\t *\r\n\t * Used to indicate what are the base units of your data.\r\n\t *\r\n\t * Available options: \"millisecond\", \"second\" (default), \"minute\", \"hour\",\r\n\t * \"day\", \"week\", \"month\", \"year\".\r\n\t *\r\n\t * @default \"second\"\r\n\t * @param timeUnit\r\n\t */\r\n\tpublic set baseUnit(timeUnit: TimeUnit) {\r\n\t\tif (this._baseUnit != timeUnit) {\r\n\t\t\tthis._baseUnit = timeUnit;\r\n\t\t\tthis.durationFormatter.baseUnit = timeUnit;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Base unit\r\n\t */\r\n\tpublic get baseUnit(): TimeUnit {\r\n\t\treturn this._baseUnit;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties and related data from a different instance of Axis.\r\n\t *\r\n\t * @param source Source Axis\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.baseUnit = source.baseUnit;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DurationAxis\"] = DurationAxis;\r\nregistry.registeredClasses[\"DurationAxisDataItem\"] = DurationAxisDataItem;\r\n","/**\r\n * Line series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYSeries, XYSeriesDataItem, IXYSeriesProperties, IXYSeriesDataFields, IXYSeriesAdapters, IXYSeriesEvents } from \"./XYSeries\";\r\nimport { Sprite, visualProperties } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { LineSeriesSegment } from \"./LineSeriesSegment\";\r\nimport { Axis, AxisDataItem } from \"../axes/Axis\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { DurationAxis } from \"../axes/DurationAxis\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { Rectangle } from \"../../core/elements/Rectangle\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport { LegendDataItem } from \"../Legend\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[LineSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class LineSeriesDataItem extends XYSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: LineSeries;\r\n\r\n\t/**\r\n\t * Point of line series data item\r\n\t */\r\n\tpublic point: IPoint;\r\n\r\n\t/**\r\n\t * A reference to a segment object, used for getting proper colors for tooltips\r\n\t */\r\n\tpublic segment: LineSeriesSegment;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"LineSeriesDataItem\";\r\n\t}\r\n\r\n\t// @todo: minimums/maximums\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesDataFields extends IXYSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesProperties extends IXYSeriesProperties {\r\n\r\n\t/**\r\n\t * Horizontal tension setting of the line (0-1).\r\n\t *\r\n\t * Used for smoothed lines.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\ttensionX?: number;\r\n\r\n\t/**\r\n\t * Vertical tension setting of the line (0-1).\r\n\t *\r\n\t * Used for smoothed lines.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\ttensionY?: number;\r\n\r\n\t/**\r\n\t * Connect the lines over empty data points?\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tconnect?: boolean;\r\n\r\n\t/**\r\n\t * If `connect = false` and distance between two data points is bigger\r\n\t * than `baseInterval * autoGapCount`, a line will break automatically.\r\n\t *\r\n\t * @default 1.1\r\n\t */\r\n\tautoGapCount?: number;\r\n\r\n\t/**\r\n\t * Smoothing algorythm to use for the line.\r\n\t *\r\n\t * @since 4.10.0\r\n\t */\r\n\tsmoothing: \"bezier\" | \"monotoneX\" | \"monotoneY\";\r\n}\r\n\r\n/**\r\n * Defines events for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesEvents extends IXYSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[LineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ILineSeriesAdapters extends IXYSeriesAdapters, ILineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a line graph.\r\n *\r\n * @see {@link ILineSeriesEvents} for a list of available Events\r\n * @see {@link ILineSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class LineSeries extends XYSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: ILineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ILineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ILineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ILineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: LineSeriesDataItem;\r\n\r\n\t/**\r\n\t * A list of line series segments.\r\n\t *\r\n\t * Segments are used in two cases:\r\n\t *\r\n\t * * When we want to change the appearance of a part of the line series;\r\n\t * * When we have an axis range.\r\n\t */\r\n\tpublic segments: ListTemplate<this[\"_segment\"]>;\r\n\r\n\t/**\r\n\t * Defines type for segment.\r\n\t */\r\n\tpublic _segment: LineSeriesSegment;\r\n\r\n\t/**\r\n\t * A container for segment elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic segmentsContainer: Container;\r\n\r\n\t/**\r\n\t * Minimum distance in pixels between two adjacent points.\r\n\t *\r\n\t * If the distance is less than this setting, a point is skipped.\r\n\t *\r\n\t * This allows acceptable performance with huge amounts of data points.\r\n\t *\r\n\t * @default 0.5\r\n\t */\r\n\tpublic minDistance: number = 0.5;\r\n\r\n\t/**\r\n\t * Iterator for segments.\r\n\t */\r\n\tprotected _segmentsIterator: $iter.ListIterator<this[\"_segment\"]>;\r\n\r\n\tprotected _adjustedStartIndex: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.segments = new ListTemplate<LineSeriesSegment>(this.createSegment());\r\n\t\tthis.segments.template.applyOnClones = true;\r\n\r\n\t\tthis._disposers.push(new ListDisposer(this.segments));\r\n\t\tthis._disposers.push(this.segments.template);\r\n\r\n\t\tthis._segmentsIterator = new $iter.ListIterator<LineSeriesSegment>(this.segments, () => this.segments.create());\r\n\t\tthis._segmentsIterator.createNewItems = true;\r\n\r\n\t\tthis.className = \"LineSeries\";\r\n\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.fillOpacity = 0;\r\n\r\n\t\tthis.connect = true;\r\n\r\n\t\tthis.tensionX = 1;\r\n\t\tthis.tensionY = 1;\r\n\r\n\t\tthis.autoGapCount = 1.1;\r\n\r\n\t\tthis.smoothing = \"bezier\";\r\n\r\n\r\n\t\tthis.segmentsContainer = this.mainContainer.createChild(Container);\r\n\t\tthis.segmentsContainer.isMeasured = false;\r\n\r\n\t\t// line series might have multiple segments and it has a separate sprite for fill and stroke for each segment. So we need to observe all the changes on series and set them on the segments\r\n\t\t// todo: we need list here, otherwise everything will be redrawn event on change of properties like tooltipX or similar.\r\n\t\t// this.addEventListener(SpriteEvent.PROPERTY_CHANGED, this.validateDataElements, false, this);\r\n\r\n\t\tthis.bulletsContainer.toFront();\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Line Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createSegment(): this[\"_segment\"] {\r\n\t\treturn new LineSeriesSegment();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new LineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Inits data item's working values.\r\n\t *\r\n\t * @param dataItem  Data item\r\n\t * @param index     Data item's index\r\n\t */\r\n\r\n\tprotected setInitialWorkingValues(dataItem: this[\"_dataItem\"]): void {\r\n\t\t// this makes data items animate when added\r\n\r\n\t\tlet yAxis: Axis = this._yAxis.get();\r\n\t\tlet xAxis: Axis = this._xAxis.get();\r\n\r\n\t\tif (this.appeared && this.visible) {\r\n\r\n\t\t\tlet previousDataItem: XYSeriesDataItem = this.dataItems.getIndex(dataItem.index - 1);\r\n\r\n\t\t\tdataItem.component = this; // as these values are set before, we don't know component yet\r\n\r\n\t\t\tif (this.baseAxis == xAxis) {\r\n\t\t\t\tif (yAxis instanceof ValueAxis) {\r\n\t\t\t\t\tlet initialY: number = yAxis.minZoomed;\r\n\t\t\t\t\tif (previousDataItem) {\r\n\t\t\t\t\t\tinitialY = previousDataItem.values[\"valueY\"].workingValue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// this makes line animate from previous point to newly added point\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueY\", initialY, 0);\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueY\", dataItem.values.valueY.value);\r\n\r\n\t\t\t\t\tif (xAxis instanceof DateAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateX\", dataItem.locations.dateX - 1, 0); // instantly move it to previous\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateX\", dataItem.locations.dateX); // animate to it's location\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (xAxis instanceof DurationAxis) {\r\n\t\t\t\t\t\tif (previousDataItem) {\r\n\t\t\t\t\t\t\tlet value = dataItem.valueX;\r\n\t\t\t\t\t\t\tdataItem.setWorkingValue(\"valueX\", previousDataItem.valueX, 0); // instantly move it to previous\r\n\t\t\t\t\t\t\tdataItem.setWorkingValue(\"valueX\", value); // animate to new value\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == yAxis) {\r\n\t\t\t\tif (xAxis instanceof ValueAxis) {\r\n\t\t\t\t\tlet initialX: number = xAxis.minZoomed;\r\n\t\t\t\t\tif (previousDataItem) {\r\n\t\t\t\t\t\tinitialX = previousDataItem.values[\"valueX\"].workingValue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueX\", initialX, 0);\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueX\", dataItem.values.valueX.value);\r\n\r\n\t\t\t\t\tif (yAxis instanceof DateAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateY\", dataItem.locations.dateX - 1, 0); // instantly move it to previous\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateY\", dataItem.locations.dateY); // animate to it's location\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (yAxis instanceof DurationAxis) {\r\n\t\t\t\t\t\tif (previousDataItem) {\r\n\t\t\t\t\t\t\tlet value = dataItem.valueY;\r\n\t\t\t\t\t\t\tdataItem.setWorkingValue(\"valueY\", previousDataItem.valueY, 0); // instantly move it to previous\r\n\t\t\t\t\t\t\tdataItem.setWorkingValue(\"valueY\", value); // animate to new value\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this.baseAxis == xAxis) {\r\n\t\t\t\tif (yAxis instanceof ValueAxis) {\r\n\t\t\t\t\tif (xAxis instanceof DateAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateX\", dataItem.locations.dateX);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (xAxis instanceof CategoryAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"categoryX\", dataItem.locations.categoryX);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == yAxis) {\r\n\t\t\t\tif (xAxis instanceof ValueAxis) {\r\n\t\t\t\t\tif (yAxis instanceof DateAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateY\", dataItem.locations.dateY);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (yAxis instanceof CategoryAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"categoryY\", dataItem.locations.categoryY);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Updates corresponding legend data item with current values.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic updateLegendValue(dataItem?: this[\"_dataItem\"], notRange?: boolean) {\r\n\t\tsuper.updateLegendValue(dataItem, notRange);\r\n\t\t//This is hack to save some methos, used to set tooltip color source only\r\n\t\tif (dataItem && dataItem.segment) {\r\n\t\t\tthis.tooltipColorSource = dataItem.segment;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tif (this.xAxis && this.yAxis) {\r\n\t\t\tthis._segmentsIterator.reset();\r\n\r\n\t\t\tthis.openSegmentWrapper(this._adjustedStartIndex);\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (range) => {\r\n\t\t\t\tthis.openSegmentWrapper(this._adjustedStartIndex, range);\r\n\t\t\t});\r\n\r\n\t\t\t$iter.each(this._segmentsIterator.iterator(), (segment) => {\r\n\t\t\t\tsegment.__disabled = true;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [sliceData description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected sliceData(): void {\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\t// we need extra one item to both sides with values for line series, otherwise the line will not continue out of bounds of the chart while scrolling\r\n\t\t// find first to the left\r\n\t\t// TODO use iterator instead\r\n\t\tfor (let i = this.startIndex - 1; i >= 0; i--) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tif (dataItem && dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tstartIndex = i;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis._adjustedStartIndex = this.findAdjustedIndex(startIndex, [\"stroke\", \"strokeWidth\", \"strokeDasharray\", \"strokeOpacity\", \"fill\", \"fillOpacity\", \"opacity\"]);\r\n\r\n\t\t// find first to the right\r\n\t\t// TODO use iterator instead\r\n\t\tfor (let i = this.endIndex, len = this.dataItems.length; i < len; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tif (dataItem && dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tendIndex = i + 1;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._workingStartIndex = startIndex;\r\n\t\tthis._workingEndIndex = endIndex;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected findAdjustedIndex(adjustedIndex: number, properties: string[]): number {\r\n\t\tlet propertyFields: any = this.propertyFields;\r\n\t\tlet startIndex = adjustedIndex;\r\n\r\n\t\t$array.each(properties, (property) => {\r\n\t\t\tif ($type.hasValue(propertyFields[property])) {\r\n\t\t\t\tfor (let i = startIndex; i >= 0; i--) {\r\n\t\t\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\t\t\tif (dataItem) {\r\n\t\t\t\t\t\tif ($type.hasValue(dataItem.properties[property])) {\r\n\t\t\t\t\t\t\tif (adjustedIndex > i) {\r\n\t\t\t\t\t\t\t\tadjustedIndex = i;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn adjustedIndex;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Wraps openSegment call with iterative solution to prevent stack overflow\r\n\t *\r\n\t * @param openIndex  Index\r\n\t * @param axisRange  Range\r\n\t */\r\n\tprotected openSegmentWrapper(openIndex: number, axisRange?: AxisDataItem): void {\r\n\t\tlet params = {\r\n\t\t\t\"index\": openIndex,\r\n\t\t\t\"axisRange\": axisRange\r\n\t\t};\r\n\t\tdo {\r\n\t\t\tparams = this.openSegment(params.index, params.axisRange);\r\n\t\t} while (params)\r\n\t}\r\n\r\n\r\n\tprotected getSegment(): LineSeriesSegment {\r\n\t\tlet segment = this._segmentsIterator.getFirst();\r\n\t\tsegment.series = this;\r\n\t\tif (segment.isDisposed()) {\r\n\t\t\tthis.segments.removeValue(segment);\r\n\t\t\treturn this.getSegment();\r\n\t\t}\r\n\t\treturn segment;\r\n\t}\r\n\r\n\t/**\r\n\t * [openSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param openIndex  [description]\r\n\t * @param axisRange  [description]\r\n\t */\r\n\tprotected openSegment(openIndex: number, axisRange?: AxisDataItem): { \"index\": number, \"axisRange\": AxisDataItem } {\r\n\t\tlet addToClose = false;\r\n\t\tlet points: IPoint[] = [];\r\n\t\topenIndex = Math.min(openIndex, this.dataItems.length);\r\n\t\tlet endIndex: number = Math.min(this._workingEndIndex, this.dataItems.length);\r\n\t\tthis._workingEndIndex = Math.min(this._workingEndIndex, this.dataItems.length);\r\n\r\n\t\tlet closeIndex: number;\r\n\t\tlet propertiesChanged: boolean = false;\r\n\r\n\t\tlet segment: LineSeriesSegment = this.getSegment();\r\n\t\tsegment.strokeDasharray = undefined;\r\n\t\tsegment.__disabled = false;\r\n\r\n\t\tif (axisRange) {\r\n\t\t\tsegment.parent = axisRange.contents;\r\n\t\t\t$object.copyProperties(axisRange.contents, segment, visualProperties);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t$object.copyProperties(this, segment, visualProperties);\r\n\t\t\tsegment.filters.clear();\r\n\t\t\tsegment.parent = this.segmentsContainer;\r\n\t\t}\r\n\r\n\t\tthis.group.node.removeAttribute(\"fill\");\r\n\r\n\t\tlet connect: boolean = this.connect;\r\n\t\tlet valuesFound: boolean = false; // some flag to avoid multiple closes if no values found\r\n\r\n\t\tfor (let i: number = openIndex; i < endIndex; i++) {\r\n\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\t\t\tdataItem.segment = segment;\r\n\r\n\t\t\tif (dataItem.hasProperties) {\r\n\t\t\t\t// if this is first item of segment\r\n\t\t\t\tif (i == openIndex) {\r\n\t\t\t\t\tthis.updateSegmentProperties(dataItem.properties, segment);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// this time we only need to know if properties changed, so we don't pass segment\r\n\t\t\t\t\tpropertiesChanged = this.updateSegmentProperties(dataItem.properties, segment, true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tthis.addPoints(points, dataItem, this.xField, this.yField);\r\n\t\t\t\tvaluesFound = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// if no values in first data item, go to next\r\n\t\t\t\tif (i == openIndex) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// stop cycle\r\n\t\t\t\t\tif (!connect && valuesFound) {\r\n\t\t\t\t\t\tcloseIndex = i;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tcloseIndex = i;\r\n\r\n\t\t\tif (this.baseAxis instanceof DateAxis) {\r\n\t\t\t\tlet next = this.dataItems.getIndex(i + 1)\r\n\t\t\t\tif (next && this.baseAxis.makeGap(next, dataItem)) {\r\n\t\t\t\t\taddToClose = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (propertiesChanged) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.closeSegment(segment, points, openIndex, closeIndex, axisRange, addToClose);\r\n\t}\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param points    [description]\r\n\t * @param dataItem  [description]\r\n\t * @param xField    [description]\r\n\t * @param yField    [description]\r\n\t * @param backwards [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean) {\r\n\t\tlet point = this.getPoint(dataItem, xField, yField, dataItem.workingLocations[xField], dataItem.workingLocations[yField]);\r\n\t\tif (!backwards) {\r\n\t\t\tdataItem.point = point;\r\n\t\t}\r\n\t\tpoints.push(point);\r\n\t}\r\n\r\n\t/**\r\n\t * [closeSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param segment    [description]\r\n\t * @param points     [description]\r\n\t * @param openIndex  [description]\r\n\t * @param closeIndex [description]\r\n\t * @param axisRange  [description]\r\n\t */\r\n\tprotected closeSegment(segment: LineSeriesSegment, points: IPoint[], openIndex: number, closeIndex: number, axisRange?: AxisDataItem, add?: boolean) {\r\n\t\tlet closePoints: IPoint[] = [];\r\n\r\n\t\tif (this.dataFields[<keyof this[\"_dataFields\"]>this._xOpenField] ||\r\n\t\t\tthis.dataFields[<keyof this[\"_dataFields\"]>this._yOpenField] ||\r\n\t\t\tthis.stacked) {\r\n\t\t\tfor (let i: number = closeIndex; i >= openIndex; i--) {\r\n\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\t\t\t\tif (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) { // not sure, this means that open point will only be added if value is also set for this point, but maybe it's ok.\r\n\t\t\t\t\tthis.addPoints(closePoints, dataItem, this.xOpenField, this.yOpenField, true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet baseAxis: Axis = this.baseAxis;\r\n\t\t\tlet count: number = points.length;\r\n\t\t\tlet xAxis: Axis = this.xAxis;\r\n\t\t\tlet yAxis: Axis = this.yAxis;\r\n\t\t\tif (count > 0) {\r\n\t\t\t\tif (baseAxis == xAxis) {\r\n\t\t\t\t\tclosePoints.push({ x: points[count - 1].x, y: yAxis.basePoint.y }); // last x\r\n\t\t\t\t\tclosePoints.push({ x: points[0].x, y: yAxis.basePoint.y }); // first x\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tclosePoints.push({ x: xAxis.basePoint.x, y: points[count - 1].y }); // last y\r\n\t\t\t\t\tclosePoints.push({ x: xAxis.basePoint.x, y: points[0].y }); // first y\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.drawSegment(segment, points, closePoints);\r\n\r\n\t\tif (add) {\r\n\t\t\tcloseIndex++;\r\n\t\t}\r\n\r\n\t\tif (closeIndex < this._workingEndIndex - 1) {\r\n\t\t\treturn { \"index\": closeIndex, \"axisRange\": axisRange };\r\n\t\t} else {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the line segment.\r\n\t *\r\n\t * @param segment     Segment\r\n\t * @param points      Segment points\r\n\t * @param closePoints Segment close points\r\n\t */\r\n\tprotected drawSegment(segment: LineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tsegment.drawSegment(points, closePoints, this.tensionX, this.tensionY);\r\n\t}\r\n\r\n\t/**\r\n\t * Segement will get its colors from `this.dataItem`, as thats how\r\n\t * `getPropertyValue()` method works.\r\n\t *\r\n\t * We pass `lineSeriesDataItem.properties` as item here each time when a flag\r\n\t * `hasProperties` is set to `true` on data item (this means it can contain\r\n\t * some properties set).\r\n\t *\r\n\t * @param itemProperties  Item properties\r\n\t * @param segment         Segment\r\n\t * @return Properties changed?\r\n\t */\r\n\tprotected updateSegmentProperties(itemProperties: { [index: string]: any }, segment: LineSeriesSegment, checkOnly?: boolean): boolean {\r\n\t\tlet changed: boolean = false;\r\n\r\n\t\t$object.each(itemProperties, (propertyName, value) => {\r\n\t\t\t// some value must be defined\r\n\t\t\tif ($type.hasValue(value)) {\r\n\t\t\t\tlet currentValue = (<any>segment)[propertyName];\r\n\t\t\t\tlet currentValueStr: string;\r\n\t\t\t\t// current value can be Color, number, anything. So we check if it has toString, otherwise just do String().\r\n\t\t\t\t// toString() will return hex if it's color. The only problem is that it will return lowercased hex and if we have uppercase in data, it will think that it changed\r\n\t\t\t\tif (currentValue) {\r\n\t\t\t\t\tif (currentValue.toString) {\r\n\t\t\t\t\t\tcurrentValueStr = currentValue.toString();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tcurrentValueStr = currentValue; // not doing String(currentValue) as this will make all Objects the same\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t\tlet valueStr: string;\r\n\r\n\t\t\t\tif (value) {\r\n\t\t\t\t\tif (value.toString) {\r\n\t\t\t\t\t\tvalueStr = value.toString();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tvalueStr = value;  // not doing String(currentValue) as this will make all Objects the same\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (currentValue == value || (currentValueStr != undefined && valueStr != undefined && currentValueStr == valueStr)) {\r\n\t\t\t\t\t// void\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (!checkOnly) {\r\n\t\t\t\t\t\t(<any>segment)[propertyName] = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchanged = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn changed;\r\n\t}\r\n\r\n\t/**\r\n\t * Connect the lines over empty data points?\r\n\t *\r\n\t * If set to `true` the line will connect two adjacent data points by a\r\n\t * straight line. Even if there are data points with missing values\r\n\t * in-between.\r\n\t *\r\n\t * If you set this to `false`, the line will break when there are missing\r\n\t * values.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/#Line_series_with_gaps} for more information about this feature\r\n\t * @default true\r\n\t * @param value  Connect?\r\n\t */\r\n\tpublic set connect(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"connect\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Connect?\r\n\t */\r\n\tpublic get connect(): boolean {\r\n\t\treturn this.getPropertyValue(\"connect\");\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal tension setting of the line (0-1).\r\n\t *\r\n\t * Can be used to create smoothed lines. It works like this:\r\n\t *\r\n\t * Accepted values are in the range between 0 and 1. The biggest value (1)\r\n\t * will mean that the \"tension\" is very high, so the line is maximally\r\n\t * attracted to the points it connects, hence the straight line.\r\n\t *\r\n\t * Using smaller numbers will \"relax\" the tension, creating some curving.\r\n\t *\r\n\t * The smaller the tension setting, the more relaxed the line and the more\r\n\t * wide the curve.\r\n\t *\r\n\t * This setting is for horizontal tension, meaning the curve will bend in\r\n\t * such way that it never goes below or above connecting points. To enable\r\n\t * vertical bending as well, use `tensionY`.\r\n\t *\r\n\t * IMPORTANT: line smoothing works best when data items are placed at regular\r\n\t * intervals. For setups where data items are spaced erratically, enabling\r\n\t * smoothing might result in awkwardly looking lines.\r\n\t *\r\n\t * @default 1\r\n\t * @param value  Horizontal tension (0-1)\r\n\t */\r\n\tpublic set tensionX(value: number) {\r\n\t\tthis.setPropertyValue(\"tensionX\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Horizontal tension (0-1)\r\n\t */\r\n\tpublic get tensionX(): number {\r\n\t\treturn this.getPropertyValue(\"tensionX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Can be used to create smoothed lines. It works like this:\r\n\t *\r\n\t * Accepted values are in the range between 0 and 1. The biggest value (1)\r\n\t * will mean that the \"tension\" is very high, so the line is maximally\r\n\t * attracted to the points it connects, hence the straight line.\r\n\t *\r\n\t * Using smaller numbers will \"relax\" the tension, creating some curving.\r\n\t *\r\n\t * The smaller the tension setting, the more relaxed the line and the more\r\n\t * wide the curve.\r\n\t *\r\n\t * This setting is for vertical tension, meaning the curve might bend in\r\n\t * such way that it will go below or above connected points.\r\n\t *\r\n\t * Combine this setting with `tensionX` to create beautifully looking\r\n\t * smoothed line series.\r\n\t *\r\n\t * @default 1\r\n\t * @param value  Vertical tension (0-1)\r\n\t */\r\n\tpublic set tensionY(value: number) {\r\n\t\tthis.setPropertyValue(\"tensionY\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Vertical tension (0-1)\r\n\t */\r\n\tpublic get tensionY(): number {\r\n\t\treturn this.getPropertyValue(\"tensionY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.disposeChildren();\r\n\r\n\t\tlet line: Line = marker.createChild(Line);\r\n\t\tline.shouldClone = false;\r\n\t\t//line.copyFrom(<any>this); coppies events which is not good\r\n\t\t$object.copyProperties(this, line, visualProperties);\r\n\r\n\t\tline.x2 = w;\r\n\t\tline.y = h / 2;\r\n\t\tline.y2 = 0.00001;\r\n\t\tline.visible = true;\r\n\r\n\t\tif (this.fillOpacity > 0) {\r\n\t\t\tlet fill: Rectangle = marker.createChild(Rectangle);\r\n\t\t\t//fill.copyFrom(<any>this); coppies events which is not good\r\n\t\t\t$object.copyProperties(this, fill, visualProperties);\r\n\t\t\tfill.width = w;\r\n\t\t\tfill.height = h;\r\n\t\t\tfill.y = 0;\r\n\t\t\tfill.strokeOpacity = 0;\r\n\t\t\tfill.visible = true;\r\n\r\n\t\t\tline.y = 0;\r\n\t\t}\r\n\r\n\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\tlegendDataItem.color = this.stroke;\r\n\t\tlegendDataItem.colorOrig = this.fill;\r\n\r\n\t\t$iter.eachContinue(this.bullets.iterator(), (bullet) => {\r\n\r\n\t\t\tif ((bullet instanceof Bullet) && !bullet.copyToLegendMarker) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tlet hasLabels: boolean = false;\r\n\r\n\t\t\tif (bullet instanceof Container) {\r\n\t\t\t\t// do not copy bullets with labels\r\n\r\n\t\t\t\t$iter.each(bullet.children.iterator(), (child) => {\r\n\t\t\t\t\tif (child instanceof Label) {\r\n\t\t\t\t\t\thasLabels = true;\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (!hasLabels) {\r\n\t\t\t\tlet clone: Sprite = <Sprite>bullet.clone();\r\n\t\t\t\tclone.parent = marker;\r\n\t\t\t\tclone.isMeasured = true;\r\n\t\t\t\tclone.tooltipText = undefined;\r\n\t\t\t\tclone.x = w / 2;\r\n\t\t\t\tif (this.fillOpacity > 0) {\r\n\t\t\t\t\tclone.y = 0;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tclone.y = h / 2;\r\n\t\t\t\t}\r\n\t\t\t\tclone.visible = true;\r\n\r\n\t\t\t\t// otherwise will not transit to color after hiding\r\n\t\t\t\tif (!$type.hasValue(clone.fill)) {\r\n\t\t\t\t\tclone.fill = this.fill;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!$type.hasValue(clone.stroke)) {\r\n\t\t\t\t\tclone.stroke = this.stroke;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tsuper.disposeData();\r\n\t\tthis.segments.clear();\r\n\t}\r\n\r\n\t/**\r\n\t * If `connect = false` and distance between two data points is bigger\r\n\t * than `baseInterval * autoGapCount`, a line will break automatically.\r\n\t *\r\n\t * @since 4.2.4\r\n\t * @param  value  Gap count\r\n\t */\r\n\tpublic set autoGapCount(value: number) {\r\n\t\tthis.setPropertyValue(\"autoGapCount\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Gap count\r\n\t */\r\n\tpublic get autoGapCount(): number {\r\n\t\treturn this.getPropertyValue(\"autoGapCount\");\r\n\t}\r\n\r\n\t/**\r\n\t * Smoothing algorithm to be used for lines.\r\n\t *\r\n\t * Available options: `\"bezier\"` (default), `\"monotoneX\"`, and `\"monotoneY\"`.\r\n\t *\r\n\t * Monotone options are best suited for data with irregular intervals. Use `\"monotoneX\"` for\r\n\t * horizontal lines, and `\"monotoneY\"` vertical ones.\r\n\t *\r\n\t * NOTE: Both \"monotone\" algorithms will ignore `tensionX` and `tensionY` settings.\r\n\t *\r\n\t * @since 4.10.0\r\n\t * @param  value  Smoothing algorithm\r\n\t */\r\n\tpublic set smoothing(value: \"bezier\" | \"monotoneX\" | \"monotoneY\") {\r\n\t\tthis.setPropertyValue(\"smoothing\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Smoothing algorithm\r\n\t */\r\n\tpublic get smoothing(): \"bezier\" | \"monotoneX\" | \"monotoneY\" {\r\n\t\treturn this.getPropertyValue(\"smoothing\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LineSeries\"] = LineSeries;\r\nregistry.registeredClasses[\"LineSeriesDataItem\"] = LineSeriesDataItem;\r\n","/**\r\n * Radar series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { LineSeries, LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesAdapters, ILineSeriesEvents } from \"./LineSeries\";\r\nimport { LineSeriesSegment } from \"./LineSeriesSegment\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n//import { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\n//import { Sprite } from \"../../core/Sprite\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarSeriesDataItem extends LineSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: RadarSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarSeriesDataItem\";\r\n\r\n\t\tthis.setLocation(\"dateX\", 0, 0);\r\n\t\tthis.setLocation(\"dateY\", 0, 0);\r\n\r\n\t\tthis.setLocation(\"categoryX\", 0, 0);\r\n\t\tthis.setLocation(\"categoryY\", 0, 0);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesDataFields extends ILineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesProperties extends ILineSeriesProperties {\r\n\r\n\t/**\r\n\t * Should the last and and first data points be connected, forming a complete\r\n\t * closed circle?\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tconnectEnds?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesEvents extends ILineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarSeriesAdapters extends ILineSeriesAdapters, IRadarSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a radar graph.\r\n *\r\n * @see {@link IRadarSeriesEvents} for a list of available Events\r\n * @see {@link IRadarSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class RadarSeries extends LineSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IRadarSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IRadarSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IRadarSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IRadarSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: RadarSeriesDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarSeries\";\r\n\t\tthis.connectEnds = true;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new RadarSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an [[IPoint]] coordinates of the specific Serie's data point.\r\n\t *\r\n\t * @param    dataItem   Data item\r\n\t * @param    xKey       Name of X data field\r\n\t * @param    yKey       Name of Y data field\r\n\t * @param    locationX  X location\r\n\t * @param    locationY  Y location\r\n\t * @param    stackKeyX  ?\r\n\t * @param    stackKeyY  ?\r\n\t * @returns             Coordinates\r\n\t */\r\n\tpublic getPoint(dataItem: RadarSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\t\tif (!stackKeyX) {\r\n\t\t\tstackKeyX = \"valueX\";\r\n\t\t}\r\n\t\tif (!stackKeyY) {\r\n\t\t\tstackKeyY = \"valueY\";\r\n\t\t}\r\n\r\n\t\tlet x: number = this.yAxis.getX(dataItem, yKey, locationY, stackKeyY);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY, stackKeyY);\r\n\r\n\t\tlet radius: number = $math.getDistance({ x: x, y: y });\r\n\r\n\t\t// hack to be able to determine angle later\r\n\t\tif (radius == 0) {\r\n\t\t\tradius = 0.00001;\r\n\t\t}\r\n\r\n\t\tlet angle: number = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX);\r\n\r\n\t\tlet startAngle = this.chart.startAngle;\r\n\t\tlet endAngle = this.chart.endAngle;\r\n\r\n\t\t//\t\tangle = $math.fitToRange(angle, startAngle, endAngle);\r\n\t\tif (angle < startAngle || angle > endAngle) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn { x: radius * $math.cos(angle), y: radius * $math.sin(angle) };\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param points    [description]\r\n\t * @param dataItem  [description]\r\n\t * @param xField    [description]\r\n\t * @param yField    [description]\r\n\t * @param backwards [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean): void {\r\n\t\tlet point = this.getPoint(dataItem, xField, yField, dataItem.locations[xField], dataItem.locations[yField]);\r\n\t\tif (point) {\r\n\t\t\tpoints.push(point);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to be used as a mask for the series.\r\n\t *\r\n\t * @return SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>this.yAxis.renderer;\r\n\t\treturn $path.arc(renderer.startAngle, renderer.endAngle - renderer.startAngle, renderer.pixelRadius, renderer.pixelInnerRadius);\r\n\t}\r\n\r\n\t/**\r\n\t * [drawSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param segment      [description]\r\n\t * @param points       [description]\r\n\t * @param closePoints  [description]\r\n\t */\r\n\tprotected drawSegment(segment: LineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tlet axis: Axis = this.yAxis;\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>axis.renderer;\r\n\r\n\t\tif (this.connectEnds && Math.abs(renderer.endAngle - renderer.startAngle) == 360) {\r\n\t\t\t// adds one point to the beginning of closePoints array, if needed\r\n\t\t\tif (this.dataFields[<keyof this[\"_dataFields\"]>this._xOpenField] ||\r\n\t\t\t\tthis.dataFields[<keyof this[\"_dataFields\"]>this._yOpenField] ||\r\n\t\t\t\tthis.stacked) {\r\n\t\t\t\tpoints.push(points[0]);\r\n\t\t\t\tif (closePoints.length > 0) {\r\n\t\t\t\t\tclosePoints.unshift(closePoints[closePoints.length - 1]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tsuper.drawSegment(segment, points, closePoints);\r\n\t}\r\n\r\n\t/**\r\n\t * Should the last and and first data points be connected, forming a complete\r\n\t * closed circle?\r\n\t *\r\n\t * @default true\r\n\t * @param value  Connect?\r\n\t */\r\n\tpublic set connectEnds(value: boolean) {\r\n\t\tthis.setPropertyValue(\"connectEnds\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Connect?\r\n\t */\r\n\tpublic get connectEnds(): boolean {\r\n\t\treturn this.getPropertyValue(\"connectEnds\");\r\n\t}\r\n\r\n\tprotected positionBulletReal(bullet:Sprite, positionX:number, positionY:number){\r\n\t\tlet xAxis = this.xAxis;\r\n\t\tlet yAxis = this.yAxis;\r\n\r\n\t\tif(positionX < xAxis.start || positionX > xAxis.end || positionY < yAxis.start || positionY > yAxis.end){\r\n\t\t\tbullet.visible = false;\r\n\t\t}\r\n\t\t\r\n\t\tbullet.moveTo(this.xAxis.renderer.positionToPoint(positionX, positionY));\t\t\r\n\t}\r\n\r\n\r\n\tprotected setXAxis(axis: Axis) {\r\n\t\tsuper.setXAxis(axis);\r\n\t\tthis.updateRendererRefs();\r\n\t}\r\n\r\n\tprotected setYAxis(axis: Axis) {\r\n\t\tsuper.setYAxis(axis);\r\n\t\tthis.updateRendererRefs();\r\n\t}\r\n\r\n\tprotected updateRendererRefs() {\r\n\t\tlet rendererX = <AxisRendererCircular>this.xAxis.renderer;\r\n\t\tlet rendererY = <AxisRendererRadial>this.yAxis.renderer;\r\n\r\n\t\trendererX.axisRendererY = rendererY;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarSeries\"] = RadarSeries;\r\nregistry.registeredClasses[\"RadarSeriesDataItem\"] = RadarSeriesDataItem;\r\n","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisFill, IAxisFillProperties, IAxisFillAdapters, IAxisFillEvents } from \"./AxisFill\";\r\nimport { Axis } from \"./Axis\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { AxisRendererCircular } from \"./AxisRendererCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisFillCircular]].\r\n */\r\nexport interface IAxisFillCircularProperties extends IAxisFillProperties {\r\n\r\n\t/**\r\n\t * Inner radius. Relative ir absolute.\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius. Relative or absolute.\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Corner radius for the fill. In pixels.\r\n\t */\r\n\tcornerRadius?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisFillCircular]].\r\n */\r\nexport interface IAxisFillCircularEvents extends IAxisFillEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisFillCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisFillCircularAdapters extends IAxisFillAdapters, IAxisFillCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Provides fill element functionality for circular Axes.\r\n *\r\n * @see {@link IAxisFillCircularEvents} for a list of available events\r\n * @see {@link IAxisFillCircularAdapters} for a list of available Adapters\r\n * @todo Needs description\r\n */\r\nexport class AxisFillCircular extends AxisFill {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisFillCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisFillCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisFillCircularEvents;\r\n\r\n\t/**\r\n\t * An SVG path, used to draw fill shape.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic fillPath: string;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Axis\r\n\t */\r\n\tconstructor(axis: Axis) {\r\n\t\tsuper(axis);\r\n\r\n\t\tthis.className = \"AxisFillCircular\";\r\n\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tif(this.__disabled || this.disabled){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer: AxisRendererCircular = <AxisRendererCircular>this.axis.renderer;\r\n\t\t\tthis.fillPath = renderer.getPositionRangePath(this.startPosition, this.endPosition, this.radius, $type.hasValue(this.innerRadius) ? this.innerRadius : renderer.innerRadius, this.cornerRadius);\r\n\t\t\tthis.path = this.fillPath;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the fill. Relative ([[Percent]]) or absolute (pixels).\r\n\t *\r\n\t * @param value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the fill. Relative ([[Percent]]) or absolute (pixels).\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Corner radius for the fill. In pixels.\r\n\t *\r\n\t * @param value  Corner radius (px)\r\n\t */\r\n\tpublic set cornerRadius(value: number) {\r\n\t\tthis.setPropertyValue(\"cornerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Corner radius (px)\r\n\t */\r\n\tpublic get cornerRadius(): number {\r\n\t\treturn this.getPropertyValue(\"cornerRadius\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisFillCircular\"] = AxisFillCircular;\r\n","/**\r\n * A module defining functionality for circular axis grid elements.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Grid, IGridProperties, IGridAdapters, IGridEvents } from \"./Grid\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[GridCircular]].\r\n */\r\nexport interface IGridCircularProperties extends IGridProperties {\r\n\r\n\t/**\r\n\t * Inner radius of the circular grid. (absolute or relative)\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius of the circular grid. (absolute or relative)\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[GridCircular]].\r\n */\r\nexport interface IGridCircularEvents extends IGridEvents { }\r\n\r\n/**\r\n * Defines adapters for [[GridCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IGridCircularAdapters extends IGridAdapters, IGridCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a circular grid element for circular-type axis.\r\n *\r\n * @see {@link IGridCircularEvents} for a list of available events\r\n * @see {@link IGridCircularAdapters} for a list of available Adapters\r\n * @todo Review: container is better, as we'll be able to attach something to the GridCircular, also with 3d charts we might need some additional elements\r\n */\r\nexport class GridCircular extends Grid {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IGridCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IGridCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IGridCircularEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"GridCircular\";\r\n\t\tthis.pixelPerfect = false;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @param value Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @param value Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GridCircular\"] = GridCircular;\r\n","/**\r\n * Axis Label module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisLabel, IAxisLabelProperties, IAxisLabelAdapters, IAxisLabelEvents } from \"./AxisLabel\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { Percent } from \"../../core/utils/Percent\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisLabelCircular]].\r\n */\r\nexport interface IAxisLabelCircularProperties extends IAxisLabelProperties {\r\n\r\n\t/**\r\n\t * Rotation angle of the label in relation to circle line.\r\n\t */\r\n\trelativeRotation?: number;\r\n\r\n\t/**\r\n\t * Distance of the label from circle line.\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Specifies if label should be bent along the circle\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tbent?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisLabelCircular]].\r\n */\r\nexport interface IAxisLabelCircularEvents extends IAxisLabelEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisLabelCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisLabelCircularAdapters extends IAxisLabelAdapters, IAxisLabelCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Use to create labels on circular axis.\r\n *\r\n * @see {@link IAxisLabelCircularEvents} for a list of available events\r\n * @see {@link IAxisLabelCircularAdapters} for a list of available Adapters\r\n */\r\nexport class AxisLabelCircular extends AxisLabel {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisLabelCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisLabelCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisLabelCircularEvents;\r\n\r\n\t/**\r\n\t * Related data item.\r\n\t */\r\n\tpublic _dataItem: any;\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic fdx: number = 0;\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic fdy: number = 0;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisLabelCircular\";\r\n\t\tthis.padding(0, 0, 0, 0);\r\n\t\tthis.location = 0.5;\r\n\t\tthis.locationOnPath = 0.5;\r\n\t\tthis.radius = 0;\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Relative rotation of the label.\r\n\t *\r\n\t * It is an angle to circle. In case 90, labels will be positioned like rays\r\n\t * of light, if 0 - positioned along the circle.\r\n\t *\r\n\t * @param value Rotation angle\r\n\t */\r\n\tpublic set relativeRotation(value: number) {\r\n\t\tthis.setPropertyValue(\"relativeRotation\", value, true);\r\n\t\tif (!$type.hasValue(value)) {\r\n\t\t\tthis.rotation = undefined;\r\n\r\n\t\t\tlet dataItem = this.dataItem;\r\n\t\t\tif (dataItem && dataItem.component) {\r\n\t\t\t\tdataItem.component.invalidateDataItems();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Rotation angle\r\n\t */\r\n\tpublic get relativeRotation(): number {\r\n\t\treturn this.getPropertyValue(\"relativeRotation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Distance from axis circle to label in pixels or percent.\r\n\t *\r\n\t * @param value Distance (px or percent)\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Distance (px)\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies if label should be bent along the circle.\r\n\t *\r\n\t * IMPORTANT: Use this with caution, since it is quite CPU-greedy.\r\n\t *\r\n\t * @since 4.1.2\r\n\t * @default false\r\n\t * @param  value  Bent?\r\n\t */\r\n\tpublic set bent(value: boolean) {\r\n\t\tthis.setPropertyValue(\"bent\", value, true);\r\n\t\tthis.setPropertyValue(\"wrap\", false);\r\n\t\tthis.setPropertyValue(\"horizontalCenter\", \"none\");\r\n\t\tthis.setPropertyValue(\"verticalCenter\", \"none\");\r\n\r\n\t\tif (value) {\r\n\t\t\tthis.setPropertyValue(\"dx\", 0);\r\n\t\t\tthis.setPropertyValue(\"dy\", 0);\r\n\t\t\tthis.setPropertyValue(\"x\", 0);\r\n\t\t\tthis.setPropertyValue(\"y\", 0);\r\n\t\t\tthis.setPropertyValue(\"rotation\", 0)\r\n\t\t\t//this.setPropertyValue(\"relativeRotation\", undefined);\r\n\t\t\tthis.fdx = 0;\r\n\t\t\tthis.fdy = 0;\r\n\t\t\tthis.textAlign = \"middle\";\r\n\t\t}\r\n\t\telse{\r\n\t\t\tif(this.textPathElement){\r\n\t\t\t\tthis.textPathElement.dispose();\r\n\t\t\t\tthis.textPathElement = undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Bent?\r\n\t */\r\n\tpublic get bent(): boolean {\r\n\t\treturn this.getPropertyValue(\"bent\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns label radius in pixels.\r\n\t * \r\n\t * @param   axisRadius  Radius\r\n\t * @return              Pixel radius\r\n\t */\r\n\tpublic pixelRadius(axisRadius: number): number {\r\n\t\tlet sign: number = 1;\r\n\t\tif (this.inside) {\r\n\t\t\tsign = -1;\r\n\t\t}\r\n\r\n\t\treturn $utils.relativeToValue(this.radius, axisRadius) * sign;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns label horizontal radius in pixels.\r\n\t * \r\n\t * @param   axisRadius   Radius\r\n\t * @param   axisRadiusY  Vertical radius\r\n\t * @return               Radius\r\n\t */\r\n\tpublic pixelRadiusY(axisRadius: number, axisRadiusY: number): number {\r\n\t\tlet sign: number = 1;\r\n\t\tif (this.inside) {\r\n\t\t\tsign = -1;\r\n\t\t}\r\n\r\n\t\tlet radius = this.radius;\r\n\r\n\t\tif ($type.isNumber(radius)) {\r\n\t\t\tradius *= axisRadiusY / axisRadius;\r\n\t\t\treturn $utils.relativeToValue(radius, axisRadius) * sign;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn $utils.relativeToValue(radius, axisRadiusY) * sign;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [fixPosition description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param point       Label affixation point\r\n\t * @param axisRadius  Distance from point (px)\r\n\t */\r\n\tpublic fixPosition(angle: number, axisRadius: number, axisRadiusY?: number, dx?: number, dy?: number) {\r\n\t\tif (!$type.isNumber(axisRadiusY)) {\r\n\t\t\taxisRadiusY = axisRadius;\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(dx)) {\r\n\t\t\tdx = 0;\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(dy)) {\r\n\t\t\tdy = 0;\r\n\t\t}\r\n\r\n\t\tlet point = { x: axisRadius * $math.cos(angle), y: axisRadiusY * $math.sin(angle) };\r\n\r\n\t\tif (this.invalid) {\r\n\t\t\tthis.validate();  //@todo\" check if we need this\r\n\t\t}\r\n\r\n\t\tlet isNegative = false;\r\n\t\tlet realRadius = this.radius;\r\n\r\n\t\tif (realRadius instanceof Percent && realRadius.value < 0) {\r\n\t\t\tisNegative = true;\r\n\t\t}\r\n\t\telse if (realRadius < 0) {\r\n\t\t\tisNegative = true;\r\n\t\t}\r\n\r\n\t\tlet relativeRotation = this.relativeRotation;\r\n\t\tlet labelRadius = this.pixelRadius(axisRadius);\r\n\r\n\t\tif (this.bent) {\r\n\t\t\tlet point = { x: (axisRadius + labelRadius )* $math.cos(angle + 180), y: (axisRadiusY + labelRadius * axisRadiusY / axisRadius) * $math.sin(angle + 180) };\r\n\t\t\tthis.path = $path.moveTo(point) + $path.arcTo(angle + 180, 360, axisRadius + labelRadius, axisRadiusY + labelRadius * axisRadiusY / axisRadius);\r\n\t\t\t\r\n\t\t\tif (this.textPathElement) {\r\n\t\t\t\tthis.textPathElement.attr({ \"startOffset\": (this.locationOnPath * 100) + \"%\" })\r\n\t\t\t}\r\n\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// WHEN ROTATED\r\n\t\tif ($type.isNumber(relativeRotation)) {\r\n\r\n\t\t\tthis.horizontalCenter = \"none\";\r\n\t\t\tthis.verticalCenter = \"none\";\r\n\r\n\t\t\tangle = $math.fitAngleToRange(angle, -180, 180);\r\n\r\n\t\t\tlet pixelWidth = this.bbox.width;\r\n\t\t\tlet pixelHeight = this.bbox.height;\r\n\r\n\t\t\tlet pixelPaddingBottom = this.pixelPaddingBottom;\r\n\t\t\tlet pixelPaddingTop = this.pixelPaddingTop;\r\n\t\t\tlet pixelPaddingLeft = this.pixelPaddingLeft;\r\n\t\t\tlet pixelPaddingRight = this.pixelPaddingRight;\r\n\r\n\t\t\tif (angle > 90 || angle < -90) {\r\n\t\t\t\tif (relativeRotation == -90) {\r\n\t\t\t\t\trelativeRotation = 90;\r\n\t\t\t\t\tpixelWidth = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (relativeRotation == -90) {\r\n\t\t\t\t\tpixelHeight = - pixelHeight;\r\n\t\t\t\t}\r\n\t\t\t\tif (relativeRotation == 90) {\r\n\t\t\t\t\trelativeRotation = -90;\r\n\t\t\t\t\tpixelWidth = -pixelPaddingLeft - pixelPaddingRight;\r\n\t\t\t\t\tpixelHeight = - pixelHeight - pixelPaddingTop - pixelPaddingBottom;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.rotation = relativeRotation + angle + 90;\r\n\r\n\t\t\tlet dH = $math.sin(relativeRotation) / 2;\r\n\t\t\tlet dW = $math.cos(relativeRotation) / 2;\r\n\r\n\t\t\tlet rotation = this.rotation;\r\n\r\n\t\t\tthis.dx = pixelHeight * dH * $math.sin(rotation) - pixelWidth * dW * $math.cos(rotation);\r\n\t\t\tthis.dy = -pixelHeight * dH * $math.cos(rotation) - pixelWidth * dW * $math.sin(rotation);\r\n\r\n\t\t\tif (!this.inside) {\r\n\t\t\t\tlabelRadius += (pixelHeight + pixelPaddingBottom + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelWidth + pixelPaddingLeft + pixelPaddingRight) * $math.sin(relativeRotation);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (angle > 90 || angle < -90) {\r\n\t\t\t\t\tlabelRadius -= (pixelPaddingBottom + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelPaddingLeft + pixelPaddingRight) * $math.sin(relativeRotation);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlabelRadius += (pixelPaddingBottom + this.bbox.height + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelPaddingLeft + pixelPaddingRight + this.bbox.width) * $math.sin(relativeRotation);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tpoint.x += $math.cos(angle) * labelRadius;\r\n\t\t\tpoint.y += $math.sin(angle) * labelRadius * axisRadiusY / axisRadius;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// END OF ROTATED\r\n\t\t\tthis.horizontalCenter = \"middle\";\r\n\t\t\tthis.verticalCenter = \"middle\";\r\n\r\n\t\t\tif (isNegative) {\r\n\t\t\t\tthis.dx = 0;\r\n\t\t\t\tthis.dy = 0;\r\n\t\t\t\tpoint.x = (axisRadius + labelRadius) * $math.cos(angle);\r\n\t\t\t\tpoint.y = (axisRadiusY + labelRadius * axisRadiusY / axisRadius) * $math.sin(angle);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// we don't use valign for labels because then they would jump while animating. instead we modify dy depending on a y position\r\n\t\t\t\t// this math makes dy to be 1 at the top of the circle, 0.5 at the middle and 1 at the bottom\r\n\t\t\t\t// @todo with this math doesn't work well with inside = true\r\n\t\t\t\tthis.dy = this._measuredHeight / 2 * $math.sin(angle) //(1 - (point.y + axisRadiusY) / (2 * axisRadiusY));\r\n\t\t\t\t// simmilar with dx\r\n\t\t\t\tthis.dx = this._measuredWidth / 2 * $math.cos(angle) //(1 - (point.x + axisRadius) / (2 * axisRadius));\r\n\r\n\t\t\t\tpoint.x += $math.cos(angle) * labelRadius;\r\n\t\t\t\tpoint.y += $math.sin(angle) * labelRadius * axisRadiusY / axisRadius;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpoint.x += dx;\r\n\t\tpoint.y += dy;\r\n\r\n\t\tthis.fdx = this.dx;\r\n\t\tthis.fdy = this.dy;\r\n\r\n\t\tthis.moveTo(point);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisLabelCircular\"] = AxisLabelCircular;\r\n","/**\r\n * Module, defining Axis Renderer for circular axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRenderer, IAxisRendererProperties, IAxisRendererAdapters, IAxisRendererEvents } from \"./AxisRenderer\";\r\nimport { Axis } from \"./Axis\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { AxisFillCircular } from \"./AxisFillCircular\";\r\nimport { AxisRendererRadial } from \"./AxisRendererRadial\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { GridCircular } from \"./GridCircular\";\r\nimport { AxisLabelCircular } from \"./AxisLabelCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { AxisBullet } from \"./AxisBullet\";\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererCircular]].\r\n */\r\nexport interface IAxisRendererCircularProperties extends IAxisRendererProperties {\r\n\r\n\t/**\r\n\t * Start angle of the circular axis in degrees (0-360).\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle of the circular axis in degrees (0-360).\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * Outer radius of the circular axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the circular axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Specifies if axis should use it's own start/end angles or the ones set on chart.\r\n\t */\r\n\tuseChartAngles?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisRendererCircular]].\r\n */\r\nexport interface IAxisRendererCircularEvents extends IAxisRendererEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererCircularAdapters extends IAxisRendererAdapters, IAxisRendererCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for circular axis.\r\n */\r\nexport class AxisRendererCircular extends AxisRenderer {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisRendererCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisRendererCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererCircularEvents;\r\n\r\n\t/**\r\n\t * Defines type of the grid elements.\r\n\t */\r\n\tpublic _gridType: GridCircular;\r\n\r\n\t/**\r\n\t * Defines type for the fill elements.\r\n\t */\r\n\tpublic _fillType: AxisFillCircular;\r\n\r\n\t/**\r\n\t * Defines type for the label elements.\r\n\t */\r\n\tpublic _labelType: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic pixelRadiusReal: number = 0;\r\n\r\n\r\n\t/**\r\n\t * Y axis renderer\r\n\t */\r\n\tpublic axisRendererY: AxisRendererRadial;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\t// axis.layout = \"none\"; // does not trigger redraw when size changes\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.className = \"AxisRendererCircular\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.useChartAngles = true;\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.grid.template.location = 0;\r\n\r\n\t\tthis.labels.template.location = 0;\r\n\t\tthis.labels.template.radius = 15;\r\n\r\n\t\tthis.ticks.template.location = 0;\r\n\t\tthis.ticks.template.pixelPerfect = false;\r\n\t\tthis.tooltipLocation = 0;\r\n\r\n\t\tthis.line.strokeOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t* @ignore\r\n\t*/\r\n\tpublic setAxis(axis: Axis) {\r\n\t\tsuper.setAxis(axis);\r\n\t\taxis.isMeasured = false;\r\n\r\n\t\t// modify x and y so that tooltip would always be on circle\r\n\t\tlet tooltip = axis.tooltip;\r\n\r\n\t\ttooltip.adapter.add(\"dx\", (x, target) => {\r\n\t\t\tlet point: IPoint = $utils.svgPointToSprite({ x: target.pixelX, y: target.pixelY }, this);\r\n\t\t\treturn this.pixelRadius * Math.cos(Math.atan2(point.y, point.x)) - point.x;\r\n\t\t});\r\n\r\n\t\ttooltip.adapter.add(\"dy\", (y, target) => {\r\n\t\t\tlet point: IPoint = $utils.svgPointToSprite({ x: target.pixelX, y: target.pixelY }, this);\r\n\t\t\treturn this.pixelRadius * Math.sin(Math.atan2(point.y, point.x)) - point.y;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart && this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\treturn 2 * Math.PI * this.pixelRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"radius\", value, false, false, 10, false)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius in pixels.\r\n\t *\r\n\t * @return Outer radius (px)\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"innerRadius\", value, false, false, 10, false)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\tlet chart = <RadarChart>this.chart;\t\t\r\n\t\tlet innerRadius = this.getPropertyValue(\"innerRadius\");\r\n\t\tif(chart){\r\n\t\t\tif (!$type.hasValue(innerRadius)) {\r\n\t\t\t\tinnerRadius = chart.innerRadius;\r\n\r\n\t\t\t\tif (innerRadius instanceof Percent && chart) {\r\n\t\t\t\t\tinnerRadius = percent(innerRadius.value * chart.innerRadiusModifyer * 100)\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (innerRadius instanceof Percent && chart) {\r\n\t\t\t\t\tlet mr = chart.mr;\r\n\t\t\t\t\tlet value = innerRadius.value;\r\n\t\t\t\t\tvalue = Math.max(mr * value, mr - Math.min(chart.plotContainer.innerHeight, chart.plotContainer.innerWidth)) / mr;\r\n\t\t\t\t\tinnerRadius = percent(value * 100);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn innerRadius;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies if axis should use its own `startAngle` and `endAngle` or\r\n\t * inherit them from relative properties from chart.\r\n\t *\r\n\t * @default false\r\n\t * @param value  Use chart's angles\r\n\t */\r\n\tpublic set useChartAngles(value: boolean) {\r\n\t\tthis.setPropertyValue(\"useChartAngles\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Use chart angles\r\n\t */\r\n\tpublic get useChartAngles(): boolean {\r\n\t\treturn this.getPropertyValue(\"useChartAngles\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius in pixels.\r\n\t *\r\n\t * @return Inner radius (px)\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @param position2  Position (0-1) Position on the second axis\r\n\t * @return Point\r\n\t */\r\n\tpublic positionToPoint(position: number, position2?: number): IPoint {\r\n\r\n\t\tif (!$type.isNumber(position2)) {\r\n\t\t\tposition2 = 1;\r\n\t\t}\r\n\r\n\t\tlet coordinate: number = this.positionToCoordinate(position);\r\n\t\tlet angle: number = this.startAngle + (this.endAngle - this.startAngle) * coordinate / this.axisLength;\r\n\t\tlet radius = this.pixelRadius;\r\n\t\tlet innerRadius = this.pixelInnerRadius;\r\n\r\n\t\tif (this.axisRendererY) {\r\n\t\t\tlet realRadius = $math.fitToRange(this.axisRendererY.positionToCoordinate(position2), 0, Infinity)\r\n\t\t\tlet point = { x: realRadius * $math.cos(angle), y: realRadius * $math.sin(angle) };\r\n\t\t\treturn point;\r\n\t\t}\r\n\r\n\t\treturn { x: $math.cos(angle) * innerRadius + (radius - innerRadius) * $math.cos(angle) * position2, y: $math.sin(angle) * innerRadius + (radius - innerRadius) * $math.sin(angle) * position2 };\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position (0-1) on axis to angle in degrees (0-360).\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @return Angle (0-360)\r\n\t */\r\n\tpublic positionToAngle(position: number): number {\r\n\t\tlet axis: Axis = this.axis;\r\n\r\n\t\tlet arc: number = (this.endAngle - this.startAngle) / (axis.end - axis.start);\r\n\r\n\t\tlet angle: number;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tangle = this.startAngle + (axis.end - position) * arc;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tangle = this.startAngle + (position - axis.start) * arc;\r\n\t\t}\r\n\r\n\t\treturn $math.round(angle, 3);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts angle on axis to relative position(0-1).\r\n\t *\r\n\t * @param angle Angle in degrees\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic angleToPosition(angle: number): number {\r\n\t\tlet axis: Axis = this.axis;\r\n\r\n\t\tlet arc: number = (this.endAngle - this.startAngle) / (axis.end - axis.start);\r\n\t\tlet position: number\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tposition = axis.end - (angle - this.startAngle) / arc;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tposition = (angle - this.startAngle) / arc + axis.start;\r\n\t\t}\r\n\r\n\t\treturn $math.round(position, 5);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine() {\r\n\t\tlet radius: number = this.pixelRadius;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\tlet arc: number = $math.min(360, endAngle - startAngle);\t\t\r\n\t\tthis.line.path = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, arc, radius, radius);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: GridCircular, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif ($type.isNumber(point.x) && $type.isNumber(point.y) && grid.element) {\r\n\t\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\t\t\tlet radius: number = $utils.relativeRadiusToValue($type.hasValue(grid.radius) ? grid.radius : percent(100), this.pixelRadius);\r\n\r\n\t\t\tlet gridInnerRadius = $utils.relativeRadiusToValue(grid.innerRadius, this.pixelRadius);\r\n\t\t\tgrid.zIndex = 0;\r\n\r\n\t\t\tlet innerRadius: number = $utils.relativeRadiusToValue($type.isNumber(gridInnerRadius) ? gridInnerRadius : this.innerRadius, this.pixelRadiusReal, true);\r\n\r\n\t\t\tif(!$type.isNumber(innerRadius)){\r\n\t\t\t\tinnerRadius = 0;\r\n\t\t\t}\r\n\r\n\t\t\tgrid.path = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) }) + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t}\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param tick         Tick element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number, endPosition: number) {\r\n\r\n\t\tposition = position + (endPosition - position) * tick.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif (tick.element) {\r\n\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\t\t\tlet tickLength: number = tick.length;\r\n\t\t\tif (tick.inside) {\r\n\t\t\t\ttickLength = -tickLength;\r\n\t\t\t}\r\n\t\t\ttick.zIndex = 1;\r\n\t\t\ttick.path = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) }) + $path.lineTo({ x: (radius + tickLength) * $math.cos(angle), y: (radius + tickLength) * $math.sin(angle) });\r\n\t\t}\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions axis bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet       AxisBullet element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateBullet(bullet: Sprite, position: number, endPosition: number): void {\r\n\t\tlet location = 0.5;\r\n\t\tif (bullet instanceof AxisBullet) {\r\n\t\t\tlocation = bullet.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tlet radius: number = this.pixelRadius;\r\n\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\r\n\t\tpoint = { x: radius * $math.cos(angle), y: radius * $math.sin(angle) }\r\n\r\n\t\tthis.positionItem(bullet, point);\r\n\r\n\t\tthis.toggleVisibility(bullet, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param label        Label element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: this[\"_labelType\"], position: number, endPosition: number, location?: number) {\r\n\r\n\t\tif (!$type.hasValue(location)) {\r\n\t\t\tlocation = label.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\r\n\t\tlabel.fixPosition(this.positionToAngle(position), this.pixelRadius);\r\n\t\tlabel.zIndex = 2;\r\n\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param point Point coordinates\r\n\t * @return Fits?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle of the axis in degrees (0-360).\r\n\t *\r\n\t * @param value  Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tif (this.setPropertyValue(\"startAngle\", value)) {\r\n\t\t\tthis.invalidateAxisItems();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the axis in degrees (0-360).\r\n\t *\r\n\t * @param value  End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tif (this.setPropertyValue(\"endAngle\", value)) {\r\n\t\t\tthis.invalidateAxisItems();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param startPosition  Starting position\r\n\t * @param endPosition    End position\r\n\t * @return SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number, radius?: number | Percent, innerRadius?: number | Percent, cornerRadius?: number): string {\r\n\t\tlet path: string = \"\";\r\n\t\tif ($type.isNumber(startPosition) && $type.isNumber(endPosition)) {\r\n\r\n\t\t\tif (!$type.hasValue(radius)) {\r\n\t\t\t\tradius = this.radius;\r\n\t\t\t}\r\n\r\n\t\t\tstartPosition = $math.max(startPosition, this.axis.start);\r\n\t\t\tendPosition = $math.min(endPosition, this.axis.end);\r\n\r\n\t\t\tif (endPosition < startPosition) {\r\n\t\t\t\tendPosition = startPosition;\r\n\t\t\t}\r\n\r\n\t\t\tlet pixelRadius: number = $utils.relativeRadiusToValue(radius, this.pixelRadius);\r\n\t\t\tlet pixelInnerRadius: number = $utils.relativeRadiusToValue(innerRadius, this.pixelRadius, true);\r\n\r\n\t\t\tlet startAngle: number = this.positionToAngle(startPosition);\r\n\t\t\tlet endAngle: number = this.positionToAngle(endPosition);\r\n\r\n\t\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\t\tpath = $path.arc(startAngle, arc, pixelRadius, pixelInnerRadius, pixelRadius, cornerRadius);\r\n\t\t}\r\n\r\n\t\treturn path;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new grid element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return Grid element\r\n\t */\r\n\tpublic createGrid(): this[\"_gridType\"] {\r\n\t\treturn new GridCircular();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new fill element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return Fill element\r\n\t */\r\n\tpublic createFill(axis: Axis): this[\"_fillType\"] {\r\n\t\treturn new AxisFillCircular(axis);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new label element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return Label element\r\n\t */\r\n\tpublic createLabel(): this[\"_labelType\"] {\r\n\t\treturn new AxisLabelCircular();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a point at specific coordinates to a relative position (0-1)\r\n\t * on the axis.\r\n\t *\r\n\t * @param point  Point\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic pointToPosition(point: IPoint) {\r\n\t\tlet angle = $math.fitAngleToRange($math.getAngle(point), this.startAngle, this.endAngle);\r\n\t\treturn this.coordinateToPosition((angle - this.startAngle) / 360 * this.axisLength);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererCircular\"] = AxisRendererCircular;\r\n","/**\r\n * Module, defining Axis Renderer for radial axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererY, IAxisRendererYProperties, IAxisRendererYAdapters, IAxisRendererYEvents } from \"./AxisRendererY\";\r\nimport { Axis } from \"./Axis\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { CategoryAxis } from \"./CategoryAxis\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisBreak } from \"./AxisBreak\";\r\nimport { WavedCircle } from \"../../core/elements/WavedCircle\";\r\nimport { PointerOrientation } from \"../../core/elements/Tooltip\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { AxisBullet } from \"./AxisBullet\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererRadial]].\r\n */\r\nexport interface IAxisRendererRadialProperties extends IAxisRendererYProperties {\r\n\r\n\t/**\r\n\t * Start angle of the radial axis in degrees. (0-360)\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle of the radial axis in degrees. (0-360)\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * A grid type to display: \"circles\" or \"polygons\".\r\n\t *\r\n\t * @default \"circles\"\r\n\t */\r\n\tgridType?: \"circles\" | \"polygons\"; //@todo: move it to GridRadial?\r\n\r\n\t/**\r\n\t * An angle of the axis in degrees. (0-360)\r\n\t */\r\n\taxisAngle?: number;\r\n\r\n\r\n\t/**\r\n\t * Outer radius of the radial axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the radial axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisRendererRadial]].\r\n */\r\nexport interface IAxisRendererRadialEvents extends IAxisRendererYEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererRadialAdapters extends IAxisRendererYAdapters, IAxisRendererRadialProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for radial axis.\r\n */\r\nexport class AxisRendererRadial extends AxisRendererY {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisRendererRadialProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisRendererRadialAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererRadialEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<RadarChart>();\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic pixelRadiusReal: number = 0;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _chartType: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererRadial\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\t\tthis.minGridDistance = 30;\r\n\t\tthis.gridType = \"circles\";\r\n\t\tthis.axisAngle = -90;\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.line.strokeOpacity = 0;\r\n\r\n\t\tthis.labels.template.horizontalCenter = \"middle\";\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart && this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\treturn this.pixelRadius - this.pixelInnerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, false, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius in pixels.\r\n\t *\r\n\t * @return Outer radius (px)\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, false, false, 10, false)\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\tlet chart = this.chart;\r\n\t\tlet innerRadius = this.getPropertyValue(\"innerRadius\");\r\n\t\tif(chart){\r\n\t\t\tif (!$type.hasValue(innerRadius)) {\r\n\t\t\t\tinnerRadius = chart.innerRadius;\r\n\r\n\t\t\t\tif (innerRadius instanceof Percent && chart) {\r\n\t\t\t\t\tinnerRadius = percent(innerRadius.value * chart.innerRadiusModifyer * 100)\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (innerRadius instanceof Percent && chart) {\r\n\t\t\t\t\tlet mr = chart.mr;\r\n\t\t\t\t\tlet value = innerRadius.value;\r\n\t\t\t\t\tvalue = Math.max(mr * value, mr - Math.min(chart.plotContainer.innerHeight, chart.plotContainer.innerWidth)) / mr;\r\n\t\t\t\t\tinnerRadius = percent(value * 100);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn innerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius in pixels.\r\n\t *\r\n\t * @return Inner radius (px)\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @param position2  Position (0-1) Position on the second axis\r\n\t * @return Point\r\n\t */\r\n\tpublic positionToPoint(position: number, position2?: number): IPoint {\r\n\t\tlet radius: number = $math.fitToRange(this.positionToCoordinate(position), 0, Infinity);\r\n\t\treturn { x: radius * $math.cos(this.axisAngle), y: radius * $math.sin(this.axisAngle) };\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine() {\r\n\t\tthis.line.path = $path.moveTo({ x: this.pixelInnerRadius * $math.cos(this.axisAngle), y: this.pixelInnerRadius * $math.sin(this.axisAngle) }) + $path.lineTo({ x: this.pixelRadius * $math.cos(this.axisAngle), y: this.pixelRadius * $math.sin(this.axisAngle) });\r\n\r\n\t\tlet title = this.axis.title;\r\n\t\ttitle.valign = \"none\";\r\n\t\ttitle.horizontalCenter = \"middle\";\r\n\t\ttitle.verticalCenter = \"bottom\";\r\n\t\ttitle.y = - this.axisLength / 2;\r\n\t\tlet rotation: number = 90;\r\n\t\tif (this.opposite) {\r\n\t\t\tif (!this.inside) {\r\n\t\t\t\trotation = -90;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this.inside) {\r\n\t\t\t\trotation = -90;\r\n\t\t\t}\r\n\t\t}\r\n\t\ttitle.rotation = rotation;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tlet path: string;\r\n\t\tlet radius: number = $math.getDistance(point);\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\t\tlet chart = this.chart;\r\n\r\n\t\tif ($type.isNumber(radius) && grid.element && chart) {\r\n\t\t\t\r\n\t\t\tlet xAxis = chart.xAxes.getIndex(0);\r\n\t\t\tlet count = 0;\r\n\r\n\t\t\tlet series = chart.series.getIndex(0);\r\n\r\n\t\t\tif (series) {\r\n\t\t\t\tcount = series.dataItems.length;\r\n\t\t\t}\r\n\r\n\t\t\t// polygons are only possible if x axis is present\r\n\t\t\t// @todo: review this\r\n\t\t\tif (this.gridType == \"polygons\" && count > 0 && series && xAxis && xAxis instanceof CategoryAxis) {\r\n\t\t\t\tlet gridLocation = xAxis.renderer.grid.template.location;\r\n\r\n\t\t\t\tlet angle: number = xAxis.getAngle(series.dataItems.getIndex(0), \"categoryX\", gridLocation);\r\n\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\r\n\t\t\t\tfor (let i = 1; i < count; i++) {\r\n\t\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\t}\r\n\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(count - 1), \"categoryX\", xAxis.renderer.cellEndLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, radius, radius);\r\n\t\t\t}\r\n\t\t\tgrid.path = path;\r\n\t\t}\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param label        Label element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: this[\"_labelType\"], position: number, endPosition: number, location?: number) {\r\n\r\n\t\tif (!$type.hasValue(location)) {\r\n\t\t\tlocation = label.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tthis.positionItem(label, point);\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\t// @todo? zero grid for radar chart, is it needed?\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param point Point coordinates\r\n\t * @return Fits?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle of the axis in degrees. (0-360)\r\n\t *\r\n\t * @param value  Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\t// do not normalize angle here!\r\n\t\tif (this.setPropertyValue(\"startAngle\", value)) {\r\n\t\t\tthis.invalidateAxisItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the axis in degrees. (0-360)\r\n\t *\r\n\t * @param value  End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tif (this.setPropertyValue(\"endAngle\", value)) {\r\n\t\t\tthis.invalidateAxisItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of the radial axis in degrees. (0-360)\r\n\t *\r\n\t * @param value  Axis angle\r\n\t */\r\n\tpublic set axisAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"axisAngle\", $math.normalizeAngle(value));\r\n\t\tthis.invalidateAxisItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Axis angle\r\n\t */\r\n\tpublic get axisAngle(): number {\r\n\t\treturn this.getPropertyValue(\"axisAngle\");\r\n\t\t//return $math.fitToRange(this.getPropertyValue(\"axisAngle\"), this.startAngle, this.endAngle); // no good, as less flexible\r\n\t}\r\n\r\n\t// polygons grid type is only possible under these conditions: xAxis is available and it is CategoryAxis, also at least one series should be added to a chart\r\n\r\n\t/**\r\n\t * Grid type for radial axis.\r\n\t *\r\n\t * A grid on radia axis can either be perfect circles (\"circles\"), or\r\n\t * straight lines (\"polygons\").\r\n\t *\r\n\t * @default \"circles\"\r\n\t * @param value  Grid type\r\n\t */\r\n\tpublic set gridType(value: \"circles\" | \"polygons\") {\r\n\t\tthis.setPropertyValue(\"gridType\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Grid type\r\n\t */\r\n\tpublic get gridType(): \"circles\" | \"polygons\" {\r\n\t\tlet axis: Axis = this.chart.xAxes.getIndex(0);\r\n\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\treturn this.getPropertyValue(\"gridType\");\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn \"circles\";\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param startPosition  Starting position\r\n\t * @param endPosition    End position\r\n\t * @return SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number): string {\r\n\t\tlet pixelInnerRadius = this.pixelInnerRadius;\r\n\t\tlet pixelRadius = this.axisLength + pixelInnerRadius;\r\n\t\tlet innerRadius: number = $math.fitToRange(this.positionToCoordinate(startPosition), pixelInnerRadius, pixelRadius);\r\n\t\tlet radius: number = $math.fitToRange(this.positionToCoordinate(endPosition), pixelInnerRadius, pixelRadius);\r\n\r\n\t\t//let angleCount: number = this.angleCount;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\tlet path: string;\r\n\r\n\t\tlet chart = this.chart;\r\n\t\tlet xAxis = chart.xAxes.getIndex(0);\r\n\t\tlet series = chart.series.getIndex(0);\r\n\r\n\t\tlet count = 0;\r\n\t\tif (series) {\r\n\t\t\tcount = series.dataItems.length;\r\n\t\t}\r\n\r\n\t\t// polygons are only possible if x axis is present\r\n\t\t// @todo: review this\r\n\t\tif (this.gridType == \"polygons\" && count > 0 && series && xAxis && xAxis instanceof CategoryAxis) {\r\n\t\t\tlet gridLocation = xAxis.renderer.grid.template.location;\r\n\r\n\t\t\tlet angle: number = xAxis.getAngle(series.dataItems.getIndex(0), \"categoryX\", gridLocation);\r\n\t\t\tpath = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\r\n\t\t\tfor (let i = 1; i < count; i++) {\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t}\r\n\r\n\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(count - 1), \"categoryX\", xAxis.renderer.cellEndLocation);\r\n\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\r\n\t\t\tpath += $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) })\r\n\r\n\t\t\tfor (let i = count - 1; i >= 0; i--) {\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) });\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tpath = $path.arc(startAngle, arc, radius, innerRadius);\r\n\t\t}\r\n\t\treturn path;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions an axis break element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axisBreak Break element\r\n\t */\r\n\tpublic updateBreakElement(axisBreak: AxisBreak) {\r\n\t\t// @todo: someday we might need axis break when gridType is polygons\r\n\r\n\t\tlet startLine: WavedCircle = <WavedCircle>axisBreak.startLine;\r\n\t\tlet endLine: WavedCircle = <WavedCircle>axisBreak.endLine;\r\n\t\tlet fillShape: WavedCircle = <WavedCircle>axisBreak.fillShape;\r\n\r\n\t\tlet startPoint: IPoint = axisBreak.startPoint;\r\n\t\tlet endPoint: IPoint = axisBreak.endPoint;\r\n\r\n\t\tstartLine.radius = Math.abs(startPoint.y);\r\n\t\tendLine.radius = Math.abs(endPoint.y);\r\n\t\tfillShape.radius = Math.abs(endPoint.y);\r\n\t\tfillShape.innerRadius = Math.abs(startPoint.y);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates visual elements for and axis break.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axisBreak Axis break\r\n\t */\r\n\tpublic createBreakSprites(axisBreak: AxisBreak): void {\r\n\t\taxisBreak.startLine = new WavedCircle();\r\n\t\taxisBreak.endLine = new WavedCircle();\r\n\t\taxisBreak.fillShape = new WavedCircle();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates some of the Axis tooltip's visual properties, related to\r\n\t * rendering of the Axis.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateTooltip(): void {\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tif (axis) {\r\n\r\n\t\t\tlet bigNum: number = 4000;\r\n\t\t\tlet bbx: number = -4000;\r\n\t\t\tlet bby: number = -4000;\r\n\t\t\tlet bbw: number = bigNum * 2;\r\n\t\t\tlet bbh: number = bigNum * 2;\r\n\t\t\tlet axisAngle: number = this.axisAngle;\r\n\t\t\tif (axisAngle < 0) {\r\n\t\t\t\taxisAngle += 360;\r\n\t\t\t}\r\n\t\t\tlet tooltipOrientation: PointerOrientation = \"vertical\";\r\n\t\t\tif ((axisAngle > 45 && axisAngle < 135) || (axisAngle > 225 && axisAngle < 315)) {\r\n\t\t\t\ttooltipOrientation = \"horizontal\";\r\n\t\t\t}\r\n\t\t\tthis.axis.updateTooltip(tooltipOrientation, { x: bbx, y: bby, width: bbw, height: bbh });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param tick      Tick element\r\n\t * @param position  Position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number, endPosition: number): void {\r\n\t\tposition = position + (endPosition - position) * tick.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif (tick.element) {\r\n\t\t\tlet angle: number = $math.normalizeAngle(this.axisAngle + 90);\r\n\t\t\tif (angle / 90 != Math.round(angle / 90)) {\r\n\t\t\t\ttick.pixelPerfect = false;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttick.pixelPerfect = true;\r\n\t\t\t}\r\n\t\t\tlet tickLength = -tick.length;\r\n\t\t\tif (tick.inside) {\r\n\t\t\t\ttickLength *= -1;\r\n\t\t\t}\r\n\t\t\ttick.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: tickLength * $math.cos(angle), y: tickLength * $math.sin(angle) });\r\n\t\t}\r\n\t\tthis.positionItem(tick, point);\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Updates and positions axis bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet       AxisBullet element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateBullet(bullet: Sprite, position: number, endPosition: number): void {\r\n\t\tlet location = 0.5;\r\n\t\tif (bullet instanceof AxisBullet) {\r\n\t\t\tlocation = bullet.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tthis.positionItem(bullet, point);\r\n\r\n\t\tthis.toggleVisibility(bullet, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a position on the axis to a coordinate in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Position (0-1)\r\n\t * @return Coordinate (px)\r\n\t */\r\n\tpublic positionToCoordinate(position: number): number {\r\n\t\tlet coordinate: number;\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tlet axisFullLength = axis.axisFullLength;\r\n\t\tlet innerRadius = this.pixelInnerRadius;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tcoordinate = (axis.end - position) * axisFullLength + innerRadius;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcoordinate = (position - axis.start) * axisFullLength + innerRadius;\r\n\t\t}\r\n\r\n\t\treturn $math.round(coordinate, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a point at specific coordinates to a relative position (0-1)\r\n\t * on the axis.\r\n\t *\r\n\t * @param point  Point\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic pointToPosition(point: IPoint) {\r\n\t\tlet coordinate = ($math.getDistance(point) - this.pixelInnerRadius);\r\n\t\treturn this.coordinateToPosition(coordinate);\r\n\t}\r\n\r\n\t/**\r\n\t * A chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Chart\r\n\t */\r\n\tpublic set chart(value: RadarChart) {\r\n\t\tthis._chart.set(value, null);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): RadarChart {\r\n\t\treturn this._chart.get();\r\n\t}\t\r\n\t\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererRadial\"] = AxisRendererRadial;\r\n","/**\r\n * Radar chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { RadarSeries } from \"../series/RadarSeries\";\r\nimport { RadarColumnSeries } from \"../series/RadarColumnSeries\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { RadarCursor } from \"../cursors/RadarCursor\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarChartDataItem extends XYChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarChart]].\r\n */\r\nexport interface IRadarChartDataFields extends IXYChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarChart]].\r\n */\r\nexport interface IRadarChartProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Radius of the Radar face. Absolute or relative.\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the Radar face. Percent value is relative to radius.\r\n\t *\r\n\t * @todo review desc\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * An angle radar face starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle radar face ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t */\r\n\tendAngle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarChart]].\r\n */\r\nexport interface IRadarChartEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarChartAdapters extends IXYChartAdapters, IRadarChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Radar chart.\r\n *\r\n * @see {@link IRadarChartEvents} for a list of available Events\r\n * @see {@link IRadarChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/radar-chart/} for documentation\r\n * @important\r\n */\r\nexport class RadarChart extends XYChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IRadarChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IRadarChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IRadarChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IRadarChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: RadarSeries | RadarColumnSeries;\r\n\r\n\t/**\r\n\t * Defines X axis renderer type.\r\n\t */\r\n\tpublic _xAxisRendererType: AxisRendererCircular;\r\n\r\n\t/**\r\n\t * Defines Y axis renderer type.\r\n\t */\r\n\tpublic _yAxisRendererType: AxisRendererRadial;\r\n\r\n\t/**\r\n\t * Defines X axis renderer type.\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererCircular = AxisRendererCircular;\r\n\r\n\t/**\r\n\t * Defines Y axis renderer type.\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererRadial = AxisRendererRadial;\r\n\r\n\t/**\r\n\t * [_cursor description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tpublic _cursor: RadarCursor;\r\n\r\n\t/**\r\n\t * A container that holds Radar visual elements.\r\n\t */\r\n\tpublic radarContainer: Container;\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _pixelInnerRadius: number;\r\n\r\n\r\n\t/**\r\n\t * used by cursor. We adjust innerradius if start and end angle are close to each other\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic innerRadiusModifyer: number = 1;\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic mr: number = 1;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarChart\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.radius = percent(80);\r\n\t\tthis.innerRadius = 0;\r\n\r\n\t\tlet radarContainer = this.plotContainer.createChild(Container);\r\n\t\tradarContainer.shouldClone = false;\r\n\t\tradarContainer.layout = \"absolute\";\r\n\t\tradarContainer.align = \"center\";\r\n\t\tradarContainer.valign = \"middle\";\r\n\r\n\t\tthis.seriesContainer.parent = radarContainer;\r\n\t\tthis.radarContainer = radarContainer;\r\n\t\tthis.bulletsContainer.parent = radarContainer;\r\n\t\tthis.axisBulletsContainer = radarContainer;\r\n\r\n\t\tthis._cursorContainer = radarContainer;\r\n\r\n\t\tthis.chartContainer.events.on(\"maxsizechanged\", this.invalidate, this, false); // need this for the chart to change radius if legend is removed/disabled\r\n\r\n\t\tthis._bulletMask = radarContainer.createChild(Circle);\r\n\t\tthis._bulletMask.shouldClone = false;\r\n\t\tthis._bulletMask.element = this.paper.add(\"path\");\r\n\t\tthis._bulletMask.opacity = 0;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Radar chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates Axis with required properties for this chart.\r\n\t *\r\n\t * @param axis  Axis\r\n\t */\r\n\tprotected processAxis(axis: Axis): void {\r\n\t\tsuper.processAxis(axis);\r\n\t\tlet renderer: AxisRenderer = axis.renderer;\r\n\t\trenderer.gridContainer.parent = renderer;\r\n\t\trenderer.breakContainer.parent = renderer;\r\n\t\taxis.parent = this.radarContainer;\r\n\t\trenderer.toBack();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates all X axes after range change event.\r\n\t */\r\n\tprotected handleXAxisRangeChange() {\r\n\t\tsuper.handleXAxisRangeChange();\r\n\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\taxis.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Updates all Y axes after range change event.\r\n\t */\r\n\tprotected handleYAxisRangeChange() {\r\n\t\tsuper.handleYAxisRangeChange();\r\n\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\taxis.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up cursor\r\n\t\t\tif ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\r\n\t\t\t\tconfig.cursor.type = \"RadarCursor\";\r\n\t\t\t}\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"RadarSeries\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up axes\r\n\t\t\t/*if ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.xAxes.length; i < len; i++) {\r\n\t\t\t\t\tconfig.xAxes[i].type = config.xAxes[i].type || \"AxisRendererCircular\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.yAxes.length; i < len; i++) {\r\n\t\t\t\t\tconfig.yAxes[i].type = config.yAxes[i].type || \"AxisRendererRadial\";\r\n\t\t\t\t}\r\n\t\t\t}*/\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n\t/**\r\n\t * Does calculations before drawing the chart.\r\n\t */\r\n\tprotected beforeDraw(): void {\r\n\t\tsuper.beforeDraw();\r\n\r\n\t\tlet plotContainer = this.plotContainer;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\t\tlet innerRect: IRectangle = { x: 0, y: 0, width: 0, height: 0 };\r\n\r\n\t\tlet wr = plotContainer.innerWidth / rect.width;\r\n\t\tlet hr = plotContainer.innerHeight / rect.height;\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tlet value = innerRadius.value;\r\n\t\t\tlet mr = Math.min(wr, hr);\r\n\r\n\t\t\tthis.mr = mr;\r\n\r\n\t\t\tvalue = Math.max(mr * value, mr - Math.min(plotContainer.innerHeight, plotContainer.innerWidth)) / mr;\r\n\t\t\tinnerRect = $math.getArcRect(this.startAngle, this.endAngle, value);\r\n\r\n\t\t\tthis.innerRadiusModifyer = value / innerRadius.value;\r\n\r\n\t\t\tinnerRadius = percent(value * 100);\r\n\t\t}\r\n\r\n\t\t// @todo handle this when innerRadius set in pixels (do it for pie also)\r\n\t\trect = $math.getCommonRectangle([rect, innerRect]);\r\n\r\n\t\tlet maxRadius = Math.min(plotContainer.innerWidth / rect.width, plotContainer.innerHeight / rect.height);\r\n\r\n\t\tlet diameter = $utils.relativeRadiusToValue(this.radius, maxRadius) * 2 || 0;\r\n\t\tlet radius = diameter / 2;\r\n\t\tlet startAngle = this.startAngle;\r\n\t\tlet endAngle = this.endAngle;\r\n\r\n\t\tthis._pixelInnerRadius = $utils.relativeRadiusToValue(innerRadius, radius);\r\n\r\n\t\tthis._bulletMask.path = $path.arc(startAngle, endAngle - startAngle, radius, this._pixelInnerRadius);\r\n\r\n\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\tif (axis.renderer.useChartAngles) {\r\n\t\t\t\taxis.renderer.startAngle = startAngle;\r\n\t\t\t\taxis.renderer.endAngle = endAngle;\r\n\t\t\t}\r\n\r\n\t\t\taxis.width = diameter;\r\n\t\t\taxis.height = diameter;\r\n\t\t\t//axis.renderer.width = diameter;\r\n\t\t\t//axis.renderer.height = diameter;\r\n\t\t\taxis.renderer.pixelRadiusReal = radius;\r\n\t\t\t//axis.renderer.innerRadius = innerRadius;\r\n\t\t});\r\n\r\n\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\taxis.renderer.startAngle = startAngle;\r\n\t\t\taxis.renderer.endAngle = endAngle;\r\n\r\n\t\t\taxis.width = diameter;\r\n\t\t\taxis.height = diameter;\r\n\t\t\t//axis.renderer.width = diameter;\r\n\t\t\t//axis.renderer.height = diameter;\r\n\t\t\taxis.renderer.pixelRadiusReal = radius;\r\n\t\t\t//axis.renderer.innerRadius = innerRadius;\r\n\t\t});\r\n\r\n\r\n\r\n\t\tlet cursor = this.cursor;\r\n\t\tif (cursor) {\r\n\t\t\tcursor.width = diameter;\r\n\t\t\tcursor.height = diameter;\r\n\t\t\tcursor.startAngle = startAngle;\r\n\t\t\tcursor.endAngle = endAngle;\r\n\t\t}\r\n\r\n\t\tthis.radarContainer.definedBBox = { x: radius * rect.x, y: radius * rect.y, width: radius * rect.width, height: radius * rect.height };\r\n\t\tthis.radarContainer.validatePosition();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Series, suitable for RadarChart.\r\n\t *\r\n\t * @return New Series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new RadarSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face begins (the radial axis is drawn) at the\r\n\t * top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the radial axis start horizontally to\r\n\t * the right, as opposed to vertical.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face ends (the radial axis is drawn) exactly\r\n\t * where it has started, forming a full 360 circle. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to end the circle somewhere else.\r\n\t *\r\n\t * E.g. setting this to 180 will make the radar face end at horizontal line\r\n\t * to the left off the center.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the Radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius in pixels\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn this._pixelInnerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * If set in Percent, it will be relative to `radius`. (outer radius)\r\n\t *\r\n\t * @param value Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the horizontal (X) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis Axis\r\n\t */\r\n\tpublic updateXAxis(renderer: AxisRenderer) {\r\n\t\t//do not call super!\r\n\t\tif (renderer) {\r\n\t\t\trenderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the vertical (Y) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis Axis\r\n\t */\r\n\tpublic updateYAxis(renderer: AxisRenderer) {\r\n\t\t// do not call super!\r\n\t\tif (renderer) {\r\n\t\t\trenderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarChart\"] = RadarChart;\r\n","/**\r\n * Functionality for drawing simple ClockHands\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { Trapezoid } from \"../../core/elements/Trapezoid\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { GaugeChart } from \"../types/GaugeChart\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ClockHand]].\r\n */\r\nexport interface IClockHandProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Radius of the hand's outer end. (tip)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n\t/**\r\n\t * Radius of the hand's inner end. (base)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's tip.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\tendWidth: number;\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's base.\r\n\t *\r\n\t * @default 5\r\n\t */\r\n\tstartWidth: number;\r\n\r\n\t/**\r\n\t * rotation direction\r\n\t * @default \"any\"\r\n\t */\r\n\trotationDirection: \"any\" | \"clockWise\" | \"counterClockWise\";\r\n}\r\n\r\n/**\r\n * Defines events for [[ClockHand]].\r\n */\r\nexport interface IClockHandEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ClockHand]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IClockHandAdapters extends IContainerAdapters, IClockHandProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * ClockHand class is capable of drawing a simple pointy shape with optionally\r\n * rounderd corners and an icon.\r\n *\r\n * @see {@link IClockHandEvents} for a list of available events\r\n * @see {@link IClockHandAdapters} for a list of available Adapters\r\n * @todo Improve\r\n * @important\r\n */\r\nexport class ClockHand extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IClockHandProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IClockHandAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IClockHandEvents;\r\n\r\n\t/**\r\n\t * A circle element used as hand's base.\r\n\t */\r\n\tprotected _pin: Circle;\r\n\r\n\t/**\r\n\t * A trapezoid shape used for hand itself.\r\n\t */\r\n\tprotected _hand: Trapezoid;\r\n\r\n\t/**\r\n\t * An Axis hand is related to.\r\n\t */\r\n\tprotected _axis: MutableValueDisposer<Axis> = new MutableValueDisposer<Axis>();\r\n\r\n\t/**\r\n\t * Hand's current value.\r\n\t */\r\n\tprotected _value: any;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"ClockHand\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tthis.stroke = this.fill;\r\n\r\n\t\tlet pin: Circle = new Circle();\r\n\t\tpin.radius = 5;\r\n\t\tthis.pin = pin;\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.startWidth = 5;\r\n\t\tthis.endWidth = 1;\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.radius = percent(100);\r\n\t\tthis.innerRadius = percent(0);\r\n\r\n\t\tlet hand: Trapezoid = new Trapezoid();\r\n\t\tthis.hand = hand;\r\n\r\n\t\tthis._disposers.push(this._axis);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Re(validates) the clock hand, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tlet hand = this.hand;\r\n\t\thand.width = this.pixelWidth;\r\n\t\tlet h: number = Math.max(this.startWidth, this.endWidth);\r\n\t\thand.height = h;\r\n\t\thand.leftSide = percent(this.startWidth / h * 100);\r\n\t\thand.rightSide = percent(this.endWidth / h * 100);\r\n\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer: AxisRendererCircular = <AxisRendererCircular>this.axis.renderer;\r\n\r\n\t\t\tlet x0: number = $utils.relativeRadiusToValue(this.innerRadius, renderer.pixelRadius);\r\n\t\t\tlet x1: number = $utils.relativeRadiusToValue(this.radius, renderer.pixelRadius);\r\n\r\n\t\t\thand.x = x0;\r\n\t\t\thand.y = - h / 2;\r\n\r\n\t\t\thand.width = x1 - x0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A circle element used as hand's base. (pin)\r\n\t *\r\n\t * @param pin  Pin element\r\n\t */\r\n\tpublic set pin(pin: Circle) {\r\n\t\tif (this._pin) {\r\n\t\t\tthis.removeDispose(this._pin);\r\n\t\t}\r\n\t\tif (pin) {\r\n\t\t\tthis._pin = pin;\r\n\t\t\tpin.parent = this;\r\n\t\t\tthis._disposers.push(pin);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Pin element\r\n\t */\r\n\tpublic get pin(): Circle {\r\n\t\treturn this._pin;\r\n\t}\r\n\r\n\t/**\r\n\t * A trapezoid shape used for hand itself.\r\n\t *\r\n\t * The shape of the trapezoid is controlled by ClockHand's `startWidth` and\r\n\t * `endWidth` properties.\r\n\t *\r\n\t * Set `endWidth` to 1 (px) to make it pointy.\r\n\t *\r\n\t * @param hand  Hand element\r\n\t */\r\n\tpublic set hand(hand: Trapezoid) {\r\n\t\tif (this._hand) {\r\n\t\t\tthis.removeDispose(this._hand);\r\n\t\t}\r\n\t\tif (hand) {\r\n\t\t\tthis._hand = hand;\r\n\t\t\thand.parent = this;\r\n\t\t\tthis._disposers.push(hand);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Hand element\r\n\t */\r\n\tpublic get hand(): Trapezoid {\r\n\t\treturn this._hand;\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the hand's outer end. (tip)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @param value  Radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the hand's inner end. (base)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @param value  Radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's inner end. (base)\r\n\t *\r\n\t * @default 5\r\n\t * @param value  Width (px)\r\n\t */\r\n\tpublic set startWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"startWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Width (px)\r\n\t */\r\n\tpublic get startWidth(): number {\r\n\t\treturn this.getPropertyValue(\"startWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's outer end. (tip)\r\n\t *\r\n\t * @default 1\r\n\t * @param value  Width (px)\r\n\t */\r\n\tpublic set endWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"endWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Width (px)\r\n\t */\r\n\tpublic get endWidth(): number {\r\n\t\treturn this.getPropertyValue(\"endWidth\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Rotation direction\r\n\t *\r\n\t * @default any\r\n\t * @param value\r\n\t */\r\n\tpublic set rotationDirection(value: \"any\" | \"clockWise\" | \"counterClockWise\") {\r\n\t\tthis.setPropertyValue(\"rotationDirection\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return rotationDirection\r\n\t */\r\n\tpublic get rotationDirection(): \"any\" | \"clockWise\" | \"counterClockWise\" {\r\n\t\treturn this.getPropertyValue(\"rotationDirection\");\r\n\t}\r\n\r\n\t/**\r\n\t * Moves clock hand to particular value.\r\n\t *\r\n\t * If `duration` is set to a number in milliseconds, the hand will move\r\n\t * to the new position gracefully, rather than jumping rigth to it.\r\n\t *\r\n\t * Alternatively, you can also set `value` directly.\r\n\t *\r\n\t * @param value     New value\r\n\t * @param duration  Animation duration (ms)\r\n\t * @param easing  Animation easing function\r\n\t */\r\n\tpublic showValue(value: any, duration?: number, easing?: (value: number) => number): void {\r\n\t\tthis._value = value;\r\n\t\tif (value != undefined) {\r\n\t\t\tif (!$type.isNumber(duration)) {\r\n\t\t\t\tduration = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tlet renderer = <AxisRendererCircular>this.axis.renderer;\r\n\t\t\t\tlet newAngle = renderer.positionToAngle(this.axis.anyToPosition(value));\r\n\t\t\t\tlet currentAngle = this.rotation;\r\n\r\n\t\t\t\tif (this.rotationDirection == \"clockWise\") {\r\n\t\t\t\t\tif (newAngle < currentAngle) {\r\n\t\t\t\t\t\tthis.rotation = currentAngle - 360;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.rotationDirection == \"counterClockWise\") {\r\n\t\t\t\t\tif (newAngle > currentAngle) {\r\n\t\t\t\t\t\tthis.rotation = currentAngle + 360;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.animate({ property: \"rotation\", to: newAngle }, duration, easing);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns hand's relative position on axis\r\n\t */\r\n\tpublic get currentPosition(): number {\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer = <AxisRendererCircular>this.axis.renderer;\r\n\t\t\treturn renderer.angleToPosition(this.rotation);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A current value clock hand is pointing to.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set value(value: any) {\r\n\t\tthis.showValue(value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get value(): any {\r\n\t\treturn this._value;\r\n\t}\r\n\r\n\t/**\r\n\t * An Axis clock hand is associated with.\r\n\t *\r\n\t * Hand's `value` relates to values on the Axis.\r\n\t *\r\n\t * @param axis  Axis\r\n\t */\r\n\tpublic set axis(axis: Axis) {\r\n\t\tif (this.axis != axis) {\r\n\t\t\tthis._axis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.events.on(\"datavalidated\", this.updateValue, this, false),\r\n\t\t\t\taxis.events.on(\"datarangechanged\", this.updateValue, this, false),\r\n\t\t\t\taxis.events.on(\"dataitemsvalidated\", this.updateValue, this, false),\r\n\t\t\t\taxis.events.on(\"propertychanged\", this.invalidate, this, false)\r\n\t\t\t]));\r\n\t\t}\r\n\t\tif (axis) {\r\n\t\t\tlet chart: GaugeChart = <GaugeChart>axis.chart;\r\n\t\t\tif (chart) {\r\n\t\t\t\tthis.rotation = chart.startAngle;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.parent = axis.renderer;\r\n\t\tthis.zIndex = 5;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Axis\r\n\t */\r\n\tpublic get axis(): Axis {\r\n\t\treturn this._axis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers `value` accessor, so that Hand animates to new position, in case\r\n\t * value has changed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateValue() {\r\n\t\tthis.value = this.value;\r\n\t}\r\n\r\n\t/**\r\n * Processes JSON-based config before it is applied to the object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param config  Config\r\n */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Connect clock hands with axes\r\n\t\t\tif ($type.hasValue(config.axis) && $type.isString(config.axis) && this.map.hasKey(config.axis)) {\r\n\t\t\t\tconfig.axis = this.map.getKey(config.axis);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ClockHand\"] = ClockHand;\r\n","/**\r\n * Module for building Gauge charts.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { RadarChart, IRadarChartProperties, IRadarChartDataFields, IRadarChartAdapters, IRadarChartEvents, RadarChartDataItem } from \"./RadarChart\";\r\nimport { ListTemplate, IListEvents, ListDisposer } from \"../../core/utils/List\";\r\nimport { ClockHand } from \"../elements/ClockHand\";\r\nimport { Ordering } from \"../../core/utils/Order\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[GaugeChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class GaugeChartDataItem extends RadarChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: GaugeChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"GaugeChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartDataFields extends IRadarChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartProperties extends IRadarChartProperties { }\r\n\r\n/**\r\n * Defines events for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartEvents extends IRadarChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[GaugeChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IGaugeChartAdapters extends IRadarChartAdapters, IGaugeChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Gauge chart.\r\n *\r\n * @see {@link IGaugeChartEvents} for a list of available Events\r\n * @see {@link IGaugeChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/gauge-chart/} for documentation\r\n * @important\r\n */\r\nexport class GaugeChart extends RadarChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IGaugeChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IGaugeChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IGaugeChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IGaugeChartEvents;\r\n\r\n\t/**\r\n\t * A list of [[ClockHand]] items displayed on this Gauge chart.\r\n\t */\r\n\tpublic hands: ListTemplate<ClockHand>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"GaugeChart\";\r\n\r\n\t\tthis.startAngle = 180;\r\n\t\tthis.endAngle = 360;\r\n\r\n\t\tthis.hands = new ListTemplate<ClockHand>(new ClockHand());\r\n\t\tthis.hands.events.on(\"inserted\", this.processHand, this, false);\r\n\r\n\t\tthis._disposers.push(new ListDisposer(this.hands));\r\n\t\tthis._disposers.push(this.hands.template);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Gauge chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a [[ClockHand]] when it is added to the chart.\r\n\t *\r\n\t * @param event  Event\r\n\t */\r\n\tprotected processHand(event: IListEvents<ClockHand>[\"inserted\"]): void {\r\n\t\tlet hand: ClockHand = event.newValue;\r\n\t\tif (!hand.axis) {\r\n\t\t\thand.axis = this.xAxes.getIndex(0);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * This function is used to sort element's JSON config properties, so that\r\n\t * some properties that absolutely need to be processed last, can be put at\r\n\t * the end.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param a  Element 1\r\n\t * @param b  Element 2\r\n\t * @return Sorting number\r\n\t */\r\n\tprotected configOrder(a: string, b: string): Ordering {\r\n\t\tif (a == b) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t// Must come last\r\n\t\telse if (a == \"hands\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"hands\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.configOrder(a, b);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GaugeChart\"] = GaugeChart;\r\n","/**\r\n * Defines Percent Chart Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Series, SeriesDataItem, ISeriesProperties, ISeriesDataFields, ISeriesAdapters, ISeriesEvents } from \"./Series\";\r\nimport { ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { Tick } from \"../elements/Tick\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { LegendDataItem, LegendSettings } from \"../../charts/Legend\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { PatternSet } from \"../../core/utils/PatternSet\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { PercentChart } from \"../types/PercentChart\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $ease from \"../../core/utils/Ease\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\r\n\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PercentSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PercentSeriesDataItem extends SeriesDataItem {\r\n\r\n\t/**\r\n\t * A type of slice used for this series.\r\n\t */\r\n\tpublic _slice: Sprite;\r\n\r\n\t/**\r\n\t * A reference to a slice label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _label: Label;\r\n\r\n\t/**\r\n\t * A reference to a slice tick element.\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _tick: Tick;\r\n\r\n\t/**\r\n\t * A reference to a corresponding legend data item.\r\n\t */\r\n\tprotected _legendDataItem: LegendDataItem;\r\n\r\n\t/**\r\n\t * Custom settings for the legend item.\r\n\t * Not used, only added to sattisfy LegendDataItem\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic legendSettings: LegendSettings;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PercentSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PercentSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Adds an `id` attribute the the slice element and returns its id.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic uidAttr(): string {\r\n\t\treturn this.slice.uidAttr();\r\n\t}\r\n\r\n\t/**\r\n\t * Hide the data item (and corresponding visual elements).\r\n\t *\r\n\t * @param duration  Duration (ms)\r\n\t * @param delay     Delay hiding (ms)\r\n\t * @param toValue   Target value for animation\r\n\t * @param fields    Fields to animate while hiding\r\n\t */\r\n\tpublic hide(duration?: number, delay?: number, toValue?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\tif (!fields) {\r\n\t\t\tfields = [\"value\"];\r\n\t\t}\r\n\r\n\t\treturn super.hide(duration, delay, 0, fields);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets visibility of the Data Item.\r\n\t *\r\n\t * @param value Data Item\r\n\t */\r\n\tpublic setVisibility(value: boolean, noChangeValues?: boolean): void {\r\n\t\tif (!noChangeValues) {\r\n\t\t\tif (value) {\r\n\t\t\t\tthis.setWorkingValue(\"value\", this.values[\"value\"].value, 0, 0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.setWorkingValue(\"value\", 0, 0, 0);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.setVisibility(value, noChangeValues);\r\n\t}\r\n\r\n\t/**\r\n\t * Show hidden data item (and corresponding visual elements).\r\n\t *\r\n\t * @param duration  Duration (ms)\r\n\t * @param delay     Delay hiding (ms)\r\n\t * @param fields    Fields to animate while hiding\r\n\t */\r\n\tpublic show(duration?: number, delay?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\tif (!fields) {\r\n\t\t\tfields = [\"value\"];\r\n\t\t}\r\n\t\treturn super.show(duration, delay, fields);\r\n\t}\r\n\r\n\t/**\r\n\t * Category.\r\n\t *\r\n\t * @param value  Category\r\n\t */\r\n\tpublic set category(value: string) {\r\n\t\tthis.setProperty(\"category\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Category\r\n\t */\r\n\tpublic get category(): string {\r\n\t\treturn this.properties.category;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Creates a marker used in the legend for this slice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Marker container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tthis.component.createLegendMarker(marker, this);\r\n\t}\r\n\r\n\t/**\r\n\t * A legend's data item, that corresponds to this data item.\r\n\t *\r\n\t * @param value  Legend data item\r\n\t */\r\n\tpublic set legendDataItem(value: LegendDataItem) {\r\n\t\tthis._legendDataItem = value;\r\n\t\tif (value.label) {\r\n\t\t\tvalue.label.dataItem = this;\r\n\t\t}\r\n\t\tif (value.valueLabel) {\r\n\t\t\tvalue.valueLabel.dataItem = this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Legend data item\r\n\t */\r\n\tpublic get legendDataItem(): LegendDataItem {\r\n\t\treturn this._legendDataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * A Tick element, related to this data item. (slice)\r\n\t *\r\n\t * @readonly\r\n\t * @return Tick element\r\n\t */\r\n\tpublic get tick(): this[\"_tick\"] {\r\n\t\tif (!this._tick) {\r\n\t\t\tlet tick = this.component.ticks.create();\r\n\t\t\tthis._tick = tick;\r\n\t\t\tthis.addSprite(tick);\r\n\t\t\tthis._disposers.push(tick);\r\n\t\t\ttick.parent = this.component.ticksContainer;\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif (this.component) {\r\n\t\t\t\t\tthis.component.ticks.removeValue(tick);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\r\n\r\n\t\t\ttick.visible = this.visible;\r\n\t\t}\r\n\t\treturn this._tick;\r\n\t}\r\n\r\n\t/**\r\n\t * A Label element, related to this data item. (slice)\r\n\t *\r\n\t * @readonly\r\n\t * @return Label element\r\n\t */\r\n\tpublic get label(): this[\"_label\"] {\r\n\t\tif (!this._label) {\r\n\t\t\tlet label = this.component.labels.create();\r\n\t\t\tthis.addSprite(label);\r\n\t\t\tthis._label = label;\r\n\r\n\t\t\tthis._disposers.push(label);\r\n\t\t\tlabel.parent = this.component.labelsContainer;\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif (this.component) {\r\n\t\t\t\t\tthis.component.labels.removeValue(label);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\r\n\t\t\tlabel.visible = this.visible;\r\n\t\t}\r\n\t\treturn this._label;\r\n\t}\r\n\r\n\t/**\r\n\t * An element, related to this data item. (slice)\r\n\t *\r\n\t * @readonly\r\n\t * @return Slice element\r\n\t */\r\n\tpublic get slice(): this[\"_slice\"] {\r\n\t\tif (!this._slice) {\r\n\r\n\t\t\tlet component = this.component;\r\n\r\n\t\t\tlet slice = component.slices.create();\r\n\t\t\tthis.addSprite(slice);\r\n\r\n\t\t\tthis._slice = slice;\r\n\t\t\tthis._disposers.push(slice);\r\n\t\t\tslice.parent = component.slicesContainer;\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tcomponent.slices.removeValue(slice);\r\n\t\t\t}));\r\n\r\n\r\n\t\t\tslice.visible = this.visible;\r\n\r\n\t\t\t// Apply accessibility\r\n\t\t\tif (component.itemsFocusable()) {\r\n\t\t\t\tif (!$type.hasValue(this.component.role)) {\r\n\t\t\t\t\tthis.component.role = \"menu\";\r\n\t\t\t\t}\r\n\t\t\t\tif (!$type.hasValue(slice.role)) {\r\n\t\t\t\t\tslice.role = \"menuitem\";\r\n\t\t\t\t}\r\n\t\t\t\tslice.focusable = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (!$type.hasValue(this.component.role)) {\r\n\t\t\t\t\tthis.component.role = \"list\";\r\n\t\t\t\t}\r\n\t\t\t\tif (!$type.hasValue(slice.role)) {\r\n\t\t\t\t\tslice.role = \"listitem\";\r\n\t\t\t\t}\r\n\t\t\t\tslice.focusable = false;\r\n\t\t\t}\r\n\r\n\t\t\t// Apply screen reader label\r\n\t\t\tif (slice.focusable) {\r\n\t\t\t\tslice.events.on(\"focus\", (ev) => {\r\n\t\t\t\t\tslice.readerTitle = component.populateString(component.itemReaderText, this);\r\n\t\t\t\t}, undefined, false);\r\n\t\t\t\tslice.events.on(\"blur\", (ev) => {\r\n\t\t\t\t\tslice.readerTitle = \"\";\r\n\t\t\t\t}, undefined, false);\r\n\t\t\t}\r\n\t\t\tif (slice.hoverable) {\r\n\t\t\t\tslice.events.on(\"over\", (ev) => {\r\n\t\t\t\t\tslice.readerTitle = component.populateString(component.itemReaderText, this);\r\n\t\t\t\t}, undefined, false);\r\n\t\t\t\tslice.events.on(\"out\", (ev) => {\r\n\t\t\t\t\tslice.readerTitle = \"\";\r\n\t\t\t\t}, undefined, false);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._slice;\r\n\t}\r\n\r\n\t/**\r\n\t * Should dataItem (slice) be hidden in legend?\r\n\t *\r\n\t * @param value Visible in legend?\r\n\t */\r\n\tpublic set hiddenInLegend(value: boolean) {\r\n\t\tthis.setProperty(\"hiddenInLegend\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Disabled in legend?\r\n\t */\r\n\tpublic get hiddenInLegend(): boolean {\r\n\t\treturn this.properties.hiddenInLegend;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PercentSeries]].\r\n */\r\nexport interface IPercentSeriesDataFields extends ISeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds category.\r\n\t */\r\n\tcategory?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds boolean flag if item should be\r\n\t * hidden in legend.\r\n\t */\r\n\thiddenInLegend?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[PercentSeries]].\r\n */\r\nexport interface IPercentSeriesProperties extends ISeriesProperties {\r\n\t/**\r\n\t * A color set to be used for slices.\r\n\t *\r\n\t * For each new subsequent slice, the chart will assign the next color in\r\n\t * this set.\r\n\t */\r\n\tcolors?: ColorSet;\r\n\r\n\t/**\r\n\t * Pattern set to apply to fills.\r\n\t * \r\n\t * @since 4.7.5\r\n\t */\r\n\tpatterns?: PatternSet;\r\n\r\n\t/**\r\n\t * Align labels into nice vertical columns?\r\n\t *\r\n\t * @default true\r\n\t */\r\n\talignLabels?: boolean;\r\n\r\n\t/**\r\n\t * If set to `true` the chart will not show slices with zero values.\r\n\t * \r\n\t * @default false\r\n\t * @since 4.7.9\r\n\t */\r\n\tignoreZeroValues?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PercentSeries]].\r\n */\r\nexport interface IPercentSeriesEvents extends ISeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PercentSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPercentSeriesAdapters extends ISeriesAdapters, IPercentSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[PercentSeries]] which is a base class for [[PieSeries]],\r\n * [[FunnelSeries]], and [[PyramidSeries]].\r\n *\r\n * @see {@link IPercentSeriesEvents} for a list of available Events\r\n * @see {@link IPercentSeriesAdapters} for a list of available Adapters\r\n */\r\nexport class PercentSeries extends Series {\r\n\r\n\t/**\r\n\t * Defines type of the slice elements for the series.\r\n\t */\r\n\tpublic _slice: Sprite;\r\n\r\n\t/**\r\n\t * Defines type of the tick elements for the series.\r\n\t */\r\n\tpublic _tick: Tick;\r\n\r\n\t/**\r\n\t * Defines type of the label elements for the series.\r\n\t */\r\n\tpublic _label: Label;\r\n\r\n\t/**\r\n\t * A reference to chart this series is for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _chart: PercentChart;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IPercentSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPercentSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPercentSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPercentSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: PercentSeriesDataItem;\r\n\r\n\t/**\r\n\t * Container slice elements are put in.\r\n\t */\r\n\tpublic slicesContainer: Container;\r\n\r\n\t/**\r\n\t * Container tick elements are put in.\r\n\t */\r\n\tpublic ticksContainer: Container;\r\n\r\n\t/**\r\n\t * Container label elements are put in.\r\n\t */\r\n\tpublic labelsContainer: Container;\r\n\r\n\t/**\r\n\t * List of slice elements.\r\n\t */\r\n\tprotected _slices: ListTemplate<this[\"_slice\"]>;\r\n\r\n\t/**\r\n\t * List of tick elements.\r\n\t */\r\n\tprotected _ticks: ListTemplate<this[\"_tick\"]>;\r\n\r\n\t/**\r\n\t * List of label elements.\r\n\t */\r\n\tprotected _labels: ListTemplate<this[\"_label\"]>;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"PercentSeries\";\r\n\r\n\t\tthis._addAllDataItems = false;\r\n\r\n\t\tthis.colors = new ColorSet();\r\n\t\tthis.colors.step = 1;\r\n\t\tthis.isMeasured = true;\r\n\t\tthis.calculatePercent = true;\r\n\r\n\t\tlet slicesContainer = this.createChild(Container);\r\n\t\tslicesContainer.shouldClone = false;\r\n\t\tslicesContainer.isMeasured = false;\r\n\t\tthis.slicesContainer = slicesContainer;\r\n\r\n\t\tlet ticksContainer = this.createChild(Container);\r\n\t\tticksContainer.shouldClone = false;\r\n\t\tticksContainer.isMeasured = false;\r\n\t\tticksContainer.layout = \"none\";\r\n\t\tthis.ticksContainer = ticksContainer;\r\n\r\n\t\tlet labelsContainer = this.createChild(Container);\r\n\t\tlabelsContainer.shouldClone = false;\r\n\t\tlabelsContainer.isMeasured = false;\r\n\t\tlabelsContainer.layout = \"none\";\r\n\t\tthis.labelsContainer = labelsContainer;\r\n\r\n\t\tthis.alignLabels = false;\r\n\r\n\t\tthis.bulletsContainer.toFront();\r\n\r\n\t\t// Make all slices focusable\r\n\t\tthis.skipFocusThreshold = 50;\r\n\r\n\t\tlet defaultState = this.defaultState;\r\n\t\tdefaultState.transitionEasing = $ease.sinOut;\r\n\r\n\t\t// Accessibility\r\n\t\tthis.itemReaderText = \"{category}: {value.percent.formatNumber('#.#')}%\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a slice element.\r\n\t *\r\n\t * @return Slice\r\n\t */\r\n\tprotected createSlice(): this[\"_slice\"] {\r\n\t\treturn new Sprite();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a tick element.\r\n\t *\r\n\t * @return Tick\r\n\t */\r\n\tprotected createTick(): this[\"_tick\"] {\r\n\t\treturn new Tick();\r\n\t}\r\n\r\n\t/**\r\n\t * Sreates label element.\r\n\t *\r\n\t * @return label\r\n\t */\r\n\tprotected createLabel(): this[\"_label\"] {\r\n\t\treturn new Label();\r\n\t}\r\n\r\n\t/**\r\n\t * A list of slice elements for the series.\r\n\t *\r\n\t * Use its `template` to configure look and behavior of the slices. E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.slices.template.stroke = am4core.color(\"#fff\");\r\n\t * series.slices.template.strokeWidth = 2;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.slices.template.stroke = am4core.color(\"#fff\");\r\n\t * series.slices.template.strokeWidth = 2;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     // ...\r\n\t *     \"slices\": {\r\n\t *       \"stroke\": \"#fff\",\r\n\t *       \"strokeWidth\": 2\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/list-templates/} for more information about list templates\r\n\t * @return Slices\r\n\t */\r\n\tpublic get slices(): ListTemplate<this[\"_slice\"]> {\r\n\t\tif (!this._slices) {\r\n\t\t\tlet slice = this.createSlice();\r\n\r\n\t\t\tslice.applyOnClones = true;\r\n\t\t\tthis._disposers.push(slice);\r\n\t\t\tthis.initSlice(slice);\r\n\r\n\t\t\tthis._slices = new ListTemplate(slice);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._slices));\r\n\t\t}\r\n\t\treturn this._slices;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of tick elements for the series. Ticks connect slice to its label.\r\n\t *\r\n\t * Use its `template` to configure look and behavior of the ticks. E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.ticks.template.strokeWidth = 2;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.ticks.template.strokeWidth = 2;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     // ...\r\n\t *     \"ticks\": {\r\n\t *       \"strokeWidth\": 2\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/list-templates/} for more information about list templates\r\n\t * @return Ticks\r\n\t */\r\n\tpublic get ticks(): ListTemplate<this[\"_tick\"]> {\r\n\t\tif (!this._ticks) {\r\n\t\t\tlet tick = this.createTick();\r\n\t\t\ttick.applyOnClones = true;\r\n\t\t\tthis._disposers.push(tick);\r\n\t\t\tthis.initTick(tick);\r\n\r\n\t\t\tthis._ticks = new ListTemplate(tick);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._ticks));\r\n\t\t}\r\n\t\treturn this._ticks;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of slice label elements for the series.\r\n\t *\r\n\t * Use its `template` to configure look and behavior of the labels. E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.labels.template.fill = am4core.color(\"#c00\");\r\n\t * series.labels.template.fontSize = 20;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.labels.template.fill = am4core.color(\"#c00\");\r\n\t * series.labels.template.fontSize = 20;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     // ...\r\n\t *     \"labels\": {\r\n\t *       \"stroke\": \"#c00\",\r\n\t *       \"fontSize\": 20\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/list-templates/} for more information about list templates\r\n\t * @return Labels\r\n\t */\r\n\tpublic get labels(): ListTemplate<this[\"_label\"]> {\r\n\t\tif (!this._labels) {\r\n\t\t\tlet label = this.createLabel();\r\n\t\t\tlabel.applyOnClones = true;\r\n\t\t\tthis._disposers.push(label);\r\n\t\t\tthis.initLabel(label);\r\n\r\n\t\t\tthis._labels = new ListTemplate(label);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._labels));\r\n\t\t}\r\n\t\treturn this._labels;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PercentSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new slice element.\r\n\t *\r\n\t * @param sliceType  Type of the slice element\r\n\t * @return Slice\r\n\t */\r\n\tprotected initSlice(slice: this[\"_slice\"]) {\r\n\r\n\t}\r\n\r\n\tprotected initLabel(label: this[\"_label\"]) {\r\n\t\tlabel.text = \"{category}: {value.percent.formatNumber('#.0')}%\";\r\n\t\tlabel.isMeasured = false;\r\n\t\tlabel.padding(5, 5, 5, 5);\r\n\t}\r\n\r\n\tprotected initTick(label: this[\"_tick\"]) {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Validates (processes) data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems(): void {\r\n\t\tthis.colors.reset();\r\n\t\tif (this.patterns) {\r\n\t\t\tthis.patterns.reset();\r\n\t\t}\r\n\t\tsuper.validateDataItems();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\r\n\t\tlet slice = dataItem.slice;\r\n\r\n\t\tif (slice) {\r\n\t\t\tif (slice.fill == undefined) {\r\n\t\t\t\tif (this.patterns) {\r\n\t\t\t\t\tif (!$type.hasValue(slice.stroke)) {\r\n\t\t\t\t\t\tslice.stroke = this.colors.next();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tslice.fill = this.patterns.next();\r\n\t\t\t\t\tif ($type.hasValue(slice.fillOpacity)) {\r\n\t\t\t\t\t\tslice.fill.backgroundOpacity = slice.fillOpacity;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (slice.stroke instanceof Color) {\r\n\t\t\t\t\t\tslice.fill.stroke = slice.stroke;\r\n\t\t\t\t\t\tslice.fill.fill = slice.stroke;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tslice.fill = this.colors.next();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.colors.currentStep += this.colors.step;\r\n\t\t\t}\r\n\r\n\t\t\tif (slice.stroke == undefined) {\r\n\t\t\t\tslice.stroke = slice.fill;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// do this at the end, otherwise bullets won't be positioned properly\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\tif (slice) {\r\n\t\t\tdataItem.bullets.each((key, bullet) => {\r\n\t\t\t\tif (bullet.fill == undefined) {\r\n\t\t\t\t\tbullet.fill = slice.fill;\r\n\t\t\t\t}\r\n\t\t\t\tif (bullet.stroke == undefined) {\r\n\t\t\t\t\tbullet.stroke = slice.stroke;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tthis.updateLegendValue(dataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Validates (processes) data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tsuper.validateData();\r\n\t\tif (this.chart) {\r\n\t\t\tthis.chart.feedLegend();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Arranges slice labels according to position settings.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItems  Data items\r\n\t */\r\n\tprotected arrangeLabels(dataItems: this[\"_dataItem\"][]): void {\r\n\t\tfor (let i = 0, len = dataItems.length; i < len; i++) {\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = dataItems[i];\r\n\r\n\t\t\tlet label = dataItem.label;\r\n\r\n\t\t\tif (label) {\r\n\r\n\t\t\t\tif (label.invalid) {\r\n\t\t\t\t\tlabel.validate();\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tlet lh = label.measuredHeight;\r\n\t\t\t\tif (!label.visible) {\r\n\t\t\t\t\tlh = 0;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (label.pixelY - lh / 2 < -this.maxHeight / 2) {\r\n\t\t\t\t\tlabel.y = -this.maxHeight / 2 + lh / 2;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet nextLabel = this.getNextLabel(i + 1, dataItems);\r\n\r\n\t\t\t\tlet bottom: number = label.pixelY + lh;\r\n\r\n\t\t\t\tif (nextLabel) {\r\n\t\t\t\t\tif (nextLabel.y < bottom) {\r\n\t\t\t\t\t\tnextLabel.y = bottom;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tprotected arrangeLabels2(dataItems: this[\"_dataItem\"][]): void {\r\n\r\n\t\tlet previousTop = this.maxHeight / 2;\r\n\r\n\t\tfor (let i = dataItems.length - 1; i >= 0; i--) {\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = dataItems[i];\r\n\r\n\t\t\tlet label = dataItem.label;\r\n\r\n\t\t\tif (label) {\r\n\t\t\t\tif (label.invalid) {\r\n\t\t\t\t\tlabel.validate();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet lh = label.measuredHeight;\r\n\t\t\t\tif (!label.visible) {\r\n\t\t\t\t\tlh = 0;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (i == dataItems.length - 1) {\r\n\t\t\t\t\tpreviousTop += lh / 2;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (label.pixelY + lh > previousTop) {\r\n\t\t\t\t\tlabel.y = previousTop - lh;\r\n\t\t\t\t\tpreviousTop = label.y;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the next label according to `index`.\r\n\t *\r\n\t * @param index      Current index\r\n\t * @param dataItems  Data items\r\n\t * @return Label element\r\n\t */\r\n\tprotected getNextLabel(index: number, dataItems: this[\"_dataItem\"][]): this[\"_label\"] {\r\n\t\tif (dataItems.length >= index) {\r\n\t\t\tlet nextDataItem: this[\"_dataItem\"] = dataItems[index];\r\n\t\t\tif (nextDataItem) {\r\n\t\t\t\tif (nextDataItem.label) {\r\n\t\t\t\t\tif (nextDataItem.visible) {\r\n\t\t\t\t\t\treturn nextDataItem.label;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\treturn this.getNextLabel(index + 1, dataItems);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn this.getNextLabel(index + 1, dataItems);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A color set to be used for slices.\r\n\t *\r\n\t * For each new subsequent slice, the chart will assign the next color in\r\n\t * this set.\r\n\t *\r\n\t * @param value  Color set\r\n\t */\r\n\tpublic set colors(value: ColorSet) {\r\n\t\tthis.setPropertyValue(\"colors\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Color set\r\n\t */\r\n\tpublic get colors(): ColorSet {\r\n\t\treturn this.getPropertyValue(\"colors\");\r\n\t}\r\n\r\n\t/**\r\n\t * A [[PatternSet]] to use when creating patterned fills for slices.\r\n\t *\r\n\t * @since 4.7.5\r\n\t * @param value  Pattern set\r\n\t */\r\n\tpublic set patterns(value: PatternSet) {\r\n\t\tthis.setPropertyValue(\"patterns\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Pattern set\r\n\t */\r\n\tpublic get patterns(): PatternSet {\r\n\t\treturn this.getPropertyValue(\"patterns\");\r\n\t}\r\n\r\n\t/**\r\n\t * Binds related legend data item's visual settings to this series' visual\r\n\t * settings.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker    Container\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic createLegendMarker(marker: Container, dataItem?: this[\"_dataItem\"]): void {\r\n\t\t$iter.each(marker.children.iterator(), (child) => {\r\n\t\t\tlet slice: this[\"_slice\"] = dataItem.slice;\r\n\r\n\t\t\tchild.defaultState.properties.fill = slice.fill;\r\n\t\t\tchild.defaultState.properties.stroke = slice.stroke;\r\n\t\t\tchild.defaultState.properties.fillOpacity = slice.fillOpacity;\r\n\t\t\tchild.defaultState.properties.strokeOpacity = slice.strokeOpacity;\r\n\r\n\t\t\tchild.fill = slice.fill;\r\n\t\t\tchild.stroke = slice.stroke;\r\n\t\t\tchild.fillOpacity = slice.fillOpacity;\r\n\t\t\tchild.strokeOpacity = slice.strokeOpacity;\r\n\r\n\t\t\tif (child.fill == undefined) {\r\n\t\t\t\tchild.__disabled = true;\r\n\t\t\t}\r\n\r\n\t\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\t\tlegendDataItem.color = slice.fill;\r\n\t\t\tlegendDataItem.colorOrig = slice.fill;\r\n\r\n\t\t\tchild.addDisposer(slice.events.on(\"propertychanged\", (ev) => {\r\n\t\t\t\tif (ev.property == \"fill\") {\r\n\r\n\t\t\t\t\tchild.__disabled = false;\r\n\r\n\t\t\t\t\tif (!child.isActive) {\r\n\t\t\t\t\t\tchild.fill = slice.fill;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchild.defaultState.properties.fill = slice.fill;\r\n\t\t\t\t\tlegendDataItem.color = slice.fill;\r\n\t\t\t\t\tlegendDataItem.colorOrig = slice.fill;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (ev.property == \"stroke\") {\r\n\t\t\t\t\tif (!child.isActive) {\r\n\t\t\t\t\t\tchild.stroke = slice.stroke;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchild.defaultState.properties.stroke = slice.stroke;\r\n\t\t\t\t}\r\n\t\t\t}, undefined, false));\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Repositions bullets when slice's size changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Event\r\n\t */\r\n\tprotected handleSliceScale(event: AMEvent<this[\"_slice\"], ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tlet slice: this[\"_slice\"] = event.target;\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>slice.dataItem;\r\n\t\t$iter.each(dataItem.bullets.iterator(), (a) => {\r\n\t\t\tlet value = a[1];\r\n\t\t\tthis.positionBullet(value);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Repositions bullet and labels when slice moves.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Event\r\n\t */\r\n\tprotected handleSliceMove(event: AMEvent<this[\"_slice\"], ISpriteEvents>[\"propertychanged\"]): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[PercentSeries]].\r\n\t *\r\n\t * @param source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.slices.template.copyFrom(source.slices.template);\r\n\t\tthis.labels.template.copyFrom(source.labels.template);\r\n\t\tthis.ticks.template.copyFrom(source.ticks.template);\r\n\t\tthis.colors = source.colors.clone();\r\n\t}\r\n\r\n\t/**\r\n\t * Align labels into nice vertical columns?\r\n\t *\r\n\t * This will ensure that labels never overlap with each other.\r\n\t *\r\n\t * Arranging labels into columns makes them more readble, and better user\r\n\t * experience.\r\n\t *\r\n\t * If set to `false` labels will be positioned at `label.radius` distance,\r\n\t * and may, in some cases, overlap.\r\n\t *\r\n\t * @default true\r\n\t * @param value  Align labels?\r\n\t */\r\n\tpublic set alignLabels(value: boolean) {\r\n\t\tthis.setAlignLabels(value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Align labels?\r\n\t */\r\n\tpublic get alignLabels(): boolean {\r\n\t\treturn this.getPropertyValue(\"alignLabels\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setAlignLabels(value: boolean) {\r\n\t\tthis.setPropertyValue(\"alignLabels\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * If set to `true` the chart will not show slices with zero values.\r\n\t * \r\n\t * @default false\r\n\t * @since 4.7.9\r\n\t * @param  value  Ignore zero values\r\n\t */\r\n\tpublic set ignoreZeroValues(value: boolean) {\r\n\t\tthis.setPropertyValue(\"ignoreZeroValues\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Ignore zero values\r\n\t */\r\n\tpublic get ignoreZeroValues(): boolean {\r\n\t\treturn this.getPropertyValue(\"ignoreZeroValues\");\r\n\t}\r\n\r\n\t/**\r\n\t * Updates corresponding legend data item with current values.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic updateLegendValue(dataItem?: this[\"_dataItem\"]) {\r\n\t\tif (dataItem) {\r\n\t\t\tlet legendDataItem = dataItem.legendDataItem;\r\n\t\t\tlet legendSettings = dataItem.legendSettings;\r\n\r\n\t\t\tif (legendDataItem && legendSettings) {\r\n\r\n\t\t\t\tif (legendSettings) {\r\n\t\t\t\t\tif (legendSettings.labelText) {\r\n\t\t\t\t\t\tlegendDataItem.label.text = legendSettings.labelText;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (legendSettings.itemLabelText) {\r\n\t\t\t\t\t\tlegendDataItem.label.text = legendSettings.itemLabelText;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (legendSettings.valueText) {\r\n\t\t\t\t\t\tlegendDataItem.valueLabel.text = legendSettings.valueText;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (legendSettings.itemValueText) {\r\n\t\t\t\t\t\tlegendDataItem.valueLabel.text = legendSettings.itemValueText;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PercentSeries\"] = PercentSeries;\r\nregistry.registeredClasses[\"PercentSeriesDataItem\"] = PercentSeriesDataItem;\r\n\r\n/**\r\n * Add default responsive rules\r\n */\r\n\r\n/**\r\n * Disable labels and ticks.\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.maybeXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof PercentSeries) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\r\n\t\t\tlet labelState = target.labels.template.states.create(stateId);\r\n\t\t\tlabelState.properties.disabled = true;\r\n\r\n\t\t\tlet tickState = target.ticks.template.states.create(stateId);\r\n\t\t\ttickState.properties.disabled = true;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n","/**\r\n * Percent chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, ISerialChartProperties, ISerialChartDataFields, ISerialChartAdapters, ISerialChartEvents, SerialChartDataItem } from \"./SerialChart\";\r\nimport { PercentSeries, PercentSeriesDataItem } from \"../series/PercentSeries\";\r\nimport { Legend } from \"../Legend\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PercentChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PercentChartDataItem extends SerialChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PercentChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PercentChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PercentChart]].\r\n */\r\nexport interface IPercentChartDataFields extends ISerialChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PercentChart]]\r\n */\r\nexport interface IPercentChartProperties extends ISerialChartProperties { }\r\n\r\n/**\r\n * Defines events for [[PercentChart]].\r\n */\r\nexport interface IPercentChartEvents extends ISerialChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PercentChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPercentChartAdapters extends ISerialChartAdapters, IPercentChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This is a base class for \"percent-based\" chart types like Pie and Funnel.\r\n *\r\n * @see {@link IPercentChartEvents} for a list of available Events\r\n * @see {@link IPercentChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for Pie chart documentation\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for Sliced chart documentation\r\n */\r\nexport class PercentChart extends SerialChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IPercentChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPercentChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPercentChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPercentChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: PercentSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"PercentChart\";\r\n\r\n\t\tthis.align = \"none\";\r\n\t\tthis.valign = \"none\";\r\n\r\n\t\t// so that the chart is always drawn, even the legend wants all the space\r\n\t\tthis.chartContainer.minHeight = 50;\r\n\t\tthis.chartContainer.minWidth = 50;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates chart data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tsuper.validateData();\r\n\t\tthis.feedLegend();\r\n\t}\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t * @ignore\r\n\t */\r\n\tpublic feedLegend(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\r\n\t\t\tlet legendData: any[] = [];\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\tif (!series.hiddenInLegend) {\r\n\t\t\t\t\t$iter.each(series.dataItems.iterator(), (dataItem) => {\r\n\t\t\t\t\t\tif (!dataItem.hiddenInLegend) {\r\n\t\t\t\t\t\t\tlegendData.push(<PercentSeriesDataItem>dataItem);\r\n\t\t\t\t\t\t\tif(!dataItem.legendSettings){\r\n\t\t\t\t\t\t\t\tdataItem.legendSettings = series.legendSettings;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tlegend.data = legendData;\r\n\t\t\tlegend.dataFields.name = \"category\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new [[PercentSeries]].\r\n\t *\r\n\t * @return New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new PercentSeries();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setLegend(legend: Legend) {\r\n\t\tsuper.setLegend(legend);\r\n\t\tif (legend) {\r\n\t\t\tlegend.labels.template.text = \"{category}\";\r\n\t\t\tlegend.valueLabels.template.text = \"{value.percent.formatNumber('#.0')}%\";\r\n\r\n\t\t\tlegend.itemContainers.template.events.on(\"over\", (event) => {\r\n\t\t\t\tlet percentSeriesDataItem: PercentSeriesDataItem = <PercentSeriesDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tif (percentSeriesDataItem.visible && !percentSeriesDataItem.isHiding) {\r\n\t\t\t\t\tlet slice = percentSeriesDataItem.slice;\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\tslice.dispatchImmediately(\"over\");\t\t\t\t\t\r\n\t\t\t\t\tslice.isHover = true;\t\t\t\t\r\n\t\t\t\t\tslice.interactions.isRealHover = true;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tlegend.itemContainers.template.events.on(\"out\", (event) => {\r\n\t\t\t\tlet percentSeriesDataItem: PercentSeriesDataItem = <PercentSeriesDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tlet slice = percentSeriesDataItem.slice;\r\n\t\t\t\tslice.dispatchImmediately(\"out\");\r\n\t\t\t\tslice.isHover = false;\t\t\t\t\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @hidden\r\n */\r\nregistry.registeredClasses[\"PercentChart\"] = PercentChart;\r\nregistry.registeredClasses[\"PercentChartDataItem\"] = PercentChartDataItem;\r\n","/**\r\n * Pie tick module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Tick, ITickProperties, ITickAdapters, ITickEvents } from \"../elements/Tick\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { PieSeries } from \"../series/PieSeries\"\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[PieTick]].\r\n */\r\nexport interface IPieTickProperties extends ITickProperties { }\r\n\r\n/**\r\n * Defines events for [[PieTick]].\r\n */\r\nexport interface IPieTickEvents extends ITickEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieTick]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieTickAdapters extends ITickAdapters, IPieTickProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws an tick line for a pie slice connecting it to a related label.\r\n *\r\n * @see {@link IPieTickEvents} for a list of available events\r\n * @see {@link IPieTickAdapters} for a list of available Adapters\r\n */\r\nexport class PieTick extends Tick {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPieTickProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPieTickAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPieTickEvents;\r\n\r\n\t/**\r\n\t * A label element this tick is attached to.\r\n\t */\r\n\tprotected _label = new MutableValueDisposer<AxisLabelCircular>();\r\n\r\n\t/**\r\n\t * A slice element this tick is attached to.\r\n\t */\r\n\tprotected _slice = new MutableValueDisposer<Slice>();\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieTick\";\r\n\t\tthis.element = this.paper.add(\"polyline\");\r\n\t\tthis._disposers.push(this._label);\r\n\t\tthis._disposers.push(this._slice);\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tlet slice: Slice = this.slice;\r\n\t\tlet label = this.label;\r\n\r\n\t\tlet series = <PieSeries>slice.dataItem.component;\r\n\r\n\t\tif (slice && slice.radius > 0 && label && label.text) {\r\n\t\t\tlet x0 = slice.dx + slice.slice.dx + slice.pixelX + slice.ix * slice.radius * slice.scale;\r\n\t\t\tlet y0 = slice.dy + slice.slice.dy + slice.pixelY + slice.iy * slice.radiusY * slice.scale;\r\n\r\n\t\t\tlet x1: number;\r\n\t\t\tlet y1: number;\r\n\r\n\t\t\tlet x2: number;\r\n\t\t\tlet y2: number;\r\n\r\n\t\t\tif (series.alignLabels) {\r\n\t\t\t\tx1 = label.pixelX - this.length;\r\n\t\t\t\ty1 = label.pixelY;\r\n\r\n\t\t\t\tx2 = label.pixelX;\r\n\t\t\t\ty2 = y1;\r\n\r\n\t\t\t\tif (label.horizontalCenter == \"right\") {\r\n\t\t\t\t\tx1 += 2 * this.length;\r\n\t\t\t\t\tx2 = x1 - this.length;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tconst r = label.pixelRadius(slice.radius);\r\n\r\n\t\t\t\tx1 = x0 + r * slice.ix;\r\n\t\t\t\ty1 = y0 + r * slice.iy;\r\n\r\n\t\t\t\tx2 = x1;\r\n\t\t\t\ty2 = y1;\r\n\t\t\t}\r\n\r\n\t\t\tthis.element.attr({ \"points\": [x0, y0, x1, y1, x2, y2] });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Slice element tick is attached to.\r\n\t *\r\n\t * @param slice  Slice\r\n\t */\r\n\tpublic set slice(slice: Slice) {\r\n\t\tthis._slice.set(slice, new MultiDisposer([\r\n\t\t\tslice.events.on(\"transformed\", this.invalidate, this),\r\n\t\t\tslice.events.on(\"validated\", this.invalidate, this)\r\n\t\t]));\r\n\t}\r\n\r\n\t/**\r\n\t * @return Slice\r\n\t */\r\n\tpublic get slice(): Slice {\r\n\t\treturn this._slice.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Label element tick is attached to.\r\n\t *\r\n\t * @param label  Label\r\n\t */\r\n\tpublic set label(label: AxisLabelCircular) {\r\n\t\tthis._label.set(label, label.events.on(\"transformed\", this.invalidate, this, false));\r\n\t}\r\n\r\n\t/**\r\n\t * @return Label\r\n\t */\r\n\tpublic get label(): AxisLabelCircular {\r\n\t\treturn this._label.get();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieTick\"] = PieTick;\r\n","/**\r\n * Defines Pie Chart Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IPercentSeriesAdapters, IPercentSeriesDataFields, IPercentSeriesEvents, IPercentSeriesProperties, PercentSeries, PercentSeriesDataItem } from \"./PercentSeries\";\r\nimport { ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\n//import { Slice3D } from \"../../core/elements/3D/Slice3D\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { PieTick } from \"../elements/PieTick\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { PieChart } from \"../types/PieChart\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieSeriesDataItem extends PercentSeriesDataItem {\r\n\r\n\t/**\r\n\t * A type of slice used for this series.\r\n\t */\r\n\tpublic _slice: Slice;\r\n\r\n\t/**\r\n\t * A reference to a slice label element.\r\n\t */\r\n\tpublic _label: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * A reference to a slice tick element.\r\n\t */\r\n\tpublic _tick: PieTick;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PieSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeriesDataItem\";\r\n\r\n\t\tthis.values.radiusValue = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Slice's radius, if other than default.\r\n\t *\r\n\t * @param value  Radius\r\n\t */\r\n\tpublic set radiusValue(value: number) {\r\n\t\tthis.setValue(\"radiusValue\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius\r\n\t */\r\n\tpublic get radiusValue(): number {\r\n\t\treturn this.values.radiusValue.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Hide the data item (and corresponding visual elements).\r\n\t *\r\n\t * @param duration  Duration (ms)\r\n\t * @param delay     Delay hiding (ms)\r\n\t * @param toValue   Target value for animation\r\n\t * @param fields    Fields to animate while hiding\r\n\t */\r\n\tpublic hide(duration?: number, delay?: number, toValue?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\treturn super.hide(duration, delay, 0, [\"value\", \"radiusValue\"]);\r\n\t}\r\n\r\n\t/**\r\n\t * Show hidden data item (and corresponding visual elements).\r\n\t *\r\n\t * @param duration  Duration (ms)\r\n\t * @param delay     Delay hiding (ms)\r\n\t * @param fields    Fields to animate while hiding\r\n\t */\r\n\tpublic show(duration?: number, delay?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\treturn super.show(duration, delay, [\"value\", \"radiusValue\"]);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieSeries]].\r\n */\r\nexport interface IPieSeriesDataFields extends IPercentSeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds item's radius value.\r\n\t */\r\n\tradiusValue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[PieSeries]].\r\n */\r\nexport interface IPieSeriesProperties extends IPercentSeriesProperties {\r\n\r\n\t/**\r\n\t * Outer radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Start angle for the series' slices in degrees. (0-360)\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle for the series' slices in degrees. (0-360)\r\n\t */\r\n\tendAngle?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[PieSeries]].\r\n */\r\nexport interface IPieSeriesEvents extends IPercentSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieSeriesAdapters extends IPercentSeriesAdapters, IPieSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a slice series on a Pie chart.\r\n *\r\n * @see {@link IPieSeriesEvents} for a list of available Events\r\n * @see {@link IPieSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class PieSeries extends PercentSeries {\r\n\r\n\tpublic _slice: Slice;\r\n\r\n\tpublic _tick: PieTick;\r\n\r\n\tpublic _label: AxisLabelCircular;\r\n\r\n\tpublic _chart: PieChart;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IPieSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPieSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPieSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPieSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: PieSeriesDataItem;\r\n\r\n\t/**\r\n\t * Holds current angle for the next slice to start on.\r\n\t */\r\n\tprotected _currentStartAngle: number;\r\n\r\n\t/**\r\n\t * Data items that fall to the left side of the pie.\r\n\t */\r\n\tprotected _leftItems: this[\"_dataItem\"][];\r\n\r\n\t/**\r\n\t * Data items that fall to the right side of the pie.\r\n\t */\r\n\tprotected _rightItems: this[\"_dataItem\"][];\r\n\r\n\t/**\r\n\t * [_arcRect description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _arcRect: IRectangle;\r\n\r\n\t/**\r\n\t * [_maxRadiusPercent description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _maxRadiusPercent: number;\r\n\r\n\t/**\r\n\t * [_pixelRadius description]\r\n\t *\r\n\t * @ignore this is set by pie chart, not by user\r\n\t */\r\n\tprotected _pixelRadius: number;\r\n\r\n\t/**\r\n\t * [_pixelInnerRadius description]\r\n\t *\r\n\t * @ignore this is set by pie chart, not by user\r\n\t */\r\n\tprotected _pixelInnerRadius: number;\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _startAngleInternal: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _endAngleInternal: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"PieSeries\";\r\n\r\n\t\tthis.alignLabels = true;\r\n\t\t//this.startAngle = -90;\r\n\t\t//this.endAngle = 270;\r\n\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.labels.template.radius = percent(5);\r\n\r\n\t\tthis.addDisposer(this.labels.template.events.on(\"enabled\", this.invalidate, this, false));\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * creates slice\r\n\t */\r\n\tprotected createSlice(): this[\"_slice\"] {\r\n\t\treturn new Slice();\r\n\t}\r\n\r\n\t/**\r\n\t * creates tick\r\n\t */\r\n\tprotected createTick(): this[\"_tick\"] {\r\n\t\treturn new PieTick();\r\n\t}\r\n\r\n\t/**\r\n\t * creates label\r\n\t */\r\n\tprotected createLabel(): this[\"_label\"] {\r\n\t\treturn new AxisLabelCircular();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pie Slice Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PieSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Inits slice.\r\n\t *\r\n\t * @param slice to init\r\n\t */\r\n\tprotected initSlice(slice: this[\"_slice\"]) {\r\n\t\tslice.isMeasured = false;\r\n\t\tslice.defaultState.properties.scale = 1;\r\n\t\tslice.observe(\"scale\", this.handleSliceScale, this);\r\n\t\tslice.observe([\"dx\", \"dy\", \"x\", \"y\", \"shiftRadius\"], this.handleSliceMove, this);\r\n\t\tslice.tooltipText = \"{category}: {value.percent.formatNumber('#.#')}% ({value.value})\";\r\n\r\n\t\tlet hoverState = slice.states.create(\"hover\");\r\n\t\thoverState.properties.scale = 1.05;\r\n\r\n\t\tlet defaultState = slice.defaultState;\r\n\t\tdefaultState.properties.shiftRadius = 0;\r\n\r\n\t\tslice.togglable = true;\r\n\r\n\t\tslice.events.on(\"toggled\", (event) => {\r\n\t\t\tevent.target.hideTooltip();\r\n\r\n\t\t\t// The following takes care of removing hover on subsequent click of\r\n\t\t\t// a slice\r\n\t\t\tif (event.target.interactions.lastHitPointer\r\n\t\t\t\t&& event.target.interactions.lastHitPointer.touch\r\n\t\t\t\t&& !event.target.isActive) {\r\n\t\t\t\tevent.target.isHover = false;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet activeState = slice.states.create(\"active\");\r\n\t\tactiveState.properties.shiftRadius = 0.10;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tthis._leftItems = [];\r\n\t\tthis._rightItems = [];\r\n\r\n\t\tthis._currentStartAngle = this.startAngle;\r\n\t\tthis._arcRect = $math.getArcRect(this.startAngle, this.endAngle);\r\n\r\n\t\tthis._maxRadiusPercent = 0;\r\n\t\tfor (let i = this.startIndex; i < this.endIndex; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tlet radiusValuePercent = dataItem.values.radiusValue.percent;\r\n\t\t\tif (radiusValuePercent > this._maxRadiusPercent) {\r\n\t\t\t\tthis._maxRadiusPercent = radiusValuePercent;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tif (this.alignLabels) {\r\n\t\t\tif (this.startAngle > this.endAngle) {\r\n\t\t\t\tthis._rightItems.reverse();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._leftItems.reverse()\r\n\t\t\t}\r\n\r\n\r\n\t\t\tthis._rightItems.sort((a, b) => {\r\n\t\t\t\tlet aAngle = (a.slice.middleAngle + 360) % 360;\r\n\t\t\t\tlet bAngle = (b.slice.middleAngle + 360) % 360;\r\n\r\n\t\t\t\tif (aAngle > 270) {\r\n\t\t\t\t\taAngle -= 360;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (bAngle > 270) {\r\n\t\t\t\t\tbAngle -= 360;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (aAngle < bAngle) {\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse if (aAngle > bAngle) {\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tthis._leftItems.sort((a, b) => {\r\n\r\n\t\t\t\tlet aAngle = (a.slice.middleAngle + 360) % 360;\r\n\t\t\t\tlet bAngle = (b.slice.middleAngle + 360) % 360;\r\n\r\n\t\t\t\tif (aAngle < bAngle) {\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse if (aAngle > bAngle) {\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tthis.arrangeLabels(this._rightItems);\r\n\t\t\tthis.arrangeLabels2(this._rightItems);\r\n\t\t\tthis.arrangeLabels(this._leftItems);\r\n\t\t\tthis.arrangeLabels2(this._leftItems);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\tif (this.pixelRadius > 0) {\r\n\r\n\t\t\tif (this.ignoreZeroValues && (dataItem.value == 0 || dataItem.value == null)) {\r\n\t\t\t\tdataItem.__disabled = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataItem.__disabled = false;\r\n\t\t\t}\r\n\r\n\t\t\t// SLICE\r\n\t\t\tlet slice: Slice = dataItem.slice;\r\n\t\t\tslice.radius = this.pixelRadius;\r\n\r\n\t\t\tif ($type.isNumber(dataItem.radiusValue)) {\r\n\t\t\t\tslice.radius = this.pixelInnerRadius + (this.pixelRadius - this.pixelInnerRadius) * dataItem.values.radiusValue.percent / this._maxRadiusPercent;\r\n\t\t\t}\r\n\t\t\tif (!(slice.innerRadius instanceof Percent)) {\r\n\t\t\t\tslice.innerRadius = this.pixelInnerRadius;\r\n\t\t\t}\r\n\t\t\tslice.startAngle = this._currentStartAngle;\r\n\r\n\t\t\tslice.arc = Math.abs(dataItem.values.value.percent) * (this.endAngle - this.startAngle) / 100;\r\n\r\n\t\t\t// LABEL\r\n\t\t\tif (!this.labels.template.disabled) {\r\n\t\t\t\tlet label = dataItem.label;\r\n\r\n\t\t\t\tlet tick = dataItem.tick;\r\n\t\t\t\ttick.slice = slice;\r\n\t\t\t\ttick.label = label;\r\n\r\n\t\t\t\tlet normalizedMiddleAngle: number = (slice.middleAngle + 360) % 360; // force angle to be 0 - 360;\r\n\r\n\t\t\t\tlet point: IPoint;\r\n\r\n\t\t\t\tif (this.alignLabels) {\r\n\t\t\t\t\tlet labelRadius = label.pixelRadius(slice.radius);\r\n\t\t\t\t\tlet x: number = tick.length + labelRadius;\r\n\t\t\t\t\tlabel.dx = 0;\r\n\t\t\t\t\tlabel.dy = 0;\r\n\t\t\t\t\tlabel.verticalCenter = \"middle\";\r\n\t\t\t\t\tlet arcRect = this._arcRect;\r\n\t\t\t\t\t// right half\r\n\t\t\t\t\tif (normalizedMiddleAngle > 270 || normalizedMiddleAngle <= 90) {\r\n\t\t\t\t\t\tx += (arcRect.width + arcRect.x) * this.pixelRadius;\r\n\t\t\t\t\t\tlabel.horizontalCenter = \"left\";\r\n\t\t\t\t\t\tthis._rightItems.push(dataItem);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// left half\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tx -= arcRect.x * this.pixelRadius;\r\n\t\t\t\t\t\tlabel.horizontalCenter = \"right\";\r\n\t\t\t\t\t\tthis._leftItems.push(dataItem);\r\n\t\t\t\t\t\tx *= -1;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet distance = slice.radius + tick.length + labelRadius;\r\n\t\t\t\t\tpoint = { x: x, y: slice.iy * distance };\r\n\t\t\t\t\tlabel.moveTo(point);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlet depth = (<any>slice)[\"depth\"];\r\n\t\t\t\t\tif (!$type.isNumber(depth)) {\r\n\t\t\t\t\t\tdepth = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlabel.fixPosition(slice.middleAngle, slice.radius, slice.radiusY, 0, -depth);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis._currentStartAngle += slice.arc;\r\n\r\n\t\t\t// do this at the end, otherwise bullets won't be positioned properly\r\n\t\t\tsuper.validateDataElement(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius for the series' slices in pixels or [[Percent]].\r\n\t *\r\n\t * @param value  Radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"radius\", value, true, false, 10, false)) {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius\r\n\t * @ignore\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn this._pixelRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic set pixelRadius(value: number) {\r\n\t\tif (this._pixelRadius != value) {\r\n\t\t\tthis._pixelRadius = value;\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Pixel inner radius\r\n\t * @ignore\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn this._pixelInnerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic set pixelInnerRadius(value: number) {\r\n\t\tif (this._pixelInnerRadius != value) {\r\n\t\t\tthis._pixelInnerRadius = value;\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @param value  Radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @param value  Angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", $math.normalizeAngle(value), true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\tlet startAngle = this.getPropertyValue(\"startAngle\");\r\n\t\tif ($type.isNumber(startAngle)) {\r\n\t\t\treturn startAngle;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._startAngleInternal;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * End angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @param value  Angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\tlet endAngle = this.getPropertyValue(\"endAngle\");\r\n\t\tif ($type.isNumber(endAngle)) {\r\n\t\t\treturn endAngle;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._endAngleInternal;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Positions series bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet  Bullet\r\n\t */\r\n\tpublic positionBullet(bullet: Bullet): void {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>bullet.dataItem;\r\n\t\tlet slice: Slice = dataItem.slice;\r\n\r\n\t\tlet locationX = bullet.locationX;\r\n\t\tif (!$type.isNumber(locationX)) {\r\n\t\t\tlocationX = 0.5;\r\n\t\t}\r\n\t\tlet locationY = bullet.locationY;\r\n\t\tif (!$type.isNumber(locationY)) {\r\n\t\t\tlocationY = 1;\r\n\t\t}\r\n\r\n\t\tlet angle = slice.startAngle + slice.arc * locationX;\r\n\r\n\t\tbullet.x = locationY * slice.radius * $math.cos(angle);\r\n\t\tbullet.y = locationY * slice.radiusY * $math.sin(angle);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Repositions bullet and labels when slice moves.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Event\r\n\t */\r\n\tprotected handleSliceMove(event: AMEvent<this[\"_slice\"], ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (!this.alignLabels) {\r\n\r\n\t\t\tlet slice = event.target;\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>slice.dataItem;\r\n\t\t\t// moving textelement, as label dx and dy are already employed for aligning\r\n\t\t\t//@labeltodo\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tlet label = dataItem.label;\r\n\t\t\t\tif (label) {\r\n\t\t\t\t\tlabel.dx = label.fdx + slice.dx + slice.pixelX;\r\n\t\t\t\t\tlabel.dy = label.fdy + slice.dy + slice.pixelY;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns bounding box (square) for this element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic get bbox(): IRectangle {\r\n\t\tif (this.definedBBox) {\r\n\t\t\treturn this.definedBBox;\r\n\t\t}\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\treturn $math.getArcRect(chart.startAngle, chart.endAngle, this.pixelRadius);\r\n\t\t}\r\n\r\n\t\treturn $math.getArcRect(this.startAngle, this.endAngle, this.pixelRadius);\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieSeries\"] = PieSeries;\r\nregistry.registeredClasses[\"PieSeriesDataItem\"] = PieSeriesDataItem;\r\n","/**\r\n * Pie chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { PercentChart, IPercentChartProperties, IPercentChartDataFields, IPercentChartAdapters, IPercentChartEvents, PercentChartDataItem } from \"./PercentChart\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { PieSeries } from \"../series/PieSeries\";\r\nimport { IListEvents } from \"../../core/utils/List\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieChartDataItem extends PercentChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PieChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieChart]].\r\n */\r\nexport interface IPieChartDataFields extends IPercentChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PieChart]]\r\n */\r\nexport interface IPieChartProperties extends IPercentChartProperties {\r\n\r\n\t/**\r\n\t * Outer radius of the pie.\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Relative inner radius (0-1).\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * An angle pie starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle pie ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t */\r\n\tendAngle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieChart]].\r\n */\r\nexport interface IPieChartEvents extends IPercentChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieChartAdapters extends IPercentChartAdapters, IPieChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Pie chart.\r\n *\r\n * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.PieChart);\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czechia\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * let series = chart.series.push(new am4charts.PieSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.PieChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"PieChart\");\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czechia\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * var series = chart.series.push(new am4charts.PieSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"PieSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"value\": \"litres\",\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"Lithuania\",\r\n * \t\t\"litres\": 501.9\r\n * \t}, {\r\n * \t\t\"country\": \"Czechia\",\r\n * \t\t\"litres\": 301.9\r\n * \t}, {\r\n * \t\t\"country\": \"Ireland\",\r\n * \t\t\"litres\": 201.1\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"PieChart\");\r\n * ```\r\n *\r\n * @see {@link IPieChartEvents} for a list of available Events\r\n * @see {@link IPieChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for documentation\r\n * @important\r\n */\r\nexport class PieChart extends PercentChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IPieChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPieChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPieChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPieChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: PieSeries;\r\n\r\n\tprotected _chartPixelRadius:number;\r\n\r\n\tprotected _chartPixelInnerRadius:number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.innerRadius = 0;\r\n\t\tthis.radius = percent(80);\r\n\t\tthis.align = \"none\";\r\n\t\tthis.valign = \"none\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tlet seriesContainer = this.seriesContainer;\r\n\t\tseriesContainer.isMeasured = true;\r\n\t\tseriesContainer.valign = \"middle\";\r\n\t\tseriesContainer.align = \"center\";\r\n\t\tseriesContainer.layout = \"absolute\";\r\n\t\tseriesContainer.width = undefined;\r\n\t\tseriesContainer.height = undefined;\r\n\r\n\t\t// so that the pie is always drawn, even the legend wants all the space\r\n\t\tthis.chartContainer.minHeight = 50;\r\n\t\tthis.chartContainer.minWidth = 50;\r\n\r\n\t\tthis.chartContainer.events.on(\"maxsizechanged\", this.updateRadius, this, false); // need this for the chart to change radius if legend is removed/disabled\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pie chart\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the chart, causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateLayout(): void {\r\n\t\tsuper.validateLayout();\r\n\t\tthis.updateRadius();\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new [[Series]] object with required parameters when it is\r\n\t * added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Event\r\n\t */\r\n\tpublic handleSeriesAdded(event: IListEvents<PieSeries>[\"inserted\"]): void {\r\n\t\tsuper.handleSeriesAdded(event);\r\n\t\tthis._chartPixelRadius = undefined;\r\n\t\tthis.updateSeriesAngles();\r\n\t}\r\n\r\n\tprotected updateSeriesAngles(){\r\n\t\tthis.series.each((series)=>{\r\n\t\t\tseries._startAngleInternal = this.startAngle;\r\n\t\t\tseries._endAngleInternal = this.endAngle;\r\n\t\t\t//series.defaultState.properties.startAngle = this.startAngle;\r\n\t\t\t//series.defaultState.properties.endAngle = this.endAngle;\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Recalculates pie's radius, based on a number of criteria.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateRadius(): void {\r\n\r\n\t\tlet chartCont = this.chartContainer;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\t\tlet innerRect: IRectangle = { x: 0, y: 0, width: 0, height: 0 };\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tinnerRect = $math.getArcRect(this.startAngle, this.endAngle, innerRadius.value);\r\n\t\t}\r\n\t\t// @todo handle this when innerRadius set in pixels (do it for radar also)\r\n\r\n\t\trect = $math.getCommonRectangle([rect, innerRect]);\r\n\r\n\t\tlet maxRadius = Math.min(chartCont.innerWidth / rect.width, chartCont.innerHeight / rect.height);\r\n\r\n\t\tif(!$type.isNumber(maxRadius)){\r\n\t\t\tmaxRadius = 0;\r\n\t\t}\r\n\r\n\t\tlet chartRadius = $utils.relativeRadiusToValue(this.radius, maxRadius);\r\n\r\n\t\tlet chartPixelInnerRadius = $utils.relativeRadiusToValue(this.innerRadius, maxRadius);\r\n\r\n\t\tlet seriesRadius = (chartRadius - chartPixelInnerRadius) / this.series.length;\r\n\r\n\t\tif(chartRadius != this._chartPixelRadius || chartPixelInnerRadius != this._chartPixelInnerRadius){\r\n\t\t\tthis._chartPixelRadius = chartRadius;\r\n\t\t\tthis._chartPixelInnerRadius = chartPixelInnerRadius;\r\n\r\n\t\t\t//@todo: make it possible to set series radius in percent\r\n\t\t\t$iter.each($iter.indexed(this.series.iterator()), (a) => {\r\n\t\t\t\tlet i = a[0];\r\n\t\t\t\tlet series = a[1];\r\n\r\n\t\t\t\tlet radius = chartPixelInnerRadius + $utils.relativeRadiusToValue(series.radius, chartRadius - chartPixelInnerRadius);\r\n\t\t\t\tlet innerRadius = chartPixelInnerRadius + $utils.relativeRadiusToValue(series.innerRadius, chartRadius - chartPixelInnerRadius);\r\n\r\n\t\t\t\tif(!$type.isNumber(radius)){\r\n\t\t\t\t\tradius = chartPixelInnerRadius + seriesRadius * (i + 1);\r\n\t\t\t\t}\r\n\t\t\t\tif(!$type.isNumber(innerRadius)){\r\n\t\t\t\t\tinnerRadius = chartPixelInnerRadius + seriesRadius * i;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tseries.pixelRadius = radius;\r\n\t\t\t\tseries.pixelInnerRadius = innerRadius;\r\n\t\t\t});\r\n\r\n\r\n\t\t\tthis.seriesContainer.definedBBox = { x: chartRadius * rect.x, y: chartRadius * rect.y, width: chartRadius * rect.width, height: chartRadius * rect.height };\r\n\t\t\tthis.seriesContainer.invalidateLayout();\r\n\r\n\t\t\tthis.bulletsContainer.x = this.seriesContainer.x;\r\n\t\t\tthis.bulletsContainer.y = this.seriesContainer.y;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets radius of the pie chart.\r\n\t *\r\n\t * Setting to a number will mean a fixed pixel radius.\r\n\t *\r\n\t * Setting to an instance of [[Percent]] will mean a relative radius to\r\n\t * available space.\r\n\t *\r\n\t * E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * // Set pie chart to be at 50% of the available space\r\n\t * pieChart.radius = am4core.percent.percent(50);\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * // Set pie chart to be at 50% of the available space\r\n\t * pieChart.radius = am4core.percent.percent(50);\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // Set pie chart to be at 50% of the available space\r\n\t *   \"radius\": \"50%\"\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @default 80%\r\n\t * @param value  Radius (px or relative)\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tif(this.setPercentProperty(\"radius\", value, true, false, 10, false)){\r\n\t\t\tthis.invalidateLayout();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius (px or relative)\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets relative inner radius (to create a donut chart).\r\n\t *\r\n\t * Setting to a number will mean a fixed pixel radius.\r\n\t *\r\n\t * Setting to an instance of [[Percent]] will mean a relative radius to\r\n\t * available space.\r\n\t *\r\n\t * NOTE: it's not related to `radius`.\r\n\t *\r\n\t * E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * // Set pie chart to be at 50% of the available space\r\n\t * pieChart.innerRadius = am4core.percent.percent(50);\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * // Set pie chart to be at 50% of the available space\r\n\t * pieChart.innerRadius = am4core.percent.percent(50);\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // Set pie chart to be at 50% of the available space\r\n\t *   \"innerRadius\": \"50%\"\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @default 0\r\n\t * @param value  Relative inner radius (0-1)\r\n\t * @todo Setting things like `innerRadius` modifies `slice.radius` and it then looks like it is not the same value as in default state\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Relative inner radius (0-1)\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new [[PieSeries]].\r\n\t *\r\n\t * @return New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new PieSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Pie circle. (degrees)\r\n\t *\r\n\t * Normally, a pie chart begins (the left side of the first slice is drawn)\r\n\t * at the top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the first slice be drawn to the right.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set to those lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a Pie chart that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * NOTE: This setting is not supported in a 3D pie chart.\r\n\t *\r\n\t * @default -90\r\n\t * @param value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tif(this.setPropertyValue(\"startAngle\", value)){\r\n\t\t\tthis.updateRadius();\r\n\t\t\tthis.updateSeriesAngles()\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the Pie circle. (degrees)\r\n\t *\r\n\t * Normally, a pie chart ends (the right side of the last slice is drawn)\r\n\t * at the top center. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to change this setting.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set to those lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a Pie chart that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * NOTE: This setting is not supported in a 3D pie chart.\r\n\t *\r\n\t * @default 270\r\n\t * @param value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tif(this.setPropertyValue(\"endAngle\", value)){\r\n\t\t\tthis.updateRadius();\r\n\t\t\tthis.updateSeriesAngles()\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieChart\"] = PieChart;\r\nregistry.registeredClasses[\"PieChartDataItem\"] = PieChartDataItem;\r\n","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { PieSeries, PieSeriesDataItem, IPieSeriesDataFields, IPieSeriesProperties, IPieSeriesAdapters, IPieSeriesEvents } from \"../series/PieSeries\";\r\nimport { PieChart3D } from \"../types/PieChart3D\";\r\nimport { Slice3D } from \"../../core/elements/3d/Slice3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieSeries3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieSeries3DDataItem extends PieSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines type of the slice represented by this data item.\r\n\t */\r\n\tpublic _slice: Slice3D;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PieSeries3D;\r\n\r\n\t/**\r\n\t * @todo Remove?\r\n\t * @deprecated\r\n\t */\r\n\tpublic component: PieSeries3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeries3DDataItem\";\r\n\r\n\t\tthis.values.depthValue = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Slice depth (height).\r\n\t *\r\n\t * @param value  Depth\r\n\t */\r\n\tpublic set depthValue(value: number) {\r\n\t\tthis.setValue(\"depthValue\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Depth\r\n\t */\r\n\tpublic get depthValue(): number {\r\n\t\treturn this.values[\"depthValue\"].value;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DDataFields extends IPieSeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds 3D slice depth (height).\r\n\t */\r\n\tdepthValue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DProperties extends IPieSeriesProperties {\r\n\r\n\t/**\r\n\t * Depth (height) of the pie slice in pixels.\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle of the view point of the 3D pie.\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DEvents extends IPieSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieSeries3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieSeries3DAdapters extends IPieSeriesAdapters, IPieSeries3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a slice series on a 3D pie chart.\r\n *\r\n * @see {@link IPieSeries3DEvents} for a list of available Events\r\n * @see {@link IPieSeries3DAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class PieSeries3D extends PieSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IPieSeries3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPieSeries3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPieSeries3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPieSeries3DEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: PieSeries3DDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: PieChart3D;\r\n\r\n\tpublic _slice: Slice3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeries3D\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PieSeries3DDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * creates slice\r\n\t */\r\n\tprotected createSlice(): this[\"_slice\"] {\r\n\t\treturn new Slice3D();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: PieSeries3DDataItem): void {\r\n\r\n\t\tlet slice: Slice3D = <Slice3D>dataItem.slice;\r\n\r\n\t\tlet depth: number = this.depth;\r\n\t\tif (!$type.isNumber(depth)) {\r\n\t\t\tdepth = this.chart.depth;\r\n\t\t}\r\n\r\n\t\tlet depthPercent: number = dataItem.values.depthValue.percent;\r\n\t\tif (!$type.isNumber(depthPercent)) {\r\n\t\t\tdepthPercent = 100;\r\n\t\t}\r\n\r\n\t\tslice.depth = depthPercent * depth / 100;\r\n\r\n\t\tlet angle: number = this.angle;\r\n\t\tif (!$type.isNumber(angle)) {\r\n\t\t\tangle = this.chart.angle;\r\n\t\t}\r\n\r\n\t\tslice.angle = angle;\r\n\r\n\t\tsuper.validateDataElement(dataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\r\n\t\tfor (let i = this._workingStartIndex; i < this._workingEndIndex; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tlet slice: Slice3D = dataItem.slice;\r\n\r\n\t\t\tconst startAngle = slice.startAngle;\r\n\t\t\t// find quarter\r\n\t\t\t//q0 || q1\r\n\t\t\tif ((startAngle >= -90 && startAngle < 90)) {\r\n\t\t\t\tslice.toFront();\r\n\t\t\t}\r\n\t\t\t//q2 || q3\r\n\t\t\telse if ((startAngle >= 90)) {\r\n\t\t\t\tslice.toBack();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Depth (height) of the pie slice in pixels.\r\n\t *\r\n\t * @param value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of the view point of the 3D pie. (0-360)\r\n\t *\r\n\t * @param value  Angle\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angle\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Positions series bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet  Bullet\r\n\t */\r\n\tpublic positionBullet(bullet: Bullet): void {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>bullet.dataItem;\r\n\t\tlet slice = dataItem.slice;\r\n\r\n\t\tbullet.y = bullet.pixelY - slice.depth;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieSeries3D\"] = PieSeries3D;\r\nregistry.registeredClasses[\"PieSeries3DDataItem\"] = PieSeries3DDataItem;\r\n","/**\r\n * 3D Pie chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * Imports\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { PieChart, IPieChartProperties, IPieChartDataFields, IPieChartAdapters, IPieChartEvents, PieChartDataItem } from \"./PieChart\";\r\nimport { PieSeries3D } from \"../series/PieSeries3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieChart3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieChart3DDataItem extends PieChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PieChart3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DDataFields extends IPieChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DProperties extends IPieChartProperties {\r\n\r\n\t/**\r\n\t * Pie's \"depth\" or \"height\" in pixels.\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Pie's angle at which we are looking at it. (degrees)\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DEvents extends IPieChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieChart3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieChart3DAdapters extends IPieChartAdapters, IPieChart3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a 3D Pie chart.\r\n *\r\n *  * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.Pie3DChart);\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czechia\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * let series = chart.series.push(new am4charts.Pie3DSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.Pie3DChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"Pie3DChart\");\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czechia\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * var series = chart.series.push(new am4charts.Pie3DSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"Pie3DSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"value\": \"litres\",\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"Lithuania\",\r\n * \t\t\"litres\": 501.9\r\n * \t}, {\r\n * \t\t\"country\": \"Czechia\",\r\n * \t\t\"litres\": 301.9\r\n * \t}, {\r\n * \t\t\"country\": \"Ireland\",\r\n * \t\t\"litres\": 201.1\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"Pie3DChart\");\r\n * ```\r\n *\r\n * @see {@link IPieChart3DEvents} for a list of available Events\r\n * @see {@link IPieChart3DAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for documentation\r\n * @important\r\n */\r\nexport class PieChart3D extends PieChart {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t */\r\n\tpublic _dataFields: IPieChart3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPieChart3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPieChart3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPieChart3DEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: PieSeries3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart3D\";\r\n\r\n\t\tthis.depth = 20;\r\n\t\tthis.angle = 10;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Depth of the 3D pie in pixels.\r\n\t *\r\n\t * This will determine \"height\" of the pie.\r\n\t *\r\n\t * @default 20\r\n\t * @param value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tif (this.setPropertyValue(\"depth\", value)) {\r\n\t\t\tthis.invalidateDataUsers();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * An angle of a \"point of view\" in degrees. Possible range 0 - 90.\r\n\t *\r\n\t * @default 10\r\n\t * @param value  Angle (degrees)\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tvalue = $math.fitToRange(value, 0, 90);\r\n\t\tif (this.setPropertyValue(\"angle\", value)) {\r\n\t\t\tthis.invalidateDataUsers();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angle (degrees)\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Series.\r\n\t *\r\n\t * @return New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new PieSeries3D();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieChart3D\"] = PieChart3D;\r\n","/**\r\n * Sliced chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { PercentChart, IPercentChartProperties, IPercentChartDataFields, IPercentChartAdapters, IPercentChartEvents, PercentChartDataItem } from \"./PercentChart\";\r\nimport { FunnelSeries } from \"../series/FunnelSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[SlicedChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class SlicedChartDataItem extends PercentChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: SlicedChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SlicedChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[SlicedChart]].\r\n */\r\nexport interface ISlicedChartDataFields extends IPercentChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[SlicedChart]]\r\n */\r\nexport interface ISlicedChartProperties extends IPercentChartProperties { }\r\n\r\n/**\r\n * Defines events for [[SlicedChart]].\r\n */\r\nexport interface ISlicedChartEvents extends IPercentChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SlicedChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISlicedChartAdapters extends IPercentChartAdapters, ISlicedChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Sliced chart.\r\n *\r\n * @see {@link ISlicedChartEvents} for a list of available Events\r\n * @see {@link ISlicedChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class SlicedChart extends PercentChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: ISlicedChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISlicedChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISlicedChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISlicedChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: FunnelSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"SlicedChart\";\r\n\r\n\t\tthis.seriesContainer.layout = \"horizontal\";\r\n\r\n\t\tthis.padding(15, 15, 15, 15);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Sliced chart\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the chart, causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SlicedChart\"] = SlicedChart;\r\nregistry.registeredClasses[\"SlicedChartDataItem\"] = SlicedChartDataItem;\r\n","/**\r\n * FlowDiagramNode module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, AMEvent, visualProperties, ISpriteEvents } from \"../../core/Sprite\";\r\nimport { FlowDiagram, FlowDiagramDataItem } from \"../types/FlowDiagram\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $string from \"../../core/utils/String\";\r\nimport * as $order from \"../../core/utils/Order\";\r\nimport * as $number from \"../../core/utils/Number\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport { LegendSettings, LegendDataItem } from \"../Legend\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[FlowDiagramNode]].\r\n */\r\nexport interface IFlowDiagramNodeProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Name of the node.\r\n\t */\r\n\tname?: string;\r\n\r\n\t/**\r\n\t * Sum of all incomming+outgoing link values\r\n\t */\r\n\ttotal?: number;\r\n\r\n\t/**\r\n\t * Sum of all incoming link values\r\n\t */\r\n\ttotalIncoming?: number;\r\n\r\n\t/**\r\n\t * Sum of all outgoing link values\r\n\t */\r\n\ttotalOutgoing?: number;\r\n\r\n\t/**\r\n\t * Node's color.\r\n\t */\r\n\tcolor?: Color;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[FlowDiagramNode]].\r\n */\r\nexport interface IFlowDiagramNodeEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[FlowDiagramNode]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IFlowDiagramNodeAdapters extends IContainerAdapters, IFlowDiagramNodeProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a node in a Flow Diagram.\r\n *\r\n * A Flow node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[FlowLink]] elements.\r\n *\r\n * @see {@link IFlowDiagramNodeEvents} for a list of available events\r\n * @see {@link IFlowDiagramNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class FlowDiagramNode extends Container {\r\n\r\n\t/**\r\n\t * total ajusted taken in mind chart.minNodeSize\r\n\t */\r\n\tpublic adjustedTotal: number;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IFlowDiagramNodeProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IFlowDiagramNodeAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IFlowDiagramNodeEvents;\r\n\r\n\t/**\r\n\t * A list of data items of the items coming in from another node, one level\r\n\t * up.\r\n\t *\r\n\t * These are what ingoing links are build out of.\r\n\t */\r\n\tprotected _incomingDataItems: List<this[\"_dataItem\"]>;\r\n\r\n\t/**\r\n\t * A list of data items of the items going out of the node.\r\n\t *\r\n\t * These are what outgoing links are build out of.\r\n\t */\r\n\tprotected _outgoingDataItems: List<this[\"_dataItem\"]>;\r\n\r\n\t/**\r\n\t * Sorted list of incoming items.\r\n\t */\r\n\tprotected _incomingSorted: $iter.Iterator<this[\"_dataItem\"]>;\r\n\r\n\t/**\r\n\t * Sorted list of outgoing items.\r\n\t */\r\n\tprotected _outgoingSorted: $iter.Iterator<this[\"_dataItem\"]>;\r\n\r\n\t/**\r\n\t * A chart instance this node is added to.\r\n\t */\r\n\tpublic chart: FlowDiagram;\r\n\r\n\r\n\t/**\r\n\t * Defines the type of the [[FlowDiagramDataItem]] used in the class.\r\n\t */\r\n\tpublic _dataItem: FlowDiagramDataItem;\r\n\r\n\t/**\r\n\t * Settings for the appearance of the related legend items.\r\n\t */\r\n\tpublic legendSettings: LegendSettings = new LegendSettings();\r\n\r\n\r\n\t/**\r\n\t * A reference to the legend data item related to this node.\r\n\t */\r\n\tprotected _legendDataItem: LegendDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"FlowDiagramNode\";\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\t// TODO can this be removed ?\r\n\t\tnew InterfaceColorSet();\r\n\r\n\t\tthis.draggable = true;\r\n\t\tthis.inert = true;\r\n\r\n\t\tthis.setStateOnChildren = true;\r\n\r\n\t\tthis.events.on(\"positionchanged\", this.invalidateLinks, this, false);\r\n\t\tthis.events.on(\"sizechanged\", this.invalidateLinks, this, false);\r\n\t\t//this.events.on(\"hit\", this.handleHit, this, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic handleHit(event: AMEvent<Sprite, ISpriteEvents>[\"hit\"]) {\r\n\t\tif (this.isHidden || this.isHiding) {\r\n\t\t\tthis.show();\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.hide();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Shows hidden node.\r\n\t *\r\n\t * @param duration  Duration of reveal animation (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\t\tlet animation = super.show(duration);\r\n\r\n\t\tthis.outgoingDataItems.each(function(dataItem) {\r\n\t\t\tif (!dataItem.toNode || (dataItem.toNode && !dataItem.toNode.isHidden)) {\r\n\t\t\t\tdataItem.setWorkingValue(\"value\", dataItem.getValue(\"value\"), duration);\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis.incomingDataItems.each(function(dataItem) {\r\n\t\t\tif (!dataItem.fromNode || (dataItem.fromNode && !dataItem.fromNode.isHidden)) {\r\n\t\t\t\tdataItem.setWorkingValue(\"value\", dataItem.getValue(\"value\"), duration);\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides node.\r\n\t *\r\n\t * @param duration  Duration of hiding animation (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\t\tlet animation = super.hide(duration);\r\n\r\n\t\tthis.outgoingDataItems.each(function(dataItem) {\r\n\t\t\tdataItem.setWorkingValue(\"value\", 0, duration);\r\n\t\t})\r\n\r\n\t\tthis.incomingDataItems.each(function(dataItem) {\r\n\t\t\tdataItem.setWorkingValue(\"value\", 0, duration);\r\n\t\t})\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Marks node as invalid, for redrawal in the next update cycle.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tif(!this.isDisposed()){\r\n\t\t\tsuper.validate();\r\n\t\t\tthis.invalidateLinks();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates all links, attached to this node.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidateLinks(): void {\r\n\r\n\t\tthis.outgoingDataItems.each((dataItem) => {\r\n\t\t\tlet link = dataItem.link;\r\n\t\t\tif (link.colorMode == \"fromNode\") {\r\n\t\t\t\tlink.fill = link.dataItem.fromNode.color;\r\n\t\t\t}\r\n\r\n\t\t\tif (link.colorMode == \"gradient\") {\r\n\r\n\t\t\t\tlink.fill = link.gradient;\r\n\t\t\t\tlink.stroke = link.gradient;\r\n\r\n\t\t\t\tlet stop = link.gradient.stops.getIndex(0);\r\n\r\n\t\t\t\tif (stop) {\r\n\t\t\t\t\tstop.color = this.color;\r\n\t\t\t\t\tlink.gradient.validate();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.incomingDataItems.each((dataItem) => {\r\n\t\t\tlet link = dataItem.link;\r\n\t\t\tif (link.colorMode == \"toNode\") {\r\n\t\t\t\tlink.fill = link.dataItem.toNode.color;\r\n\t\t\t}\r\n\r\n\t\t\tif (link.colorMode == \"gradient\") {\r\n\t\t\t\tlink.fill = link.gradient;\r\n\t\t\t\tlink.stroke = link.gradient;\r\n\r\n\t\t\t\tlet stop = link.gradient.stops.getIndex(1);\r\n\r\n\t\t\t\tif (stop) {\r\n\t\t\t\t\tstop.color = this.color;\r\n\t\t\t\t\tlink.gradient.validate();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * List of incoming items (links).\r\n\t *\r\n\t * @readonly\r\n\t * @return Incoming items\r\n\t */\r\n\tpublic get incomingDataItems(): List<this[\"_dataItem\"]> {\r\n\t\tif (!this._incomingDataItems) {\r\n\t\t\tlet incomingDataItems = new List<FlowDiagramDataItem>();\r\n\t\t\tincomingDataItems.events.on(\"inserted\", () => {\r\n\t\t\t\tif (this.chart.sortBy == \"name\") {\r\n\t\t\t\t\tthis._incomingSorted = $iter.sort(this._incomingDataItems.iterator(), (x, y) => $string.order(x.fromName, y.fromName));\r\n\t\t\t\t}\r\n\t\t\t\telse if (this.chart.sortBy == \"value\") {\r\n\t\t\t\t\tthis._incomingSorted = $iter.sort(this._incomingDataItems.iterator(), (x, y) => $order.reverse($number.order(x.value, y.value)));\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._incomingSorted = this._incomingDataItems.iterator();\r\n\t\t\t\t}\r\n\t\t\t}, undefined, false);\r\n\t\t\tthis._incomingDataItems = incomingDataItems;\r\n\t\t}\r\n\t\treturn this._incomingDataItems;\r\n\t}\r\n\r\n\t/**\r\n\t * List of outgoing items (links).\r\n\t *\r\n\t * @readonly\r\n\t * @return Outgoing items\r\n\t */\r\n\tpublic get outgoingDataItems(): List<FlowDiagramDataItem> {\r\n\t\tif (!this._outgoingDataItems) {\r\n\t\t\tlet outgoingDataItems = new List<FlowDiagramDataItem>();\r\n\t\t\toutgoingDataItems.events.on(\"inserted\", () => {\r\n\t\t\t\tif (this.chart.sortBy == \"name\") {\r\n\t\t\t\t\tthis._outgoingSorted = $iter.sort(this._outgoingDataItems.iterator(), (x, y) => $string.order(x.fromName, y.fromName));\r\n\t\t\t\t}\r\n\t\t\t\telse if (this.chart.sortBy == \"value\") {\r\n\t\t\t\t\tthis._outgoingSorted = $iter.sort(this._outgoingDataItems.iterator(), (x, y) => $order.reverse($number.order(x.value, y.value)));\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._outgoingSorted = this._outgoingDataItems.iterator();\r\n\t\t\t\t}\r\n\r\n\t\t\t}, undefined, false);\r\n\t\t\tthis._outgoingDataItems = outgoingDataItems;\r\n\t\t}\r\n\t\treturn this._outgoingDataItems;\r\n\t}\r\n\r\n\t/**\r\n\t * A name of the node.\r\n\t *\r\n\t * @param value  Name\r\n\t */\r\n\tpublic set name(value: string) {\r\n\t\tthis.setPropertyValue(\"name\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.getPropertyValue(\"name\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sum of all incoming+outgoing link values\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set total(value: number) {\r\n\t\tthis.setPropertyValue(\"total\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get total(): number {\r\n\t\treturn this.getPropertyValue(\"total\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sum of all incomming link values.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set totalIncoming(value: number) {\r\n\t\tthis.setPropertyValue(\"totalIncoming\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get totalIncoming(): number {\r\n\t\treturn this.getPropertyValue(\"totalIncoming\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sum of all outgoing link values.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set totalOutgoing(value: number) {\r\n\t\tthis.setPropertyValue(\"totalOutgoing\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get totalOutgoing(): number {\r\n\t\treturn this.getPropertyValue(\"totalOutgoing\");\r\n\t}\r\n\r\n\t/**\r\n\t * Node's color.\r\n\t *\r\n\t * @param value  Color\r\n\t */\r\n\tpublic set color(value: Color) {\r\n\t\tthis.setColorProperty(\"color\", value);\r\n\t\tif (this._background) {\r\n\t\t\tthis._background.fill = value;\r\n\t\t}\r\n\t\tthis.fill = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Color\r\n\t */\r\n\tpublic get color(): Color {\r\n\t\treturn this.getPropertyValue(\"color\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: RoundedRectangle = marker.createChild(RoundedRectangle);\r\n\t\tcolumn.shouldClone = false;\r\n\t\t$object.copyProperties(this, column, visualProperties);\r\n\t\tcolumn.stroke = this.fill;\r\n\r\n\t\tcolumn.copyFrom(<any>this);\r\n\t\tcolumn.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\r\n\t\tcolumn.width = w;\r\n\t\tcolumn.height = h;\r\n\r\n\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\tlegendDataItem.color = column.fill;\r\n\t\tlegendDataItem.colorOrig = column.fill;\r\n\t}\r\n\r\n\t/**\r\n\t * Legend data item that corresponds to this series.\r\n\t *\r\n\t * @param value  Data item\r\n\t */\r\n\tpublic set legendDataItem(value: LegendDataItem) {\r\n\t\tthis._legendDataItem = value;\r\n\t\tthis._legendDataItem.itemContainer.deepInvalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Data item\r\n\t */\r\n\tpublic get legendDataItem(): LegendDataItem {\r\n\t\treturn this._legendDataItem;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FlowDiagramNode\"] = FlowDiagramNode;\r\n","/**\r\n * FlowDiagramLink module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { Container, IContainerProperties, IContainerEvents, IContainerAdapters } from \"../../core/Container\";\r\nimport { FlowDiagramDataItem } from \"../types/FlowDiagram\";\r\nimport { LinearGradient } from \"../../core/rendering/fills/LinearGradient\";\r\nimport { RadialGradient } from \"../../core/rendering/fills/RadialGradient\";\r\nimport { Pattern } from \"../../core/rendering/fills/Pattern\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Polyline } from \"../../core/elements/Polyline\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[FlowDiagramLink]].\r\n */\r\nexport interface IFlowDiagramLinkProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * [tension description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\ttension?: number;\r\n\r\n\t/**\r\n\t * [startX description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tstartX?: number;\r\n\r\n\t/**\r\n\t * [startY description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tstartY?: number;\r\n\r\n\t/**\r\n\t * [endX description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tendX?: number;\r\n\r\n\t/**\r\n\t * [endY description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tendY?: number;\r\n\r\n\t/**\r\n\t * [linkWidth description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tlinkWidth?: number;\r\n\r\n\t/**\r\n\t * [startAngle description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * [endAngle description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * Should link be filled with a solid color, color of from node, color of toNode or gradient between node colors.\r\n\t */\r\n\tcolorMode?: \"solid\" | \"gradient\" | \"fromNode\" | \"toNode\";\r\n\r\n\t/**\r\n\t * [controlPointDistance description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tcontrolPointDistance?: number;\r\n\r\n\t/**\r\n\t * [maskBullets description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tmaskBullets?: boolean;\r\n\r\n\t/**\r\n\t * [tooltipLocation description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\ttooltipLocation?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[FlowDiagramLink]].\r\n */\r\nexport interface IFlowDiagramLinkEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[FlowDiagramLink]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IFlowDiagramLinkAdapters extends IContainerAdapters, IFlowDiagramLinkProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Flow Diagram.\r\n *\r\n * @see {@link IFlowDiagramLinkEvents} for a list of available events\r\n * @see {@link IFlowDiagramLinkAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class FlowDiagramLink extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IFlowDiagramLinkProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IFlowDiagramLinkAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IFlowDiagramLinkEvents;\r\n\r\n\t/**\r\n\t * Defines a type of data item used by this class.\r\n\t */\r\n\tpublic _dataItem: FlowDiagramDataItem;\r\n\r\n\t/**\r\n\t * A gradiend instance that is used to provided colored gradient fills for\r\n\t * the Flow link.\r\n\t */\r\n\tprotected _gradient: LinearGradient;\r\n\r\n\r\n\t/**\r\n\t * List of bullets\r\n\t * @ignore\r\n\t */\r\n\tprotected _bullets: ListTemplate<Bullet>;\r\n\r\n\t/**\r\n\t * Link sprite\r\n\t */\r\n\tpublic link: Sprite;\r\n\r\n\t/**\r\n\t * Bullets mask spite\r\n     */\r\n\tprotected _bulletsMask: Sprite;\r\n\r\n\t/**\r\n\t * Bullets container\r\n     */\r\n\tprotected _bulletsContainer: Container;\r\n\r\n\t/**\r\n\t * Spline which goes through the middle of a link, used to calculate bullet and tooltip positions, invisible by default\r\n     */\r\n\tpublic middleLine: Line | Polyline;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"FlowDiagramLink\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.maskBullets = false;\r\n\r\n\t\tthis.colorMode = \"fromNode\";\r\n\r\n\t\tthis.layout = \"none\";\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.startAngle = 0;\r\n\t\tthis.endAngle = 0;\r\n\r\n\t\tthis.strokeOpacity = 0;\r\n\r\n\t\t// this is very important, otherwise the container will be shifted\r\n\t\tthis.verticalCenter = \"none\";\r\n\t\tthis.horizontalCenter = \"none\";\r\n\r\n\t\tthis.tooltipText = \"{fromName}→{toName}:{value.value}\";\r\n\t\tthis.tooltipLocation = 0.5;\r\n\r\n\t\tthis.link = this.createChild(Sprite);\r\n\t\tthis.link.shouldClone = false;\r\n\t\tthis.link.setElement(this.paper.add(\"path\"));\r\n\t\tthis.link.isMeasured = false;\r\n\t\tthis.fillOpacity = 0.2;\r\n\t\tthis.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Positions bullets\r\n\t * @ignore\r\n\t */\r\n\tprotected positionBullets() {\r\n\t\t$iter.each(this.bullets.iterator(), (bullet) => {\r\n\t\t\tbullet.parent = this.bulletsContainer;\r\n\r\n\t\t\tbullet.maxWidth = this.maxWidth;\r\n\t\t\tbullet.maxHeight = this.maxHeight;\r\n\r\n\t\t\tthis.positionBullet(bullet);\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Bullets container\r\n     */\r\n\tpublic get bulletsContainer() {\r\n\t\tif (!this._bulletsContainer) {\r\n\t\t\tlet bulletsContainer = this.createChild(Container);\r\n\t\t\tbulletsContainer.shouldClone = false;\r\n\t\t\tbulletsContainer.layout = \"none\";\r\n\t\t\tthis._bulletsContainer = bulletsContainer;\r\n\t\t}\r\n\t\treturn this._bulletsContainer;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Bullets mask sprite\r\n     */\r\n\tpublic get bulletsMask() {\r\n\t\tif (!this._bulletsMask) {\r\n\t\t\tlet bulletsMask = this.createChild(Sprite);\r\n\t\t\tbulletsMask.shouldClone = false;\r\n\t\t\tbulletsMask.setElement(this.paper.add(\"path\"));\r\n\t\t\tbulletsMask.isMeasured = false;\r\n\t\t\tthis._bulletsMask = bulletsMask;\r\n\t\t}\r\n\t\treturn this._bulletsMask;\r\n\t}\r\n\r\n\t/**\r\n\t * Positions bullets at relative bullet.locationX position on the link.\r\n\t * @ignore\r\n\t */\r\n\tprotected positionBullet(bullet: Bullet) {\r\n\r\n\t\tlet location = bullet.locationX;\r\n\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = bullet.locationY;\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = 0.5;\r\n\t\t}\r\n\t\tlet point = this.middleLine.positionToPoint(location);\r\n\r\n\t\tbullet.moveTo(point);\r\n\r\n\t\tlet rotationField = bullet.propertyFields.rotation;\r\n\t\tlet angle: number;\r\n\t\tif (bullet.dataItem) {\r\n\t\t\tlet dataContext: any = bullet.dataItem.dataContext;\r\n\t\t\tangle = dataContext[rotationField];\r\n\t\t}\r\n\t\tif (!$type.isNumber(angle)) {\r\n\t\t\tangle = point.angle;\r\n\t\t}\r\n\r\n\t\tbullet.rotation = angle;\r\n\t}\r\n\r\n\t/**\r\n\t * [startAngle description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value  Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * [endAngle description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value  End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Should link be filled with a solid color, color of from node, color of toNode or gradient between node colors.\r\n\t * Some of the links, like ChordLink does not support gradiens well.\r\n\t *\r\n\t * @param value  Fill mode\r\n\t */\r\n\tpublic set colorMode(value: \"solid\" | \"gradient\" | \"fromNode\" | \"toNode\") {\r\n\t\tif (value == \"gradient\") {\r\n\t\t\tlet color = this.fill;\r\n\r\n\t\t\tthis.gradient.stops.clear();\r\n\t\t\tif (color instanceof Color) {\r\n\t\t\t\tthis.gradient.addColor(color);\r\n\t\t\t\tthis.gradient.addColor(color);\r\n\t\t\t}\r\n\t\t\tthis.fill = this.gradient;\r\n\t\t\tthis.stroke = this.gradient;\r\n\t\t}\r\n\t\tthis.setPropertyValue(\"colorMode\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Fill mode\r\n\t */\r\n\tpublic get colorMode(): \"solid\" | \"gradient\" | \"fromNode\" | \"toNode\" {\r\n\t\treturn this.getPropertyValue(\"colorMode\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Should link bullets be masked or not\r\n\t *\r\n\t * @param value\r\n\t * @default false\r\n\t */\r\n\tpublic set maskBullets(value: boolean) {\r\n\t\tthis.setPropertyValue(\"maskBullets\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return mask bullets value\r\n\t */\r\n\tpublic get maskBullets(): boolean {\r\n\t\treturn this.getPropertyValue(\"maskBullets\");\r\n\t}\r\n\r\n\t/**\r\n\t * Relative location of a tooltip.\r\n\t * @default 0.5\r\n\t *\r\n\t * @param value\r\n\t */\r\n\tpublic set tooltipLocation(value: number) {\r\n\t\tthis.setPropertyValue(\"tooltipLocation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Tooltip location value\r\n\t */\r\n\tpublic get tooltipLocation(): number {\r\n\t\treturn this.getPropertyValue(\"tooltipLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Adds color steps in the link gradient.\r\n\t *\r\n\t * @param value  Fill option\r\n\t */\r\n\tprotected setFill(value: Color | Pattern | LinearGradient | RadialGradient) {\r\n\t\tsuper.setFill(value)\r\n\t\tlet gradient = this._gradient;\r\n\r\n\t\tif (gradient && value instanceof Color) {\r\n\t\t\tgradient.stops.clear();\r\n\t\t\tgradient.addColor(value);\r\n\t\t\tgradient.addColor(value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates bounding box based on element dimension settings.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic measureElement(): void {\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * List of bullets\r\n\t *\r\n\t * @return [description]\r\n\t */\r\n\tpublic get bullets(): ListTemplate<Bullet> {\r\n\t\tif (!this._bullets) {\r\n\t\t\tthis._bullets = new ListTemplate<Bullet>(new Bullet());\r\n\t\t\tthis._disposers.push(new ListDisposer(this._bullets));\r\n\t\t\tthis._disposers.push(this._bullets.template);\r\n\t\t\tthis._bullets.events.on(\"inserted\", (event) => {\r\n\t\t\t\tevent.newValue.events.on(\"propertychanged\", (event) => {\r\n\t\t\t\t\tif (event.property == \"locationX\" || event.property == \"locationY\") {\r\n\t\t\t\t\t\tthis.positionBullet(event.target);\r\n\t\t\t\t\t}\r\n\t\t\t\t}, undefined, false)\r\n\t\t\t}, undefined, false)\r\n\t\t}\r\n\t\treturn this._bullets;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies properties from another [[FlowDiagramLink]].\r\n\t *\r\n\t * @param source  Source link\r\n\t */\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.bullets.copyFrom(source.bullets);\r\n\t\tlet middleLine = this.middleLine;\r\n\t\tif (middleLine) {\r\n\t\t\tif (middleLine instanceof Line && source.middleLine instanceof Line) {\r\n\t\t\t\tmiddleLine.copyFrom(source.middleLine);\r\n\t\t\t}\r\n\r\n\t\t\tif (middleLine instanceof Polyline && source.middleLine instanceof Polyline) {\r\n\t\t\t\tmiddleLine.copyFrom(source.middleLine);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.link.copyFrom(source.link);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Tooltip X (px)\r\n\t */\r\n\tpublic getTooltipX(): number {\r\n\t\tif (this.middleLine) {\r\n\t\t\treturn this.middleLine.positionToPoint(this.tooltipLocation).x;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Tooltip Y (px)\r\n\t */\r\n\tpublic getTooltipY(): number {\r\n\t\tif (this.middleLine) {\r\n\t\t\treturn this.middleLine.positionToPoint(this.tooltipLocation).y;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A gradiend instance that is used to provided colored gradient fills for\r\n\t * the Flow link.\r\n\t */\r\n\tpublic get gradient() {\r\n\t\tif (!this._gradient) {\r\n\t\t\tthis._gradient = new LinearGradient();\r\n\t\t}\r\n\t\treturn this._gradient;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FlowDiagramLink\"] = FlowDiagramLink;\r\n","/**\r\n * FlowDiagram module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Chart, IChartProperties, IChartDataFields, IChartAdapters, IChartEvents, ChartDataItem } from \"../Chart\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { FlowDiagramNode } from \"../elements/FlowDiagramNode\";\r\nimport { FlowDiagramLink } from \"../elements/FlowDiagramLink\";\r\nimport { LinearGradientModifier } from \"../../core/rendering/fills/LinearGradientModifier\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { toColor, Color } from \"../../core/utils/Color\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $number from \"../../core/utils/Number\";\r\nimport * as $order from \"../../core/utils/Order\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo rearange notes after dragged\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[FlowDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class FlowDiagramDataItem extends ChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: FlowDiagram;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t */\r\n\tpublic _link: FlowDiagramLink;\r\n\r\n\t/**\r\n\t * An origin node.\r\n\t */\r\n\tpublic fromNode: FlowDiagramNode;\r\n\r\n\t/**\r\n\t * A destination node.\r\n\t */\r\n\tpublic toNode: FlowDiagramNode;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"FlowDiagramDataItem\";\r\n\r\n\t\tthis.values.value = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Source node's name.\r\n\t *\r\n\t * @param value  Name\r\n\t */\r\n\tpublic set fromName(value: string) {\r\n\t\tthis.setProperty(\"fromName\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return name\r\n\t */\r\n\tpublic get fromName(): string {\r\n\t\treturn this.properties.fromName;\r\n\t}\r\n\r\n\t/**\r\n\t * Destination node's name.\r\n\t *\r\n\t * @param value  Name\r\n\t */\r\n\tpublic set toName(value: string) {\r\n\t\tthis.setProperty(\"toName\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return name\r\n\t */\r\n\tpublic get toName(): string {\r\n\t\treturn this.properties.toName;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Node color\r\n\t *\r\n\t * @param value  Name\r\n\t */\r\n\tpublic set color(value: Color) {\r\n\t\tthis.setProperty(\"color\", toColor(value));\r\n\t}\r\n\r\n\t/**\r\n\t * @return color\r\n\t */\r\n\tpublic get color(): Color {\r\n\t\treturn this.properties.color;\r\n\t}\r\n\r\n\t/**\r\n\t * Link's value.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set value(value: number) {\r\n\t\tthis.setValue(\"value\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\treturn this.values.value.value;\r\n\t}\r\n\r\n\t/**\r\n\t * A visual element, representing link between the source and target nodes.\r\n\t *\r\n\t * Link's actual thickness will be determined by `value` of this link and\r\n\t * `value` of the source node.\r\n\t *\r\n\t * @readonly\r\n\t * @return Link element\r\n\t */\r\n\tpublic get link(): this[\"_link\"] {\r\n\t\tif (!this._link) {\r\n\t\t\tlet link = this.component.links.create();\r\n\t\t\tthis._link = link;\r\n\r\n\t\t\tthis.addSprite(link);\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif (this.component) {\r\n\t\t\t\t\tthis.component.links.removeValue(link);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\t\t}\r\n\t\treturn this._link;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[FlowDiagram]].\r\n */\r\nexport interface IFlowDiagramDataFields extends IChartDataFields {\r\n\r\n\t/**\r\n\t * Name of the source node.\r\n\t */\r\n\tfromName?: string;\r\n\r\n\t/**\r\n\t * Name of the target node.\r\n\t */\r\n\ttoName?: string;\r\n\r\n\t/**\r\n\t * Value of the link between two nodes.\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * Color of a from node\r\n\t */\r\n\tcolor?: string;\r\n\r\n\t/**\r\n\t * Visibility of a node\r\n\t */\r\n\tvisible?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[FlowDiagram]]\r\n */\r\nexport interface IFlowDiagramProperties extends IChartProperties {\r\n\r\n\t/**\r\n\t * Padding for node square in pixels.\r\n\t */\r\n\tnodePadding?: number;\r\n\r\n\t/**\r\n\t * Sort nodes by name or value or do not sort a\r\n\t */\r\n\tsortBy?: \"none\" | \"name\" | \"value\";\r\n\r\n\t/**\r\n\t * Sometimes nodes can get very small if their value is little. With this setting you\r\n\t * can set min size of a node (this is relative value from the total size of all nodes)\r\n\t */\r\n\tminNodeSize: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[FlowDiagram]].\r\n */\r\nexport interface IFlowDiagramEvents extends IChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[FlowDiagram]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IFlowDiagramAdapters extends IChartAdapters, IFlowDiagramProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Pie chart\r\n * @see {@link IFlowDiagramEvents} for a list of available Events\r\n * @see {@link IFlowDiagramAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class FlowDiagram extends Chart {\r\n\r\n\t/**\r\n\t * A Color Set to use when applying/generating colors for each subsequent\r\n\t * node.\r\n\t */\r\n\tpublic colors: ColorSet = new ColorSet();\r\n\r\n\t/**\r\n\t * Defines a type for the DataItem.\r\n\t */\r\n\tpublic _dataItem: FlowDiagramDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IFlowDiagramDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IFlowDiagramProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IFlowDiagramAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IFlowDiagramEvents;\r\n\r\n\r\n\t/**\r\n\t */\r\n\tpublic _node: FlowDiagramNode;\r\n\r\n\r\n\t/**\r\n\t * A list of chart's FlowDiagram nodes.\r\n\t *\r\n\t * @param {DictionaryTemplate<string, this[\"_node\"]>}\r\n\t */\r\n\tprotected _nodes: DictionaryTemplate<string, this[\"_node\"]>;\r\n\r\n\r\n\t/**\r\n\t */\r\n\tpublic _link: FlowDiagramLink;\r\n\r\n\t/**\r\n\t * A list of FlowDiagram links connecting nodes.\r\n\t *\r\n\t * @param {ListTemplate<this[\"_link\"]>}\r\n\t */\r\n\tprotected _links: ListTemplate<this[\"_link\"]>;\r\n\r\n\t/**\r\n\t * A container that holds all of the link elements.\r\n\t */\r\n\tpublic linksContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds all of the node elements.\r\n\t */\r\n\tpublic nodesContainer: Container;\r\n\r\n\t/**\r\n\t * Sorted nodes iterator.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tprotected _sorted: $iter.Iterator<[string, FlowDiagramNode]>;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"FlowDiagram\";\r\n\t\tthis.nodePadding = 20;\r\n\t\tthis.sortBy = \"none\";\r\n\t\tthis.sequencedInterpolation = true;\r\n\r\n\t\tthis.colors.step = 2;\r\n\t\tthis.minNodeSize = 0.02;\r\n\r\n\t\tlet linksContainer = this.chartContainer.createChild(Container);\r\n\t\tlinksContainer.shouldClone = false;\r\n\t\tlinksContainer.layout = \"none\";\r\n\t\tlinksContainer.isMeasured = false;\r\n\t\tthis.linksContainer = linksContainer;\r\n\r\n\t\tlet nodesContainer = this.chartContainer.createChild(Container);\r\n\t\tnodesContainer.shouldClone = false;\r\n\t\tnodesContainer.layout = \"none\";\r\n\t\tnodesContainer.isMeasured = false;\r\n\t\tthis.nodesContainer = nodesContainer;\r\n\r\n\t\t// this data item holds sums, averages, etc\r\n\t\tthis.dataItem = this.createDataItem();\r\n\t\tthis.dataItem.component = this;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tpublic dispose(): void {\r\n\t\tsuper.dispose();\r\n\t\tthis.dataItem.dispose();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates chart's data, effectively causing the chart to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tif (this._parseDataFrom == 0) {\r\n\t\t\tthis.nodes.clear();\r\n\t\t}\r\n\r\n\t\tthis.sortNodes();\r\n\r\n\t\tthis.colors.reset();\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tlet sum = 0;\r\n\t\tlet count = 0;\r\n\t\tlet low: number;\r\n\t\tlet high: number;\r\n\r\n\t\t// build blocks\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tlet fromName = dataItem.fromName;\r\n\r\n\t\t\tif (fromName) {\r\n\t\t\t\tlet node = this.nodes.getKey(fromName);\r\n\t\t\t\tif (!node) {\r\n\t\t\t\t\tnode = this.nodes.create(fromName);\r\n\t\t\t\t\tnode.name = fromName;\r\n\t\t\t\t\tnode.chart = this;\r\n\t\t\t\t\tnode.dataItem = dataItem;\r\n\t\t\t\t}\r\n\t\t\t\tdataItem.fromNode = node;\r\n\t\t\t\tdataItem.fromNode.outgoingDataItems.push(dataItem);\r\n\t\t\t}\r\n\t\t\tlet toName = dataItem.toName;\r\n\t\t\tif (toName) {\r\n\t\t\t\tlet node = this.nodes.getKey(toName);\r\n\t\t\t\tif (!node) {\r\n\t\t\t\t\tnode = this.nodes.create(toName);\r\n\t\t\t\t\tnode.name = toName;\r\n\t\t\t\t\tnode.chart = this;\r\n\t\t\t\t\tnode.dataItem = dataItem;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdataItem.toNode = node;\r\n\t\t\t\tdataItem.toNode.incomingDataItems.push(dataItem);\r\n\t\t\t}\r\n\r\n\t\t\tif (!dataItem.fromNode) {\r\n\t\t\t\tlet strokeModifier = new LinearGradientModifier();\r\n\t\t\t\tstrokeModifier.opacities = [0, 1];\r\n\t\t\t\tdataItem.link.strokeModifier = strokeModifier;\r\n\t\t\t}\r\n\r\n\t\t\tif (!dataItem.toNode) {\r\n\t\t\t\tlet fillModifier = new LinearGradientModifier();\r\n\t\t\t\tfillModifier.opacities = [1, 0];\r\n\t\t\t\tdataItem.link.strokeModifier = fillModifier;\r\n\t\t\t}\r\n\r\n\t\t\tlet value = dataItem.value;\r\n\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\tsum += value;\r\n\t\t\t\tcount++;\r\n\r\n\t\t\t\tif (low > value || !$type.isNumber(low)) {\r\n\t\t\t\t\tlow = value;\r\n\t\t\t\t}\r\n\t\t\t\tif (high < value || !$type.isNumber(high)) {\r\n\t\t\t\t\thigh = value;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet key = \"value\";\r\n\r\n\t\tthis.dataItem.setCalculatedValue(key, high, \"high\");\r\n\t\tthis.dataItem.setCalculatedValue(key, low, \"low\");\r\n\t\tthis.dataItem.setCalculatedValue(key, sum, \"sum\");\r\n\t\tthis.dataItem.setCalculatedValue(key, sum / count, \"average\");\r\n\t\tthis.dataItem.setCalculatedValue(key, count, \"count\");\r\n\r\n\r\n\t\t$iter.each(this.nodes.iterator(), (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\r\n\t\t\tif (node.fill instanceof Color) {\r\n\t\t\t\tnode.color = node.fill;\r\n\t\t\t}\r\n\r\n\t\t\tif (node.color == undefined) {\r\n\t\t\t\tnode.color = this.colors.next();\r\n\t\t\t}\r\n\r\n\t\t\tif (node.dataItem.color != undefined) {\r\n\t\t\t\tnode.color = node.dataItem.color;\r\n\t\t\t}\r\n\r\n\t\t\tif (!node.dataItem.visible) {\r\n\t\t\t\tnode.hide(0);\r\n\t\t\t}\r\n\r\n\t\t\tthis.getNodeValue(node);\r\n\t\t});\r\n\r\n\t\tthis.sortNodes();\r\n\t\tthis.feedLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemWorkingValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataItemWorkingValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sorts nodes by either their values or names, based on `sortBy` setting.\r\n\t */\r\n\tprotected sortNodes() {\r\n\t\tif (this.sortBy == \"name\") {\r\n\t\t\tthis._sorted = this.nodes.sortedIterator();\r\n\t\t}\r\n\t\telse if (this.sortBy == \"value\") {\r\n\t\t\tthis._sorted = $iter.sort(this.nodes.iterator(), (x, y) => $order.reverse($number.order(x[1].total, y[1].total)));\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._sorted = this.nodes.iterator();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates a cummulative value of the node.\r\n\t *\r\n\t * A node's value is determined by summing values of all of the incoming\r\n\t * links or all of the outgoing links, whichever results in bigger number.\r\n\t *\r\n\t * @param node  Node value\r\n\t */\r\n\tprotected getNodeValue(node: FlowDiagramNode) {\r\n\r\n\t\t// todo: totalIncomming totalOutgoing, total\r\n\r\n\t\tlet incomingTotal = 0;\r\n\t\tlet outgoingTotal = 0;\r\n\r\n\t\t$iter.each(node.incomingDataItems.iterator(), (dataItem: FlowDiagramDataItem) => {\r\n\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\tincomingTotal += value;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t$iter.each(node.outgoingDataItems.iterator(), (dataItem: FlowDiagramDataItem) => {\r\n\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\toutgoingTotal += value;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tnode.total = incomingTotal + outgoingTotal;\r\n\t\tnode.totalIncoming = incomingTotal;\r\n\t\tnode.totalOutgoing = outgoingTotal;\r\n\t};\r\n\r\n\t/**\r\n\t * Changes the sort type of the nodes.\r\n\t *\r\n\t * This will actually reshuffle nodes using nice animation.\r\n\t */\r\n\tprotected changeSorting() {\r\n\t\tthis.sortNodes();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Flow diagram\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new data item.\r\n\t *\r\n\t * @return Data item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new FlowDiagramDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Padding for node square in pixels.\r\n\t *\r\n\t * Padding will add extra space around node's name label.\r\n\t *\r\n\t * @param value Padding (px)\r\n\t */\r\n\tpublic set nodePadding(value: number) {\r\n\t\tthis.setPropertyValue(\"nodePadding\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Padding (px)\r\n\t */\r\n\tpublic get nodePadding(): number {\r\n\t\treturn this.getPropertyValue(\"nodePadding\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sort nodes by \"name\" or \"value\" or do not sort at all. If not sorted, nodes will appear in the same order as they are in the data.\r\n\t * @default \"none\"\r\n\t * @param value  Node sorting\r\n\t */\r\n\tpublic set sortBy(value: \"none\" | \"name\" | \"value\") {\r\n\t\tthis.setPropertyValue(\"sortBy\", value);\r\n\t\tthis.changeSorting();\r\n\t}\r\n\r\n\t/**\r\n\t * @returns Node sorting\r\n\t */\r\n\tpublic get sortBy(): \"none\" | \"name\" | \"value\" {\r\n\t\treturn this.getPropertyValue(\"sortBy\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sometimes nodes can get very small if their value is little. With this setting you\r\n\t * can set min size of a node (this is relative value from the total size of all nodes)\r\n\t * @default 0.02\r\n\t * @param value  Node sorting\r\n\t */\r\n\tpublic set minNodeSize(value: number) {\r\n\t\tthis.setPropertyValue(\"minNodeSize\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @returns min node size\r\n\t */\r\n\tpublic get minNodeSize(): number {\r\n\t\treturn this.getPropertyValue(\"minNodeSize\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * A list of chart's nodes.\r\n\t *\r\n\t * @param {DictionaryTemplate<string, this[\"_node\"]>}\r\n\t */\r\n\tpublic get nodes(): DictionaryTemplate<string, this[\"_node\"]> {\r\n\t\tif (!this._nodes) {\r\n\t\t\tlet template = this.createNode();\r\n\t\t\ttemplate.events.on(\"hit\", (event) => {\r\n\t\t\t\tevent.target.handleHit(event);\r\n\t\t\t});\r\n\t\t\tthis._nodes = new DictionaryTemplate<string, this[\"_node\"]>(template);\r\n\t\t\tthis._disposers.push(new DictionaryDisposer(this._nodes));\r\n\t\t}\r\n\t\treturn this._nodes;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createNode(): this[\"_node\"] {\r\n\t\tlet node = new FlowDiagramNode();\r\n\t\tthis._disposers.push(node);\r\n\t\treturn node;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of chart's links.\r\n\t *\r\n\t * @param {ListTemplate<this[\"_link\"]>}\r\n\t */\r\n\tpublic get links(): ListTemplate<this[\"_link\"]> {\r\n\t\tif (!this._links) {\r\n\t\t\tthis._links = new ListTemplate<this[\"_link\"]>(this.createLink());\r\n\t\t\tthis._disposers.push(new ListDisposer(this._links));\r\n\t\t}\r\n\t\treturn this._links;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createLink(): this[\"_link\"] {\r\n\t\tlet link = new FlowDiagramLink();\r\n\t\tthis._disposers.push(link);\r\n\t\treturn link;\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t * @ignore\r\n\t */\r\n\tpublic feedLegend(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\t\t\tlet legendData: any[] = [];\r\n\r\n\t\t\tthis.nodes.each((key, node) => {\r\n\t\t\t\tlegendData.push(node);\r\n\t\t\t});\r\n\r\n\t\t\tlegend.data = legendData;\r\n\t\t\tlegend.dataFields.name = \"name\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tsuper.disposeData();\r\n\t\tthis.nodes.clear();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FlowDiagram\"] = FlowDiagram;\r\n","/**\r\n * Bullet module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Bullet, IBulletProperties, IBulletAdapters, IBulletEvents } from \"./Bullet\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Bullet]]\r\n */\r\nexport interface ILabelBulletProperties extends IBulletProperties { }\r\n\r\n/**\r\n * Defines events for [[Bullet]]\r\n */\r\nexport interface ILabelBulletEvents extends IBulletEvents { }\r\n\r\n/**\r\n * Defines adapters\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface ILabelBulletAdapters extends IBulletAdapters, ILabelBulletProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a bullet with a textual label.\r\n *\r\n * Uses [[Label]] instance to draw the label, so the label itself is\r\n * configurable.\r\n *\r\n * @see {@link IBulletEvents} for a list of available events\r\n * @see {@link IBulletAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class LabelBullet extends Bullet {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ILabelBulletProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ILabelBulletAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ILabelBulletEvents;\r\n\r\n\t/**\r\n\t * A label (textual) element for the bullet.\r\n\t */\r\n\tpublic label: Label;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"LabelBullet\";\r\n\r\n\t\tlet label = this.createChild(Label);\r\n\t\tlabel.shouldClone = false;\r\n\t\tlabel.verticalCenter = \"middle\";\r\n\t\tlabel.horizontalCenter = \"middle\";\r\n\t\tlabel.truncate = true;\r\n\t\tlabel.hideOversized = false;\r\n\r\n\t\tlabel.maxWidth = 500;\r\n\t\tlabel.maxHeight = 500;\r\n\r\n\t\tlabel.stroke = color();\r\n\t\tlabel.strokeOpacity = 0;\r\n\t\tlabel.fill = new InterfaceColorSet().getFor(\"text\");\r\n\r\n\t\tthis.events.on(\"maxsizechanged\", this.handleMaxSize, this, false);\r\n\r\n\t\tthis.label = label;\r\n\r\n\t\t// not good, as lineSeries will have labels somewhere in the middle.\r\n\t\t//this.locationX = 0.5;\r\n\t\t//this.locationY = 0.5;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tprotected handleMaxSize(){\r\n\t\tthis.label.maxWidth = this.maxWidth;\r\n\t\tthis.label.maxHeight = this.maxHeight;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all proprities and related stuff from another instance of\r\n\t * [[LabelBullet]].\r\n\t *\r\n\t * @param source  Source element\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.label.copyFrom(source.label);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LabelBullet\"] = LabelBullet;\r\n","/**\r\n * SankeyNode module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagramNode, IFlowDiagramNodeAdapters, IFlowDiagramNodeEvents, IFlowDiagramNodeProperties } from \"./FlowDiagramNode\";\r\nimport { SankeyDiagram, SankeyDiagramDataItem } from \"../types/SankeyDiagram\";\r\nimport { LabelBullet } from \"./LabelBullet\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[SankeyNode]].\r\n */\r\nexport interface ISankeyNodeProperties extends IFlowDiagramNodeProperties {\r\n\r\n\t/**\r\n\t * A level node is at. (0 - ...)\r\n\t */\r\n\tlevel?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[SankeyNode]].\r\n */\r\nexport interface ISankeyNodeEvents extends IFlowDiagramNodeEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SankeyNode]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISankeyNodeAdapters extends IFlowDiagramNodeAdapters, ISankeyNodeProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a node in a Sankey Diagram.\r\n *\r\n * A Sankey node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[SankeyLink]] elements.\r\n *\r\n * @see {@link ISankeyNodeEvents} for a list of available events\r\n * @see {@link ISankeyNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class SankeyNode extends FlowDiagramNode {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISankeyNodeProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISankeyNodeAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISankeyNodeEvents;\r\n\r\n\r\n\t/**\r\n\t * [nextInCoord description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic nextInCoord: number = 0;\r\n\r\n\t/**\r\n\t * [nextOutCoord description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic nextOutCoord: number = 0;\r\n\r\n\t/**\r\n\t * A chart instance this node is added to.\r\n\t */\r\n\tpublic chart: SankeyDiagram;\r\n\r\n\r\n\t/**\r\n\t * Defines the type of the [[SankeyDiagramDataItem]] used in the class.\r\n\t */\r\n\tpublic _dataItem: SankeyDiagramDataItem;\r\n\r\n\t/**\r\n\t * A label element which shows node's value.\r\n\t */\r\n\tpublic valueLabel: LabelBullet;\r\n\r\n\t/**\r\n\t * A label element which shows node's name.\r\n\t */\r\n\tpublic nameLabel: LabelBullet;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SankeyNode\";\r\n\r\n\t\tthis.width = 10;\r\n\t\tthis.height = 10;\r\n\r\n\t\tlet nameLabel = this.createChild(LabelBullet);\r\n\t\tnameLabel.shouldClone = false;\r\n\t\t//@should we auto update these locations if position is changed?\r\n\t\tnameLabel.locationX = 1;\r\n\t\tnameLabel.locationY = 0.5;\r\n\t\tnameLabel.label.text = \"{name}\";\r\n\r\n\t\t//nameLabel.label.textElement.hideOversized = false;\r\n\t\tnameLabel.width = 150;\r\n\t\tnameLabel.height = 150;\r\n\t\tnameLabel.label.horizontalCenter = \"left\";\r\n\t\tnameLabel.label.padding(0, 5, 0, 5);\r\n\t\tthis.nameLabel = nameLabel;\r\n\r\n\t\tlet valueLabel = this.createChild(LabelBullet);\r\n\t\tvalueLabel.shouldClone = false;\r\n\t\tvalueLabel.label.hideOversized = false;\r\n\t\tvalueLabel.locationX = 0.5;\r\n\t\tvalueLabel.locationY = 0.5;\r\n\t\tvalueLabel.width = 150;\r\n\t\tvalueLabel.height = 150;\r\n\t\t//valueLabel.label.text = \"{value}\";\r\n\t\tvalueLabel.label.horizontalCenter = \"middle\";\r\n\t\tthis.valueLabel = valueLabel;\r\n\r\n\t\tlet hiddenState = this.hiddenState;\r\n\t\thiddenState.properties.fill = new InterfaceColorSet().getFor(\"disabledBackground\");\r\n\t\thiddenState.properties.opacity = 0.5;\r\n\t\thiddenState.properties.visible = true;\r\n\r\n\t\tthis.background.hiddenState.copyFrom(hiddenState);\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Invalidates all links, attached to this node.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidateLinks(): void {\r\n\t\tsuper.invalidateLinks();\r\n\t\tthis.nextInCoord = 0;\r\n\t\tthis.nextOutCoord = 0;\r\n\t\tlet chart = this.chart;\r\n\r\n\t\tif (chart) {\r\n\t\t\tlet orientation = chart.orientation;\r\n\t\t\tif (this._incomingSorted) {\r\n\t\t\t\t$iter.each(this._incomingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\t\t\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\tlink.parent = this.chart.linksContainer;\r\n\r\n\t\t\t\t\t\tlet x: number;\r\n\t\t\t\t\t\tlet y: number;\r\n\t\t\t\t\t\tlet angle: number;\r\n\r\n\t\t\t\t\t\tif (orientation == \"horizontal\") {\r\n\t\t\t\t\t\t\tx = this.pixelX + this.dx;\r\n\t\t\t\t\t\t\ty = this.nextInCoord + this.pixelY + this.dy;\r\n\t\t\t\t\t\t\tangle = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\ty = this.pixelY + this.dy;\r\n\t\t\t\t\t\t\tx = this.nextInCoord + this.pixelX + this.dx;\r\n\t\t\t\t\t\t\tangle = 90;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlink.endX = x;\r\n\t\t\t\t\t\tlink.endY = y;\r\n\t\t\t\t\t\tlink.startAngle = angle;\r\n\t\t\t\t\t\tlink.endAngle = angle;\r\n\t\t\t\t\t\tlink.gradient.rotation = angle;\r\n\r\n\t\t\t\t\t\tlink.linkWidth = value * chart.valueHeight;\r\n\r\n\t\t\t\t\t\tif (!dataItem.fromNode) {\r\n\r\n\t\t\t\t\t\t\tif (orientation == \"horizontal\") {\r\n\t\t\t\t\t\t\t\tlink.maxWidth = 200;\r\n\t\t\t\t\t\t\t\tlink.startX = this.pixelX + this.dx - link.maxWidth;\r\n\t\t\t\t\t\t\t\tlink.startY = link.endY;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tlink.maxHeight = 200;\r\n\t\t\t\t\t\t\t\tlink.startX = link.endX;\r\n\t\t\t\t\t\t\t\tlink.startY = this.pixelY + this.dy - link.maxHeight;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// TODO is this needed ?\r\n\t\t\t\t\t\t\t$utils.used(link.gradient);\r\n\r\n\t\t\t\t\t\t\tlink.fill = dataItem.toNode.color;\r\n\t\t\t\t\t\t\tlet stop = link.gradient.stops.getIndex(0);\r\n\t\t\t\t\t\t\tif (stop) {\r\n\t\t\t\t\t\t\t\tif (link.colorMode == \"gradient\") {\r\n\t\t\t\t\t\t\t\t\tstop.color = this.color;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tstop.opacity = 0;\r\n\t\t\t\t\t\t\t\tlink.fill = link.gradient;\r\n\t\t\t\t\t\t\t\tlink.stroke = link.gradient;\r\n\t\t\t\t\t\t\t\tlink.gradient.validate();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//link.validate();\r\n\t\t\t\t\t\tthis.nextInCoord += link.linkWidth;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (this._outgoingSorted) {\r\n\t\t\t\t$iter.each(this._outgoingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\t\t\t\t\tlink.parent = this.chart.linksContainer;\r\n\t\t\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\tlet x: number;\r\n\t\t\t\t\t\tlet y: number;\r\n\t\t\t\t\t\tlet angle: number;\r\n\r\n\t\t\t\t\t\tif (orientation == \"horizontal\") {\r\n\t\t\t\t\t\t\tangle = 0;\r\n\t\t\t\t\t\t\tx = this.pixelX + this.pixelWidth + this.dx - 1;\r\n\t\t\t\t\t\t\ty = this.nextOutCoord + this.pixelY + this.dy;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tangle = 90;\r\n\t\t\t\t\t\t\tx = this.nextOutCoord + this.pixelX + this.dx;\r\n\t\t\t\t\t\t\ty = this.pixelY + this.pixelHeight + this.dy - 1;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlink.startX = x;\r\n\t\t\t\t\t\tlink.startY = y;\r\n\t\t\t\t\t\tlink.startAngle = angle;\r\n\t\t\t\t\t\tlink.endAngle = angle;\r\n\t\t\t\t\t\tlink.gradient.rotation = angle;\r\n\r\n\t\t\t\t\t\tlink.linkWidth = value * this.chart.valueHeight;\r\n\r\n\t\t\t\t\t\tif (!dataItem.toNode) {\r\n\t\t\t\t\t\t\tif (orientation == \"horizontal\") {\r\n\t\t\t\t\t\t\t\tlink.maxWidth = 200;\r\n\t\t\t\t\t\t\t\tlink.endX = this.pixelX + link.maxWidth + this.dx;\r\n\t\t\t\t\t\t\t\tlink.endY = link.startY;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tlink.maxHeight = 200;\r\n\t\t\t\t\t\t\t\tlink.endX = link.startX;\r\n\t\t\t\t\t\t\t\tlink.endY = this.pixelY + link.maxHeight + this.dy;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tlink.opacity = this.opacity;\r\n\r\n\t\t\t\t\t\t\tlet stop = link.gradient.stops.getIndex(1);\r\n\t\t\t\t\t\t\tif (stop) {\r\n\t\t\t\t\t\t\t\tif (link.colorMode == \"gradient\") {\r\n\t\t\t\t\t\t\t\t\tstop.color = this.color;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tstop.opacity = 0;\r\n\t\t\t\t\t\t\t\tlink.fill = link.gradient;\r\n\t\t\t\t\t\t\t\tlink.stroke = link.gradient;\r\n\t\t\t\t\t\t\t\tlink.gradient.validate();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//link.validate();\r\n\t\t\t\t\t\tthis.nextOutCoord += link.linkWidth;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.positionBullet(this.nameLabel);\r\n\t\tthis.positionBullet(this.valueLabel);\r\n\t}\r\n\r\n\t/**\r\n\t * Positions the bullet so it is centered within the node element.\r\n\t *\r\n\t * @param bullet  Target bullet\r\n\t */\r\n\tprotected positionBullet(bullet: LabelBullet) {\r\n\t\tif (bullet) {\r\n\t\t\tbullet.x = this.measuredWidth * bullet.locationX;\r\n\t\t\tbullet.y = this.measuredHeight * bullet.locationY;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A level node is displayed at. (0 - ...)\r\n\t *\r\n\t * Levels are measured from left to right.\r\n\t *\r\n\t * The nodes in the left-most column will have `level = 0`.\r\n\t *\r\n\t * Nodes in second column - `level = 1`, etc.\r\n\t *\r\n\t * @param value  Level\r\n\t */\r\n\tpublic set level(value: number) {\r\n\t\tthis.setPropertyValue(\"level\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Level\r\n\t */\r\n\tpublic get level(): number {\r\n\t\treturn this.getPropertyValue(\"level\");\r\n\t}\r\n\r\n\t/**\r\n\t * Copies properties and labels from another [[SankeyNode]].\r\n\t *\r\n\t * @param source  Source node\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.nameLabel.copyFrom(source.nameLabel);\r\n\t\tthis.valueLabel.copyFrom(source.valueLabel);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SankeyNode\"] = SankeyNode;\r\n","/**\r\n * SankeyLink module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SankeyDiagramDataItem, SankeyDiagram } from \"../types/SankeyDiagram\";\r\nimport { FlowDiagramLink, IFlowDiagramLinkAdapters, IFlowDiagramLinkEvents, IFlowDiagramLinkProperties } from \"./FlowDiagramLink\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Polyspline } from \"../../core/elements/Polyspline\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[SankeyLink]].\r\n */\r\nexport interface ISankeyLinkProperties extends IFlowDiagramLinkProperties {\r\n\r\n\t/**\r\n\t * [tension description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\ttension?: number;\r\n\r\n\t/**\r\n\t * [startX description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tstartX?: number;\r\n\r\n\t/**\r\n\t * [startY description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tstartY?: number;\r\n\r\n\t/**\r\n\t * [endX description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tendX?: number;\r\n\r\n\t/**\r\n\t * [endY description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tendY?: number;\r\n\r\n\t/**\r\n\t * [linkWidth description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tlinkWidth?: number;\r\n\r\n\t/**\r\n\t * [controlPointDistance description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tcontrolPointDistance?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[SankeyLink]].\r\n */\r\nexport interface ISankeyLinkEvents extends IFlowDiagramLinkEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SankeyLink]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISankeyLinkAdapters extends IFlowDiagramLinkAdapters, ISankeyLinkProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Sankey Diagram.\r\n *\r\n * @see {@link ISankeyLinkEvents} for a list of available events\r\n * @see {@link ISankeyLinkAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class SankeyLink extends FlowDiagramLink {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISankeyLinkProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISankeyLinkAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISankeyLinkEvents;\r\n\r\n\t/**\r\n\t * Defines a type of data item used by this class.\r\n\t */\r\n\tpublic _dataItem: SankeyDiagramDataItem;\r\n\r\n\t/**\r\n\t * Spline which goes through the middle of a link, used to calculate bullet and tooltip positions, invisible by default\r\n\t */\r\n\tpublic middleLine: Polyspline;\r\n\r\n\tpublic chart: SankeyDiagram;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SankeyLink\";\r\n\r\n\t\t// TODO can this be removed ?\r\n\t\tnew InterfaceColorSet();\r\n\r\n\t\tthis.tension = 0.8;\r\n\t\tthis.controlPointDistance = 0.2;\r\n\r\n\t\tthis.startAngle = 0;\r\n\t\tthis.endAngle = 0;\r\n\r\n\t\tthis.linkWidth = 0;\r\n\r\n\t\tthis.startX = 0;\r\n\t\tthis.endX = 0;\r\n\r\n\t\tthis.startY = 0;\r\n\t\tthis.endY = 0;\r\n\r\n\t\tthis.middleLine = this.createChild(Polyspline);\r\n\t\tthis.middleLine.shouldClone = false;\r\n\t\tthis.middleLine.strokeOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tprotected makeBackwards() {\r\n\t\tif (this.states.getKey(\"backwards\") != undefined) {\r\n\t\t\tthis.setState(\"backwards\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates (redraws) the link.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\r\n\t\tif (!this.isTemplate) {\r\n\r\n\t\t\tlet x0 = this.startX\r\n\t\t\tlet y0 = this.startY;\r\n\t\t\tlet x1 = this.endX;\r\n\t\t\tlet y1 = this.endY;\r\n\r\n\t\t\tif (this.states.getKey(\"backwards\")) {\r\n\t\t\t\tthis.setState(\"default\");\r\n\t\t\t}\r\n\r\n\t\t\tif (this.dataItem) {\r\n\t\t\t\tlet chart = this.dataItem.component;\r\n\r\n\t\t\t\tif (chart) {\r\n\t\t\t\t\tif (chart.orientation == \"horizontal\") {\r\n\t\t\t\t\t\tif (x1 < x0) {\r\n\t\t\t\t\t\t\t[x0, x1] = [x1, x0];\r\n\t\t\t\t\t\t\t[y0, y1] = [y1, y0];\r\n\t\t\t\t\t\t\tthis.makeBackwards();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tif (y1 < y0) {\r\n\t\t\t\t\t\t\t[y0, y1] = [y1, y0];\r\n\t\t\t\t\t\t\t[x0, x1] = [x1, x0];\r\n\t\t\t\t\t\t\tthis.makeBackwards();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNumber(x1)) {\r\n\t\t\t\tx1 = x0;\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNumber(y1)) {\r\n\t\t\t\ty1 = y0;\r\n\t\t\t}\r\n\r\n\t\t\tlet startAngle = this.startAngle;\r\n\t\t\tlet endAngle = this.endAngle;\r\n\t\t\tlet w = this.linkWidth;\r\n\r\n\t\t\tlet path = \"\";\r\n\r\n\t\t\tlet xt0 = x0;\r\n\t\t\tlet yt0 = y0;\r\n\r\n\t\t\tlet xt1 = x1;\r\n\t\t\tlet yt1 = y1;\r\n\r\n\t\t\tlet xb0 = x0 + w * $math.sin(startAngle);\r\n\t\t\tlet xb1 = x1 + w * $math.sin(endAngle);\r\n\r\n\t\t\tlet yb0 = y0 + w * $math.cos(startAngle);\r\n\t\t\tlet yb1 = y1 + w * $math.cos(endAngle);\r\n\r\n\t\t\tlet xm0 = x0 + w / 2 * $math.sin(startAngle);\r\n\t\t\tlet xm1 = x1 + w / 2 * $math.sin(endAngle);\r\n\r\n\t\t\tlet ym0 = y0 + w / 2 * $math.cos(startAngle);\r\n\t\t\tlet ym1 = y1 + w / 2 * $math.cos(endAngle);\r\n\r\n\t\t\tthis.zIndex = this.zIndex || this.dataItem.index;\r\n\r\n\t\t\tlet tensionX = this.tension + (1 - this.tension) * $math.sin(startAngle);\r\n\t\t\tlet tensionY = this.tension + (1 - this.tension) * $math.cos(startAngle);\r\n\r\n\t\t\tthis.middleLine.tensionX = tensionX;\r\n\t\t\tthis.middleLine.tensionY = tensionY;\r\n\r\n\t\t\tif ($type.isNumber(w) && ($type.isNumber(x0) && $type.isNumber(x1) && $type.isNumber(y0) && $type.isNumber(y1))) {\r\n\r\n\t\t\t\t// solves issues with gradient fill of straight lines\r\n\t\t\t\tif ($math.round(xt0, 3) == $math.round(xt1, 3)) {\r\n\t\t\t\t\txt1 += 0.01;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ($math.round(yt0, 3) == $math.round(yt1, 3)) {\r\n\t\t\t\t\tyt1 += 0.01;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ($math.round(xb0, 3) == $math.round(xb1, 3)) {\r\n\t\t\t\t\txb1 += 0.01;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ($math.round(yb0, 3) == $math.round(yb1, 3)) {\r\n\t\t\t\t\tyb1 += 0.01;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet minX = Math.min(xb0, xb1, xt0, xt1);\r\n\t\t\t\tlet minY = Math.min(yb0, yb1, yt0, yt1);\r\n\t\t\t\tlet maxX = Math.max(xb0, xb1, xt0, xt1);\r\n\t\t\t\tlet maxY = Math.max(yb0, yb1, yt0, yt1);\r\n\r\n\t\t\t\tthis._bbox = {\r\n\t\t\t\t\tx: minX,\r\n\t\t\t\t\ty: minY,\r\n\t\t\t\t\twidth: maxX - minX,\r\n\t\t\t\t\theight: maxY - minY\r\n\t\t\t\t};\r\n\r\n\t\t\t\tlet cpd = this.controlPointDistance;\r\n\r\n\t\t\t\tlet kxt0 = xt0 + (xt1 - xt0) * cpd * $math.cos(startAngle);\r\n\t\t\t\tlet kyt0 = yt0 + (yt1 - yt0) * cpd * $math.sin(startAngle);\r\n\r\n\t\t\t\tlet kxt1 = xt1 - (xt1 - xt0) * cpd * $math.cos(endAngle);\r\n\t\t\t\tlet kyt1 = yt1 - (yt1 - yt0) * cpd * $math.sin(endAngle);\r\n\r\n\t\t\t\tlet kxm0 = xm0 + (xm1 - xm0) * cpd * $math.cos(startAngle);\r\n\t\t\t\tlet kym0 = ym0 + (ym1 - ym0) * cpd * $math.sin(startAngle);\r\n\r\n\t\t\t\tlet kxm1 = xm1 - (xm1 - xm0) * cpd * $math.cos(endAngle);\r\n\t\t\t\tlet kym1 = ym1 - (ym1 - ym0) * cpd * $math.sin(endAngle);\r\n\r\n\t\t\t\tlet angle = $math.getAngle({ x: kxt0, y: kyt0 }, { x: kxt1, y: kyt1 });\r\n\r\n\t\t\t\tlet dx = (w / $math.cos(angle) - w) / $math.tan(angle) * $math.cos(startAngle);\r\n\t\t\t\tlet dy = (w / $math.sin(angle) - w) * $math.tan(angle) * $math.sin(startAngle);\r\n\r\n\t\t\t\tlet kxb0 = -dx / 2 + xb0 + (xb1 - xb0) * cpd * $math.cos(startAngle);\r\n\t\t\t\tlet kyb0 = -dy / 2 + yb0 + (yb1 - yb0) * cpd * $math.sin(startAngle);\r\n\r\n\t\t\t\tlet kxb1 = -dx / 2 + xb1 - (xb1 - xb0) * cpd * $math.cos(endAngle);\r\n\t\t\t\tlet kyb1 = -dy / 2 + yb1 - (yb1 - yb0) * cpd * $math.sin(endAngle);\r\n\r\n\r\n\t\t\t\tthis.middleLine.segments = [[{ x: xm0, y: ym0 }, { x: kxm0, y: kym0 }, { x: kxm1, y: kym1 }, { x: xm1, y: ym1 }]];\r\n\r\n\t\t\t\tkxt0 += dx / 2;\r\n\t\t\t\tkyt0 += dy / 2;\r\n\r\n\t\t\t\tkxt1 += dx / 2;\r\n\t\t\t\tkyt1 += dy / 2;\r\n\r\n\t\t\t\tpath += $path.moveTo({ x: xt0, y: yt0 });\r\n\t\t\t\tpath += new $smoothing.Tension(tensionX, tensionY).smooth([{ x: xt0, y: yt0 }, { x: kxt0, y: kyt0 }, { x: kxt1, y: kyt1 }, { x: xt1, y: yt1 }]);\r\n\t\t\t\tpath += $path.lineTo({ x: xb1, y: yb1 });\r\n\t\t\t\tpath += new $smoothing.Tension(tensionX, tensionY).smooth([{ x: xb1, y: yb1 }, { x: kxb1, y: kyb1 }, { x: kxb0, y: kyb0 }, { x: xb0, y: yb0 }]);\r\n\t\t\t\tpath += $path.closePath();\r\n\t\t\t}\r\n\r\n\t\t\tthis.link.path = path;\r\n\r\n\t\t\tif (this.maskBullets) {\r\n\t\t\t\tthis.bulletsMask.path = path;\r\n\t\t\t\tthis.bulletsContainer.mask = this.bulletsMask;\r\n\t\t\t}\r\n\t\t\tthis.positionBullets();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [startX description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value  Start X\r\n\t */\r\n\tpublic set startX(value: number) {\r\n\t\tthis.setPropertyValue(\"startX\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start X\r\n\t */\r\n\tpublic get startX(): number {\r\n\t\treturn this.getPropertyValue(\"startX\");\r\n\t}\r\n\r\n\t/**\r\n\t * [endX description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value  End X\r\n\t */\r\n\tpublic set endX(value: number) {\r\n\t\tthis.setPropertyValue(\"endX\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End X\r\n\t */\r\n\tpublic get endX(): number {\r\n\t\treturn this.getPropertyValue(\"endX\");\r\n\t}\r\n\r\n\t/**\r\n\t * [startY description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value  Start Y\r\n\t */\r\n\tpublic set startY(value: number) {\r\n\t\tthis.setPropertyValue(\"startY\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start Y\r\n\t */\r\n\tpublic get startY(): number {\r\n\t\treturn this.getPropertyValue(\"startY\");\r\n\t}\r\n\r\n\t/**\r\n\t * [endY description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value End Y\r\n\t */\r\n\tpublic set endY(value: number) {\r\n\t\tthis.setPropertyValue(\"endY\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End Y\r\n\t */\r\n\tpublic get endY(): number {\r\n\t\treturn this.getPropertyValue(\"endY\");\r\n\t}\r\n\r\n\t/**\r\n\t * [linkWidth description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set linkWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"linkWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return [description]\r\n\t */\r\n\tpublic get linkWidth(): number {\r\n\t\treturn this.getPropertyValue(\"linkWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Distance of control point of a link, defines relative distance from a node at which linke should bend\r\n\t * @default 0.2\r\n\t * @param value\r\n\t */\r\n\tpublic set controlPointDistance(value: number) {\r\n\t\tthis.setPropertyValue(\"controlPointDistance\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return relative control point distance\r\n\t */\r\n\tpublic get controlPointDistance(): number {\r\n\t\treturn this.getPropertyValue(\"controlPointDistance\");\r\n\t}\r\n\r\n\t/**\r\n\t * Tension of a spline, 1 would make the link to have sharp edges\r\n\t * @default 0.8\r\n\t * @param value\r\n\t */\r\n\tpublic set tension(value: number) {\r\n\t\tthis.setPropertyValue(\"tension\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return tension value\r\n\t */\r\n\tpublic get tension(): number {\r\n\t\treturn this.getPropertyValue(\"tension\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SankeyLink\"] = SankeyLink;\r\n","/**\r\n * Sankey diagram module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagram, FlowDiagramDataItem, IFlowDiagramAdapters, IFlowDiagramDataFields, IFlowDiagramEvents, IFlowDiagramProperties } from \"./FlowDiagram\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { SankeyNode } from \"../elements/SankeyNode\";\r\nimport { SankeyLink } from \"../elements/SankeyLink\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $object from \"../../core/utils/Object\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo rearange notes after dragged\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[SankeyDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class SankeyDiagramDataItem extends FlowDiagramDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: SankeyDiagram;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t */\r\n\tpublic _link: SankeyLink;\r\n\r\n\t/**\r\n\t * An origin node.\r\n\t */\r\n\tpublic fromNode: SankeyNode;\r\n\r\n\t/**\r\n\t * A destination node.\r\n\t */\r\n\tpublic toNode: SankeyNode;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SankeyDiagramDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[SankeyDiagram]].\r\n */\r\nexport interface ISankeyDiagramDataFields extends IFlowDiagramDataFields {\r\n\r\n\t/**\r\n\t * Name of the source node.\r\n\t */\r\n\tfromName?: string;\r\n\r\n\t/**\r\n\t * Name of the target node.\r\n\t */\r\n\ttoName?: string;\r\n\r\n\t/**\r\n\t * Value of the link between two nodes.\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * Color of a from node\r\n\t */\r\n\tcolor?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[SankeyDiagram]]\r\n */\r\nexport interface ISankeyDiagramProperties extends IFlowDiagramProperties {\r\n\r\n\t/**\r\n\t * Sort nodes by name or value or do not sort at all\r\n\t */\r\n\tnodeAlign?: \"top\" | \"bottom\" | \"middle\";\r\n\r\n\r\n\t/**\r\n\t * Orientation of the chart.\r\n\t */\r\n\torientation?: Orientation;\r\n}\r\n\r\n/**\r\n * Defines events for [[SankeyDiagram]].\r\n */\r\nexport interface ISankeyDiagramEvents extends IFlowDiagramEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SankeyDiagram]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISankeyDiagramAdapters extends IFlowDiagramAdapters, ISankeyDiagramProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Sankey Diagram chart.\r\n *\r\n * @see {@link ISankeyDiagramEvents} for a list of available Events\r\n * @see {@link ISankeyDiagramAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sankey-diagram/} for documentation\r\n * @important\r\n */\r\nexport class SankeyDiagram extends FlowDiagram {\r\n\r\n\r\n\t/**\r\n\t * Defines a type for the DataItem.\r\n\t */\r\n\tpublic _dataItem: SankeyDiagramDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: ISankeyDiagramDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISankeyDiagramProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISankeyDiagramAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISankeyDiagramEvents;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t */\r\n\tpublic _link: SankeyLink;\r\n\r\n\t/**\r\n\t * @todo Description\r\n\t */\r\n\tprotected _levelSum: { [index: number]: number };\r\n\r\n\t/**\r\n\t * @todo Description\r\n\t */\r\n\tprotected _levelNodesCount: { [index: number]: number };\r\n\r\n\t/**\r\n\t */\r\n\tpublic _node: SankeyNode;\r\n\r\n\t/**\r\n\t * [maxSum description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic maxSum: number;\r\n\r\n\t/**\r\n\t * level with max sum\r\n\t */\r\n\tprotected _maxSumLevel: number;\r\n\r\n\t/**\r\n\t * [valueHeight description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tprotected _valueHeight: number;\r\n\r\n\t/**\r\n\t * A total number of levels, present on this chart.\r\n\t */\r\n\tprotected _levelCount: number;\r\n\r\n\t/**\r\n\t * Sorted nodes iterator.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tprotected _sorted: $iter.Iterator<[string, this[\"_node\"]]>;\r\n\r\n\tprotected _heightAnimation: Animation;\r\n\r\n\tprotected _level: number;\r\n\r\n\tprotected _counter: number;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"SankeyDiagram\";\r\n\t\tthis.orientation = \"horizontal\";\r\n\t\tthis.nodeAlign = \"middle\";\r\n\r\n\t\tthis.nodesContainer.width = percent(100);\r\n\t\tthis.nodesContainer.height = percent(100);\r\n\r\n\t\tthis.linksContainer.width = percent(100);\r\n\t\tthis.linksContainer.height = percent(100);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates chart's data, effectively causing the chart to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tthis._valueHeight = undefined;\t\t\r\n\t\tsuper.validateData();\r\n\r\n\t\tthis._levelCount = 0;\r\n\r\n\t\tthis.nodes.each((key, node) => {\r\n\t\t\tnode.level = undefined;\r\n\t\t});\r\n\r\n\t\tthis.nodes.each((key, node) => {\r\n\t\t\tnode.level = this.getNodeLevel(node, 0);\r\n\t\t\tthis._levelCount = $math.max(this._levelCount, node.level);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Returns node's highest level.\r\n\t *\r\n\t * @param node   Node\r\n\t * @param level  Current level\r\n\t * @return New level\r\n\t */\r\n\tprotected getNodeLevel(node: this[\"_node\"], level: number): number {\r\n\t\tlet levels: number[] = [level];\r\n\t\t$iter.each(node.incomingDataItems.iterator(), (link) => {\r\n\t\t\tif (link.fromNode) {\r\n\t\t\t\tif ($type.isNumber(link.fromNode.level)) {\r\n\t\t\t\t\tlevels.push(link.fromNode.level + 1);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._counter = 0;\r\n\t\t\t\t\tthis.checkLoop(link.fromNode);\r\n\t\t\t\t\tif (this._counter < this.dataItems.length) {\r\n\t\t\t\t\t\tlevels.push(this.getNodeLevel(link.fromNode, level + 1));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\treturn Math.max(...levels);\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if there's no loop in the ancestor chain.\r\n\t * \r\n\t * @param  node  Node\r\n\t */\r\n\tprotected checkLoop(node: this[\"_node\"]): void {\r\n\t\tthis._counter++;\r\n\r\n\t\tif (this._counter > this.dataItems.length) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t$iter.each(node.incomingDataItems.iterator(), (link) => {\r\n\t\t\tthis.checkLoop(link.fromNode);\r\n\t\t})\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Calculates relation between pixel height and total value.\r\n\t *\r\n\t * In Sankey the actual thickness of links and height of nodes will depend\r\n\t * on their values.\r\n\t */\r\n\tprotected calculateValueHeight() {\r\n\t\t// calculate sums of each level\r\n\t\tthis._levelSum = {};\r\n\t\tthis._levelNodesCount = {};\r\n\t\tthis.maxSum = 0;\r\n\r\n\t\tlet total = this.dataItem.values.value.sum;\r\n\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tthis.getNodeValue(node);\r\n\t\t});\r\n\r\n\t\tthis.nodes.each((key, node) => {\r\n\t\t\tlet level = node.level;\r\n\r\n\t\t\tlet value = Math.max(node.totalIncoming, node.totalOutgoing);\r\n\r\n\r\n\t\t\tif (value / total < this.minNodeSize) {\r\n\t\t\t\tvalue = total * this.minNodeSize;\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.isNumber(this._levelSum[level])) {\r\n\t\t\t\tthis._levelSum[level] += value;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._levelSum[level] = value;\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.isNumber(this._levelNodesCount[level])) {\r\n\t\t\t\tthis._levelNodesCount[level]++;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._levelNodesCount[level] = 1;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\t\tlet availableHeight: number;\r\n\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\tavailableHeight = this.chartContainer.maxHeight - 1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tavailableHeight = this.chartContainer.maxWidth - 1;\r\n\t\t}\r\n\r\n\r\n\t\tlet maxSumLevel: number;\r\n\t\tlet minHeight: number;\r\n\r\n\t\t$object.each(this._levelSum, (key, value) => {\r\n\t\t\tlet realValue = value;\r\n\r\n\t\t\tlet levelNodeCount = this._levelNodesCount[key];\r\n\t\t\tlet valueHeight = (availableHeight - (levelNodeCount - 1) * this.nodePadding) / realValue;\r\n\r\n\t\t\tif (valueHeight == Infinity) {\r\n\t\t\t\tvalueHeight = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (minHeight > valueHeight || !$type.isNumber(minHeight)) {\r\n\t\t\t\tminHeight = valueHeight;\r\n\t\t\t\tthis.maxSum = realValue;\r\n\t\t\t\tmaxSumLevel = $type.toNumber(key);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis._maxSumLevel = maxSumLevel;\r\n\r\n\t\tlet maxSumLevelNodeCount = this._levelNodesCount[this._maxSumLevel];\r\n\r\n\t\tlet valueHeight = (availableHeight - (maxSumLevelNodeCount - 1) * this.nodePadding) / this.maxSum;\r\n\r\n\t\tif (valueHeight == Infinity) {\r\n\t\t\tvalueHeight = 0;\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(this.valueHeight)) {\r\n\t\t\tthis.valueHeight = valueHeight;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet finalHeight;\r\n\t\t\ttry {\r\n\t\t\t\tfinalHeight = this._heightAnimation.animationOptions[0].to;\r\n\t\t\t}\r\n\t\t\tcatch (err) {\r\n\r\n\t\t\t}\r\n\t\t\t// without animations it will be non-smooth as maxValue jumps from one column to another\r\n\t\t\tif (finalHeight != valueHeight) {\r\n\t\t\t\tlet duration = this.interpolationDuration;\r\n\t\t\t\ttry {\r\n\t\t\t\t\tduration = this.nodes.template.states.getKey(\"active\").transitionDuration;\r\n\t\t\t\t}\r\n\t\t\t\tcatch (err) {\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._heightAnimation = new Animation(this, { property: \"valueHeight\", from: this.valueHeight, to: valueHeight }, duration, this.interpolationEasing).start();\r\n\t\t\t\tthis._disposers.push(this._heightAnimation);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Redraws the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\r\n\t\tthis.calculateValueHeight();\r\n\r\n\t\tlet container = this.nodesContainer;\r\n\r\n\t\tlet nextCoordinate: { [index: number]: number } = {};\r\n\r\n\t\tlet maxSumLevelNodeCount = this._levelNodesCount[this._maxSumLevel];\r\n\r\n\t\tlet total = this.dataItem.values.value.sum;\r\n\r\n\t\tlet availableHeight: number;\r\n\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\tavailableHeight = this.chartContainer.maxHeight - 1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tavailableHeight = this.chartContainer.maxWidth - 1;\r\n\t\t}\r\n\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tlet level = node.level;\r\n\t\t\tlet levelCoordinate: number = 0;\r\n\r\n\t\t\tlet nodeCount = this._levelNodesCount[level];\r\n\r\n\t\t\tswitch (this.nodeAlign) {\r\n\t\t\t\tcase \"bottom\":\r\n\t\t\t\t\tlevelCoordinate = (this.maxSum - this._levelSum[level]) * this.valueHeight - (nodeCount - maxSumLevelNodeCount) * this.nodePadding;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"middle\":\r\n\t\t\t\t\tlevelCoordinate = (this.maxSum - this._levelSum[level]) * this.valueHeight / 2 - (nodeCount - maxSumLevelNodeCount) * this.nodePadding / 2;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.maxSum == 0) {\r\n\t\t\t\tswitch (this.nodeAlign) {\r\n\t\t\t\t\tcase \"bottom\":\r\n\t\t\t\t\t\tlevelCoordinate = availableHeight - nodeCount * (this.minNodeSize * availableHeight + this.nodePadding);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"middle\":\r\n\t\t\t\t\t\tlevelCoordinate = availableHeight / 2 - nodeCount / 2 * (this.minNodeSize * availableHeight + this.nodePadding);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tnode.parent = container;\r\n\r\n\t\t\tlet delta: number;\r\n\t\t\tlet x: number;\r\n\t\t\tlet y: number;\r\n\r\n\t\t\tlet value = Math.max(node.totalIncoming, node.totalOutgoing);\r\n\r\n\t\t\tif (value / total < this.minNodeSize) {\r\n\t\t\t\tvalue = total * this.minNodeSize;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\tdelta = (this.innerWidth - node.pixelWidth) / this._levelCount;\r\n\r\n\t\t\t\tx = delta * node.level;\r\n\t\t\t\ty = nextCoordinate[level] || levelCoordinate;\r\n\r\n\t\t\t\tlet h = value * this.valueHeight;\r\n\r\n\t\t\t\tif (total == 0 && h == 0) {\r\n\t\t\t\t\th = this.minNodeSize * availableHeight;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnode.height = h;\r\n\t\t\t\tnode.minX = x;\r\n\t\t\t\tnode.maxX = x;\r\n\t\t\t\tnextCoordinate[level] = y + h + this.nodePadding;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdelta = (this.innerHeight - node.pixelHeight) / this._levelCount;\r\n\r\n\t\t\t\tx = nextCoordinate[level] || levelCoordinate;\r\n\t\t\t\ty = delta * node.level;\r\n\r\n\t\t\t\tlet w = value * this.valueHeight;\r\n\r\n\t\t\t\tif (total == 0 && w == 0) {\r\n\t\t\t\t\tw = this.minNodeSize * availableHeight;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnode.width = w;\r\n\t\t\t\tnode.minY = y;\r\n\t\t\t\tnode.maxY = y;\r\n\t\t\t\tnextCoordinate[level] = x + w + this.nodePadding;\r\n\t\t\t}\r\n\t\t\tnode.x = x;\r\n\t\t\tnode.y = y;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Performs actual operations to reveal this element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param duration Fade in duration (ms)\r\n\t * @return Fade in duration (ms)\r\n\t */\r\n\tprotected showReal(duration?: number): $type.Optional<Animation> {\r\n\r\n\t\tif (this.preventShow) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (this.interpolationDuration > 0) {\r\n\t\t\tlet container = this.nodesContainer;\r\n\r\n\t\t\tlet i: number = 0;\r\n\r\n\t\t\t$iter.each(this.links.iterator(), (link) => {\r\n\t\t\t\tlink.hide(0);\r\n\t\t\t})\r\n\r\n\t\t\t$iter.each(this._sorted, (strNode) => {\r\n\r\n\t\t\t\tlet node = strNode[1];\r\n\r\n\t\t\t\tlet property: \"dx\" | \"dy\";\r\n\r\n\t\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\t\tnode.dx = -(container.pixelWidth - node.pixelWidth) / Math.max(this._levelCount, 1);\r\n\t\t\t\t\tproperty = \"dx\";\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tnode.dy = -(container.pixelHeight - node.pixelHeight) / Math.max(this._levelCount, 1);\r\n\t\t\t\t\tproperty = \"dy\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet delay = 0;\r\n\t\t\t\tlet duration = this.interpolationDuration;\r\n\t\t\t\tif (this.sequencedInterpolation) {\r\n\t\t\t\t\tdelay = this.sequencedInterpolationDelay * i + duration * i / $iter.length(this.nodes.iterator());\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnode.opacity = 0;\r\n\t\t\t\tnode.invalidateLinks();\r\n\r\n\t\t\t\tnode.animate([{ property: \"opacity\", from: 0, to: 1 }, { property: property, to: 0 }], this.interpolationDuration, this.interpolationEasing).delay(delay);\r\n\r\n\t\t\t\t$iter.each(node.outgoingDataItems.iterator(), (dataItem) => {\r\n\t\t\t\t\tlet animation = dataItem.link.show(this.interpolationDuration);\r\n\t\t\t\t\tif (animation && !animation.isFinished()) {\r\n\t\t\t\t\t\tanimation.delay(delay);\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\r\n\t\t\t\t$iter.each(node.incomingDataItems.iterator(), (dataItem) => {\r\n\t\t\t\t\tif (!dataItem.fromNode) {\r\n\t\t\t\t\t\tlet animation = dataItem.link.show(this.interpolationDuration);\r\n\t\t\t\t\t\tif (animation && !animation.isFinished()) {\r\n\t\t\t\t\t\t\tanimation.delay(delay);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\r\n\t\t\t\ti++;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn super.showReal();\r\n\t}\r\n\r\n\t/**\r\n\t * Changes the sort type of the nodes.\r\n\t *\r\n\t * This will actually reshuffle nodes using nice animation.\r\n\t */\r\n\tprotected changeSorting() {\r\n\t\tthis.sortNodes();\r\n\r\n\t\tlet nextCoordinate: { [index: number]: number } = {};\r\n\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tlet level = node.level;\r\n\r\n\t\t\tlet levelCoordinate = (this.maxSum - this._levelSum[level]) * this.valueHeight / 2;\r\n\r\n\t\t\tlet property: \"x\" | \"y\";\r\n\t\t\tlet nodeHeight: number;\r\n\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\tproperty = \"y\";\r\n\t\t\t\tnodeHeight = node.pixelHeight;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tproperty = \"x\";\r\n\t\t\t\tnodeHeight = node.pixelWidth;\r\n\t\t\t}\r\n\r\n\t\t\tnode.animate({ property: property, to: nextCoordinate[level] || levelCoordinate }, this.interpolationDuration, this.interpolationEasing);\r\n\t\t\tnextCoordinate[level] = (nextCoordinate[level] || levelCoordinate) + nodeHeight + this.nodePadding;\r\n\r\n\t\t\tnode.invalidateLinks();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Sankey diagram\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new data item.\r\n\t *\r\n\t * @return Data item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new SankeyDiagramDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * How to align nodes. In case layout is vertical, top means left and bottom means right\r\n\t *\r\n\t * @param value  Node sorting\r\n\t */\r\n\tpublic set nodeAlign(value: \"top\" | \"middle\" | \"bottom\") {\r\n\t\tthis.setPropertyValue(\"nodeAlign\", value);\r\n\t\tthis.changeSorting();\r\n\t}\r\n\r\n\t/**\r\n\t * @returns Returns nodeAlign value\r\n\t */\r\n\tpublic get nodeAlign(): \"top\" | \"middle\" | \"bottom\" {\r\n\t\treturn this.getPropertyValue(\"nodeAlign\");\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation of the chart: \"horizontal\" or \"vertical\";\r\n\t *\r\n\t * @param value Orientation\r\n\t */\r\n\tpublic set orientation(value: Orientation) {\r\n\t\tthis.setPropertyValue(\"orientation\", value, true);\r\n\t\tlet nameLabel = this.nodes.template.nameLabel;\r\n\r\n\t\tif (value == \"vertical\") {\r\n\t\t\tthis.nodes.template.width = undefined;\r\n\t\t\tnameLabel.label.horizontalCenter = \"middle\";\r\n\t\t\tnameLabel.locationX = 0.5;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.nodes.template.height = undefined;\r\n\t\t\tnameLabel.label.horizontalCenter = \"left\";\r\n\t\t\tnameLabel.locationX = 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Orientation\r\n\t */\r\n\tpublic get orientation(): Orientation {\r\n\t\treturn this.getPropertyValue(\"orientation\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createNode(): this[\"_node\"] {\r\n\t\tlet node = new SankeyNode();\r\n\t\tthis._disposers.push(node);\r\n\t\treturn node;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createLink(): this[\"_link\"] {\r\n\t\tlet link = new SankeyLink();\r\n\t\tthis._disposers.push(link);\r\n\t\treturn link;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic get valueHeight(): number {\r\n\t\treturn this._valueHeight;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic set valueHeight(value: number) {\r\n\t\tif (value != this._valueHeight) {\r\n\t\t\tthis._valueHeight = value;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tdisposeData() {\r\n\t\tsuper.disposeData();\r\n\t\tthis._sorted = this.nodes.iterator();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SankeyDiagram\"] = SankeyDiagram;\r\n","/**\r\n * ChordNode module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagramNode, IFlowDiagramNodeAdapters, IFlowDiagramNodeEvents, IFlowDiagramNodeProperties } from \"./FlowDiagramNode\";\r\nimport { ChordDiagram, ChordDiagramDataItem } from \"../types/ChordDiagram\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ChordNode]].\r\n */\r\nexport interface IChordNodeProperties extends IFlowDiagramNodeProperties { }\r\n\r\n/**\r\n * Defines events for [[ChordNode]].\r\n */\r\nexport interface IChordNodeEvents extends IFlowDiagramNodeEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordNode]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordNodeAdapters extends IFlowDiagramNodeAdapters, IChordNodeProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a node in a Chord Diagram.\r\n *\r\n * A Chord node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[ChordLink]] elements.\r\n *\r\n * @see {@link IChordNodeEvents} for a list of available events\r\n * @see {@link IChordNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ChordNode extends FlowDiagramNode {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IChordNodeProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IChordNodeAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IChordNodeEvents;\r\n\r\n\t/**\r\n\t * A list of data items of the items coming in from another node, one level\r\n\t * up.\r\n\t *\r\n\t * These are what ingoing links are build out of.\r\n\t */\r\n\tprotected _incomingDataItems: List<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * A list of data items of the items going out of the node.\r\n\t *\r\n\t * These are what outgoing links are build out of.\r\n\t */\r\n\tprotected _outgoingDataItems: List<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * Sorted list of incoming items.\r\n\t */\r\n\tprotected _incomingSorted: $iter.Iterator<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * Sorted list of outgoing items.\r\n\t */\r\n\tprotected _outgoingSorted: $iter.Iterator<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * A chart instance this node is added to.\r\n\t */\r\n\tpublic chart: ChordDiagram;\r\n\r\n\r\n\t/**\r\n\t * Defines the type of the [[ChordDiagramDataItem]] used in the class.\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\r\n\t/**\r\n\t * Slice sprite of a node\r\n\t */\r\n\tpublic slice: Slice;\r\n\r\n\t/**\r\n\t * A label element which shows node's name.\r\n\t */\r\n\tpublic label: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic nextAngle: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic trueStartAngle: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordNode\";\r\n\r\n\t\tlet label = this.createChild(AxisLabelCircular);\r\n\t\tlabel.location = 0.5;\r\n\t\tlabel.radius = 5;\r\n\t\tlabel.text = \"{name}\";\r\n\t\tlabel.zIndex = 1;\r\n\t\tlabel.shouldClone = false;\r\n\t\tthis.label = label;\r\n\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.events.on(\"positionchanged\", this.updateRotation, this, false);\r\n\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.slice = this.createChild(Slice);\r\n\t\tthis.slice.isMeasured = false;\r\n\r\n\t\tlet hiddenState = this.hiddenState;\r\n\t\thiddenState.properties.fill = new InterfaceColorSet().getFor(\"disabledBackground\");\r\n\t\thiddenState.properties.opacity = 0.5;\r\n\t\thiddenState.properties.visible = true;\r\n\r\n\t\tthis.setStateOnChildren = false;\r\n\r\n\t\tthis.slice.hiddenState.properties.visible = true;\r\n\r\n\t\tthis.adapter.add(\"tooltipX\", (tooltipX, target)=>{\r\n\t\t    return target.slice.ix * (target.slice.radius - (target.slice.radius - target.slice.pixelInnerRadius) / 2);\r\n\t\t})\r\n\r\n\t\tthis.adapter.add(\"tooltipY\", (tooltipY, target)=>{\r\n\t\t    return target.slice.iy * (target.slice.radius - (target.slice.radius - target.slice.pixelInnerRadius) / 2);\r\n\t\t})\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Invalidates all links, attached to this node.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidateLinks(): void {\r\n\t\tsuper.invalidateLinks();\r\n\r\n\t\tlet label = this.label;\r\n\t\tlet slice = this.slice;\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart && slice) {\r\n\r\n\t\t\tlet sum = this.total;\r\n\t\t\tlet arc = slice.arc;\r\n\t\t\tlet sliceStartAngle = slice.startAngle;\r\n\r\n\t\t\tthis.children.each((child) => {\r\n\t\t\t\tif (child instanceof Bullet) {\r\n\t\t\t\t\tlet locationX = child.locationX;\r\n\t\t\t\t\tif (!$type.isNumber(locationX)) {\r\n\t\t\t\t\t\tlocationX = 0.5;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet locationY = child.locationY;\r\n\t\t\t\t\tif (!$type.isNumber(locationY)) {\r\n\t\t\t\t\t\tlocationY = 1;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet childAngle = sliceStartAngle + arc * locationX;\r\n\t\t\t\t\tlet childRadius = locationY * slice.radius;\r\n\r\n\t\t\t\t\tchild.x = childRadius * $math.cos(childAngle);\r\n\t\t\t\t\tchild.y = childRadius * $math.sin(childAngle);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\r\n\t\t\tlet labelAngle = sliceStartAngle + arc * label.location;\r\n\t\t\tlet startAngle = sliceStartAngle + (1 - sum / this.adjustedTotal) * arc * 0.5; // if value of a node is > then sum of the links, add to center link\r\n\r\n\t\t\tif ($type.isNaN(startAngle)) {\r\n\t\t\t\tstartAngle = sliceStartAngle;\r\n\t\t\t}\r\n\r\n\t\t\tlabel.fixPosition(labelAngle, slice.radius);\r\n\r\n\t\t\tthis.nextAngle = startAngle;\r\n\r\n\t\t\tif (this._outgoingSorted) {\r\n\r\n\t\t\t\t$iter.each(this._outgoingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\t\t\t\t\tlink.parent = this.chart.linksContainer;\r\n\t\t\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\r\n\t\t\t\t\tif ($type.isNumber(value)) {\r\n\r\n\t\t\t\t\t\tif (chart.nonRibbon) {\r\n\t\t\t\t\t\t\tlet percentWidth = link.percentWidth;\r\n\t\t\t\t\t\t\tif (!$type.isNumber(percentWidth)) {\r\n\t\t\t\t\t\t\t\tpercentWidth = 5;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tpercentWidth = percentWidth / 100;\r\n\r\n\t\t\t\t\t\t\tlink.startAngle = sliceStartAngle + arc / 2 - arc / 2 * percentWidth;\r\n\t\t\t\t\t\t\tlink.arc = arc * percentWidth;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tlink.arc = value * chart.valueAngle;\r\n\t\t\t\t\t\t\tlink.startAngle = this.nextAngle;\r\n\t\t\t\t\t\t\tthis.nextAngle += link.arc;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (!dataItem.toNode) {\r\n\t\t\t\t\t\t\tlink.endAngle = link.startAngle;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlink.radius = slice.pixelInnerRadius;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//link.validate();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (this._incomingSorted) {\r\n\t\t\t\t$iter.each(this._incomingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\r\n\t\t\t\t\tlink.radius = slice.pixelInnerRadius;\r\n\r\n\t\t\t\t\tif (chart.nonRibbon) {\r\n\t\t\t\t\t\tlet percentWidth = link.percentWidth;\r\n\t\t\t\t\t\tif (!$type.isNumber(percentWidth)) {\r\n\t\t\t\t\t\t\tpercentWidth = 5;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tpercentWidth = percentWidth / 100;\r\n\r\n\t\t\t\t\t\tlink.endAngle = sliceStartAngle + arc / 2 - arc / 2 * percentWidth;\r\n\t\t\t\t\t\tlink.arc = arc * percentWidth;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlink.endAngle = this.nextAngle;\r\n\t\t\t\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\t\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\t\tlink.arc = value * chart.valueAngle; // yes, this is needed\r\n\t\t\t\t\t\t\tthis.nextAngle += link.arc;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!dataItem.fromNode) {\r\n\t\t\t\t\t\tlink.startAngle = link.endAngle;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//link.validate();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * updates slice start angle so that when we drag a node it would face the center\r\n\t */\r\n\tprotected updateRotation() {\r\n\t\tlet slice = this.slice;\r\n\t\tlet mAngle = this.trueStartAngle + slice.arc / 2;\r\n\t\tlet radius = slice.radius;\r\n\r\n\t\tlet tx = radius * $math.cos(mAngle);\r\n\t\tlet ty = radius * $math.sin(mAngle);\r\n\r\n\t\tlet angle = $math.getAngle({ x: tx + this.pixelX, y: ty + this.pixelY });\r\n\r\n\t\tslice.startAngle = this.trueStartAngle + (angle - mAngle);\r\n\r\n\t\tthis.dx = - this.pixelX;\r\n\t\tthis.dy = - this.pixelY;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies properties and labels from another [[ChordNode]].\r\n\t *\r\n\t * @param source  Source node\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.label.copyFrom(source.label);\r\n\t\tthis.slice.copyFrom(source.slice);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordNode\"] = ChordNode;\r\n","/**\r\n * Functionality for drawing quadratic curves.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Line, ILineProperties, ILineAdapters, ILineEvents } from \"./Line\";\r\nimport { IPoint, IOrientationPoint } from \"../defs/IPoint\";\r\nimport { color } from \"../utils/Color\";\r\nimport * as $path from \"../rendering/Path\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $type from \"../utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines available properties for [[QuadraticCurve]].\r\n */\r\nexport interface IQuadraticCurveProperties extends ILineProperties {\r\n\t/**\r\n\t * X coordinate of control point.\r\n\t */\r\n\tcpx?: number;\r\n\r\n\t/**\r\n\t * Y coordinate of control point.\r\n\t */\r\n\tcpy?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[QuadraticCurve]].\r\n */\r\nexport interface IQuadraticCurveEvents extends ILineEvents { }\r\n\r\n/**\r\n * Defines adapters for [[QuadraticCurve]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IQuadraticCurveAdapters extends ILineAdapters, IQuadraticCurveProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a waved line.\r\n *\r\n * @see {@link IQuadraticCurveEvents} for a list of available events\r\n * @see {@link IQuadraticCurveAdapters} for a list of available Adapters\r\n */\r\nexport class QuadraticCurve extends Line {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IQuadraticCurveProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IQuadraticCurveAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IQuadraticCurveEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"QuadraticCurve\";\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\t\tthis.pixelPerfect = false;\r\n\r\n\t\tthis.fill = color();\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the waved line.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\t//super.draw();\r\n\t\tif($type.isNumber(this.x1 + this.x2 + this.y1 + this.y2 + this.cpx + this.cpy )){\r\n\r\n\t\t\tlet p1: IPoint = { x: this.x1, y: this.y1 };\r\n\t\t\tlet p2: IPoint = { x: this.x2, y: this.y2 };\r\n\t\t\tlet cp: IPoint = { x: this.cpx, y: this.cpy };\r\n\r\n\t\t\tlet d: string = $path.moveTo(p1) + $path.quadraticCurveTo(p2, cp);\r\n\r\n\t\t\tthis.path = d;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * X coordinate of control point.\r\n\t *\r\n\t * @param value X\r\n\t */\r\n\tpublic set cpx(value: number) {\r\n\t\tthis.setPropertyValue(\"cpx\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return X\r\n\t */\r\n\tpublic get cpx(): number {\r\n\t\treturn this.getPropertyValue(\"cpx\");\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate of control point.\r\n\t *\r\n\t * @param value Y\r\n\t */\r\n\tpublic set cpy(value: number) {\r\n\t\tthis.setPropertyValue(\"cpy\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Y\r\n\t */\r\n\tpublic get cpy(): number {\r\n\t\treturn this.getPropertyValue(\"cpy\");\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position along the line (0-1) into pixel coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic positionToPoint(position: number): IOrientationPoint {\r\n\t\tlet p1 = {x:this.x1, y:this.y1};\r\n\t\tlet cp = {x:this.cpx, y:this.cpy};\r\n\t\tlet p2 = {x:this.x2, y:this.y2};\r\n\r\n\t\tlet point1 = $math.getPointOnQuadraticCurve(p1, p2, cp, position);\r\n\t\tlet point2 = $math.getPointOnQuadraticCurve(p1, p2, cp, position + 0.001);\r\n\r\n\t\treturn {x:point1.x, y:point1.y, angle:$math.getAngle(point1, point2)};\r\n\t}\r\n}\r\n","/**\r\n * ChordLink module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ChordDiagramDataItem } from \"../types/ChordDiagram\";\r\nimport { FlowDiagramLink, IFlowDiagramLinkAdapters, IFlowDiagramLinkEvents, IFlowDiagramLinkProperties } from \"./FlowDiagramLink\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { QuadraticCurve } from \"../../core/elements/QuadraticCurve\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ChordLink]].\r\n */\r\nexport interface IChordLinkProperties extends IFlowDiagramLinkProperties {\r\n\r\n\t/**\r\n\t * [radius description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tradius?: number;\r\n\r\n\r\n\t/**\r\n\t * [arc description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tarc?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[ChordLink]].\r\n */\r\nexport interface IChordLinkEvents extends IFlowDiagramLinkEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordLink]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordLinkAdapters extends IFlowDiagramLinkAdapters, IChordLinkProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Chord Diagram.\r\n *\r\n * @see {@link IChordLinkEvents} for a list of available events\r\n * @see {@link IChordLinkAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ChordLink extends FlowDiagramLink {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IChordLinkProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IChordLinkAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IChordLinkEvents;\r\n\r\n\t/**\r\n\t * Defines a type of data item used by this class.\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\t/**\r\n\t * Spline which goes through the middle of a link, used to calculate bullet and tooltip positions, invisible by default\r\n     */\r\n\tpublic middleLine: QuadraticCurve;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordLink\";\r\n\r\n\t\tthis.middleLine = this.createChild(QuadraticCurve);\r\n\t\tthis.middleLine.shouldClone = false;\r\n\t\tthis.middleLine.strokeOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates (redraws) the link.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\r\n\t\tif (!this.isTemplate) {\r\n\t\t\tlet startAngle = this.startAngle;\r\n\t\t\tlet endAngle = this.endAngle;\r\n\r\n\t\t\tlet arc = this.arc;\r\n\t\t\tlet radius = this.radius;\r\n\r\n\t\t\tlet fromNode = this.dataItem.fromNode;\r\n\t\t\tlet toNode = this.dataItem.toNode;\r\n\r\n\t\t\tlet fromX = 0;\r\n\t\t\tlet fromY = 0;\r\n\r\n\t\t\tif (fromNode) {\r\n\t\t\t\tfromX = fromNode.pixelX + fromNode.dx;\r\n\t\t\t\tfromY = fromNode.pixelY + fromNode.dy;\r\n\t\t\t}\r\n\r\n\t\t\tlet toX = 0;\r\n\t\t\tlet toY = 0;\r\n\r\n\t\t\tif (toNode) {\r\n\t\t\t\ttoX = toNode.pixelX + toNode.dx;\r\n\t\t\t\ttoY = toNode.pixelY + toNode.dy;\r\n\t\t\t}\r\n\r\n\t\t\tif (radius > 0) {\r\n\t\t\t\tlet x1 = radius * $math.cos(startAngle) + fromX;\r\n\t\t\t\tlet y1 = radius * $math.sin(startAngle) + fromY;\r\n\t\t\t\tlet x2 = radius * $math.cos(endAngle) + toX;\r\n\t\t\t\tlet y2 = radius * $math.sin(endAngle) + toY;\r\n\r\n\t\t\t\t//let cpAngle = startAngle + arc + (endAngle - startAngle - arc) / 2;\r\n\t\t\t\t//let arcWidth = $math.getDistance({x:x1, y:y1}, {x:x4, y:y4});\r\n\r\n\t\t\t\t//let cpx = (arcWidth) * $math.cos(cpAngle);\r\n\t\t\t\t//let cpy = (arcWidth) * $math.sin(cpAngle);\r\n\r\n\t\t\t\tlet cp = { x: 0, y: 0 };\r\n\t\t\t\tlet path = $path.moveTo({ x: x1, y: y1 });\r\n\r\n\t\t\t\tpath += $path.arcTo(startAngle, arc, radius);\r\n\t\t\t\tpath += $path.quadraticCurveTo({ x: x2, y: y2 }, cp);\r\n\t\t\t\tpath += $path.arcTo(endAngle, arc, radius);\r\n\t\t\t\tpath += $path.quadraticCurveTo({ x: x1, y: y1 }, cp);\r\n\r\n\t\t\t\tif (arc > 0) {\r\n\t\t\t\t\tthis.link.path = path;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.link.path = \"\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.maskBullets) {\r\n\t\t\t\t\tthis.bulletsMask.path = path;\r\n\t\t\t\t\tthis.bulletsContainer.mask = this.bulletsMask;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet mAngle1 = startAngle + arc / 2;\r\n\t\t\t\tlet mAngle2 = endAngle + arc / 2;\r\n\r\n\t\t\t\tlet middleLine = this.middleLine;\r\n\r\n\t\t\t\tmiddleLine.x1 = radius * $math.cos(mAngle1) + fromX;\r\n\t\t\t\tmiddleLine.y1 = radius * $math.sin(mAngle1) + fromY;\r\n\t\t\t\tmiddleLine.x2 = radius * $math.cos(mAngle2) + toX;\r\n\t\t\t\tmiddleLine.y2 = radius * $math.sin(mAngle2) + toY;\r\n\r\n\t\t\t\tmiddleLine.cpx = 0;\r\n\t\t\t\tmiddleLine.cpy = 0;\r\n\r\n\t\t\t\tmiddleLine.stroke = this.fill;\r\n\r\n\t\t\t\tthis.positionBullets();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * [radius description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value End Y\r\n\t */\r\n\tpublic set radius(value: number) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End Y\r\n\t */\r\n\tpublic get radius(): number {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * [arc description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set arc(value: number) {\r\n\t\tthis.setPropertyValue(\"arc\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return [description]\r\n\t */\r\n\tpublic get arc(): number {\r\n\t\treturn this.getPropertyValue(\"arc\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordLink\"] = ChordLink;\r\n","/**\r\n * Chord diagram module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagram, FlowDiagramDataItem, IFlowDiagramAdapters, IFlowDiagramDataFields, IFlowDiagramEvents, IFlowDiagramProperties } from \"./FlowDiagram\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { DictionaryTemplate } from \"../../core/utils/Dictionary\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { ChordNode } from \"../elements/ChordNode\";\r\nimport { ChordLink } from \"../elements/ChordLink\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo rearange notes after dragged\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ChordDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ChordDiagramDataItem extends FlowDiagramDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: ChordDiagram;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t */\r\n\tpublic _link: ChordLink;\r\n\r\n\t/**\r\n\t * An origin node.\r\n\t */\r\n\tpublic fromNode: ChordNode;\r\n\r\n\t/**\r\n\t * A destination node.\r\n\t */\r\n\tpublic toNode: ChordNode;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordDiagramDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ChordDiagram]].\r\n */\r\nexport interface IChordDiagramDataFields extends IFlowDiagramDataFields {\r\n\r\n\t/**\r\n\t * Name of the source node.\r\n\t */\r\n\tfromName?: string;\r\n\r\n\t/**\r\n\t * Name of the target node.\r\n\t */\r\n\ttoName?: string;\r\n\r\n\t/**\r\n\t * Value of the link between two nodes.\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * Color of a from node\r\n\t */\r\n\tcolor?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[ChordDiagram]]\r\n */\r\nexport interface IChordDiagramProperties extends IFlowDiagramProperties {\r\n\t/**\r\n\t * Radius of the Chord. Absolute or relative.\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the Chord nodes. Absolute or relative. Negative value means that the inner radius will be calculated from the radius, not from the center.\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * An angle radar face starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle radar face ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\r\n\t/**\r\n\t * If you set this to true, all the lines will be of the same width.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tnonRibbon?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[ChordDiagram]].\r\n */\r\nexport interface IChordDiagramEvents extends IFlowDiagramEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordDiagram]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordDiagramAdapters extends IFlowDiagramAdapters, IChordDiagramProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Chord Diagram chart.\r\n *\r\n * @see {@link IChordDiagramEvents} for a list of available Events\r\n * @see {@link IChordDiagramAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/chord-diagram/} for documentation\r\n * @important\r\n */\r\nexport class ChordDiagram extends FlowDiagram {\r\n\r\n\t/**\r\n\t * Defines a type for the DataItem.\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IChordDiagramDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IChordDiagramProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IChordDiagramAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IChordDiagramEvents;\r\n\r\n\t/**\r\n\t * A list of chart's Chord nodes.\r\n\t *\r\n\t * @param {DictionaryTemplate<string, ChordNode>}\r\n\t */\r\n\tpublic nodes: DictionaryTemplate<string, ChordNode>;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t */\r\n\tpublic _link: ChordLink;\r\n\r\n\t/**\r\n\t * Sorted nodes iterator.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tprotected _sorted: $iter.Iterator<[string, ChordNode]>;\r\n\r\n\t/**\r\n\t * [valueAngle description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic valueAngle: number = 0;\r\n\r\n\t/**\r\n\t * A container for chord elemens.\r\n\t */\r\n\tpublic chordContainer:Container;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _node:ChordNode;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordDiagram\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.radius = percent(80);\r\n\r\n\t\tthis.innerRadius = - 15;\r\n\r\n\t\tthis.nodePadding = 5;\r\n\r\n\t\tlet chordContainer = this.chartContainer.createChild(Container);\r\n\t\tchordContainer.align = \"center\";\r\n\t\tchordContainer.valign = \"middle\";\r\n\t\tchordContainer.shouldClone = false;\r\n\t\tchordContainer.layout = \"absolute\";\r\n\t\tthis.chordContainer = chordContainer;\r\n\r\n\t\tthis.nodesContainer.parent = chordContainer;\r\n\t\tthis.linksContainer.parent = chordContainer;\r\n\r\n\t\tthis.chartContainer.events.on(\"maxsizechanged\", this.invalidate, this, false);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Redraws the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tlet chartContainer = this.chartContainer;\r\n\r\n\t\tlet endAngle = this.endAngle;\r\n\t\tlet startAngle = this.startAngle + this.nodePadding / 2;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\t\tlet innerRect: IRectangle = { x: 0, y: 0, width: 0, height: 0 };\r\n\r\n\t\trect = $math.getCommonRectangle([rect, innerRect]);\r\n\r\n\t\tlet maxRadius = Math.min(chartContainer.innerWidth / rect.width, chartContainer.innerHeight / rect.height);\r\n\r\n\t\tif(!$type.isNumber(maxRadius)){\r\n\t\t\tmaxRadius = 0;\r\n\t\t}\r\n\r\n\t\tlet radius = $utils.relativeRadiusToValue(this.radius, maxRadius);\r\n\t\tlet pixelInnerRadius = $utils.relativeRadiusToValue(this.innerRadius, radius, true);\r\n\r\n\t\tlet total = this.dataItem.values.value.sum;\r\n\t\tlet count = 0;\r\n\r\n\t\tlet newTotal = 0;\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tthis.getNodeValue(node);\r\n\t\t\tcount++;\r\n\t\t\tlet value = node.total;\r\n\t\t\tif(node.total / total < this.minNodeSize){\r\n\t\t\t\tvalue = total * this.minNodeSize;\r\n\t\t\t}\r\n\t\t\tnewTotal += value;\r\n\t\t});\r\n\r\n\t\tthis.valueAngle = (endAngle - this.startAngle - this.nodePadding * count) / newTotal;\r\n\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tlet slice = node.slice;\r\n\r\n\t\t\tslice.radius = radius;\r\n\t\t\tslice.innerRadius = pixelInnerRadius;\r\n\r\n\t\t\tlet value = node.total;\r\n\r\n\t\t\tif(node.total / total < this.minNodeSize){\r\n\t\t\t\tvalue = total * this.minNodeSize;\r\n\t\t\t}\r\n\r\n\t\t\tnode.adjustedTotal = value;\r\n\r\n\t\t\tlet arc: number;\r\n\t\t\tif (this.nonRibbon) {\r\n\t\t\t\tarc = (endAngle - this.startAngle) / count - this.nodePadding;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tarc = this.valueAngle * value;\r\n\t\t\t}\r\n\r\n\t\t\tslice.arc = arc;\r\n\t\t\tslice.startAngle = startAngle;\r\n\t\t\tnode.trueStartAngle = startAngle;\r\n\t\t\tnode.parent = this.nodesContainer;\r\n\t\t\tnode.validate(); // otherwise flickers - nodes are already created, but not yet positioned etc.\r\n\t\t\tstartAngle += arc + this.nodePadding;\r\n\t\t})\r\n\r\n\t\tthis.chordContainer.definedBBox = { x: radius * rect.x, y: radius * rect.y, width: radius * rect.width, height: radius * rect.height };\r\n\t\tthis.chordContainer.invalidateLayout();\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Chord diagram\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new data item.\r\n\t *\r\n\t * @return Data item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new ChordDiagramDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face begins (the radial axis is drawn) at the\r\n\t * top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the radial axis start horizontally to\r\n\t * the right, as opposed to vertical.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face ends (the radial axis is drawn) exactly\r\n\t * where it has started, forming a full 360 circle. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to end the circle somewhere else.\r\n\t *\r\n\t * E.g. setting this to 180 will make the radar face end at horizontal line\r\n\t * to the left off the center.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the Radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the Chord nodes.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * If you set this to true, all the lines will be of the same width. This is done by making middleLine of a ChordLink visible.\r\n\t *\r\n\t * @param value\r\n\t */\r\n\tpublic set nonRibbon(value: boolean) {\r\n\t\tthis.setPropertyValue(\"nonRibbon\", value, true);\r\n\t\tthis.links.template.middleLine.strokeOpacity = 1;\r\n\t\tthis.links.template.link.fillOpacity = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Non-ribbon\r\n\t */\r\n\tpublic get nonRibbon(): boolean {\r\n\t\treturn this.getPropertyValue(\"nonRibbon\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createNode():this[\"_node\"]{\r\n\t\tlet node = new ChordNode();\r\n\t\tthis._disposers.push(node);\r\n\t\treturn node;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createLink():this[\"_link\"]{\r\n\t\tlet link = new ChordLink();\r\n\t\tthis._disposers.push(link);\r\n\t\treturn link;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordDiagram\"] = ChordDiagram;\r\n","/**\r\n * Module that defines everything related to building Columns.\r\n * It is a container which has column element which is a RoundedRectangle.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Column]].\r\n */\r\nexport interface IColumnProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[Column]].\r\n */\r\nexport interface IColumnEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Column]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnAdapters extends IContainerAdapters, IColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates Columns.\r\n *\r\n * @see {@link IColumnEvents} for a list of available events\r\n * @see {@link IColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class Column extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IColumnEvents;\r\n\r\n\t/**\r\n\t * column element\r\n\t */\r\n\tpublic column: RoundedRectangle;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic realWidth: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic realHeight: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic realX: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic realY: number;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Column\";\r\n\r\n\t\tthis.width = percent(80);\r\n\t\tthis.height = percent(80);\r\n\r\n\t\t//this.isMeasured = true; // for correct position of the tooltip\r\n\t\tthis.events.disableType(\"transformed\"); // not to bug parent\r\n\t\tthis.applyOnClones = true;\r\n\r\n\t\tthis.strokeOpacity = 1;\r\n\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.createAssets();\r\n\r\n\t\t// otherwise users will have to set layout themselves if they'll want to align, scale etc children\r\n\t\tthis.events.on(\"childadded\", this.handleKidAdded, this, false);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected handleKidAdded() {\r\n\t\tif (this.layout == \"none\") {\r\n\t\t\tthis.layout = \"absolute\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createAssets() {\r\n\t\tthis.column = this.createChild(RoundedRectangle);\r\n\t\tthis.column.shouldClone = false;\r\n\t\tthis.column.isMeasured = false;\r\n\t\tthis.column.cornerRadius(0, 0, 0, 0);\r\n\t\tthis._disposers.push(this.column);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tlet column = this.column;\r\n\t\tif (column) {\r\n\t\t\tcolumn.width = $math.min(this.pixelWidth, this.maxWidth);\r\n\t\t\tcolumn.height = $math.min(this.pixelHeight, this.maxHeight);\r\n\t\t\tif(column.invalid){\r\n\t\t\t\tcolumn.validate(); // important!\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * Copies all parameters from another [[Column]].\r\n\t *\r\n\t * @param source Source Column\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tif (this.column) {\r\n\t\t\tthis.column.copyFrom(source.column);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns bounding box (square) for this element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic get bbox(): IRectangle {\r\n\t\tif (this.definedBBox) {\r\n\t\t\treturn this.definedBBox;\r\n\t\t}\r\n\t\tif (this.column) {\r\n\t\t\treturn { x: 0, y: 0, width: this.column.measuredWidth, height: this.column.measuredHeight };\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn { x: 0, y: 0, width: $math.min(this.pixelWidth, this.maxWidth), height: $math.min(this.pixelHeight, this.maxHeight) };\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Column\"] = Column;\r\n","/**\r\n * Column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYSeries, IXYSeriesDataFields, XYSeriesDataItem, IXYSeriesProperties, IXYSeriesAdapters, IXYSeriesEvents } from \"./XYSeries\";\r\nimport { Sprite, visualProperties } from \"../../core/Sprite\";\r\nimport { SpriteState } from \"../../core/SpriteState\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Column } from \"../elements/Column\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\nimport { LegendDataItem } from \"../../charts/Legend\";\r\nimport { IDataItemAdapters } from \"../../core/DataItem\";\r\n\r\n/**\r\n * Defines adapters for [[DataItem]]\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnSeriesDataItemAdapters extends IDataItemAdapters {\r\n\twidth: number | Percent;\r\n\theight: number | Percent;\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ColumnSeriesDataItem extends XYSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IColumnSeriesDataItemAdapters;\r\n\r\n\t/**\r\n\t * A Column Element\r\n\t */\r\n\tpublic _column: Column;\r\n\r\n\t/**\r\n\t * Indicates if this data items close value is lower than its open value.\r\n\t */\r\n\tpublic droppedFromOpen: boolean;\r\n\r\n\t/**\r\n\t * Indicates if this items value is lower than previous data item's value.\r\n\t */\r\n\tpublic droppedFromPrevious: boolean;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t */\r\n\tpublic _component!: ColumnSeries;\r\n\r\n\t/**\r\n\t * A dictionary storing axes ranges columns by axis uid\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tprotected _rangesColumns: Dictionary<string, this[\"_column\"]>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeriesDataItem\";\r\n\r\n\t\tthis.locations[\"dateX\"] = 0.5;\r\n\t\tthis.locations[\"dateY\"] = 0.5;\r\n\r\n\t\tthis.locations[\"categoryX\"] = 0.5;\r\n\t\tthis.locations[\"categoryY\"] = 0.5;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A column used to draw a column for this data item.\r\n\t *\r\n\t * @param column\r\n\t */\r\n\tpublic set column(column: this[\"_column\"]) {\r\n\t\tthis.setColumn(column);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Column\r\n\t */\r\n\tpublic get column(): this[\"_column\"] {\r\n\t\treturn this._column;\r\n\t}\r\n\r\n\tprotected setColumn(column: this[\"_column\"]) {\r\n\t\tif (this._column && column != this._column) {\r\n\t\t\t$array.remove(this.sprites, this._column);\r\n\t\t}\r\n\t\tthis._column = column;\r\n\r\n\t\tif (column) {\r\n\t\t\tlet prevDataItem: ColumnSeriesDataItem = <any>column.dataItem;\r\n\t\t\tif (prevDataItem && prevDataItem != this) {\r\n\t\t\t\tprevDataItem.column = undefined;\r\n\t\t\t}\r\n\t\t\tthis.addSprite(column);\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\t// TODO investigate why component is undefined\r\n\t\t\t\t// https://codepen.io/team/amcharts/pen/dac4be245d658233a6d7e5597df2208b?editors=0010\r\n\t\t\t\tif (this.component) {\r\n\t\t\t\t\tthis.component.columns.removeValue(column);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\t\t}\r\n\t}\r\n\r\n\tpublic set width(value: number | Percent) {\r\n\t\tif (this.properties.width != value) {\r\n\t\t\tthis.properties.width = value;\r\n\t\t\tif (this.component) {\r\n\t\t\t\tthis.component.validateDataElement(this);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic get width(): number | Percent {\r\n\t\tlet width = this.properties.width;\r\n\t\tif (this._adapterO) {\r\n\t\t\twidth = this._adapterO.apply(\"width\", width);\r\n\t\t}\r\n\t\treturn width;\r\n\t}\r\n\r\n\r\n\tpublic set height(value: number | Percent) {\r\n\t\tif (this.properties.height != value) {\r\n\t\t\tthis.properties.height = value;\r\n\t\t\tif (this.component) {\r\n\t\t\t\tthis.component.validateDataElement(this);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic get height(): number | Percent {\r\n\t\tlet height = this.properties.height;\r\n\t\tif (this._adapterO) {\r\n\t\t\theight = this._adapterO.apply(\"height\", height);\r\n\t\t}\r\n\t\treturn height;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * A dictionary storing axes ranges columns by axis uid\r\n\t */\r\n\tpublic get rangesColumns(): Dictionary<string, this[\"_column\"]> {\r\n\t\tif (!this._rangesColumns) {\r\n\t\t\tthis._rangesColumns = new Dictionary<string, this[\"_column\"]>();\r\n\t\t}\r\n\t\treturn this._rangesColumns;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYSeries]].\r\n */\r\nexport interface IColumnSeriesDataFields extends IXYSeriesDataFields {\r\n\twidth?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesProperties extends IXYSeriesProperties {\r\n\r\n\t/**\r\n\t * Cluster this series columns?\r\n\t *\r\n\t * Setting to `false` will make columns overlap with other series.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tclustered?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesEvents extends IXYSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnSeriesAdapters extends IXYSeriesAdapters, IColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a column graph.\r\n *\r\n * @see {@link IColumnSeriesEvents} for a list of available Events\r\n * @see {@link IColumnSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ColumnSeries extends XYSeries {\r\n\r\n\t/**\r\n\t * Type of column.\r\n\t */\r\n\tpublic _column: Column;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IColumnSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: ColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t * A list of column elements.\r\n\t */\r\n\tprotected _columns: ListTemplate<this[\"_column\"]>;\r\n\r\n\t/**\r\n\t * Container to put column elements in.\r\n\t */\r\n\tprotected _columnsContainer: Container;\r\n\r\n\t/**\r\n\t * Start location within cell for columns.\r\n\t */\r\n\tprotected _startLocation: number = 0;\r\n\r\n\t/**\r\n\t * End location within cell for columns.\r\n\t */\r\n\tprotected _endLocation: number = 1;\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is lower than open value.\r\n\t */\r\n\tprotected _dropFromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is lower value of a previous\r\n\t * column.\r\n\t */\r\n\tprotected _dropFromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is same or higher than open\r\n\t * value.\r\n\t */\r\n\tprotected _riseFromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is same or higher than value\r\n\t * of a previous column.\r\n\t */\r\n\tprotected _riseFromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeries\";\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.strokeOpacity = 0;\r\n\t\tthis.fillOpacity = 1;\r\n\r\n\t\tthis.clustered = true;\r\n\r\n\t\tlet columnsContainer = this.mainContainer.createChild(Container);\r\n\t\tcolumnsContainer.shouldClone = false;\r\n\t\tcolumnsContainer.isMeasured = false;\r\n\t\tcolumnsContainer.layout = \"none\";\r\n\t\tthis._columnsContainer = columnsContainer;\r\n\r\n\t\tthis.columns.template.pixelPerfect = false;\r\n\r\n\t\tthis.tooltipColorSource = this.columns.template;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A container that columns are created in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic get columnsContainer() {\r\n\t\treturn this._columnsContainer;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Column Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new ColumnSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\t//@todo Check if we can do better than use `instanceof`\r\n\t\t// find start/end locations based on clustered/stacked settings\r\n\t\t// go through chart series instead of base axis series, because axis series doesn't maintain order\r\n\r\n\t\tthis.group.node.removeAttribute(\"fill\");\r\n\r\n\t\tif (this.chart && this.xAxis && this.yAxis) {\r\n\t\t\tlet baseAxisSeries = this.chart.series;\r\n\t\t\tlet clusterCount: number = 0;\r\n\t\t\tlet index: number = 0;\r\n\r\n\t\t\tlet sortedByAxis: { series: XYSeries, axis: number }[] = [];\r\n\t\t\t$iter.each(baseAxisSeries.iterator(), (series) => {\r\n\t\t\t\tif (series instanceof ColumnSeries) {\r\n\t\t\t\t\tif (this.baseAxis == series.baseAxis) {\r\n\t\t\t\t\t\tlet index: number;\r\n\t\t\t\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\t\t\t\tindex = this.chart.yAxes.indexOf(series.yAxis);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tindex = this.chart.xAxes.indexOf(series.xAxis);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tsortedByAxis.push({ series: series, axis: index })\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\r\n\t\t\tsortedByAxis.sort((a, b) => a.axis - b.axis);\r\n\t\t\tlet prevAxisIndex: number;\r\n\r\n\t\t\t$array.each(sortedByAxis, (sortedItem) => {\r\n\t\t\t\tlet series = sortedItem.series;\r\n\t\t\t\tif (series instanceof ColumnSeries) {\r\n\t\t\t\t\tif ((!series.stacked && series.clustered) || (prevAxisIndex != sortedItem.axis && series.clustered)) {\r\n\t\t\t\t\t\tclusterCount++;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (series == this) {\r\n\t\t\t\t\t\tindex = clusterCount - 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tprevAxisIndex = sortedItem.axis;\r\n\t\t\t});\r\n\r\n\t\t\tif (!this.clustered) {\r\n\t\t\t\tindex = 0;\r\n\t\t\t\tclusterCount = 1;\r\n\t\t\t}\r\n\r\n\t\t\tlet renderer = this.baseAxis.renderer;\r\n\r\n\t\t\tlet cellStartLocation: number = renderer.cellStartLocation;\r\n\t\t\tlet cellEndLocation: number = renderer.cellEndLocation;\r\n\r\n\t\t\tthis._startLocation = cellStartLocation + (index / clusterCount) * (cellEndLocation - cellStartLocation);\r\n\t\t\tthis._endLocation = cellStartLocation + (index + 1) / clusterCount * (cellEndLocation - cellStartLocation);\r\n\r\n\t\t\tlet xAxis = this.xAxis;\r\n\t\t\tlet yAxis = this.yAxis;\r\n\r\n\t\t\tif (xAxis instanceof CategoryAxis && yAxis instanceof ValueAxis) {\r\n\t\t\t\tif (xAxis.sortBySeries == this) {\r\n\t\t\t\t\tthis.sortCategoryAxis(xAxis, \"valueY\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (yAxis instanceof CategoryAxis && xAxis instanceof ValueAxis) {\r\n\t\t\t\tif (yAxis.sortBySeries == this) {\r\n\t\t\t\t\tthis.sortCategoryAxis(yAxis, \"valueX\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tfor (let i = 0; i < this.startIndex; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\r\n\t\tfor (let i = this.dataItems.length - 1; i > this.endIndex; i--) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\r\n\t\tthis._propertiesChanged = false;\r\n\t}\r\n\r\n\tprotected sortCategoryAxis(axis: CategoryAxis, key: string) {\r\n\t\tthis.dataItems.values.sort((x, y) => {\r\n\t\t\treturn (<any>y).values[key].workingValue - (<any>x).values[key].workingValue;\r\n\t\t})\r\n\t\tlet i = 0;\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\tdataItem._index = i;\r\n\t\t\ti++;\r\n\t\t})\r\n\r\n\t\taxis.dataItems.each((dataItem) => {\r\n\t\t\tlet axis = dataItem.component;\r\n\t\t\tlet currentPosition = axis.categoryToPosition(dataItem.category) - dataItem.deltaPosition;\r\n\r\n\t\t\tlet seriesDataItem = axis.getSeriesDataItemByCategory(dataItem.category, this);\r\n\r\n\t\t\tif (seriesDataItem) {\r\n\t\t\t\tlet index = this.dataItems.indexOf(<ColumnSeriesDataItem>seriesDataItem);\r\n\r\n\t\t\t\tdataItem._index = index;\r\n\r\n\t\t\t\tlet deltaPosition = $math.round((index + 0.5) / this.dataItems.length - currentPosition, 3);\r\n\r\n\t\t\t\tif (dataItem.deltaAnimation && !dataItem.deltaAnimation.isDisposed() && dataItem.deltaAnimation.animationOptions[0].to == deltaPosition) {\r\n\t\t\t\t\t// void\r\n\t\t\t\t}\r\n\t\t\t\telse if (deltaPosition != $math.round(dataItem.deltaPosition, 3)) {\r\n\t\t\t\t\tif (dataItem.deltaAnimation) {\r\n\t\t\t\t\t\tdataItem.deltaAnimation.stop();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdataItem.deltaAnimation = dataItem.animate({ property: \"deltaPosition\", from: -deltaPosition, to: 0 }, axis.interpolationDuration, axis.interpolationEasing);\r\n\t\t\t\t\tthis._disposers.push(dataItem.deltaAnimation);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\taxis.dataItems.values.sort((x, y) => {\r\n\t\t\treturn x.index - y.index;\r\n\t\t})\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\t// important oder here, first real, then super. we need this to know size\r\n\t\tif (this.chart && this.xAxis && this.yAxis) {\r\n\t\t\tthis.validateDataElementReal(dataItem);\r\n\t\t\tsuper.validateDataElement(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative start location for the data item.\r\n\t *\r\n\t * @param dataItem  Data item\r\n\t * @return Location (0-1)\r\n\t */\r\n\tprotected getStartLocation(dataItem: this[\"_dataItem\"]): number {\r\n\t\tlet startLocation = this._startLocation;\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tstartLocation += dataItem.locations[this.xOpenField] - 0.5;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstartLocation += dataItem.locations[this.yOpenField] - 0.5;\r\n\t\t}\r\n\t\treturn startLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemWorkingValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\t/*\r\n   public handleDataItemWorkingValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t   if (this.simplifiedProcessing) {\r\n\t\t   this.validateDataElement(dataItem);\r\n\t   }\r\n\t   else {\r\n\t\t   super.handleDataItemWorkingValueChange(dataItem, name);\r\n\t   }\r\n   }*/\r\n\r\n\t/**\r\n\t * Returns relative end location for the data item.\r\n\t *\r\n\t * @param dataItem  Data item\r\n\t * @return Location (0-1)\r\n\t */\r\n\tprotected getEndLocation(dataItem: this[\"_dataItem\"]): number {\r\n\t\tlet endLocation = this._endLocation;\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tendLocation += dataItem.locations[this.xField] - 0.5;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tendLocation += dataItem.locations[this.yField] - 0.5;\r\n\t\t}\r\n\t\treturn endLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\t//\tif (dataItem.hasValue([this.xField, this.yField])) { // todo: this doesn't work with categories, think of a better way\r\n\t\tlet l: number;\r\n\t\tlet r: number;\r\n\t\tlet t: number;\r\n\t\tlet b: number;\r\n\r\n\t\tlet startLocation = this.getStartLocation(dataItem);\r\n\t\tlet endLocation = this.getEndLocation(dataItem);\r\n\r\n\t\tlet xField = this.xField;\r\n\t\tlet xOpenField = this.xOpenField;\r\n\t\tlet yField = this.yField;\r\n\t\tlet yOpenField = this.yOpenField;\r\n\r\n\t\tlet template: Sprite = this.columns.template;\r\n\r\n\t\tlet percentWidth: number = template.percentWidth;\r\n\t\tlet percentHeight: number = template.percentHeight;\r\n\r\n\t\tlet pixelWidth: number = template.pixelWidth;\r\n\t\tlet pixelHeight: number = template.pixelHeight;\r\n\r\n\t\tlet maxWidth: number = template.maxWidth;\r\n\t\tlet maxHeight: number = template.maxHeight;\r\n\r\n\t\tlet paddingLeft: number = template.pixelPaddingLeft;\r\n\t\tlet paddingRight: number = template.pixelPaddingRight;\r\n\t\tlet paddingTop: number = template.pixelPaddingTop;\r\n\t\tlet paddingBottom: number = template.pixelPaddingBottom;\r\n\r\n\t\tlet outOfBounds: boolean = false;\r\n\r\n\t\tlet diw = dataItem.width;\r\n\t\tif ($type.hasValue(diw)) {\r\n\t\t\tif ($type.isNumber(diw)) {\r\n\t\t\t\tpixelWidth = diw;\r\n\t\t\t}\r\n\t\t\tif (diw instanceof Percent) {\r\n\t\t\t\tpercentWidth = diw.value * 100;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet dih = dataItem.height;\r\n\t\tif ($type.hasValue(dih)) {\r\n\t\t\tif ($type.isNumber(dih)) {\r\n\t\t\t\tpixelHeight = dih;\r\n\t\t\t}\r\n\t\t\tif (dih instanceof Percent) {\r\n\t\t\t\tpercentHeight = dih.value * 100;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\t// two category axes\r\n\t\tif ((this.xAxis instanceof CategoryAxis) && (this.yAxis instanceof CategoryAxis)) {\r\n\r\n\t\t\tif (!dataItem.hasValue(this._xValueFields) || !dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tstartLocation = 0;\r\n\t\t\tendLocation = 1;\r\n\t\t\tif (!$type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, startLocation);\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - pixelWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case max width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxWidth) && maxWidth < Math.abs(r - l)) {\r\n\t\t\t\tlet offset: number = ((r - l) - maxWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tstartLocation = 0;\r\n\t\t\tendLocation = 1;\r\n\r\n\t\t\tif (!$type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = $math.round((1 - percentHeight / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tt = this.yAxis.getY(dataItem, yOpenField, startLocation);\r\n\t\t\tb = this.yAxis.getY(dataItem, yField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - pixelHeight) / 2;\r\n\t\t\t\tb += offset;\r\n\t\t\t\tt -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case max width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxHeight) && maxHeight < Math.abs(b - t)) {\r\n\t\t\t\tlet offset: number = ((b - t) - maxHeight) / 2;\r\n\t\t\t\tb += offset;\r\n\t\t\t\tt -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tr = this.fixHorizontalCoordinate(r);\r\n\t\t\tl = this.fixHorizontalCoordinate(l);\r\n\t\t\tt = this.fixVerticalCoordinate(t);\r\n\t\t\tb = this.fixVerticalCoordinate(b);\r\n\t\t}\r\n\t\telse if (this.baseAxis == this.xAxis) {\r\n\r\n\t\t\tif (!dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// in case width is set in percent\r\n\t\t\tif (!$type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, startLocation);\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - pixelWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxWidth) && maxWidth < Math.abs(r - l)) {\r\n\t\t\t\tlet offset: number = ((r - l) - maxWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tlet bottomLocation = dataItem.locations[yOpenField];\r\n\t\t\tlet topLocation = dataItem.locations[yField];\r\n\t\t\t// otherwise gantt chart will start items in the middle of a cell\r\n\t\t\tif (this.yAxis instanceof ValueAxis) {\r\n\t\t\t\tif ((<any>this.dataFields)[this.yField] != (<any>this.dataFields)[this.yOpenField]) {\r\n\t\t\t\t\tbottomLocation = 0;\r\n\t\t\t\t\ttopLocation = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tb = this.yAxis.getY(dataItem, yOpenField, bottomLocation);\r\n\t\t\tt = this.yAxis.getY(dataItem, yField, topLocation);\r\n\r\n\t\t\t// used to save location for bullets, but it's not a good approach\r\n\t\t\t// dataItem.locations[xField] = startLocation + (endLocation - startLocation) / 2;\r\n\r\n\t\t\tlet axisLenght = Math.ceil(this.yAxis.axisLength);\r\n\r\n\t\t\tif ((t < 0 && b < 0) || (t > axisLenght && b > axisLenght)) {\r\n\t\t\t\toutOfBounds = true;\r\n\t\t\t}\r\n\r\n\t\t\tt = this.fixVerticalCoordinate(t);\r\n\t\t\tb = this.fixVerticalCoordinate(b);\r\n\r\n\t\t\tif (Math.abs(r - l) - paddingLeft - paddingRight == 0) {\r\n\t\t\t\toutOfBounds = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// horizontal bars\r\n\t\telse {\r\n\t\t\tif (!dataItem.hasValue(this._xValueFields)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentHeight / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tt = this.yAxis.getY(dataItem, yOpenField, startLocation);\r\n\t\t\tb = this.yAxis.getY(dataItem, yField, endLocation);\r\n\r\n\t\t\t// in case height is set in pixels\r\n\t\t\tif ($type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - pixelHeight) / 2;\r\n\t\t\t\tb -= offset;\r\n\t\t\t\tt += offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case height is set in pixels\r\n\t\t\tif (!$type.isNaN(maxHeight) && maxHeight < Math.abs(b - t)) {\r\n\t\t\t\tlet offset: number = ((b - t) - maxHeight) / 2;\r\n\t\t\t\tb -= offset;\r\n\t\t\t\tt += offset;\r\n\t\t\t}\r\n\r\n\t\t\tlet rightLocation = dataItem.locations[xField];\r\n\t\t\tlet leftLocation = dataItem.locations[xOpenField];\r\n\r\n\t\t\t// otherwise gantt chart will start items in the middle of a cell\r\n\t\t\tif (this.xAxis instanceof ValueAxis) {\r\n\t\t\t\tif ((<any>this.dataFields)[this.xField] != (<any>this.dataFields)[this.xOpenField]) {\r\n\t\t\t\t\trightLocation = 0;\r\n\t\t\t\t\tleftLocation = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, rightLocation);\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, leftLocation);\r\n\t\t\t// used to save location for bullets, but it's not a good approach\r\n\t\t\t// dataItem.locations[yField] = startLocation + (endLocation - startLocation) / 2;\r\n\r\n\t\t\tlet axisLenght = Math.ceil(this.xAxis.axisLength);\r\n\r\n\t\t\tif ((r < 0 && l < 0) || (r > axisLenght && l > axisLenght)) {\r\n\t\t\t\toutOfBounds = true;\r\n\t\t\t}\r\n\r\n\t\t\tr = this.fixHorizontalCoordinate(r);\r\n\t\t\tl = this.fixHorizontalCoordinate(l);\r\n\r\n\t\t\tif (Math.abs(t - b) - paddingTop - paddingBottom == 0) {\r\n\t\t\t\toutOfBounds = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet w: number = Math.abs(r - l);\r\n\t\tlet h: number = Math.abs(b - t);\r\n\r\n\t\tlet x: number = Math.min(l, r);\r\n\t\tlet y: number = Math.min(t, b);\r\n\r\n\t\tif (!outOfBounds) {\r\n\t\t\tlet column: this[\"_column\"];\r\n\t\t\tif (!dataItem.column) {\r\n\t\t\t\tcolumn = this.columns.create();\r\n\t\t\t\t//$object.forceCopyProperties(this.columns.template, column, visualProperties);\r\n\t\t\t\t$object.copyProperties(this, column, visualProperties); // need this because 3d columns are not in the same container\r\n\t\t\t\t$object.copyProperties(this.columns.template, column, visualProperties); // second time, no force, so that columns.template would override series properties\r\n\t\t\t\tdataItem.addSprite(column);\r\n\r\n\t\t\t\tdataItem.column = column;\r\n\t\t\t\tcolumn.paper = this.paper; // sometimes pattern is not drawn if is set with adapter without this.\r\n\r\n\t\t\t\t// accessibility\r\n\t\t\t\tif (this.itemsFocusable()) {\r\n\t\t\t\t\tif (!$type.hasValue(this.role)) {\r\n\t\t\t\t\t\tthis.role = \"menu\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!$type.hasValue(column.role)) {\r\n\t\t\t\t\t\tcolumn.role = \"menuitem\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcolumn.focusable = true;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (!$type.hasValue(this.role)) {\r\n\t\t\t\t\t\tthis.role = \"list\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!$type.hasValue(column.role)) {\r\n\t\t\t\t\t\tcolumn.role = \"listitem\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcolumn.focusable = false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (column.focusable) {\r\n\t\t\t\t\tcolumn.events.on(\"focus\", (ev) => {\r\n\t\t\t\t\t\tcolumn.readerTitle = this.populateString(this.itemReaderText, dataItem);\r\n\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t\tcolumn.events.on(\"blur\", (ev) => {\r\n\t\t\t\t\t\tcolumn.readerTitle = \"\";\r\n\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t}\r\n\t\t\t\tif (column.hoverable) {\r\n\t\t\t\t\tcolumn.events.on(\"over\", (ev) => {\r\n\t\t\t\t\t\tcolumn.readerTitle = this.populateString(this.itemReaderText, dataItem);\r\n\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t\tcolumn.events.on(\"out\", (ev) => {\r\n\t\t\t\t\t\tcolumn.readerTitle = \"\";\r\n\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t}\r\n\t\t\t\tcolumn.parent = this.columnsContainer;\r\n\t\t\t\tcolumn.virtualParent = this;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tcolumn = dataItem.column;\r\n\t\t\t\tif (this._propertiesChanged) {\r\n\t\t\t\t\t$object.copyProperties(this, column, visualProperties);\r\n\t\t\t\t\t$object.copyProperties(this.columns.template, column, visualProperties);\r\n\t\t\t\t\t$array.each(visualProperties, (property) => {\r\n\t\t\t\t\t\t(<any>column)[property] = column[property];\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tcolumn.width = w;\r\n\t\t\tcolumn.height = h;\r\n\r\n\t\t\tcolumn.x = x;\r\n\t\t\tcolumn.y = y;\r\n\r\n\t\t\tcolumn.realX = l;\r\n\t\t\tcolumn.realY = t;\r\n\r\n\t\t\tcolumn.realWidth = r - l;\r\n\t\t\tcolumn.realHeight = b - t;\r\n\r\n\t\t\tthis.setColumnStates(column);\r\n\r\n\t\t\tif (column.invalid) {\r\n\t\t\t\tcolumn.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t}\r\n\r\n\t\t\tcolumn.__disabled = false;\r\n\t\t\t//column.returnAfterTemp();\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn: this[\"_column\"] = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (!rangeColumn) {\r\n\t\t\t\t\trangeColumn = this.columns.create();\r\n\r\n\t\t\t\t\t//$object.forceCopyProperties(this.columns.template, rangeColumn, visualProperties);\r\n\t\t\t\t\t$object.copyProperties(axisRange.contents, rangeColumn, visualProperties); // need this because 3d columns are not in the same container\r\n\r\n\t\t\t\t\tdataItem.addSprite(rangeColumn);\r\n\t\t\t\t\tdataItem.rangesColumns.setKey(axisRange.uid, <Column>rangeColumn);\r\n\t\t\t\t\trangeColumn.paper = this.paper; // sometimes pattern is not drawn if is set with adapter without this.\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.parent = axisRange.contents;\r\n\r\n\t\t\t\trangeColumn.width = w;\r\n\t\t\t\trangeColumn.height = h;\r\n\t\t\t\trangeColumn.x = x;\r\n\t\t\t\trangeColumn.y = y;\r\n\r\n\t\t\t\tthis.setColumnStates(rangeColumn);\r\n\r\n\t\t\t\tif (rangeColumn.invalid) {\r\n\t\t\t\t\trangeColumn.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.__disabled = false;\r\n\t\t\t\t//rangeColumn.returnAfterTemp();\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\r\n\t\tdataItem.itemWidth = w;\r\n\t\tdataItem.itemHeight = h;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected disableUnusedColumns(dataItem: ColumnSeriesDataItem) {\r\n\t\tif (dataItem) {\r\n\t\t\tif (dataItem.column) {\r\n\t\t\t\t// otherwise might flicker when enabling\r\n\t\t\t\tdataItem.column.width = 0;\r\n\t\t\t\tdataItem.column.height = 0;\r\n\t\t\t\tdataItem.column.__disabled = true;\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn: Sprite = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (rangeColumn) {\r\n\t\t\t\t\t// otherwise might flicker when enabling\r\n\t\t\t\t\trangeColumn.width = 0;\r\n\t\t\t\t\trangeColumn.height = 0;\r\n\t\t\t\t\trangeColumn.__disabled = true;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Apply different state/coloring to columns based on the change value.\r\n\t *\r\n\t * @param sprite  Sprite to apply state to\r\n\t * @todo Do not apply accessibility to wicks of the candlesticks\r\n\t */\r\n\tprotected setColumnStates(sprite: Sprite): void {\r\n\t\tif (this._dropFromOpenState || this._dropFromPreviousState || this._riseFromOpenState || this._riseFromPreviousState) {\r\n\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>sprite.dataItem;\r\n\r\n\t\t\tif (this.xAxis instanceof ValueAxis || this.yAxis instanceof ValueAxis) {\r\n\t\t\t\tlet open: number;\r\n\t\t\t\tlet value: number;\r\n\t\t\t\tlet change: number;\r\n\r\n\t\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\t\tif (this.xOpenField && this.xField && this.xAxis instanceof ValueAxis) {\r\n\t\t\t\t\t\topen = dataItem.getValue(this.xOpenField);\r\n\t\t\t\t\t\tvalue = dataItem.getValue(this.xField);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchange = dataItem.getValue(this.xAxis.axisFieldName + \"X\", \"previousChange\");\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (this.yOpenField && this.yField && this.yAxis instanceof ValueAxis) {\r\n\t\t\t\t\t\topen = dataItem.getValue(this.yOpenField);\r\n\t\t\t\t\t\tvalue = dataItem.getValue(this.yField);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchange = dataItem.getValue(this.yAxis.axisFieldName + \"Y\", \"previousChange\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (value < open) {\r\n\t\t\t\t\tdataItem.droppedFromOpen = true;\r\n\t\t\t\t\tsprite.defaultState.copyFrom(this._dropFromOpenState)\r\n\t\t\t\t\tsprite.setState(this._dropFromOpenState, 0);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tdataItem.droppedFromOpen = false;\r\n\t\t\t\t\tsprite.defaultState.copyFrom(this._riseFromOpenState)\r\n\t\t\t\t\tsprite.setState(this._riseFromOpenState, 0);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (change < 0) {\r\n\t\t\t\t\tdataItem.droppedFromPrevious = true;\r\n\t\t\t\t\tsprite.defaultState.copyFrom(this._dropFromPreviousState)\r\n\t\t\t\t\tsprite.setState((this._dropFromPreviousState), 0);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tdataItem.droppedFromPrevious = false;\r\n\t\t\t\t\tsprite.defaultState.copyFrom(this._riseFromPreviousState)\r\n\t\t\t\t\tsprite.setState((this._riseFromPreviousState), 0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A list of column elements in the series.\r\n\t *\r\n\t * @return Columns\r\n\t */\r\n\tpublic get columns(): ListTemplate<this[\"_column\"]> {\r\n\t\tif (!this._columns) {\r\n\t\t\tthis._columns = new ListTemplate<this[\"_column\"]>(this.createColumnTemplate());\r\n\t\t\tthis._disposers.push(new ListDisposer(this._columns));\r\n\t\t\tthis._disposers.push(this._columns.template);\r\n\t\t}\r\n\t\treturn this._columns;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a column element to use as a template.\r\n\t *\r\n\t * @return Column template\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Column();\r\n\t}\r\n\r\n\t/**\r\n\t * Cluster this series columns?\r\n\t *\r\n\t * Setting to `false` will make columns overlap with other series.\r\n\t *\r\n\t * @default true\r\n\t * @param value  Clustered?\r\n\t */\r\n\tpublic set clustered(value: boolean) {\r\n\t\tthis.setPropertyValue(\"clustered\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Clustered?\r\n\t */\r\n\tpublic get clustered(): boolean {\r\n\t\treturn this.getPropertyValue(\"clustered\");\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is lower than open value.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * NOTE: this will work only if at least one axis is [[ValueAxis]].\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @param  value  State\r\n\t */\r\n\tpublic set dropFromOpenState(value: SpriteState<this[\"_properties\"], this[\"_adapter\"]>) {\r\n\t\tthis._dropFromOpenState = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return State\r\n\t */\r\n\tpublic get dropFromOpenState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._dropFromOpenState) {\r\n\t\t\tthis._dropFromOpenState = this.states.create(\"dropFromOpenState\");\r\n\t\t}\r\n\t\treturn this._dropFromOpenState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is lower value of a previous\r\n\t * column.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @param  value  State\r\n\t */\r\n\tpublic set dropFromPreviousState(value: SpriteState<this[\"_properties\"], this[\"_adapter\"]>) {\r\n\t\tthis._dropFromPreviousState = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return State\r\n\t */\r\n\tpublic get dropFromPreviousState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._dropFromPreviousState) {\r\n\t\t\tthis._dropFromPreviousState = this.states.create(\"dropFromPreviousState\");\r\n\t\t}\r\n\t\treturn this._dropFromPreviousState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is same or higher than open\r\n\t * value.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * NOTE: this will work only if at least one axis is [[ValueAxis]].\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @param  value  State\r\n\t */\r\n\tpublic set riseFromOpenState(value: SpriteState<this[\"_properties\"], this[\"_adapter\"]>) {\r\n\t\tthis._riseFromOpenState = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return State\r\n\t */\r\n\tpublic get riseFromOpenState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._riseFromOpenState) {\r\n\t\t\tthis._riseFromOpenState = this.states.create(\"riseFromOpenState\");\r\n\t\t}\r\n\t\treturn this._riseFromOpenState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is same or higher than value\r\n\t * of a previous column.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @param  value  State\r\n\t */\r\n\tpublic set riseFromPreviousState(value: SpriteState<this[\"_properties\"], this[\"_adapter\"]>) {\r\n\t\tthis._riseFromPreviousState = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return State\r\n\t */\r\n\tpublic get riseFromPreviousState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._riseFromPreviousState) {\r\n\t\t\tthis._riseFromPreviousState = this.states.create(\"riseFromPreviousState\");\r\n\t\t}\r\n\t\treturn this._riseFromPreviousState;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates value of the related legend item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic updateLegendValue(dataItem?: this[\"_dataItem\"], notRange?: boolean) {\r\n\t\tsuper.updateLegendValue(dataItem, notRange);\r\n\r\n\t\tif (this.legendDataItem) {\r\n\t\t\tlet marker: Container = this.legendDataItem.marker;\r\n\t\t\tlet fromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\t\t\tlet fromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tif (dataItem.droppedFromOpen) {\r\n\t\t\t\t\tfromOpenState = this._dropFromOpenState;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tfromOpenState = this._riseFromOpenState;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (dataItem.droppedFromPrevious) {\r\n\t\t\t\t\tfromPreviousState = this._dropFromPreviousState;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tfromPreviousState = this._riseFromPreviousState;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(marker.children.iterator(), (child) => {\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tchild.setState(fromPreviousState);\r\n\t\t\t\t\tchild.setState(fromOpenState);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// todo: think what to do here, maybe apply above states based on totals?\r\n\t\t\t\t\tchild.setState(this._riseFromPreviousState);\r\n\t\t\t\t\tchild.setState(this._riseFromOpenState);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: RoundedRectangle = marker.createChild(RoundedRectangle);\r\n\t\tcolumn.shouldClone = false;\r\n\t\t$object.copyProperties(this, column, visualProperties);\r\n\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\t\tcolumn.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\r\n\t\tcolumn.width = w;\r\n\t\tcolumn.height = h;\r\n\r\n\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\tlegendDataItem.color = this.fill;\r\n\t\tlegendDataItem.colorOrig = this.fill;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[ColumnSeries]].\r\n\t *\r\n\t * @param source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.columns.template.copyFrom(source.columns.template);\r\n\t}\r\n\r\n\t/**\r\n\t* returns bullet x location\r\n\t* @ignore\r\n\t*/\r\n\r\n\tprotected getBulletLocationX(bullet: Bullet, field: string): number {\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tlet bulletLocationX = bullet.locationX;\r\n\t\t\tif (!$type.isNumber(bulletLocationX)) {\r\n\t\t\t\tbulletLocationX = 0.5;\r\n\t\t\t}\r\n\r\n\t\t\tlet endLocation = this.getEndLocation(<ColumnSeriesDataItem>bullet.dataItem);\r\n\t\t\tlet startLocation = this.getStartLocation(<ColumnSeriesDataItem>bullet.dataItem);\r\n\r\n\t\t\treturn endLocation - (endLocation - startLocation) * bulletLocationX;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.getBulletLocationX(bullet, field);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t* returns bullet y location\r\n\t* @ignore\r\n\t*/\r\n\tprotected getBulletLocationY(bullet: Bullet, field: string): number {\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tlet bulletLocationY = bullet.locationY;\r\n\t\t\tif (!$type.isNumber(bulletLocationY)) {\r\n\t\t\t\tbulletLocationY = 0.5;\r\n\t\t\t}\r\n\r\n\t\t\tlet endLocation = this.getEndLocation(<ColumnSeriesDataItem>bullet.dataItem);\r\n\t\t\tlet startLocation = this.getStartLocation(<ColumnSeriesDataItem>bullet.dataItem);\r\n\r\n\t\t\treturn endLocation - (endLocation - startLocation) * bulletLocationY;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.getBulletLocationY(bullet, field);\r\n\t\t}\r\n\t}\r\n\r\n\tprotected getAdjustedXLocation(dataItem: this[\"_dataItem\"], field: string, bulletLocationX?: number) {\r\n\t\t//if (this.baseAxis == this.xAxis) {\r\n\t\tif (!$type.isNumber(bulletLocationX)) {\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tbulletLocationX = dataItem.locations[field];\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tbulletLocationX = 0.5;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._endLocation - (this._endLocation - this._startLocation) * (1 - bulletLocationX);\r\n\t\t//}\r\n\t\t//else {\r\n\t\t//\treturn super.getAdjustedXLocation(dataItem, field);\r\n\t\t//}\r\n\t}\r\n\r\n\tprotected getAdjustedYLocation(dataItem: this[\"_dataItem\"], field: string, bulletLocationY?: number) {\r\n\t\t//if (this.baseAxis == this.yAxis) {\r\n\t\tif (!$type.isNumber(bulletLocationY)) {\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tbulletLocationY = dataItem.locations[field];\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tbulletLocationY = 0.5;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._endLocation - (this._endLocation - this._startLocation) * bulletLocationY;\r\n\t\t//}\r\n\t\t//else {\r\n\t\t//\treturn super.getAdjustedYLocation(dataItem, field);\r\n\t\t//}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected fixVerticalCoordinate(coordinate: number): number {\r\n\t\tlet paddingBottom = this.columns.template.pixelPaddingBottom;\r\n\t\tlet paddingTop = this.columns.template.pixelPaddingTop;\r\n\r\n\t\tlet minY: number = -paddingTop;\r\n\t\tlet maxY: number = this.yAxis.axisLength + paddingBottom;\r\n\r\n\t\treturn $math.fitToRange(coordinate, minY, maxY);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected fixHorizontalCoordinate(coordinate: number): number {\r\n\t\tlet paddingLeft = this.columns.template.pixelPaddingLeft;\r\n\t\tlet paddingRight = this.columns.template.pixelPaddingRight;\r\n\r\n\t\tlet minX: number = -paddingLeft;\r\n\t\tlet maxX: number = this.xAxis.axisLength + paddingRight;\r\n\r\n\t\treturn $math.fitToRange(coordinate, minX, maxX);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tsuper.disposeData();\r\n\t\tthis.columns.clear();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColumnSeries\"] = ColumnSeries;\r\nregistry.registeredClasses[\"ColumnSeriesDataItem\"] = ColumnSeriesDataItem;\r\n","/**\r\n * TreeMap series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { TreeMap, TreeMapDataItem } from \"../types/TreeMap\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { Container } from \"../../core/Container\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport { LegendDataItem } from \"../../charts/Legend\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[TreeMapSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class TreeMapSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: TreeMapSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMapSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Data for the this particular item.\r\n\t *\r\n\t * @param value  Item's data\r\n\t */\r\n\t//public set dataContext(value: Object) {\r\n\t//\tthis._dataContext = value;\r\n\t//}\r\n\r\n\r\n\r\n\t/**\r\n\t * @return Item's data\r\n\t */\r\n\t/*\r\n   public get dataContext(): Object {\r\n\t   // It's because data of tree series is TreeMapDataItems.\r\n\t   if (this._dataContext) {\r\n\t\t   return (<any>this._dataContext).dataContext;\r\n\t   }\r\n   }*/\r\n\r\n\t/**\r\n\t * The name of the item's parent item.\r\n\t *\r\n\t * @return Parent name\r\n\t */\r\n\tpublic get parentName(): string {\r\n\t\tlet treeMapDataItem = this.treeMapDataItem;\r\n\t\tif (treeMapDataItem && treeMapDataItem.parent) {\r\n\t\t\treturn treeMapDataItem.parent.name;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value.\r\n\t *\r\n\t * @readonly\r\n\t * @return Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\tlet treeMapDataItem = this.treeMapDataItem;\r\n\t\tif (treeMapDataItem) {\r\n\t\t\treturn treeMapDataItem.value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A corresponding data item from the tree map.\r\n\t *\r\n\t * @readonly\r\n\t * @return Data item\r\n\t */\r\n\tpublic get treeMapDataItem(): TreeMapDataItem {\r\n\t\treturn <TreeMapDataItem>this._dataContext;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides the Data Item and related visual elements.\r\n\t *\r\n\t * @param duration  Animation duration (ms)\r\n\t * @param delay     Delay animation (ms)\r\n\t * @param toValue   A value to set to `fields` when hiding\r\n\t * @param fields    A list of data fields to set value to `toValue`\r\n\t */\r\n\tpublic hide(duration?: number, delay?: number, toValue?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\tlet treeMapDataItem = this.treeMapDataItem;\r\n\t\tif (treeMapDataItem) {\r\n\t\t\ttreeMapDataItem.hide(duration);\r\n\t\t}\r\n\t\treturn super.hide(duration, delay, toValue, fields);\r\n\t}\r\n\r\n\t/**\r\n\t * Shows the Data Item and related visual elements.\r\n\t *\r\n\t * @param duration  Animation duration (ms)\r\n\t * @param delay     Delay animation (ms)\r\n\t * @param fields    A list of fields to set values of\r\n\t */\r\n\tpublic show(duration?: number, delay?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\tlet treeMapDataItem = this.treeMapDataItem;\r\n\t\tif (treeMapDataItem) {\r\n\t\t\ttreeMapDataItem.show(duration, delay, fields);\r\n\t\t}\r\n\t\treturn super.show(duration, delay, fields);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesDataFields extends IColumnSeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value.\r\n\t */\r\n\tvalue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[TreeMapSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITreeMapSeriesAdapters extends IColumnSeriesAdapters, ITreeMapSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines Series for a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapSeriesEvents} for a list of available Events\r\n * @see {@link ITreeMapSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class TreeMapSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: ITreeMapSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ITreeMapSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ITreeMapSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ITreeMapSeriesEvents;\r\n\r\n\t/**\r\n\t * The level in treemap hierarchy series is at.\r\n\t */\r\n\tpublic level: number;\r\n\r\n\t/**\r\n\t * Type of the data item used by series.\r\n\t */\r\n\tpublic _dataItem: TreeMapSeriesDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: TreeMap;\r\n\r\n\t/**\r\n\t * Parent data item of a series.\r\n\t */\r\n\tpublic parentDataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"TreeMapSeries\";\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.fillOpacity = 1;\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.minBulletDistance = 0;\r\n\t\tthis.columns.template.tooltipText = \"{parentName} {name}: {value}\"; //@todo add format number?\r\n\t\tthis.columns.template.configField = \"config\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.stroke = interfaceColors.getFor(\"background\");\r\n\t\tthis.dataFields.openValueX = \"x0\";\r\n\t\tthis.dataFields.valueX = \"x1\";\r\n\t\tthis.dataFields.openValueY = \"y0\";\r\n\t\tthis.dataFields.valueY = \"y1\";\r\n\r\n\t\tthis.sequencedInterpolation = false;\r\n\r\n\t\tthis.showOnInit = false;\r\n\r\n\t\t// otherwise nodes don't stack nicely to each other\r\n\t\tthis.columns.template.pixelPerfect = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes data item.\r\n\t *\r\n\t * @param dataItem     Data item\r\n\t * @param dataContext  Raw data\r\n\t * @param index        Index of the data item\r\n\t */\r\n\tprotected processDataItem(dataItem: this[\"_dataItem\"], dataContext?: Object): void {\r\n\t\t(<TreeMapDataItem>dataContext).seriesDataItem = dataItem; // save a reference here. dataContext is TreeMapDataItem and we need to know dataItem sometimes\r\n\t\tsuper.processDataItem(dataItem, dataContext);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new TreeMapSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Shows series.\r\n\t *\r\n\t * @param duration  Duration of fade in (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\t\tif(this.preventShow){\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet interpolationDuration = this.defaultState.transitionDuration;\r\n\t\tif ($type.isNumber(duration)) {\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\t//dataItem.treeMapDataItem.setWorkingValue(\"value\", dataItem.treeMapDataItem.values.value.value);\r\n\t\t\tdataItem.show(duration);\r\n\t\t})\r\n\r\n\t\treturn super.showReal(interpolationDuration);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Hides series.\r\n\t *\r\n\t * @param duration  Duration of fade out (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\r\n\t\tlet interpolationDuration = this.defaultState.transitionDuration;\r\n\t\tif ($type.isNumber(duration)) {\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\tlet animation = super.hideReal(interpolationDuration);\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\t//dataItem.treeMapDataItem.setWorkingValue(\"value\", 0);\r\n\t\t\tdataItem.hide(duration);\r\n\t\t})\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Process values.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic processValues() {\r\n\r\n\t\t// Just overriding so that inherited method does not kick in.\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative start location for the data item.\r\n\t *\r\n\t * @param dataItem  Data item\r\n\t * @return Location (0-1)\r\n\t */\r\n\tprotected getStartLocation(dataItem: this[\"_dataItem\"]): number {\t\t\r\n\t\treturn 0;\r\n\t}\t\r\n\r\n\t/**\r\n\t * Returns relative end location for the data item.\r\n\t *\r\n\t * @param dataItem  Data item\r\n\t * @return Location (0-1)\r\n\t */\r\n\tprotected getEndLocation(dataItem: this[\"_dataItem\"]): number {\r\n\t\treturn 1;\r\n\t}\t\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic dataChangeUpdate() {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Add empty data fields if the they are not set, so that XYSeries\r\n\t\t\t// dataField check does not result in error.\r\n\t\t\tif (!$type.hasValue(config.dataFields) || !$type.isObject(config.dataFields)) {\r\n\t\t\t\tconfig.dataFields = {};\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: RoundedRectangle = marker.createChild(RoundedRectangle);\r\n\t\tcolumn.shouldClone = false;\r\n\t\t$object.copyProperties(this, column, visualProperties);\r\n\r\n\t\t//column.copyFrom(<any>this.columns.template);\r\n\t\tcolumn.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\r\n\t\tcolumn.width = w;\r\n\t\tcolumn.height = h;\r\n\r\n\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\tlegendDataItem.color = column.fill;\r\n\t\tlegendDataItem.colorOrig = column.fill;\r\n\t}\r\n\r\n\tprotected disableUnusedColumns(dataItem: ColumnSeriesDataItem) {\r\n\t\tsuper.disableUnusedColumns(dataItem);\r\n\t\tif(dataItem.column){\r\n\t\t\tdataItem.column.__disabled = false;\r\n\t\t}\r\n\t}\t\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TreeMapSeries\"] = TreeMapSeries;\r\nregistry.registeredClasses[\"TreeMapSeriesDataItem\"] = TreeMapSeriesDataItem;\r\n","/**\r\n * TreeMap chart module.\r\n *\r\n * Parts of the functionality used in this module are taken from D3.js library\r\n * (https://d3js.org/)\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { OrderedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { TreeMapSeries } from \"../series/TreeMapSeries\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { TreeMapSeriesDataItem } from \"../series/TreeMapSeries\";\r\nimport { NavigationBar } from \"../elements/NavigationBar\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport { Export } from \"../../core/export/Export\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { LegendDataItem } from \"../../charts/Legend\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[TreeMap]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class TreeMapDataItem extends XYChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: TreeMap;\r\n\r\n\t/**\r\n\t * A treemap level this data item is displayed at.\r\n\t */\r\n\tprotected _level: number;\r\n\r\n\t/**\r\n\t * Series of children data items.\r\n\t */\r\n\tprotected _series: TreeMapSeries;\r\n\r\n\t/**\r\n\t * Related series data item.\r\n\t */\r\n\tpublic seriesDataItem: TreeMapSeriesDataItem;\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic rows: TreeMapDataItem[] = [];\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic rowsRatio: number;\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic dice: boolean;\r\n\r\n\t/**\r\n\t * A reference to a corresponding legend data item.\r\n\t */\r\n\tprotected _legendDataItem: LegendDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMapDataItem\";\r\n\r\n\t\tthis.values.value = {workingValue:0};\r\n\r\n\t\tthis.values.x0 = {};\r\n\r\n\t\tthis.values.y0 = {};\r\n\r\n\t\tthis.values.x1 = {};\r\n\r\n\t\tthis.values.y1 = {};\r\n\r\n\t\tthis.hasChildren.children = true;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A legend's data item, that corresponds to this data item.\r\n\t *\r\n\t * @param value  Legend data item\r\n\t */\r\n\tpublic set legendDataItem(value: LegendDataItem) {\r\n\t\tthis._legendDataItem = value;\r\n\t\tif (value.label) {\r\n\t\t\tvalue.label.dataItem = this;\r\n\t\t}\r\n\t\tif (value.valueLabel) {\r\n\t\t\tvalue.valueLabel.dataItem = this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Legend data item\r\n\t */\r\n\tpublic get legendDataItem(): LegendDataItem {\r\n\t\treturn this._legendDataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a duration (ms) the Data Item should take to animate from one\r\n\t * value to another.\r\n\t *\r\n\t * If the duration is not specified via parameter, this method will try to\r\n\t * request a default duration from the related `Component`.\r\n\t *\r\n\t * @param duration  Default duration (ms)\r\n\t * @return Duration (ms)\r\n\t */\r\n\tpublic getDuration(): number {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Numeric value of the item.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set value(value: number) {\r\n\t\tthis.setValue(\"value\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get value(): number {\r\n\r\n\t\tlet value = 0;\r\n\t\tif (!this.children || this.children.length == 0) {\r\n\t\t\tvalue = this.values[\"value\"].workingValue;\r\n\t\t}\r\n\r\n\t\telse {\r\n\t\t\t$iter.each(this.children.iterator(), (child) => {\r\n\t\t\t\tlet childValue = child.value;\r\n\t\t\t\tif ($type.isNumber(childValue)) {\r\n\t\t\t\t\tvalue += childValue;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t}\r\n\r\n\t\treturn value;\r\n\t\t/*\r\n\t\tlet value = this.values[\"value\"].workingValue;\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = 0;\r\n\t\t\tif (this.children) {\r\n\t\t\t\t$iter.each(this.children.iterator(), (child) => {\r\n\t\t\t\t\tif ($type.isNumber(child.value)) {\r\n\t\t\t\t\t\tvalue += child.value;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn value;*/\r\n\t}\r\n\r\n\t/**\r\n\t * Percent value of a node\r\n\t */\r\n\tpublic get percent(): number {\r\n\t\tif (this.parent) {\r\n\t\t\treturn this.value / this.parent.value * 100;\r\n\t\t}\r\n\t\treturn 100;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's X position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param value  X\r\n\t */\r\n\tpublic set x0(value: number) {\r\n\t\tthis.setValue(\"x0\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return X\r\n\t */\r\n\tpublic get x0(): number {\r\n\t\treturn this.values.x0.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's X position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param value  X\r\n\t */\r\n\tpublic set x1(value: number) {\r\n\t\tthis.setValue(\"x1\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return X\r\n\t */\r\n\tpublic get x1(): number {\r\n\t\treturn this.values.x1.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's Y position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param value  Y\r\n\t */\r\n\tpublic set y0(value: number) {\r\n\t\tthis.setValue(\"y0\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Y\r\n\t */\r\n\tpublic get y0(): number {\r\n\t\treturn this.values.y0.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's Y position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param value  Y\r\n\t */\r\n\tpublic set y1(value: number) {\r\n\t\tthis.setValue(\"y1\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Y\r\n\t */\r\n\tpublic get y1(): number {\r\n\t\treturn this.values.y1.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's name.\r\n\t *\r\n\t * @param name  Name\r\n\t */\r\n\tpublic set name(name: string) {\r\n\t\tthis.setProperty(\"name\", name);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.properties.name;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of item's sub-children.\r\n\t *\r\n\t * Having children means that the TreeMap chat will automatically be\r\n\t * \"drillable\". Clicking on an item with children will zoom to the item, then\r\n\t * display its children.\r\n\t *\r\n\t * Treemap can have any level of nesting.\r\n\t *\r\n\t * @param children  Item's children\r\n\t */\r\n\tpublic set children(children: OrderedListTemplate<TreeMapDataItem>) {\r\n\t\tthis.setProperty(\"children\", children);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Item's children\r\n\t */\r\n\tpublic get children(): OrderedListTemplate<TreeMapDataItem> {\r\n\t\treturn this.properties.children;\r\n\t}\r\n\r\n\t/**\r\n\t * Depth level in the treemap hierarchy.\r\n\t *\r\n\t * The top-level item will have level set at 0. Its children will have\r\n\t * level 1, and so on.\r\n\t *\r\n\t * @readonly\r\n\t * @return Level\r\n\t */\r\n\tpublic get level(): number {\r\n\t\tif (!this.parent) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.parent.level + 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Item's color.\r\n\t *\r\n\t * If not set, will use parent's color, or, if that is not set either,\r\n\t * automatically assigned color from chart's color set. (`chart.colors`)\r\n\t *\r\n\t * @param value  Color\r\n\t */\r\n\tpublic set color(value: Color) {\r\n\t\tthis.setProperty(\"color\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * For the legend to work properly\r\n\t */\r\n\tpublic get fill(): Color {\r\n\t\treturn this.color;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Color\r\n\t */\r\n\tpublic get color(): Color {\r\n\t\tlet color = this.properties.color;\r\n\r\n\t\tif (color == undefined) {\r\n\t\t\tif (this.parent) {\r\n\t\t\t\tcolor = this.parent.color;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (color == undefined) {\r\n\t\t\tif (this.component) {\r\n\t\t\t\tcolor = this.component.colors.getIndex(this.component.colors.step * this.index);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn color;\r\n\t}\r\n\r\n\t/**\r\n\t * Series of children data items\r\n\t * @todo: proper descrition\r\n\t */\r\n\tpublic set series(series: TreeMapSeries) {\r\n\t\tif (series != this._series) {\r\n\t\t\tif (this._series) {\r\n\t\t\t\tthis.component.series.removeValue(this._series);\r\n\t\t\t\tthis._series.dispose();\r\n\t\t\t}\r\n\t\t\tthis._series = series;\r\n\t\t\tthis._disposers.push(series);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic get series(): TreeMapSeries {\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides the Data Item and related visual elements.\r\n\t *\r\n\t * @param duration  Animation duration (ms)\r\n\t * @param delay     Delay animation (ms)\r\n\t * @param toValue   A value to set to `fields` when hiding\r\n\t * @param fields    A list of data fields to set value to `toValue`\r\n\t */\r\n\tpublic hide(duration?: number, delay?: number, toValue?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\tthis.setWorkingValue(\"value\", 0);\r\n\r\n\t\tif (this.children) {\r\n\t\t\tthis.children.each((child) => {\r\n\t\t\t\tchild.hide(duration, delay, toValue, fields);\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tlet seriesDataItem = this.seriesDataItem;\r\n\t\tif (seriesDataItem) {\r\n\t\t\tseriesDataItem.bullets.each((key, value) => {\r\n\t\t\t\tvalue.hide();\r\n\t\t\t\tvalue.preventShow = true;\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\treturn super.hide(duration, delay, toValue, fields);\r\n\t}\r\n\r\n\t/**\r\n\t * Shows the Data Item and related visual elements.\r\n\t *\r\n\t * @param duration  Animation duration (ms)\r\n\t * @param delay     Delay animation (ms)\r\n\t * @param fields    A list of fields to set values of\r\n\t */\r\n\tpublic show(duration?: number, delay?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\tthis.setWorkingValue(\"value\", this.values.value.value);\r\n\t\tif (this.children) {\r\n\t\t\tthis.children.each((child) => {\r\n\t\t\t\tchild.show(duration, delay, fields);\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tlet seriesDataItem = this.seriesDataItem;\r\n\t\tif (seriesDataItem) {\r\n\t\t\tseriesDataItem.bullets.each((key, value) => {\r\n\t\t\t\tvalue.preventShow = false;\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\treturn super.show(duration, delay, fields);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[TreeMap]].\r\n */\r\nexport interface ITreeMapDataFields extends IXYChartDataFields {\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's numeric value.\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's sub-items.\r\n\t */\r\n\tchildren?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's name.\r\n\t */\r\n\tname?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's color.\r\n\t *\r\n\t * If not set, a new color will be automatically assigned to each item as\r\n\t * defined by theme.\r\n\t */\r\n\tcolor?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[TreeMap]].\r\n */\r\nexport interface ITreeMapProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Maximum number of levels the chart will display initially.\r\n\t *\r\n\t * @default 2\r\n\t */\r\n\tmaxLevels?: number;\r\n\r\n\t/**\r\n\t * Current drill-down level the treemap is at.\r\n\t */\r\n\tcurrentLevel?: number;\r\n\r\n\t/**\r\n\t * Sorting direction of treemap items.\r\n\t *\r\n\t * @default \"descending\"\r\n\t */\r\n\tsorting?: \"none\" | \"ascending\" | \"descending\";\r\n\r\n\t/**\r\n\t * If set to `true`, columns of parent nodes will be hidden when user\r\n\t * drills-down into deeper levels.\r\n\t * \r\n\t * @sice 4.7.4\r\n\t * @default false\r\n\t */\r\n\thideParentColumns?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[TreeMap]].\r\n */\r\nexport interface ITreeMapEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[TreeMap]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITreeMapAdapters extends IXYChartAdapters, ITreeMapProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapEvents} for a list of available Events\r\n * @see {@link ITreeMapAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/treemap/} for documentation\r\n */\r\nexport class TreeMap extends XYChart {\r\n\r\n\t/**\r\n\t * Defines a type of the data item used for this chart.\r\n\t */\r\n\tpublic _dataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: ITreeMapDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ITreeMapProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ITreeMapAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ITreeMapEvents;\r\n\r\n\t/**\r\n\t * A horizontal value axis.\r\n\t *\r\n\t * TreeMap chart is basically an XY chart, which means it has vertical and\r\n\t * horizontal value axes.\r\n\t *\r\n\t * As with any XY-based chart, it can be zoomed.\r\n\t */\r\n\tpublic xAxis: ValueAxis;\r\n\r\n\t/**\r\n\t * A vertical value axis.\r\n\t *\r\n\t * TreeMap chart is basically an XY chart, which means it has vertical and\r\n\t * horizontal value axes.\r\n\t *\r\n\t * As with any XY-based chart, it can be zoomed.\r\n\t */\r\n\tpublic yAxis: ValueAxis;\r\n\r\n\t/**\r\n\t * An algorithm used to divide area into squares based on their value.\r\n\t *\r\n\t * Available options: squarify (default), binaryTree, slice, dice, sliceDice.\r\n\t *\r\n\t * ```TypeScript\r\n\t * chart.layoutAlgorithm = chart.sliceDice;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * chart.layoutAlgorithm = chart.sliceDice;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"layoutAlgorithm\": \"sliceDice\",\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/chart-types/treemap/#Area_division_methods} For more info and examples.\r\n\t * @default squarify\r\n\t */\r\n\tpublic layoutAlgorithm: (parent: TreeMapDataItem) => void = this.squarify;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: TreeMapSeries;\r\n\r\n\t/**\r\n\t * [_homeDataItem description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _homeDataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * [_tempSeries description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _tempSeries: TreeMapSeries[];\r\n\r\n\t/**\r\n\t * A text dispalyed on the home button in breadcurmb nav control.\r\n\t */\r\n\tprotected _homeText: string;\r\n\r\n\t/**\r\n\t * A set of colors to be applied automatically to each new chart item, if\r\n\t * not explicitly set.\r\n\t */\r\n\tpublic colors: ColorSet;\r\n\r\n\t/**\r\n\t * Holds series object for each TreeMap level.\r\n\t *\r\n\t * \"0\" is the top-level series.\r\n\t * \"1\" is the second level.\r\n\t * Etc.\r\n\t *\r\n\t * @todo Description\r\n\t * @param Templates for each level\r\n\t */\r\n\tpublic seriesTemplates: DictionaryTemplate<string, this[\"_seriesType\"]>;\r\n\r\n\t/**\r\n\t * Is the chart zoomable?\r\n\t *\r\n\t * If the chart is `zoomable`, and items have sub-items, the chart will\r\n\t * drill-down to sub-items when click on their parent item.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tpublic zoomable: boolean = true;\r\n\r\n\r\n\t/**\r\n\t * A navigation bar used to show \"breadcrumb\" control, indicating current\r\n\t * drill-down path.\r\n\t */\r\n\tprotected _navigationBar: NavigationBar;\r\n\r\n\t/**\r\n\t * Currently selected data item.\r\n\t * @readonly\r\n\t */\r\n\tpublic currentlyZoomed: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMap\";\r\n\r\n\t\tthis._usesData = true;\r\n\r\n\t\tthis.maxLevels = 2;\r\n\t\tthis.currentLevel = 0;\r\n\t\tthis.hideParentColumns = false;\r\n\r\n\t\tthis.colors = new ColorSet();\r\n\t\tthis.sorting = \"descending\";\r\n\r\n\t\t// create two value axes for the chart\r\n\t\tlet xAxis = this.xAxes.push(new ValueAxis<any>());\r\n\t\txAxis.title.disabled = true;\r\n\t\txAxis.strictMinMax = true;\r\n\r\n\t\tlet xRenderer = xAxis.renderer;\r\n\t\txRenderer.inside = true;\r\n\t\txRenderer.labels.template.disabled = true;\r\n\t\txRenderer.ticks.template.disabled = true;\r\n\t\txRenderer.grid.template.disabled = true;\r\n\t\txRenderer.axisFills.template.disabled = true;\r\n\t\txRenderer.minGridDistance = 100;\r\n\t\txRenderer.line.disabled = true;\r\n\t\txRenderer.baseGrid.disabled = true;\r\n\t\t//xRenderer.inversed = true;\r\n\r\n\t\tlet yAxis = this.yAxes.push(new ValueAxis<any>());\r\n\t\tyAxis.title.disabled = true;\r\n\t\tyAxis.strictMinMax = true;\r\n\r\n\t\tlet yRenderer = yAxis.renderer;\r\n\t\tyRenderer.inside = true;\r\n\t\tyRenderer.labels.template.disabled = true;\r\n\t\tyRenderer.ticks.template.disabled = true;\r\n\t\tyRenderer.grid.template.disabled = true;\r\n\t\tyRenderer.axisFills.template.disabled = true;\r\n\t\tyRenderer.minGridDistance = 100;\r\n\t\tyRenderer.line.disabled = true;\r\n\t\tyRenderer.baseGrid.disabled = true;\r\n\t\tyRenderer.inversed = true;\r\n\r\n\t\t// shortcuts\r\n\t\tthis.xAxis = xAxis;\r\n\t\tthis.yAxis = yAxis;\r\n\r\n\t\tconst template = new TreeMapSeries();\r\n\t\tthis.seriesTemplates = new DictionaryTemplate<string, this[\"_seriesType\"]>(template);\r\n\t\ttemplate.virtualParent = this;\r\n\t\tthis._disposers.push(new DictionaryDisposer(this.seriesTemplates));\r\n\t\tthis._disposers.push(template);\r\n\r\n\t\tthis.zoomOutButton.events.on(\"hit\", () => {\r\n\t\t\tthis.zoomToChartDataItem(this._homeDataItem);\r\n\t\t}, undefined, false)\r\n\r\n\t\tthis.seriesTemplates.events.on(\"insertKey\", (event) => {\r\n\t\t\tevent.newValue.isTemplate = true;\r\n\t\t}, undefined, false)\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A navigation bar used to show \"breadcrumb\" control, indicating current\r\n\t * drill-down path.\r\n\t */\r\n\tpublic set navigationBar(navigationBar: NavigationBar) {\r\n\t\tif (this._navigationBar != navigationBar) {\r\n\t\t\tthis._navigationBar = navigationBar;\r\n\t\t\tnavigationBar.parent = this;\r\n\t\t\tnavigationBar.toBack();\r\n\t\t\tnavigationBar.links.template.events.on(\"hit\", (event) => {\r\n\t\t\t\tlet dataItem = <TreeMapDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tif (!dataItem.isDisposed()) {\r\n\t\t\t\t\tthis.zoomToChartDataItem(dataItem);\r\n\t\t\t\t\tthis.createTreeSeries(dataItem);\r\n\t\t\t\t}\r\n\t\t\t}, undefined, true);\r\n\r\n\t\t\tthis._disposers.push(navigationBar);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns navigationBar if it is added to a chart\r\n\t */\r\n\tpublic get navigationBar(): NavigationBar {\r\n\t\treturn this._navigationBar;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * (Re)validates chart's data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\r\n\t\tthis.series.clear();\r\n\t\tthis._tempSeries = [];\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tif (this._homeDataItem) {\r\n\t\t\tthis._homeDataItem.dispose();\r\n\t\t}\r\n\r\n\t\tlet homeDataItem = this.dataItems.template.clone(); // cant' use createDataItem here!\r\n\r\n\t\tthis._homeDataItem = homeDataItem;\r\n\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tdataItem.parent = homeDataItem;\r\n\t\t});\r\n\r\n\t\thomeDataItem.children = this.dataItems;\r\n\r\n\t\thomeDataItem.x0 = 0;\r\n\t\thomeDataItem.y0 = 0;\r\n\t\thomeDataItem.name = this._homeText;\r\n\r\n\t\tlet maxX = 1000;\r\n\t\tlet maxY = Math.round((maxX * this.pixelHeight / this.pixelWidth) / 10) * 10 || 1000;\r\n\r\n\t\thomeDataItem.x1 = maxX;\r\n\t\thomeDataItem.y1 = maxY;\r\n\r\n\t\tthis.xAxis.min = 0;\r\n\t\tthis.xAxis.max = maxX;\r\n\t\tthis.xAxis.getMinMax();\r\n\r\n\t\tthis.yAxis.min = 0;\r\n\t\tthis.yAxis.max = maxY;\r\n\t\tthis.yAxis.getMinMax();\r\n\r\n\t\tthis.layoutItems(homeDataItem);\r\n\r\n\t\tthis.createTreeSeries(homeDataItem);\r\n\r\n\t\tthis.feedLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * Layouts and sizes all items according to their value and\r\n\t * `layoutAlgorithm`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Parent data item\r\n\t */\r\n\tpublic layoutItems(parent: TreeMapDataItem, sorting?: \"none\" | \"ascending\" | \"descending\"): void {\r\n\t\tif (parent) {\r\n\t\t\tlet children = parent.children;\r\n\r\n\t\t\tif (!sorting) {\r\n\t\t\t\tsorting = this.sorting;\r\n\t\t\t}\r\n\r\n\t\t\tif (sorting == \"ascending\") {\r\n\t\t\t\tchildren.values.sort((a, b) => {\r\n\t\t\t\t\treturn a.value - b.value;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tif (sorting == \"descending\") {\r\n\t\t\t\tchildren.values.sort((a, b) => {\r\n\t\t\t\t\treturn b.value - a.value;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tthis._updateDataItemIndexes(0);\r\n\r\n\t\t\tthis.layoutAlgorithm(parent);\r\n\r\n\t\t\tfor (let i = 0, len = children.length; i < len; i++) {\r\n\r\n\t\t\t\tlet node = children.getIndex(i);\r\n\r\n\t\t\t\tif (node.children) {\r\n\t\t\t\t\tthis.layoutItems(node);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Creates and returns a new treemap series.\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem  Data item to create series out of\r\n\t */\r\n\tprotected createTreeSeries(dataItem: TreeMapDataItem) {\r\n\t\tthis._tempSeries = [];\r\n\r\n\t\tlet navigationData = [dataItem];\r\n\r\n\t\t// create parent series and navigation data\r\n\t\tlet parentDataItem = dataItem.parent;\r\n\t\twhile (parentDataItem != undefined) {\r\n\t\t\tthis.initSeries(parentDataItem);\r\n\t\t\tnavigationData.push(parentDataItem);\r\n\t\t\tparentDataItem = parentDataItem.parent;\r\n\t\t}\r\n\r\n\t\tnavigationData.reverse();\r\n\r\n\t\tif (this.navigationBar) {\r\n\t\t\tthis.navigationBar.data = navigationData;\r\n\t\t}\r\n\r\n\t\t// create series and children series\r\n\t\tthis.createTreeSeriesReal(dataItem);\r\n\r\n\t\t// add those which are not in the list\r\n\t\t$array.each(this._tempSeries, (series) => {\r\n\t\t\tif (this.series.indexOf(series) == -1) {\r\n\t\t\t\tthis.series.push(series);\r\n\t\t\t}\r\n\t\t\tseries.zIndex = series.level;\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * [createTreeSeriesReal description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem [description]\r\n\t */\r\n\tprotected createTreeSeriesReal(dataItem: TreeMapDataItem) {\r\n\t\tif (dataItem.children) {\r\n\t\t\tlet level = dataItem.level;\r\n\r\n\t\t\tif (level < this.currentLevel + this.maxLevels) {\r\n\r\n\t\t\t\tthis.initSeries(dataItem);\r\n\r\n\t\t\t\tfor (let i = 0; i < dataItem.children.length; i++) {\r\n\t\t\t\t\tlet child = dataItem.children.getIndex(i);\r\n\t\t\t\t\tif (child.children) {\r\n\t\t\t\t\t\tthis.createTreeSeriesReal(child);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprotected setData(value: any[]) {\r\n\t\tthis.currentLevel = 0;\r\n\t\tthis.currentlyZoomed = undefined;\r\n\t\tthis.xAxis.start = 0;\r\n\t\tthis.xAxis.end = 1;\r\n\t\tthis.yAxis.start = 0;\r\n\t\tthis.yAxis.end = 1;\r\n\t\tsuper.setData(value);\r\n\t}\r\n\t/**\r\n\t * @ignore\r\n\t * Overriding, as tree map series are created on the fly all the time\r\n\t */\r\n\tprotected seriesAppeared(): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Initializes the treemap series.\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem  Chart data item\r\n\t */\r\n\tprotected initSeries(dataItem: TreeMapDataItem) {\r\n\t\tif (!dataItem.series) {\r\n\t\t\tlet series: TreeMapSeries;\r\n\r\n\t\t\tlet template = this.seriesTemplates.getKey(dataItem.level.toString());\r\n\t\t\tif (template) {\r\n\t\t\t\tseries = template.clone();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tseries = this.series.create();\r\n\t\t\t}\r\n\t\t\t// for the legend to get {value}\r\n\t\t\tseries.dataItem.dataContext = dataItem;\r\n\r\n\t\t\tseries.name = dataItem.name;\r\n\t\t\tseries.parentDataItem = dataItem;\r\n\t\t\tdataItem.series = series;\r\n\r\n\t\t\tlet level = dataItem.level;\r\n\t\t\tseries.level = level;\r\n\r\n\t\t\tlet dataContext: any = dataItem.dataContext;\r\n\t\t\tif (dataContext) {\r\n\t\t\t\tseries.config = dataContext.config;\r\n\t\t\t}\r\n\r\n\t\t\tthis.dataUsers.removeValue(series); // series do not use data directly, that's why we remove it\r\n\t\t\tseries.data = dataItem.children.values;\r\n\t\t\tseries.fill = dataItem.color;\r\n\r\n\t\t\tseries.columnsContainer.hide(0);\r\n\t\t\tseries.bulletsContainer.hide(0);\r\n\r\n\t\t\tseries.columns.template.adapter.add(\"fill\", (fill, target) => {\r\n\t\t\t\tlet dataItem = <TreeMapSeriesDataItem>target.dataItem;\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tlet treeMapDataItem = dataItem.treeMapDataItem;\r\n\t\t\t\t\tif (treeMapDataItem) {\r\n\t\t\t\t\t\ttarget.fill = treeMapDataItem.color;\r\n\t\t\t\t\t\ttarget.adapter.remove(\"fill\"); //@todo: make it possible adapters applied once?\r\n\t\t\t\t\t\treturn treeMapDataItem.color;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tif (this.zoomable && (dataItem.level > this.currentLevel || (dataItem.children && dataItem.children.length > 0))) {\r\n\t\t\t\tseries.columns.template.cursorOverStyle = MouseCursorStyle.pointer;\r\n\t\t\t\tif (this.zoomable) {\r\n\t\t\t\t\tseries.columns.template.events.on(\"hit\", (event) => {\r\n\t\t\t\t\t\tlet seriesDataItem = <TreeMapSeriesDataItem>event.target.dataItem;\r\n\r\n\t\t\t\t\t\tif (dataItem.level > this.currentLevel) {\r\n\t\t\t\t\t\t\tthis.zoomToChartDataItem(seriesDataItem.treeMapDataItem.parent);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthis.zoomToSeriesDataItem(seriesDataItem);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}, this, undefined);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._tempSeries.push(dataItem.series);\r\n\t}\r\n\r\n\t/**\r\n\t * Toggles bullets so that labels that belong to current drill level are\r\n\t * shown.\r\n\t *\r\n\t * @param duration  Animation duration (ms)\r\n\t */\r\n\tprotected toggleBullets(duration?: number): void {\r\n\t\t// hide all series which are not in tempSeries\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (this._tempSeries.indexOf(series) == - 1) {\r\n\t\t\t\t//series.hideReal(duration);\r\n\t\t\t\tseries.columnsContainer.hide();\r\n\t\t\t\tseries.bulletsContainer.hide(duration);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t//series.showReal(duration);\r\n\t\t\t\tseries.columnsContainer.show();\r\n\t\t\t\tseries.bulletsContainer.show(duration);\r\n\r\n\t\t\t\tseries.dataItems.each((dataItem) => {\r\n\t\t\t\t\tdataItem.bullets.each((key, bullet) => {\r\n\t\t\t\t\t\tbullet.show();\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\r\n\t\t\t\tif (series.level < this.currentLevel) {\r\n\t\t\t\t\tif (this.hideParentColumns) {\r\n\t\t\t\t\t\tseries.columnsContainer.hide();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tseries.bulletsContainer.hide(duration);\r\n\t\t\t\t}\r\n\t\t\t\telse if (series.level == this.currentLevel) {\r\n\t\t\t\t\tif (this.maxLevels > 1) {\r\n\t\t\t\t\t\tseries.dataItems.each((dataItem) => {\r\n\t\t\t\t\t\t\tif (dataItem.treeMapDataItem.children) {\r\n\t\t\t\t\t\t\t\tdataItem.bullets.each((key, bullet) => {\r\n\t\t\t\t\t\t\t\t\tbullet.hide();\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms to particular item in series.\r\n\t *\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic zoomToSeriesDataItem(dataItem: TreeMapSeriesDataItem): void {\r\n\t\tthis.zoomToChartDataItem(dataItem.treeMapDataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms to particular item. If dataItem is not specified, the chart will zoom-out.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic zoomToChartDataItem(dataItem?: TreeMapDataItem): void {\r\n\t\tif (!dataItem) {\r\n\t\t\tdataItem = this._homeDataItem;\r\n\t\t}\r\n\r\n\t\tlet zoomOutButton = this.zoomOutButton;\r\n\t\t// this is needed because if there is only one fist level, it won't be shown\r\n\t\tif (zoomOutButton) {\r\n\t\t\tif (dataItem != this._homeDataItem) {\r\n\t\t\t\tzoomOutButton.show();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tzoomOutButton.hide();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (dataItem && dataItem.children) {\r\n\t\t\tthis.xAxis.zoomToValues(dataItem.x0, dataItem.x1);\r\n\t\t\tthis.yAxis.zoomToValues(dataItem.y0, dataItem.y1);\r\n\r\n\t\t\tthis.currentLevel = dataItem.level;\r\n\t\t\tthis.currentlyZoomed = dataItem;\r\n\r\n\t\t\tthis.createTreeSeries(dataItem);\r\n\r\n\t\t\tlet rangeChangeAnimation = this.xAxis.rangeChangeAnimation || this.yAxis.rangeChangeAnimation;\r\n\r\n\t\t\tif (rangeChangeAnimation && !rangeChangeAnimation.isDisposed() && !rangeChangeAnimation.isFinished()) {\r\n\t\t\t\tthis._dataDisposers.push(rangeChangeAnimation);\r\n\r\n\t\t\t\trangeChangeAnimation.events.once(\"animationended\", () => {\r\n\t\t\t\t\tthis.toggleBullets();\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.toggleBullets();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"TreeMap chart\");\r\n\t\t}\r\n\t\t//this.homeText = this.language.translate(\"Home\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new TreeMapDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Maximum number of levels the chart will display initially.\r\n\t *\r\n\t * @default 2\r\n\t * @param value  Maximum drill-down level\r\n\t */\r\n\tpublic set maxLevels(value: number) {\r\n\t\tthis.setPropertyValue(\"maxLevels\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Maximum drill-down level\r\n\t */\r\n\tpublic get maxLevels(): number {\r\n\t\treturn this.getPropertyValue(\"maxLevels\");\r\n\t}\r\n\r\n\t/**\r\n\t * Current drill-down level the chart is at.\r\n\t *\r\n\t * @param value  Current level\r\n\t */\r\n\tpublic set currentLevel(value: number) {\r\n\t\tthis.setPropertyValue(\"currentLevel\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Current level\r\n\t */\r\n\tpublic get currentLevel(): number {\r\n\t\treturn this.getPropertyValue(\"currentLevel\");\r\n\t}\r\n\r\n\t/**\r\n\t * If set to `true`, columns of parent nodes will be hidden when user\r\n\t * drills-down into deeper levels.\r\n\t * \r\n\t * @sice 4.7.4\r\n\t * @default false\r\n\t * @param  value  Hide?\r\n\t */\r\n\tpublic set hideParentColumns(value: boolean) {\r\n\t\tthis.setPropertyValue(\"hideParentColumns\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Hide?\r\n\t */\r\n\tpublic get hideParentColumns(): boolean {\r\n\t\treturn this.getPropertyValue(\"hideParentColumns\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sorting direction of treemap items.\r\n\t *\r\n\t * Available options: \"none\", \"ascending\", and \"descending\" (default).\r\n\t *\r\n\t * @default \"descending\"\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set sorting(value: \"none\" | \"ascending\" | \"descending\") {\r\n\t\tthis.setPropertyValue(\"sorting\", value, true);\r\n\t}\r\n\r\n\tpublic get sorting(): \"none\" | \"ascending\" | \"descending\" {\r\n\t\treturn this.getPropertyValue(\"sorting\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new series of the suitable type.\r\n\t *\r\n\t * @return new series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new TreeMapSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * A text displayed on the \"home\" button which is used to go back to level 0\r\n\t * after drill into sub-items.\r\n\t *\r\n\t * @param value  Home text\r\n\t */\r\n\tpublic set homeText(value: string) {\r\n\t\tthis._homeText = value;\r\n\t\tif (this._homeDataItem) {\r\n\t\t\tthis._homeDataItem.name = this._homeText;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Home text\r\n\t */\r\n\tpublic get homeText(): string {\r\n\t\treturn this._homeText;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Instantiate layout algorithm\r\n\t\t\tif ($type.hasValue(config[\"layoutAlgorithm\"]) && $type.isString(config[\"layoutAlgorithm\"])) {\r\n\t\t\t\tswitch (config[\"layoutAlgorithm\"]) {\r\n\t\t\t\t\tcase \"squarify\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.squarify;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"binaryTree\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.binaryTree;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"slice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.slice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"dice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.dice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"sliceDice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.sliceDice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tdelete config[\"layoutAlgorithm\"];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Set type for navigation bar\r\n\t\t\tif ($type.hasValue(config.navigationBar) && !$type.hasValue(config.navigationBar.type)) {\r\n\t\t\t\tconfig.navigationBar.type = \"NavigationBar\";\r\n\t\t\t}\r\n\r\n\t\t\tsuper.processConfig(config);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Measures the size of container and informs its children of how much size\r\n\t * they can occupy, by setting their relative `maxWidth` and `maxHeight`\r\n\t * properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateLayout() {\r\n\t\tsuper.validateLayout();\r\n\t\tthis.layoutItems(this.currentlyZoomed);\r\n\t}\r\n\r\n\t/**\r\n\t * Validates (processes) data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems() {\r\n\t\tsuper.validateDataItems();\r\n\t\tthis.layoutItems(this._homeDataItem);\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.validateRawData();\r\n\t\t});\r\n\r\n\t\tthis.zoomToChartDataItem(this._homeDataItem);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * TREEMAP LAYOUT FUNCTIONS\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * The functions below are from D3.js library (https://d3js.org/)\r\n\t *\r\n\t * --------------------------------------------------------------------------\r\n\t * Copyright 2017 Mike Bostock\r\n\t *\r\n\t * Redistribution and use in source and binary forms, with or without\r\n\t * modification, are permitted provided that the following conditions are met:\r\n\t *\r\n\t * 1. Redistributions of source code must retain the above copyright notice,\r\n\t *    this list of conditions and the following disclaimer.\r\n\t *\r\n\t * 2. Redistributions in binary form must reproduce the above copyright\r\n\t *    notice,this list of conditions and the following disclaimer in the\r\n\t *    documentation and/or other materials provided with the distribution.\r\n\t *\r\n\t * 3. Neither the name of the copyright holder nor the names of its\r\n\t *    contributors may be used to endorse or promote products derived from\r\n\t *    this software without specific prior written permission.\r\n\t *\r\n\t * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n\t * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n\t * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n\t * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n\t * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n\t * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n\t * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n\t * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n\t * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n\t * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n\t * POSSIBILITY OF SUCH DAMAGE.\r\n\t * --------------------------------------------------------------------------\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: binaryTree.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Data item\r\n\t */\r\n\tpublic binaryTree(parent: TreeMapDataItem): void {\r\n\t\tlet nodes = parent.children,\r\n\t\t\ti, n = nodes.length,\r\n\t\t\tsum, sums = new Array(n + 1);\r\n\r\n\t\tfor (sums[0] = sum = i = 0; i < n; ++i) {\r\n\t\t\tsums[i + 1] = sum += nodes.getIndex(i).value;\r\n\t\t}\r\n\r\n\t\tif(n > 0){\r\n\t\t\tpartition(0, n, parent.value, parent.x0, parent.y0, parent.x1, parent.y1);\r\n\t\t}\r\n\r\n\t\tfunction partition(i: number, j: number, value: number, x0: number, y0: number, x1: number, y1: number) {\r\n\t\t\tif (i >= j - 1) {\r\n\t\t\t\tlet node = nodes.getIndex(i);\r\n\t\t\t\tnode.x0 = x0;\r\n\t\t\t\tnode.y0 = y0;\r\n\t\t\t\tnode.x1 = x1;\r\n\t\t\t\tnode.y1 = y1;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tlet valueOffset = sums[i],\r\n\t\t\t\tvalueTarget = (value / 2) + valueOffset,\r\n\t\t\t\tk = i + 1,\r\n\t\t\t\thi = j - 1;\r\n\r\n\t\t\twhile (k < hi) {\r\n\t\t\t\tlet mid = k + hi >>> 1;\r\n\t\t\t\tif (sums[mid] < valueTarget) {\r\n\t\t\t\t\tk = mid + 1;\r\n\t\t\t\t} else {\r\n\t\t\t\t\thi = mid;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif ((valueTarget - sums[k - 1]) < (sums[k] - valueTarget) && i + 1 < k) {\r\n\t\t\t\t--k;\r\n\t\t\t}\r\n\r\n\t\t\tlet valueLeft = sums[k] - valueOffset,\r\n\t\t\t\tvalueRight = value - valueLeft;\r\n\r\n\t\t\tif ((x1 - x0) > (y1 - y0)) {\r\n\t\t\t\tlet xk = (x0 * valueRight + x1 * valueLeft) / value;\r\n\t\t\t\tpartition(i, k, valueLeft, x0, y0, xk, y1);\r\n\t\t\t\tpartition(k, j, valueRight, xk, y0, x1, y1);\r\n\t\t\t} else {\r\n\t\t\t\tlet yk = (y0 * valueRight + y1 * valueLeft) / value;\r\n\t\t\t\tpartition(i, k, valueLeft, x0, y0, x1, yk);\r\n\t\t\t\tpartition(k, j, valueRight, x0, yk, x1, y1);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: slice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Data item\r\n\t */\r\n\tpublic slice(parent: TreeMapDataItem): void {\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children;\r\n\t\tlet node;\r\n\t\tlet i = -1;\r\n\t\tlet n = nodes.length;\r\n\t\tlet k = parent.value && (y1 - y0) / parent.value;\r\n\r\n\t\twhile (++i < n) {\r\n\t\t\tnode = nodes.getIndex(i);\r\n\t\t\tnode.x0 = x0;\r\n\t\t\tnode.x1 = x1;\r\n\t\t\tnode.y0 = y0;\r\n\t\t\ty0 += node.value * k;\r\n\t\t\tnode.y1 = y0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: dice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Data item\r\n\t */\r\n\tpublic dice(parent: TreeMapDataItem): void {\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children,\r\n\t\t\tnode,\r\n\t\t\ti = -1,\r\n\t\t\tn = nodes.length,\r\n\t\t\tk = parent.value && (x1 - x0) / parent.value;\r\n\r\n\t\twhile (++i < n) {\r\n\t\t\tnode = nodes.getIndex(i);\r\n\t\t\tnode.y0 = y0;\r\n\t\t\tnode.y1 = y1;\r\n\t\t\tnode.x0 = x0;\r\n\t\t\tx0 += node.value * k;\r\n\t\t\tnode.x1 = x0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: slideDice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Data item\r\n\t */\r\n\tpublic sliceDice(parent: TreeMapDataItem): void {\r\n\t\tif (parent.level & 1) {\r\n\t\t\tthis.slice(parent);\r\n\t\t} else {\r\n\t\t\tthis.dice(parent);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: squarify.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Data item\r\n\t */\r\n\tpublic squarify(parent: TreeMapDataItem): void {\r\n\t\tlet ratio = (1 + Math.sqrt(5)) / 2;\r\n\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children;\r\n\t\tlet nodeValue;\r\n\t\tlet i0 = 0;\r\n\t\tlet i1 = 0;\r\n\t\tlet n = nodes.length;\r\n\t\tlet dx;\r\n\t\tlet dy;\r\n\t\tlet value = parent.value;\r\n\t\tlet sumValue;\r\n\t\tlet minValue;\r\n\t\tlet maxValue;\r\n\t\tlet newRatio;\r\n\t\tlet minRatio;\r\n\t\tlet alpha;\r\n\t\tlet beta;\r\n\r\n\t\twhile (i0 < n) {\r\n\t\t\tdx = x1 - x0;\r\n\t\t\tdy = y1 - y0;\r\n\r\n\t\t\t// Find the next non-empty node.\r\n\t\t\tdo {\r\n\t\t\t\tsumValue = nodes.getIndex(i1++).value;\r\n\t\t\t} while (!sumValue && i1 < n);\r\n\r\n\t\t\tminValue = maxValue = sumValue;\r\n\t\t\talpha = Math.max(dy / dx, dx / dy) / (value * ratio);\r\n\t\t\tbeta = sumValue * sumValue * alpha;\r\n\t\t\tminRatio = Math.max(maxValue / beta, beta / minValue);\r\n\r\n\t\t\t// Keep adding nodes while the aspect ratio maintains or improves.\r\n\t\t\tfor (; i1 < n; ++i1) {\r\n\t\t\t\tsumValue += nodeValue = nodes.getIndex(i1).value;\r\n\t\t\t\tif (nodeValue < minValue) {\r\n\t\t\t\t\tminValue = nodeValue;\r\n\t\t\t\t}\r\n\t\t\t\tif (nodeValue > maxValue) {\r\n\t\t\t\t\tmaxValue = nodeValue;\r\n\t\t\t\t}\r\n\t\t\t\tbeta = sumValue * sumValue * alpha;\r\n\t\t\t\tnewRatio = Math.max(maxValue / beta, beta / minValue);\r\n\t\t\t\tif (newRatio > minRatio) {\r\n\t\t\t\t\tsumValue -= nodeValue; break;\r\n\t\t\t\t}\r\n\t\t\t\tminRatio = newRatio;\r\n\t\t\t}\r\n\r\n\t\t\t// Position and record the row orientation.\r\n\t\t\tlet row = this.dataItems.template.clone();\r\n\t\t\trow.value = sumValue;\r\n\t\t\trow.dice = dx < dy;\r\n\t\t\trow.children = nodes.slice(i0, i1);\r\n\t\t\trow.x0 = x0;\r\n\t\t\trow.y0 = y0;\r\n\t\t\trow.x1 = x1;\r\n\t\t\trow.y1 = y1;\r\n\r\n\t\t\tif (row.dice) {\r\n\t\t\t\trow.y1 = value ? (y0 += (dy * sumValue) / value) : y1;\r\n\t\t\t\tthis.dice(row);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\trow.x1 = value ? (x0 += (dx * sumValue) / value) : x1;\r\n\t\t\t\tthis.slice(row);\r\n\t\t\t}\r\n\t\t\tvalue -= sumValue;\r\n\t\t\ti0 = i1;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleSeriesAdded2() {\r\n\t\t// void\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic handleDataItemValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t\tif (name == \"value\") {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\tpublic handleDataItemWorkingValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t\tif (name == \"value\") {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\tprotected getLegendLevel(dataItem: TreeMapDataItem): TreeMapDataItem {\r\n\t\tif (!dataItem) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (!dataItem.children) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (dataItem.children.length > 1) {\r\n\t\t\treturn dataItem;\r\n\t\t}\r\n\t\telse if (dataItem.children.length == 1) {\r\n\t\t\tlet child = dataItem.children.getIndex(0);\r\n\t\t\tif (child.children) {\r\n\t\t\t\treturn this.getLegendLevel(child);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn dataItem;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn dataItem;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleLegendSeriesAdded(series:TreeMapSeries){\r\n\t\t// void\r\n\t}\t\r\n\r\n\t/**\r\n\t * A data item associated with top node.\r\n\t * \r\n\t * @since 4.8.2\r\n\t */\r\n\tpublic get homeDataItem(): TreeMapDataItem {\r\n\t\treturn this._homeDataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t * @ignore\r\n\t */\r\n\tpublic feedLegend(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\r\n\t\t\tlegend.dataFields.name = \"name\";\r\n\r\n\t\t\tlet legendParent = this.getLegendLevel(this._homeDataItem);\r\n\r\n\t\t\tif (legendParent) {\r\n\t\t\t\tlet legendData: Array<this[\"_dataItem\"]> = [];\r\n\r\n\t\t\t\tlegendParent.children.each((dataItem) => {\r\n\t\t\t\t\t//if (!dataItem.hiddenInLegend) {\r\n\t\t\t\t\tlegendData.push(dataItem);\r\n\t\t\t\t\t//}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tlegend.data = legendData;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\r\n\t\tsuper.disposeData();\r\n\r\n\t\tthis._homeDataItem = undefined;\r\n\r\n\t\tthis.series.clear();\r\n\r\n\t\tif (this.navigationBar) {\r\n\t\t\tthis.navigationBar.disposeData();\r\n\t\t}\r\n\r\n\t\tthis.xAxis.disposeData();\r\n\t\tthis.yAxis.disposeData();\r\n\t}\r\n\r\n\t/**\r\n\t * Since this chart uses hierarchical data, we need to remove childrent\r\n\t * dataField from export of non-hierarchical formats such as CSV and XSLX.\r\n\t *\r\n\t * @return Export\r\n\t */\r\n\tprotected getExporting(): Export {\r\n\t\tconst exporting = super.getExporting();\r\n\t\texporting.adapter.add(\"formatDataFields\", (info) => {\r\n\t\t\tif (info.format == \"csv\" || info.format == \"xlsx\") {\r\n\t\t\t\tif ($type.hasValue(this.dataFields.children)) {\r\n\t\t\t\t\tdelete info.dataFields[this.dataFields.children];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn info;\r\n\t\t})\r\n\t\treturn exporting;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TreeMap\"] = TreeMap;\r\n","/**\r\n * Module, defining Axis Renderer for horizontal 3D axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererX, IAxisRendererXProperties, IAxisRendererXAdapters, IAxisRendererXEvents } from \"../axes/AxisRendererX\";\r\nimport { Sprite, ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Grid } from \"../axes/Grid\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererX3D]].\r\n */\r\nexport interface IAxisRendererX3DProperties extends IAxisRendererXProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererX3D]].\r\n */\r\nexport interface IAxisRendererX3DEvents extends IAxisRendererXEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRendererX3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererX3DAdapters extends IAxisRendererXAdapters, IAxisRendererX3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Renderer for horizontal 3D axis.\r\n *\r\n * @see {@link IAxisRendererX3DEvents} for a list of available events\r\n * @see {@link IAxisRendererX3DAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererX3D extends AxisRendererX {\r\n\r\n\t/**\r\n\t * Defines available properties\r\n\t */\r\n\tpublic _properties!: IAxisRendererX3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t */\r\n\tpublic _adapter!: IAxisRendererX3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererX3DEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart3D>();\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererX3D\";\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif (grid.element) {\r\n\r\n\t\t\tlet dx: number = this.chart.dx3D || 0;\r\n\t\t\tlet dy: number = this.chart.dy3D || 0;\r\n\r\n\t\t\tlet h: number = this.getHeight();\r\n\r\n\t\t\tgrid.path = $path.moveTo({ x: dx, y: dy }) + $path.lineTo({ x: dx, y: h + dy }) + $path.lineTo({ x: 0, y: h });\r\n\t\t}\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement() {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet h = this.getHeight();\r\n\t\tlet dx = this.chart.dx3D || 0;\r\n\t\tlet dy = this.chart.dy3D || 0;\r\n\t\tthis.baseGrid.path =  $path.moveTo({ x: dx, y: dy }) + $path.lineTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: h });\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart3D) {\r\n\t\tif (chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"propertychanged\", this.handle3DChanged, this, false));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): XYChart3D {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked when 3D-related settings change, like depth or angle.\r\n\t *\r\n\t * @param event Event\r\n\t */\r\n\tprotected handle3DChanged(event: AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (event.property == \"depth\" || event.property == \"angle\") {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererX3D\"] = AxisRendererX3D;\r\n","/**\r\n * Module, defining Axis Renderer for vertical 3D axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererY, IAxisRendererYProperties, IAxisRendererYAdapters, IAxisRendererYEvents } from \"../axes/AxisRendererY\";\r\nimport { Sprite, ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Grid } from \"../axes/Grid\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererY3D]].\r\n */\r\nexport interface IAxisRendererY3DProperties extends IAxisRendererYProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererY3D]].\r\n */\r\nexport interface IAxisRendererY3DEvents extends IAxisRendererYEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRendererY3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererY3DAdapters extends IAxisRendererYAdapters, IAxisRendererY3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Renderer for vertical 3D axis.\r\n *\r\n * @see {@link IAxisRendererY3DEvents} for a list of available events\r\n * @see {@link IAxisRendererY3DAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererY3D extends AxisRendererY {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisRendererY3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisRendererY3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererY3DEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart3D>();\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererY3D\";\r\n\t\tthis._disposers.push(this._chart);\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number): void {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (grid.element) {\r\n\r\n\t\t\tlet dx: number = this.chart.dx3D || 0;\r\n\t\t\tlet dy: number = this.chart.dy3D || 0;\r\n\r\n\t\t\tlet w: number = this.getWidth();\r\n\r\n\t\t\tgrid.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: dx, y: dy }) + $path.lineTo({ x: w + dx, y: dy });\r\n\t\t}\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet dx: number = this.chart.dx3D || 0;\r\n\t\tlet dy: number = this.chart.dy3D || 0;\r\n\r\n\t\tlet w: number = this.getWidth();\r\n\t\tthis.baseGrid.path = $path.moveTo({ x: 0, y: 0 })\r\n\t\t\t+ $path.lineTo({ x: w, y: 0 })\r\n\t\t\t+ $path.lineTo({ x: w + dx, y: dy });\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart3D) {\r\n\t\tif (chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"propertychanged\", this.handle3DChanged, this, false));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): XYChart3D {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked when 3D-related settings change, like depth or angle.\r\n\t *\r\n\t * @param event Event\r\n\t */\r\n\tprotected handle3DChanged(event: AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (event.property == \"depth\" || event.property == \"angle\") {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n","/**\r\n * Module that defines everything related to building 3D Columns.\r\n * It is a container which has column3D element which is a Rectangle3D.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { Rectangle3D } from \"../../core/elements/3d/Rectangle3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { RadialGradient } from \"../../core/rendering/fills/RadialGradient\";\r\nimport { LinearGradient } from \"../../core/rendering/fills/LinearGradient\";\r\nimport { Pattern } from \"../../core/rendering/fills/Pattern\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Column3D]].\r\n */\r\nexport interface IColumn3DProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[Column3D]].\r\n */\r\nexport interface IColumn3DEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Column3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumn3DAdapters extends IColumnAdapters, IColumn3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates Column3Ds.\r\n *\r\n * @see {@link IColumn3DEvents} for a list of available events\r\n * @see {@link IColumn3DAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class Column3D extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IColumn3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IColumn3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IColumn3DEvents;\r\n\r\n\r\n\t/**\r\n\t * column3D element\r\n\t */\r\n\tpublic column3D: Rectangle3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Column3D\";\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createAssets() {\r\n\t\tthis.column3D = this.createChild(Rectangle3D);\r\n\t\tthis.column3D.shouldClone = false;\r\n\t\tthis.column3D.strokeOpacity = 0;\r\n\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.column3D;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tif (this.column3D) {\r\n\t\t\tthis.column3D.width = this.pixelWidth;\r\n\t\t\tthis.column3D.height = this.pixelHeight;\r\n\t\t\tif(this.column3D.invalid){\r\n\t\t\t\tthis.column3D.validate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[Column3D]].\r\n\t *\r\n\t * @param source Source Column3D\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.column3D) {\r\n\t\t\tthis.column3D.copyFrom(source.column3D);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets actual `fill` property on the SVG element, including applicable color\r\n\t * modifiers.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Fill\r\n\t */\r\n\tprotected setFill(value: $type.Optional<Color | Pattern | LinearGradient | RadialGradient>): void {\r\n\t\tsuper.setFill(value);\r\n\t\tthis.column.fill = value;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Column3D\"] = Column3D;\r\n","/**\r\n * 3D column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"../series/ColumnSeries\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Column3D } from \"../elements/Column3D\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nexport class ColumnSeries3DDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t */\r\n\tpublic _column: Column3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeries3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DProperties extends IColumnSeriesProperties {\r\n\r\n\t/**\r\n\t * Depth (height) of the slices in the series in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle of view for the slices in series. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ColumnSeries3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnSeries3DAdapters extends IColumnSeriesAdapters, IColumnSeries3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n *\r\n * @see {@link IColumnSeries3DEvents} for a list of available Events\r\n * @see {@link IColumnSeries3DAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ColumnSeries3D extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Type of data item.\r\n\t */\r\n\tpublic _dataItem: ColumnSeries3DDataItem;\r\n\r\n\t/**\r\n\t * Type of column.\r\n\t */\r\n\tpublic _column: Column3D;\r\n\r\n\t/**\r\n\t * Defines the type for data fields.\r\n\t */\r\n\tpublic _dataFields: IColumnSeries3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IColumnSeries3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IColumnSeries3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IColumnSeries3DEvents;\r\n\r\n\t/**\r\n\t * Specifies how deep in 3d space columns should be drawn.\r\n\t *\r\n\t * Internal use only.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic depthIndex: number;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: XYChart3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ColumnSeries3D\";\r\n\r\n\t\tthis.columns.template.column3D.applyOnClones = true;\r\n\t\tthis.columns.template.hiddenState.properties.visible = true;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic get columnsContainer(): Container {\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart && chart.columnsContainer && chart.leftAxesContainer.layout != \"vertical\" && chart.rightAxesContainer.layout != \"vertical\" && chart.bottomAxesContainer.layout != \"horizontal\" && chart.topAxesContainer.layout != \"horizontal\") {\r\n\t\t\treturn chart.columnsContainer;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._columnsContainer;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\t\tif (dataItem.column) {\r\n\t\t\tdataItem.column.dx = this.dx;\r\n\t\t\tdataItem.column.dy = this.dy;\r\n\r\n\t\t\tdataItem.column.visible = this.visible;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements(): void {\r\n\t\tsuper.validateDataElements();\r\n\t\tif (this.chart) {\r\n\t\t\tthis.chart.invalidateLayout();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for 3D bar.\r\n\t * @ignore\r\n\t * @return Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Column3D();\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Depth (height) of the slices in the series in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value, true);\r\n\t\tlet template = this.columns.template; // todo: Cone is not Rectangle3D, maybe we should do some I3DShape?\r\n\t\ttemplate.column3D.depth = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of view for the slices in series. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Angle (0-360)\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tlet template = this.columns.template;\r\n\t\ttemplate.column3D.angle = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Angle (0-360)\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColumnSeries3D\"] = ColumnSeries3D;\r\nregistry.registeredClasses[\"ColumnSeries3DDataItem\"] = ColumnSeries3DDataItem;\r\n","/**\r\n * Module for building 3D serial charts.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * Imports\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { AxisRendererX3D } from \"../axes/AxisRendererX3D\";\r\nimport { AxisRendererY3D } from \"../axes/AxisRendererY3D\";\r\nimport { ColumnSeries3D } from \"../series/ColumnSeries3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYChart3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYChart3DDataItem extends XYChartDataItem {\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChart3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DDataFields extends IXYChartDataFields { }\r\n\r\n/**\r\n * Defines available properties for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Depths of the chart in pixels.\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle the chart is viewed at.\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChart3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChart3DAdapters extends IXYChartAdapters, IXYChart3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a 3D XY chart.\r\n *\r\n * @see {@link IXYChart3DEvents} for a list of available Events\r\n * @see {@link IXYChart3DAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\r\n * @important\r\n */\r\nexport class XYChart3D extends XYChart {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t */\r\n\tpublic _dataFields: IXYChart3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IXYChart3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IXYChart3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IXYChart3DEvents;\r\n\r\n\t/**\r\n\t * Type of the axis renderer to use for X axes.\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererX3D = AxisRendererX3D;\r\n\r\n\t/**\r\n\t * Type of the axis renderer to use for Y axes.\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererY3D = AxisRendererY3D;\r\n\r\n\t/**\r\n\t * A container to add 3D column elements to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic columnsContainer: Container;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChart3D\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.depth = 30;\r\n\t\tthis.angle = 30;\r\n\r\n\t\t// Creeate container for columns\r\n\t\tlet columnsContainer = this.seriesContainer.createChild(Container);\r\n\t\tcolumnsContainer.shouldClone = false;\r\n\t\tcolumnsContainer.isMeasured = false;\r\n\t\tcolumnsContainer.layout = \"none\";\r\n\t\tthis.columnsContainer = columnsContainer;\r\n\r\n\t\tthis.columnsContainer.mask = this.createChild(Sprite);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This is done because for some reason IE doesn't change mask if path of a\r\n\t * mask changes.\r\n\t */\r\n\tprotected updateSeriesMasks(): void {\r\n\t\tsuper.updateSeriesMasks();\r\n\t\tif ($utils.isIE()) {\r\n\t\t\tlet columnsContainer = this.columnsContainer;\r\n\t\t\tlet mask = columnsContainer.mask;\r\n\t\t\tcolumnsContainer.mask = undefined;\r\n\t\t\tcolumnsContainer.mask = mask;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Depth of the 3D chart / columns in pixels.\r\n\t *\r\n\t * @param value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value);\r\n\t\tthis.fixLayout();\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle the chart is viewed at.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param value  Angle\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tthis.fixLayout();\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angle\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * A calculated horizontal 3D offset (px).\r\n\t *\r\n\t * @readonly\r\n\t * @return Offset (px)\r\n\t */\r\n\tpublic get dx3D(): number {\r\n\t\treturn $math.cos(this.angle) * this.depth;\r\n\t}\r\n\r\n\t/**\r\n\t * A calculated vertical 3D offset (px).\r\n\t *\r\n\t * @readonly\r\n\t * @return Offset (px)\r\n\t */\r\n\tpublic get dy3D(): number {\r\n\t\treturn -$math.sin(this.angle) * this.depth;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates layout\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateLayout() {\r\n\t\tsuper.validateLayout();\r\n\t\tthis.fixColumns();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the layout (padding and scrollbar positions) to accommodate for\r\n\t * 3D depth and angle.\r\n\t */\r\n\tprotected fixLayout(): void {\r\n\r\n\t\tthis.chartContainer.marginTop = -this.dy3D;\r\n\t\tthis.chartContainer.paddingRight = this.dx3D;\r\n\r\n\t\tif (this.scrollbarX) {\r\n\t\t\tthis.scrollbarX.dy = this.dy3D;\r\n\t\t\tthis.scrollbarX.dx = this.dx3D;\r\n\t\t}\r\n\r\n\t\tif (this.scrollbarY) {\r\n\t\t\tthis.scrollbarY.dy = this.dy3D;\r\n\t\t\tthis.scrollbarY.dx = this.dx3D;\r\n\t\t}\r\n\r\n\t\tthis.fixColumns();\r\n\r\n\t\tsuper.fixLayout();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates column positions, offset and dimensions based on chart's angle\r\n\t * and depth.\r\n\t */\r\n\tprotected fixColumns(): void {\r\n\t\tlet count: number = 1;\r\n\t\tlet i = 0;\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries3D) {\r\n\r\n\t\t\t\tif (!series.clustered && i > 0) {\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tseries.depthIndex = count - 1;\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet s: number = 0;\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries3D) {\r\n\r\n\t\t\t\tseries.depth = this.depth / (count);\r\n\t\t\t\tseries.angle = this.angle;\r\n\t\t\t\tif (series.columnsContainer == this.columnsContainer) {\r\n\t\t\t\t\tseries.dx = this.depth / (count) * $math.cos(this.angle) * (series.depthIndex);\r\n\t\t\t\t\tseries.dy = -this.depth / (count) * $math.sin(this.angle) * (series.depthIndex);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet inversed = false;\r\n\t\t\t\tif ((series.baseAxis == series.xAxis && series.xAxis.renderer.inversed) || (series.baseAxis == series.yAxis && series.yAxis.renderer.inversed)) {\r\n\t\t\t\t\tinversed = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet i: number = 1;\r\n\t\t\t\tseries.dataItems.each((dataItem) => {\r\n\t\t\t\t\tlet column = dataItem.column;\r\n\t\t\t\t\tif (column) {\r\n\t\t\t\t\t\tif (inversed) {\r\n\t\t\t\t\t\t\tcolumn.zIndex = 1000 * (1000 - i) + s - series.depthIndex * 100;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tcolumn.zIndex = 1000 * i + s - series.depthIndex * 100;\r\n\t\t\t\t\t\t}\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\ti++;\r\n\t\t\t\t});\r\n\t\t\t\tif (inversed) {\r\n\t\t\t\t\ts--;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\ts++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.maskColumns();\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"ColumnSeries3D\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\tprotected maskColumns() {\r\n\t\tlet w: number = this.plotContainer.pixelWidth;\r\n\t\tlet h: number = this.plotContainer.pixelHeight;\r\n\r\n\t\tlet dx: number = this.dx3D;\r\n\t\tlet dy: number = this.dy3D;\r\n\r\n\t\tlet path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: dx, y: dy }) + $path.lineTo({ x: w + dx, y: dy }) + $path.lineTo({ x: w + dx, y: h + dy }) + $path.lineTo({ x: w, y: h }) + $path.lineTo({ x: w, y: h }) + $path.lineTo({ x: 0, y: h }) + $path.closePath();\r\n\r\n\t\tlet columnsContainer = this.columnsContainer;\r\n\t\tif (columnsContainer && columnsContainer.mask) {\r\n\t\t\tcolumnsContainer.mask.path = path;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChart3D\"] = XYChart3D;\r\n","/**\r\n * HeatLegend module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerEvents, IContainerAdapters } from \"../../core/Container\";\r\nimport { Series } from \"../series/Series\";\r\nimport { LinearGradient } from \"../../core/rendering/fills/LinearGradient\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { toColor, Color } from \"../../core/utils/Color\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { ValueAxis } from \"../../charts/axes/ValueAxis\";\r\nimport { AxisRendererX } from \"../../charts/axes/AxisRendererX\";\r\nimport { AxisRendererY } from \"../../charts/axes/AxisRendererY\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $colors from \"../../core/utils/Colors\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[HeatLegend]].\r\n */\r\nexport interface IHeatLegendProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Minimum color\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tminColor?: Color;\r\n\r\n\t/**\r\n\t * Minimum value\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tminValue?: number;\r\n\r\n\t/**\r\n\t * Maximum value\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tmaxValue?: number;\r\n\r\n\r\n\t/**\r\n\t * Maximum color\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tmaxColor?: Color;\r\n\r\n\t/**\r\n\t * Number of markers (steps)\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tmarkerCount?: number;\r\n\r\n\r\n\t/**\r\n\t * Orientation\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\torientation?: \"horizontal\" | \"vertical\";\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[HeatLegend]].\r\n */\r\nexport interface IHeatLegendEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[HeatLegend]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IHeatLegendAdapters extends IContainerAdapters, IHeatLegendProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Sankey Diagram.\r\n *\r\n * @see {@link IHeatLegendEvents} for a list of available events\r\n * @see {@link IHeatLegendAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class HeatLegend extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IHeatLegendProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IHeatLegendAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IHeatLegendEvents;\r\n\r\n\t/**\r\n\t * List of heat legend markers (color step rectangles).\r\n\t */\r\n\tpublic markers: ListTemplate<RoundedRectangle>;\r\n\r\n\t/**\r\n\t * Container which holds markers\r\n\t */\r\n\tpublic markerContainer: Container;\r\n\r\n\t/**\r\n\t * Value axis of a heat legend\r\n\t * @ignore\r\n\t */\r\n\tprotected _valueAxis: ValueAxis;\r\n\r\n\t/**\r\n\t * Series of a heat legend\r\n\t * @ignore\r\n\t */\r\n\tprotected _series: Series;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"HeatLegend\";\r\n\r\n\t\tthis.markerContainer = this.createChild(Container);\r\n\t\tthis.markerContainer.shouldClone = false;\r\n\r\n\t\tthis.markerCount = 1;\r\n\r\n\t\t// Create a template container and list for the a marker\r\n\t\tlet marker: RoundedRectangle = new RoundedRectangle();\r\n\t\tmarker.minHeight = 20;\r\n\t\tmarker.minWidth = 20;\r\n\t\tmarker.interactionsEnabled = false;\r\n\t\tmarker.fillOpacity = 1;\r\n\t\tmarker.cornerRadius(0, 0, 0, 0);\r\n\r\n\t\tthis.markerContainer.minHeight = 20;\r\n\t\tthis.markerContainer.minWidth = 20;\r\n\r\n\t\tthis.orientation = \"horizontal\";\r\n\r\n\t\tthis.markers = new ListTemplate<RoundedRectangle>(marker);\r\n\t\tthis._disposers.push(new ListDisposer(this.markers));\r\n\t\tthis._disposers.push(this.markers.template);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\tprotected getMinFromRules(property: string, ) {\r\n\t\tlet series = this.series;\r\n\t\tif (series) {\r\n\t\t\tlet minValue;\r\n\t\t\t$iter.eachContinue(series.heatRules.iterator(), (heatRule) => {\r\n\t\t\t\tif (heatRule.property == property) {\r\n\t\t\t\t\tminValue = heatRule.min;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t})\r\n\t\t\treturn minValue;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected getMaxFromRules(property: string, ) {\r\n\t\tlet series = this.series;\r\n\t\tif (series) {\r\n\t\t\tlet maxValue;\r\n\t\t\t$iter.each(series.heatRules.iterator(), (heatRule) => {\r\n\t\t\t\tif (heatRule.property == property) {\r\n\t\t\t\t\tmaxValue = heatRule.max;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t\treturn maxValue;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\r\n\t\tthis.valueAxis.renderer.inversed = this.reverseOrder;\r\n\r\n\t\tlet series = this.series;\r\n\r\n\t\tlet minColor = this.minColor;\r\n\t\tlet maxColor = this.maxColor;\r\n\r\n\t\tif (!$type.hasValue(minColor)) {\r\n\t\t\tminColor = toColor(this.getMinFromRules(\"fill\"));\r\n\t\t}\r\n\r\n\t\tif (!$type.hasValue(maxColor)) {\r\n\t\t\tmaxColor = toColor(this.getMaxFromRules(\"fill\"));\r\n\t\t}\r\n\r\n\t\tif (series) {\r\n\t\t\tlet seriesFill = series.fill;\r\n\t\t\tif (!$type.hasValue(minColor) && seriesFill instanceof Color) {\r\n\t\t\t\tminColor = seriesFill;\r\n\t\t\t}\r\n\t\t\tif (!$type.hasValue(maxColor) && seriesFill instanceof Color) {\r\n\t\t\t\tmaxColor = seriesFill;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!$type.hasValue(maxColor)) {\r\n\t\t\tmaxColor = toColor(this.getMaxFromRules(\"fill\"));\r\n\t\t}\r\n\r\n\t\tlet minOpacity = $type.toNumber(this.getMinFromRules(\"fillOpacity\"));\r\n\t\tif (!$type.isNumber(minOpacity)) {\r\n\t\t\tminOpacity = 1;\r\n\t\t}\r\n\t\tlet maxOpacity = $type.toNumber(this.getMaxFromRules(\"fillOpacity\"));\r\n\t\tif (!$type.isNumber(maxOpacity)) {\r\n\t\t\tmaxOpacity = 1;\r\n\t\t}\r\n\r\n\r\n\t\tlet minStrokeOpacity = $type.toNumber(this.getMinFromRules(\"strokeOpacity\"));\r\n\t\tif (!$type.isNumber(minStrokeOpacity)) {\r\n\t\t\tminStrokeOpacity = 1;\r\n\t\t}\r\n\t\tlet maxStrokeOpacity = $type.toNumber(this.getMaxFromRules(\"strokeOpacity\"));\r\n\t\tif (!$type.isNumber(maxStrokeOpacity)) {\r\n\t\t\tmaxStrokeOpacity = 1;\r\n\t\t}\r\n\r\n\t\tlet minStroke = toColor(this.getMinFromRules(\"stroke\"));\r\n\t\tlet maxStroke = toColor(this.getMaxFromRules(\"stroke\"));\r\n\r\n\r\n\t\t//if (series) {\r\n\t\tfor (let i = 0; i < this.markerCount; i++) {\r\n\t\t\tlet marker = this.markers.getIndex(i);\r\n\r\n\t\t\tif (!marker) {\r\n\t\t\t\tmarker = this.markers.create();\r\n\t\t\t\tmarker.parent = this.markerContainer;\r\n\t\t\t\tmarker.height = percent(100);\r\n\t\t\t\tmarker.width = percent(100);\r\n\t\t\t}\r\n\r\n\r\n\t\t\tif (this.markerCount == 1) {\r\n\t\t\t\tlet gradient = new LinearGradient();\r\n\t\t\t\tif (this.reverseOrder) {\r\n\t\t\t\t\tgradient.addColor(maxColor, maxOpacity);\r\n\t\t\t\t\tgradient.addColor(minColor, minOpacity);\r\n\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tgradient.addColor(minColor, minOpacity);\r\n\t\t\t\t\tgradient.addColor(maxColor, maxOpacity);\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\t\tgradient.rotation = -90;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tmarker.fill = gradient;\r\n\t\t\t\tif ($type.hasValue(minStroke) && $type.hasValue(maxStroke)) {\r\n\t\t\t\t\tlet strokeGradient = new LinearGradient();\r\n\t\t\t\t\tif (this.reverseOrder) {\r\n\t\t\t\t\t\tstrokeGradient.addColor(maxStroke, maxStrokeOpacity);\r\n\t\t\t\t\t\tstrokeGradient.addColor(minStroke, minStrokeOpacity);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tstrokeGradient.addColor(minStroke, minStrokeOpacity);\r\n\t\t\t\t\t\tstrokeGradient.addColor(maxStroke, maxStrokeOpacity);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\t\t\tstrokeGradient.rotation = -90;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tmarker.stroke = strokeGradient;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet c = i;\r\n\t\t\t\tif (this.reverseOrder) {\r\n\t\t\t\t\tc = this.markerCount - i - 1;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet color = new Color($colors.interpolate(minColor.rgb, maxColor.rgb, c / this.markerCount));\r\n\t\t\t\tmarker.fill = color;\r\n\r\n\t\t\t\tlet opacity = minOpacity + (maxOpacity - minOpacity) * c / this.markerCount;\r\n\t\t\t\tmarker.fillOpacity = opacity;\r\n\r\n\t\t\t\tif ($type.hasValue(minStroke) && $type.hasValue(maxStroke)) {\r\n\t\t\t\t\tlet color = new Color($colors.interpolate(minStroke.rgb, maxStroke.rgb, c / this.markerCount));\r\n\t\t\t\t\tmarker.stroke = color;\r\n\r\n\t\t\t\t\tlet opacity = minStrokeOpacity + (maxStrokeOpacity - minStrokeOpacity) * c / this.markerCount;\r\n\t\t\t\t\tmarker.strokeOpacity = opacity;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet renderer = this.valueAxis.renderer;\r\n\t\tif (this.markerCount > 1) {\r\n\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\trenderer.minGridDistance = this.measuredWidth / this.markerCount;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\trenderer.minGridDistance = this.measuredHeight / this.markerCount;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.valueAxis.invalidate();\r\n\r\n\t\tfor (let i = this.markerCount, len = this.markers.length; i < len; i++) {\r\n\t\t\tthis.markers.getIndex(i).parent = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Min color of a heat legend. If a series is set for the legend, minColor is taken from series.\r\n\t *\r\n\t * @param {Color}\r\n\t */\r\n\tpublic set minColor(value: Color) {\r\n\r\n\t\tif (!(value instanceof Color)) {\r\n\t\t\tvalue = toColor(value);\r\n\t\t}\r\n\r\n\t\tthis.setColorProperty(\"minColor\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns minColor value\r\n\t * @return {Color}\r\n\t */\r\n\tpublic get minColor(): Color {\r\n\t\treturn this.getPropertyValue(\"minColor\");\r\n\t}\r\n\r\n\t/**\r\n\t * Max color of a heat legend. If a series is set for the legend, maxColor is taken from series.\r\n\t *\r\n\t * @param {Color}\r\n\t */\r\n\tpublic set maxColor(value: Color) {\r\n\r\n\t\tif (!(value instanceof Color)) {\r\n\t\t\tvalue = toColor(value);\r\n\t\t}\r\n\r\n\t\tthis.setColorProperty(\"maxColor\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns maxColor value\r\n\t * @return {Color}\r\n\t */\r\n\tpublic get maxColor(): Color {\r\n\t\treturn this.getPropertyValue(\"maxColor\");\r\n\t}\r\n\r\n\t/**\r\n\t * Number of color squares (markers) in the heat legend. If only 1 marker is used, it will be filled with gradient.\r\n\t *\r\n\t * @param {number}\r\n\t */\r\n\tpublic set markerCount(value: number) {\r\n\t\tthis.setPropertyValue(\"markerCount\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns number of color squares (markers).\r\n\t * @return {number}\r\n\t */\r\n\tpublic get markerCount(): number {\r\n\t\treturn this.getPropertyValue(\"markerCount\");\r\n\t}\r\n\r\n\t/**\r\n\t * Minimum value of heat legend's value axis. If a series is set for the legend, min is taken from series.\r\n\t *\r\n\t * @param {number}\r\n\t */\r\n\tpublic set minValue(value: number) {\r\n\t\tthis.setPropertyValue(\"minValue\", value);\r\n\t\tthis.valueAxis.min = value;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns minimum value of heat legend.\r\n\t * @return {number}\r\n\t */\r\n\tpublic get minValue(): number {\r\n\t\treturn this.getPropertyValue(\"minValue\");\r\n\t}\r\n\r\n\t/**\r\n\t * Maximum value of heat legend's value axis. If a series is set for the legend, max is taken from series.\r\n\t *\r\n\t * @param {number}\r\n\t */\r\n\tpublic set maxValue(value: number) {\r\n\t\tthis.setPropertyValue(\"maxValue\", value);\r\n\t\tthis.valueAxis.max = value;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns maximum value of heat legend.\r\n\t * @return {number}\r\n\t */\r\n\tpublic get maxValue(): number {\r\n\t\treturn this.getPropertyValue(\"maxValue\");\r\n\t}\r\n\r\n\t/**\r\n\t* Heat legend orientation. Note, if you change orientation of a heat legend, you must set value axis renderer properties after that, as with orientation renderer changes.\r\n\t*\r\n\t* @param {\"horizontal\" | \"vertical\"}\r\n\t*/\r\n\tpublic set orientation(value: \"horizontal\" | \"vertical\") {\r\n\t\tthis.setPropertyValue(\"orientation\", value, true);\r\n\t\tlet markerContainer = this.markerContainer;\r\n\t\tlet valueAxis = this.valueAxis;\r\n\r\n\t\t// HORIZONTAL\r\n\t\tif (value == \"horizontal\") {\r\n\t\t\tif (!$type.hasValue(this.width)) {\r\n\t\t\t\tthis.width = 200;\r\n\t\t\t}\r\n\t\t\tthis.height = undefined;\r\n\r\n\t\t\tvalueAxis.width = percent(100);\r\n\t\t\tvalueAxis.height = undefined;\r\n\t\t\tvalueAxis.tooltip.pointerOrientation = \"vertical\";\r\n\r\n\t\t\tthis.layout = \"vertical\";\r\n\t\t\tmarkerContainer.width = percent(100);\r\n\t\t\tmarkerContainer.height = undefined;\r\n\t\t\tif (!(valueAxis.renderer instanceof AxisRendererX)) {\r\n\t\t\t\tvalueAxis.renderer = new AxisRendererX();\r\n\t\t\t}\r\n\t\t}\r\n\t\t// VERTICAL\r\n\t\telse {\r\n\t\t\tif (!$type.hasValue(this.height)) {\r\n\t\t\t\tthis.height = 200;\r\n\t\t\t}\r\n\t\t\tthis.width = undefined;\r\n\t\t\tthis.layout = \"horizontal\";\r\n\t\t\tmarkerContainer.width = undefined;\r\n\t\t\tmarkerContainer.height = percent(100);\r\n\t\t\tvalueAxis.height = percent(100);\r\n\t\t\tvalueAxis.width = undefined;\r\n\t\t\tvalueAxis.tooltip.pointerOrientation = \"horizontal\";\r\n\r\n\t\t\tif (!(valueAxis.renderer instanceof AxisRendererY)) {\r\n\t\t\t\tvalueAxis.renderer = new AxisRendererY();\r\n\t\t\t}\r\n\t\t\tvalueAxis.renderer.inside = true;\r\n\t\t\tvalueAxis.renderer.labels.template.inside = true;\r\n\r\n\t\t\tthis.markerContainer.reverseOrder = true;\r\n\t\t}\r\n\r\n\t\tlet renderer = valueAxis.renderer;\r\n\t\trenderer.grid.template.disabled = true;\r\n\t\trenderer.axisFills.template.disabled = true;\r\n\t\trenderer.baseGrid.disabled = true;\r\n\t\trenderer.labels.template.padding(2, 3, 2, 3);\r\n\r\n\t\trenderer.minHeight = undefined;\r\n\t\trenderer.minWidth = undefined;\r\n\r\n\t\tthis.markerContainer.layout = value;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns orientation value.\r\n\t *\r\n\t * @return {\"horizontal\" | \"vertical\"}\r\n\t */\r\n\tpublic get orientation(): \"horizontal\" | \"vertical\" {\r\n\t\treturn this.getPropertyValue(\"orientation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a value axis of heat legend. Value axis for heat legend is created automatically.\r\n\t * @param {ValueAxis}\r\n\t */\r\n\tpublic set valueAxis(valueAxis: ValueAxis) {\r\n\r\n\t\tthis._valueAxis = valueAxis;\r\n\r\n\t\tvalueAxis.parent = this;\r\n\t\tvalueAxis.strictMinMax = true;\r\n\t\tthis.orientation = this.orientation;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns valueAxis value.\r\n\t * @return {ValueAxis}\r\n\t */\r\n\tpublic get valueAxis(): ValueAxis {\r\n\t\tif (!this._valueAxis) {\r\n\t\t\tthis.valueAxis = this.createChild(ValueAxis);\r\n\t\t\tthis.valueAxis.shouldClone = false;\r\n\t\t}\r\n\t\treturn this._valueAxis;\r\n\t}\r\n\r\n\t/**\r\n\t * You can set series for heat legend. It will take min, max, minColor and maxColor values from this series.\r\n\t * @param series\r\n\t */\r\n\tset series(series: Series) {\r\n\t\tthis._series = series;\r\n\r\n\t\tlet dataField = \"value\";\r\n\r\n\t\ttry {\r\n\t\t\tlet dataFieldDefined = series.heatRules.getIndex(0).dataField;\r\n\t\t\tif (dataFieldDefined) {\r\n\t\t\t\tdataField = dataFieldDefined;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (err) {\r\n\r\n\t\t}\r\n\r\n\t\tthis.updateMinMax(series.dataItem.values[dataField].low, series.dataItem.values[dataField].high);\r\n\r\n\t\tseries.dataItem.events.on(\"calculatedvaluechanged\", (event) => {\r\n\t\t\tthis.updateMinMax(series.dataItem.values[dataField].low, series.dataItem.values[dataField].high);\r\n\t\t}, undefined, false);\r\n\r\n\t\tseries.heatRules.events.on(\"inserted\", this.invalidate, this, false);\r\n\t\tseries.heatRules.events.on(\"removed\", this.invalidate, this, false);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns series value.\r\n\t * @return {Series}\r\n\t */\r\n\tget series(): Series {\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates min/max of value axis.\r\n\t * @ignore\r\n\t */\r\n\tprotected updateMinMax(min: number, max: number) {\r\n\t\tlet valueAxis = this.valueAxis;\r\n\t\tif (!$type.isNumber(this.minValue)) {\r\n\t\t\tvalueAxis.min = min;\r\n\t\t\tvalueAxis.invalidate();\r\n\t\t}\r\n\t\tif (!$type.isNumber(this.maxValue)) {\r\n\t\t\tvalueAxis.max = max;\r\n\t\t\tvalueAxis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isString(config.series)) {\r\n\t\t\t\tif ($type.isString(config.series)) {\r\n\t\t\t\t\tif (this.map.hasKey(config.series)) {\r\n\t\t\t\t\t\tconfig.series = this.map.getKey(config.series);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlet seriesId = config.series;\r\n\t\t\t\t\t\tconst disposer = this.map.events.on(\"insertKey\", function(ev) {\r\n\t\t\t\t\t\t\tif (ev.key == seriesId) {\r\n\t\t\t\t\t\t\t\tthis.series = ev.newValue;\r\n\t\t\t\t\t\t\t\tdisposer.dispose();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}, this);\r\n\t\t\t\t\t\tthis._disposers.push(disposer);\r\n\t\t\t\t\t\tdelete config.series;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n}\r\n\r\n\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"HeatLegend\"] = HeatLegend;\r\n","/**\r\n * Module that defines everything related to building Candlesticks.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Candlestick]].\r\n */\r\nexport interface ICandlestickProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[Candlestick]].\r\n */\r\nexport interface ICandlestickEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Candlestick]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICandlestickAdapters extends IColumnAdapters, ICandlestickProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates Candlesticks.\r\n *\r\n * @see {@link ICandlestickEvents} for a list of available events\r\n * @see {@link ICandlestickAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class Candlestick extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICandlestickProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICandlestickAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICandlestickEvents;\r\n\r\n\t/**\r\n\t * Low line element\r\n\t */\r\n\tpublic lowLine: Line;\r\n\r\n\t/**\r\n\t * High line element\r\n\t */\r\n\tpublic highLine: Line;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Candlestick\";\r\n\t\tthis.layout = \"none\";\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createAssets() {\r\n\t\tsuper.createAssets();\r\n\r\n\t\tthis.lowLine = this.createChild(Line);\r\n\t\tthis.lowLine.shouldClone = false;\r\n\r\n\t\tthis.highLine = this.createChild(Line);\r\n\t\tthis.highLine.shouldClone = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[Candlestick]].\r\n\t *\r\n\t * @param source Source Candlestick\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.lowLine) {\r\n\t\t\tthis.lowLine.copyFrom(source.lowLine);\r\n\t\t}\r\n\t\tif (this.highLine) {\r\n\t\t\tthis.highLine.copyFrom(source.highLine);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Candlestick\"] = Candlestick;\r\n","/**\r\n * Candlestick Series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, ColumnSeriesDataItem, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents } from \"./ColumnSeries\";\r\nimport { GroupField, IXYSeriesGroupFields } from \"./XYSeries\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Candlestick } from \"../elements/Candlestick\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { LegendDataItem } from \"../../charts/Legend\";\r\nimport { CalculatedValue } from \"../../core/Component\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CandlestickSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CandlestickSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t */\r\n\tpublic _column: Candlestick;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @todo Disabled to work around TS bug (see if we can re-enable it again)\r\n\t */\r\n\t//public _component!: CandlestickSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.values.lowValueX = {};\r\n\t\tthis.values.lowValueY = {};\r\n\t\tthis.values.highValueX = {};\r\n\t\tthis.values.highValueY = {};\r\n\r\n\t\tthis.className = \"CandlestickSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Low value for horizontal axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set lowValueX(value: number) {\r\n\t\tthis.setValue(\"lowValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get lowValueX(): number {\r\n\t\treturn this.values.lowValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Low value for vertical axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set lowValueY(value: number) {\r\n\t\tthis.setValue(\"lowValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get lowValueY(): number {\r\n\t\treturn this.values.lowValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * High value for horizontal axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set highValueX(value: number) {\r\n\t\tthis.setValue(\"highValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get highValueX(): number {\r\n\t\treturn this.values.highValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * High value for vertical axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set highValueY(value: number) {\r\n\t\tthis.setValue(\"highValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get highValueY(): number {\r\n\t\treturn this.values.highValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Close value for horizontal axis.\r\n\t *\r\n\t * This is an alias for `valueX` added for convenience only.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set closeValueX(value: number) {\r\n\t\tthis.setValue(\"valueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get closeValueX(): number {\r\n\t\treturn this.values.valueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Close value for vertical axis.\r\n\t *\r\n\t * This is an alias for `valueX` added for convenience only.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set closeValueY(value: number) {\r\n\t\tthis.setValue(\"valueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get closeValueY(): number {\r\n\t\treturn this.values.valueY.value;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesDataFields extends IColumnSeriesDataFields {\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for horizontal axis.\r\n\t */\r\n\tlowValueX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for vertical axis.\r\n\t */\r\n\tlowValueY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high numeric value for horizontal axis.\r\n\t */\r\n\thighValueX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for vertical axis.\r\n\t */\r\n\thighValueY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low date for horizontal axis.\r\n\t */\r\n\tlowDateX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low date for vertical axis.\r\n\t */\r\n\tlowDateY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high date for horizontal axis.\r\n\t */\r\n\thighDateX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high date for vertical axis.\r\n\t */\r\n\thighDateY?: string;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a horizontal axis high value for\r\n\t * the item.\r\n\t */\r\n\thighValueXShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a horizontal axis low value for\r\n\t * the item.\r\n\t */\r\n\tlowValueXShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a vertical axis low value for\r\n\t * the item.\r\n\t */\r\n\tlowValueYShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a vertical axis high value for\r\n\t * the item.\r\n\t */\r\n\thighValueYShow?: CalculatedValue;\r\n\r\n}\r\n\r\n/**\r\n * Defines data fields that can be calculated for aggregate values.\r\n * \r\n * @since 4.7.0\r\n */\r\nexport interface ICandlestickSeriesGroupFields extends IXYSeriesGroupFields {\r\n\r\n\t/**\r\n\t * Indicates how to calculate aggregate value for `lowValueX` data field.\r\n\t *\r\n\t * @default \"low\"\r\n\t */\r\n\tlowValueX?: GroupField;\r\n\r\n\t/**\r\n\t * Indicates how to calculate aggregate value for `lowValueY` data field.\r\n\t *\r\n\t * @default \"low\"\r\n\t */\r\n\tlowValueY?: GroupField;\r\n\r\n\t/**\r\n\t * Indicates how to calculate aggregate value for `highValueX` data field.\r\n\t *\r\n\t * @default \"high\"\r\n\t */\r\n\thighValueX?: GroupField;\r\n\r\n\t/**\r\n\t * Indicates how to calculate aggregate value for `highValueY` data field.\r\n\t *\r\n\t * @default \"high\"\r\n\t */\r\n\thighValueY?: GroupField;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CandlestickSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICandlestickSeriesAdapters extends IColumnSeriesAdapters, ICandlestickSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a candlestick graph.\r\n *\r\n * @see {@link ICandlestickSeriesEvents} for a list of available Events\r\n * @see {@link ICandlestickSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class CandlestickSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Defines type of the group fields.\r\n\t * \r\n\t * @ignore\r\n\t * @since 4.7.0\r\n\t */\r\n\tpublic _groupFields: ICandlestickSeriesGroupFields;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: CandlestickSeriesDataItem;\r\n\r\n\t/**\r\n\t * Sets type of the column.\r\n\t */\r\n\tpublic _column: Candlestick;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: ICandlestickSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICandlestickSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICandlestickSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICandlestickSeriesEvents;\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for horizontal axis.\r\n\t */\r\n\tprotected _xLowField: $type.Keyof<this[\"_dataFields\"]>;\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for vertical axis.\r\n\t */\r\n\tprotected _yLowField: $type.Keyof<this[\"_dataFields\"]>;\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for horizontal axis.\r\n\t */\r\n\tprotected _xHighField: $type.Keyof<this[\"_dataFields\"]>;\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for vertical axis.\r\n\t */\r\n\tprotected _yHighField: $type.Keyof<this[\"_dataFields\"]>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CandlestickSeries\";\r\n\r\n\t\tthis.groupFields.lowValueX = \"low\";\r\n\t\tthis.groupFields.lowValueY = \"low\";\r\n\r\n\t\tthis.groupFields.highValueX = \"high\";\r\n\t\tthis.groupFields.highValueY = \"high\";\r\n\r\n\t\tthis.strokeOpacity = 1;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\t\tlet positiveColor = interfaceColors.getFor(\"positive\");\r\n\t\tlet negativeColor = interfaceColors.getFor(\"negative\");\r\n\r\n\t\tthis.dropFromOpenState.properties.fill = negativeColor;\r\n\t\tthis.dropFromOpenState.properties.stroke = negativeColor;\r\n\r\n\t\tthis.riseFromOpenState.properties.fill = positiveColor;\r\n\t\tthis.riseFromOpenState.properties.stroke = positiveColor;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Candlestick Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new CandlestickSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\t\tthis.validateCandlestick(dataItem);\r\n\t}\r\n\r\n\tprotected validateCandlestick(dataItem: this[\"dataItem\"]) {\r\n\t\tlet column: Candlestick = dataItem.column;\r\n\t\tif (column) {\r\n\t\t\tlet lowLine = column.lowLine;\r\n\t\t\tlet highLine = column.highLine;\r\n\r\n\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\tlet x: number = column.pixelWidth / 2;\r\n\r\n\t\t\t\tlowLine.x = x;\r\n\t\t\t\thighLine.x = x;\r\n\r\n\t\t\t\tlet open = dataItem.getWorkingValue(this.yOpenField);\r\n\t\t\t\tlet close = dataItem.getWorkingValue(this.yField);\r\n\r\n\t\t\t\tlet yOpen = this.yAxis.getY(dataItem, this.yOpenField);\r\n\t\t\t\tlet yClose = this.yAxis.getY(dataItem, this.yField);\r\n\t\t\t\tlet yLow = this.yAxis.getY(dataItem, this.yLowField);\r\n\t\t\t\tlet yHigh = this.yAxis.getY(dataItem, this.yHighField);\r\n\r\n\t\t\t\tlet pixelY = column.pixelY;\r\n\r\n\t\t\t\tlowLine.y1 = yLow - pixelY;\r\n\t\t\t\thighLine.y1 = yHigh - pixelY;\r\n\r\n\t\t\t\tif (open < close) {\r\n\t\t\t\t\tlowLine.y2 = yOpen - pixelY;\r\n\t\t\t\t\thighLine.y2 = yClose - pixelY;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlowLine.y2 = yClose - pixelY;\r\n\t\t\t\t\thighLine.y2 = yOpen - pixelY;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tlet y: number = column.pixelHeight / 2;\r\n\r\n\t\t\t\tlowLine.y = y;\r\n\t\t\t\thighLine.y = y;\r\n\r\n\t\t\t\tlet open = dataItem.getWorkingValue(this.xOpenField);\r\n\t\t\t\tlet close = dataItem.getWorkingValue(this.xField);\r\n\r\n\t\t\t\tlet xOpen = this.xAxis.getX(dataItem, this.xOpenField);\r\n\t\t\t\tlet xClose = this.xAxis.getX(dataItem, this.xField);\r\n\t\t\t\tlet xLow = this.xAxis.getX(dataItem, this.xLowField);\r\n\t\t\t\tlet xHigh = this.xAxis.getX(dataItem, this.xHighField);\r\n\r\n\t\t\t\tlet pixelX = column.pixelX;\r\n\r\n\t\t\t\tlowLine.x1 = xLow - pixelX;\r\n\t\t\t\thighLine.x1 = xHigh - pixelX;\r\n\r\n\t\t\t\tif (open < close) {\r\n\t\t\t\t\tlowLine.x2 = xOpen - pixelX;\r\n\t\t\t\t\thighLine.x2 = xClose - pixelX;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlowLine.x2 = xClose - pixelX;\r\n\t\t\t\t\thighLine.x2 = xOpen - pixelX;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\t// LOW LINE\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (rangeColumn) {\r\n\t\t\t\t\tlet rangeLowLine = rangeColumn.lowLine;\r\n\t\t\t\t\trangeLowLine.x = lowLine.x;\r\n\t\t\t\t\trangeLowLine.y = lowLine.y;\r\n\t\t\t\t\trangeLowLine.x1 = lowLine.x1;\r\n\t\t\t\t\trangeLowLine.x2 = lowLine.x2;\r\n\t\t\t\t\trangeLowLine.y1 = lowLine.y1;\r\n\t\t\t\t\trangeLowLine.y2 = lowLine.y2;\r\n\r\n\t\t\t\t\t// HIGH LINE\r\n\t\t\t\t\tlet rangehighLine = rangeColumn.highLine;\r\n\t\t\t\t\trangehighLine.x = highLine.x;\r\n\t\t\t\t\trangehighLine.y = highLine.y;\r\n\t\t\t\t\trangehighLine.x1 = highLine.x1;\r\n\t\t\t\t\trangehighLine.x2 = highLine.x2;\r\n\t\t\t\t\trangehighLine.y1 = highLine.y1;\r\n\t\t\t\t\trangehighLine.y2 = highLine.y2;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for horizontal axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Field name\r\n\t */\r\n\tpublic get xLowField(): string {\r\n\t\treturn this._xLowField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for vertical axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Field name\r\n\t */\r\n\tpublic get yLowField(): string {\r\n\t\treturn this._yLowField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for horizontal axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Field name\r\n\t */\r\n\tpublic get xHighField(): string {\r\n\t\treturn this._xHighField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for vertical axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Field name\r\n\t */\r\n\tpublic get yHighField(): string {\r\n\t\treturn this._yHighField;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up which data fields to use for data access.\r\n\t */\r\n\tprotected defineFields() {\r\n\t\tsuper.defineFields();\r\n\r\n\t\tlet xAxis = this.xAxis;\r\n\t\tlet yAxis = this.yAxis;\r\n\t\tif (xAxis && yAxis) {\r\n\t\t\tif (this.baseAxis == xAxis) {\r\n\t\t\t\tlet yAxisFieldName: string = $utils.capitalize(yAxis.axisFieldName);\r\n\t\t\t\tthis._yLowField = <$type.Keyof<this[\"_dataFields\"]>>(\"low\" + yAxisFieldName + \"Y\");\r\n\t\t\t\tthis._yHighField = <$type.Keyof<this[\"_dataFields\"]>>(\"high\" + yAxisFieldName + \"Y\");\r\n\t\t\t}\r\n\r\n\t\t\tif (this.baseAxis == yAxis) {\r\n\t\t\t\tlet xAxisFieldName: string = $utils.capitalize(xAxis.axisFieldName);\r\n\t\t\t\tthis._xLowField = <$type.Keyof<this[\"_dataFields\"]>>(\"low\" + xAxisFieldName + \"X\");\r\n\t\t\t\tthis._xHighField = <$type.Keyof<this[\"_dataFields\"]>>(\"high\" + xAxisFieldName + \"X\");\r\n\t\t\t}\r\n\r\n\t\t\tthis.addValueField(xAxis, <any>this._xValueFields, <any>this._xLowField);\r\n\t\t\tthis.addValueField(xAxis, <any>this._xValueFields, <any>this._xHighField);\r\n\r\n\t\t\tthis.addValueField(yAxis, <any>this._yValueFields, <any>this._yLowField);\r\n\t\t\tthis.addValueField(yAxis, <any>this._yValueFields, <any>this._yHighField);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: Candlestick = marker.createChild(Candlestick);\r\n\t\tcolumn.shouldClone = false;\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\r\n\t\tlet cw: number;\r\n\t\tlet ch: number;\r\n\r\n\t\tlet highLine: Line = column.lowLine;\r\n\t\tlet lowLine: Line = column.highLine;\r\n\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tcw = w / 3;\r\n\t\t\tch = h;\r\n\r\n\t\t\thighLine.y = h / 2;\r\n\t\t\tlowLine.y = h / 2;\r\n\r\n\t\t\thighLine.x2 = w / 3;\r\n\t\t\tlowLine.x2 = w / 3;\r\n\t\t\tlowLine.x = w / 3 * 2;\r\n\t\t\tcolumn.column.x = w / 3;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcw = w;\r\n\t\t\tch = h / 3;\r\n\t\t\thighLine.x = w / 2;\r\n\t\t\tlowLine.x = w / 2;\r\n\r\n\t\t\thighLine.y2 = h / 3;\r\n\t\t\tlowLine.y2 = h / 3;\r\n\t\t\tlowLine.y = h / 3 * 2;\r\n\t\t\tcolumn.column.y = h / 3;\r\n\t\t}\r\n\t\tcolumn.width = cw;\r\n\t\tcolumn.height = ch;\r\n\r\n\t\t$object.copyProperties(this, marker, visualProperties);\r\n\t\t$object.copyProperties(this.columns.template, column, visualProperties);\r\n\r\n\t\tcolumn.stroke = this.riseFromOpenState.properties.stroke;\r\n\t\tcolumn.fill = column.stroke;\r\n\r\n\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\tlegendDataItem.color = column.fill;\r\n\t\tlegendDataItem.colorOrig = column.fill;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Candlestick();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CandlestickSeries\"] = CandlestickSeries;\r\nregistry.registeredClasses[\"CandlestickSeriesDataItem\"] = CandlestickSeriesDataItem;\r\n","/**\r\n * Module that defines everything related to building OHLCs.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Candlestick, ICandlestickProperties, ICandlestickAdapters, ICandlestickEvents } from \"./Candlestick\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[OHLC]].\r\n */\r\nexport interface IOHLCProperties extends ICandlestickProperties { }\r\n\r\n/**\r\n * Defines events for [[OHLC]].\r\n */\r\nexport interface IOHLCEvents extends ICandlestickEvents { }\r\n\r\n/**\r\n * Defines adapters for [[OHLC]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IOHLCAdapters extends ICandlestickAdapters, IOHLCProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates OHLCs.\r\n *\r\n * @see {@link IOHLCEvents} for a list of available events\r\n * @see {@link IOHLCAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class OHLC extends Candlestick {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IOHLCProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IOHLCAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IOHLCEvents;\r\n\r\n\r\n\t/**\r\n\t * Open line element\r\n\t */\r\n\tpublic openLine: Line;\r\n\r\n\t/**\r\n\t * Close line element\r\n\t */\r\n\tpublic closeLine: Line;\r\n\r\n\t/**\r\n\t * High-low line element\r\n\t */\r\n\tpublic highLowLine: Line;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"OHLC\";\r\n\t\tthis.layout = \"none\";\r\n\t}\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createAssets() {\r\n\t\t//super.createAssets();\r\n\r\n\t\tthis.openLine = this.createChild(Line);\r\n\t\tthis.openLine.shouldClone = false;\r\n\r\n\t\tthis.highLowLine = this.createChild(Line);\r\n\t\tthis.highLowLine.shouldClone = false;\r\n\r\n\t\tthis.closeLine = this.createChild(Line);\r\n\t\tthis.closeLine.shouldClone = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[OHLC]].\r\n\t *\r\n\t * @param source Source OHLC\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.openLine) {\r\n\t\t\tthis.openLine.copyFrom(source.openLine);\r\n\t\t}\r\n\t\tif (this.highLowLine) {\r\n\t\t\tthis.highLowLine.copyFrom(source.highLowLine);\r\n\t\t}\r\n\t\tif (this.closeLine) {\r\n\t\t\tthis.closeLine.copyFrom(source.closeLine);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"OHLC\"] = OHLC;\r\n","/**\r\n * Candlestick Series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { CandlestickSeries, CandlestickSeriesDataItem, ICandlestickSeriesDataFields, ICandlestickSeriesProperties, ICandlestickSeriesAdapters, ICandlestickSeriesEvents } from \"./CandlestickSeries\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { OHLC } from \"../elements/OHLC\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { LegendDataItem } from \"../../charts/Legend\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[OHLCSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class OHLCSeriesDataItem extends CandlestickSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the OHLC elements.\r\n\t */\r\n\tpublic _column: OHLC;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @todo Disabled to work around TS bug (see if we can re-enable it again)\r\n\t */\r\n\t//public _component!: OHLCSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"OHLCSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[OHLCSeries]].\r\n */\r\nexport interface IOHLCSeriesDataFields extends ICandlestickSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[OHLCSeries]].\r\n */\r\nexport interface IOHLCSeriesProperties extends ICandlestickSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[OHLCSeries]].\r\n */\r\nexport interface IOHLCSeriesEvents extends ICandlestickSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[OHLCSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IOHLCSeriesAdapters extends ICandlestickSeriesAdapters, IOHLCSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a candlestick graph.\r\n *\r\n * @see {@link IOHLCSeriesEvents} for a list of available Events\r\n * @see {@link IOHLCSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class OHLCSeries extends CandlestickSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: OHLCSeriesDataItem;\r\n\r\n\t/**\r\n\t * Type of column.\r\n\t */\r\n\tpublic _column: OHLC;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IOHLCSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IOHLCSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IOHLCSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IOHLCSeriesEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"OHLCSeries\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"OHLC Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new OHLCSeriesDataItem();\r\n\t}\r\n\r\n\r\n\tprotected validateCandlestick(dataItem: this[\"_dataItem\"]) {\r\n\t\tlet column: OHLC = dataItem.column;\r\n\t\tif (column) {\r\n\t\t\tlet openLine = column.openLine;\r\n\t\t\tlet highLowLine = column.highLowLine;\r\n\t\t\tlet closeLine = column.closeLine;\r\n\r\n\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\tlet x: number = column.pixelWidth / 2;\r\n\t\t\t\thighLowLine.x = x;\r\n\r\n\t\t\t\t// TODO can these be removed ?\r\n\t\t\t\tdataItem.getWorkingValue(this.yOpenField);\r\n\t\t\t\tdataItem.getWorkingValue(this.yField);\r\n\r\n\t\t\t\tlet yOpen = this.yAxis.getY(dataItem, this.yOpenField);\r\n\t\t\t\tlet yClose = this.yAxis.getY(dataItem, this.yField);\r\n\t\t\t\tlet yLow = this.yAxis.getY(dataItem, this.yLowField);\r\n\t\t\t\tlet yHigh = this.yAxis.getY(dataItem, this.yHighField);\r\n\r\n\t\t\t\tlet pixelY = column.pixelY;\r\n\r\n\t\t\t\topenLine.y1 = yOpen - pixelY;\r\n\t\t\t\topenLine.y2 = yOpen - pixelY;\r\n\t\t\t\topenLine.x1 = 0;\r\n\t\t\t\topenLine.x2 = x;\r\n\r\n\t\t\t\tcloseLine.y1 = yClose - pixelY;\r\n\t\t\t\tcloseLine.y2 = yClose - pixelY;\r\n\t\t\t\tcloseLine.x1 = x;\r\n\t\t\t\tcloseLine.x2 = 2 * x;\r\n\r\n\t\t\t\thighLowLine.y1 = yHigh - pixelY;\r\n\t\t\t\thighLowLine.y2 = yLow - pixelY;\r\n\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tlet y: number = column.pixelHeight / 2;\r\n\r\n\t\t\t\thighLowLine.y = y;\r\n\r\n\t\t\t\t// TODO can these be removed ?\r\n\t\t\t\tdataItem.getWorkingValue(this.xOpenField);\r\n\t\t\t\tdataItem.getWorkingValue(this.xField);\r\n\r\n\t\t\t\tlet xOpen = this.xAxis.getX(dataItem, this.xOpenField);\r\n\t\t\t\tlet xClose = this.xAxis.getX(dataItem, this.xField);\r\n\t\t\t\tlet xLow = this.xAxis.getX(dataItem, this.xLowField);\r\n\t\t\t\tlet xHigh = this.xAxis.getX(dataItem, this.xHighField);\r\n\r\n\t\t\t\tlet pixelX = column.pixelX;\r\n\r\n\t\t\t\topenLine.x1 = xOpen - pixelX;\r\n\t\t\t\topenLine.x2 = xOpen - pixelX;\r\n\t\t\t\topenLine.y1 = y;\r\n\t\t\t\topenLine.y2 = 2 * y;\r\n\r\n\t\t\t\tcloseLine.x1 = xClose - pixelX;\r\n\t\t\t\tcloseLine.x2 = xClose - pixelX;\r\n\t\t\t\tcloseLine.y1 = 0;\r\n\t\t\t\tcloseLine.y2 = y;\r\n\r\n\t\t\t\thighLowLine.x1 = xHigh - pixelX;\r\n\t\t\t\thighLowLine.x2 = xLow - pixelX;\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (rangeColumn) {\r\n\t\t\t\t\tlet rangeOpenLine = rangeColumn.openLine;\r\n\t\t\t\t\trangeOpenLine.x = openLine.x;\r\n\t\t\t\t\trangeOpenLine.y = openLine.y;\r\n\t\t\t\t\trangeOpenLine.x1 = openLine.x1;\r\n\t\t\t\t\trangeOpenLine.x2 = openLine.x2;\r\n\t\t\t\t\trangeOpenLine.y1 = openLine.y1;\r\n\t\t\t\t\trangeOpenLine.y2 = openLine.y2;\r\n\r\n\t\t\t\t\tlet rangeCloseLine = rangeColumn.closeLine;\r\n\t\t\t\t\trangeCloseLine.x = closeLine.x;\r\n\t\t\t\t\trangeCloseLine.y = closeLine.y;\r\n\t\t\t\t\trangeCloseLine.x1 = closeLine.x1;\r\n\t\t\t\t\trangeCloseLine.x2 = closeLine.x2;\r\n\t\t\t\t\trangeCloseLine.y1 = closeLine.y1;\r\n\t\t\t\t\trangeCloseLine.y2 = closeLine.y2;\r\n\r\n\t\t\t\t\tlet rangeHighLowLine = rangeColumn.highLowLine;\r\n\t\t\t\t\trangeHighLowLine.x = highLowLine.x;\r\n\t\t\t\t\trangeHighLowLine.y = highLowLine.y;\r\n\t\t\t\t\trangeHighLowLine.x1 = highLowLine.x1;\r\n\t\t\t\t\trangeHighLowLine.x2 = highLowLine.x2;\r\n\t\t\t\t\trangeHighLowLine.y1 = highLowLine.y1;\r\n\t\t\t\t\trangeHighLowLine.y2 = highLowLine.y2;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: OHLC = marker.createChild(OHLC);\r\n\t\tcolumn.shouldClone = false;\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\r\n\t\tlet cw: number;\r\n\t\tlet ch: number;\r\n\r\n\t\tlet openLine: Line = column.openLine;\r\n\t\tlet closeLine: Line = column.closeLine;\r\n\t\tlet highLowLine: Line = column.highLowLine;\r\n\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tcw = w / 3;\r\n\t\t\tch = h;\r\n\r\n\t\t\thighLowLine.y = h / 2;\r\n\t\t\thighLowLine.x2 = w;\r\n\r\n\t\t\topenLine.x = w / 3 * 2;\r\n\t\t\topenLine.y2 = h / 2;\r\n\r\n\t\t\tcloseLine.x = w / 3;\r\n\t\t\tcloseLine.y2 = h;\r\n\t\t\tcloseLine.y1 = h / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcw = w;\r\n\t\t\tch = h / 3;\r\n\r\n\t\t\thighLowLine.x = w / 2;\r\n\t\t\thighLowLine.y2 = h;\r\n\r\n\t\t\topenLine.y = h / 3 * 2;\r\n\t\t\topenLine.x2 = w / 2;\r\n\r\n\t\t\tcloseLine.y = h / 3;\r\n\t\t\tcloseLine.x2 = w;\r\n\t\t\tcloseLine.x1 = w / 2;\r\n\t\t}\r\n\t\tcolumn.width = cw;\r\n\t\tcolumn.height = ch;\r\n\r\n\t\t$object.copyProperties(this, marker, visualProperties);\r\n\t\t$object.copyProperties(this.columns.template, column, visualProperties);\r\n\r\n\t\tcolumn.stroke = this.riseFromOpenState.properties.stroke;\r\n\r\n\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\tlegendDataItem.color = column.stroke;\r\n\t\tlegendDataItem.colorOrig = column.stroke;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new OHLC();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"OHLCSeries\"] = OHLCSeries;\r\nregistry.registeredClasses[\"OHLCSeriesDataItem\"] = OHLCSeriesDataItem;\r\n","/**\r\n * Line series segment module.\r\n * @todo Add description about what this is\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ILineSeriesSegmentAdapters, ILineSeriesSegmentEvents, ILineSeriesSegmentProperties, LineSeriesSegment } from \"./LineSeriesSegment\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[StepLineSeriesSegment]].\r\n */\r\nexport interface IStepLineSeriesSegmentProperties extends ILineSeriesSegmentProperties { }\r\n\r\n/**\r\n * Defines events for [[StepLineSeriesSegment]].\r\n */\r\nexport interface IStepLineSeriesSegmentEvents extends ILineSeriesSegmentEvents { }\r\n\r\n/**\r\n * Defines adapters for [[StepLineSeriesSegment]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IStepLineSeriesSegmentAdapters extends ILineSeriesSegmentAdapters, IStepLineSeriesSegmentProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Represents a line series segment.\r\n *\r\n * A line segment can be used to apply different properties to a part of the\r\n * line series, between two data points.\r\n *\r\n * @see {@link IStepLineSeriesSegmentEvents} for a list of available events\r\n * @see {@link IStepLineSeriesSegmentAdapters} for a list of available Adapters\r\n * @todo Example\r\n */\r\nexport class StepLineSeriesSegment extends LineSeriesSegment {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IStepLineSeriesSegmentProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IStepLineSeriesSegmentAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IStepLineSeriesSegmentEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeriesSegment\";\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the series segment.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param points       Points to connect\r\n\t * @param closePoints  ?\r\n\t * @param smoothnessX  Horizontal bezier setting (?)\r\n\t * @param smoothnessY  Vertical bezier setting (?)\r\n\t */\r\n\tpublic drawSegment(points: IPoint[], closePoints: IPoint[], smoothnessX: number, smoothnessY: number, noRisers?: boolean, vertical?: boolean): void {\r\n\t\tif (points.length > 0 && closePoints.length > 0) {\r\n\r\n\t\t\tif (noRisers) {\r\n\t\t\t\tlet path: string = $path.moveTo(points[0]);\r\n\t\t\t\tif (points.length > 0) {\r\n\t\t\t\t\tfor (let i = 1; i < points.length; i++) {\r\n\t\t\t\t\t\tlet point = points[i];\r\n\t\t\t\t\t\tif (i / 2 == Math.round(i / 2)) {\r\n\t\t\t\t\t\t\tpath += $path.moveTo(point);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tpath += $path.lineTo(point);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.strokeSprite.path = path;\r\n\r\n\t\t\t\tif (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n\t\t\t\t\tpath = $path.moveTo(points[0]) + $path.polyline(points);\r\n\t\t\t\t\tpath += $path.lineTo(closePoints[0]) + $path.polyline(closePoints);\r\n\t\t\t\t\tpath += $path.lineTo(points[0]);\r\n\t\t\t\t\tpath += $path.closePath();\r\n\r\n\t\t\t\t\tthis.fillSprite.path = path;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet path: string = $path.moveTo(points[0]) + $path.polyline(points);\r\n\r\n\t\t\t\tthis.strokeSprite.path = path;\r\n\r\n\t\t\t\tif (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n\t\t\t\t\tpath += $path.lineTo(closePoints[0]) + $path.polyline(closePoints);\r\n\t\t\t\t\tpath += $path.lineTo(points[0]);\r\n\t\t\t\t\tpath += $path.closePath();\r\n\r\n\t\t\t\t\tthis.fillSprite.path = path;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse{\r\n\t\t\tthis.strokeSprite.path = \"\";\r\n\t\t\tthis.fillSprite.path = \"\";\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"StepLineSeriesSegment\"] = StepLineSeriesSegment;\r\n","/**\r\n * Step line series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { LineSeries, LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesAdapters, ILineSeriesEvents } from \"./LineSeries\";\r\nimport { StepLineSeriesSegment } from \"./StepLineSeriesSegment\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[StepLineSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class StepLineSeriesDataItem extends LineSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: StepLineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesDataFields extends ILineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesProperties extends ILineSeriesProperties {\r\n\tnoRisers?: boolean;\r\n\r\n\tstartLocation?: number;\r\n\r\n\tendLocation?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesEvents extends ILineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[StepLineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IStepLineSeriesAdapters extends ILineSeriesAdapters, IStepLineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a step line graph.\r\n *\r\n * @see {@link IStepLineSeriesEvents} for a list of available Events\r\n * @see {@link IStepLineSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class StepLineSeries extends LineSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IStepLineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IStepLineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IStepLineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IStepLineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: StepLineSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines type for segement.\r\n\t */\r\n\tpublic _segment: StepLineSeriesSegment;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeries\";\r\n\t\tthis.applyTheme();\r\n\t\tthis.startLocation = 0;\r\n\t\tthis.endLocation = 1;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new StepLineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param points     [description]\r\n\t * @param dataItem   [description]\r\n\t * @param xField     [description]\r\n\t * @param yField     [description]\r\n\t * @param backwards  [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean): void {\r\n\r\n\t\tlet startLocationX:number;\r\n\t\tlet endLocationX:number;\r\n\r\n\t\tlet startLocationY:number;\r\n\t\tlet endLocationY:number;\t\t\r\n\r\n\t\tif(this.baseAxis == this.xAxis){\r\n\t\t\tstartLocationX = this.startLocation;\r\n\t\t\tendLocationX = this.endLocation;\r\n\r\n\t\t\tstartLocationY = this.getAdjustedXLocation(dataItem, this.yOpenField);\r\n\t\t\tendLocationY = this.getAdjustedXLocation(dataItem, this.yField);\r\n\t\t}\r\n\r\n\t\tif(this.baseAxis == this.yAxis){\r\n\t\t\tstartLocationY = this.startLocation;\r\n\t\t\tendLocationY = this.endLocation;\r\n\r\n\t\t\tstartLocationX = this.getAdjustedXLocation(dataItem, this.xOpenField);\r\n\t\t\tendLocationX = this.getAdjustedXLocation(dataItem, this.xField);\t\t\t\r\n\t\t}\r\n\r\n\r\n\t\tlet x0: number = this.xAxis.getX(dataItem, xField, startLocationX);\r\n\t\tlet y0: number = this.yAxis.getY(dataItem, yField, startLocationY);\r\n\r\n\t\tlet x1: number = this.xAxis.getX(dataItem, xField, endLocationX);\r\n\t\tlet y1: number = this.yAxis.getY(dataItem, yField, endLocationY);\r\n\r\n\t\tx0 = $math.fitToRange(x0, -100000, 100000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty0 = $math.fitToRange(y0, -100000, 100000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\tx1 = $math.fitToRange(x1, -100000, 100000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty1 = $math.fitToRange(y1, -100000, 100000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\t// this might make an impression that points are duplicated, and they indeed are, but this is needed to handle gaps in data\r\n\t\tif (!this.noRisers) {\r\n\t\t\tif (points.length > 1) {\r\n\t\t\t\tlet prevPoint: IPoint = points[points.length - 1];\r\n\t\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\t\tif (backwards) {\r\n\t\t\t\t\t\tpoints.push({ x: prevPoint.x, y: y1 });\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tpoints.push({ x: x0, y: prevPoint.y });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\t\tif (backwards) {\r\n\t\t\t\t\t\tpoints.push({ x: x1, y: prevPoint.y });\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tpoints.push({ x: prevPoint.x, y: y0 });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet point0: IPoint = { x: x0, y: y0 };\r\n\t\tlet point1: IPoint = { x: x1, y: y1 };\r\n\r\n\t\tif (backwards) {\r\n\t\t\tpoints.push(point1, point0);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tpoints.push(point0, point1);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Draws the line segment.\r\n\t *\r\n\t * @param segment     Segment\r\n\t * @param points      Segment points\r\n\t * @param closePoints Segment close points\r\n\t */\r\n\tprotected drawSegment(segment: StepLineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tlet vertical = false;\r\n\t\tif (this.yAxis == this.baseAxis) {\r\n\t\t\tvertical = true;\r\n\t\t}\r\n\t\tsegment.drawSegment(points, closePoints, this.tensionX, this.tensionY, this.noRisers, vertical);\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createSegment(): this[\"_segment\"] {\r\n\t\treturn new StepLineSeriesSegment();\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies if step line series should draw only horizontal (or only\r\n\t * vertical, depending on base axis) lines, instead of connecting them with\r\n\t * vertical (or horizontal) lines.\r\n\t *\r\n\t * @default false\r\n\t * @param value  No risers\r\n\t */\r\n\tpublic set noRisers(value: boolean) {\r\n\t\tthis.setPropertyValue(\"noRisers\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return No risers\r\n\t */\r\n\tpublic get noRisers(): boolean {\r\n\t\treturn this.getPropertyValue(\"noRisers\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * start location of the step\r\n\t *\r\n\t * @param value Location (0-1)\r\n\t * @default 0\r\n\t */\r\n\tpublic set startLocation(value: number) {\r\n\t\tthis.setPropertyValue(\"startLocation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get startLocation(): number {\r\n\t\treturn this.getPropertyValue(\"startLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Step end location.\r\n\t *\r\n\t * @param value Location (0-1)\r\n\t * #default 1\r\n\t */\r\n\tpublic set endLocation(value: number) {\r\n\t\tthis.setPropertyValue(\"endLocation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get endLocation(): number {\r\n\t\treturn this.getPropertyValue(\"endLocation\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"StepLineSeries\"] = StepLineSeries;\r\nregistry.registeredClasses[\"StepLineSeriesDataItem\"] = StepLineSeriesDataItem;\r\n","/**\r\n * Module that defines everything related to building RadarColumns.\r\n * It is a container which has radarColumn element which is a Slice.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[RadarColumn]].\r\n */\r\nexport interface IRadarColumnProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[RadarColumn]].\r\n */\r\nexport interface IRadarColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarColumn]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarColumnAdapters extends IColumnAdapters, IRadarColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates RadarColumns.\r\n *\r\n * @see {@link IRadarColumnEvents} for a list of available events\r\n * @see {@link IRadarColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class RadarColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IRadarColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IRadarColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IRadarColumnEvents;\r\n\r\n\r\n\t/**\r\n\t * Radar column element\r\n\t */\r\n\tpublic radarColumn: Slice;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarColumn\";\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createAssets() {\r\n\t\tthis.radarColumn = this.createChild(Slice);\r\n\t\tthis.radarColumn.shouldClone = false;\r\n\t\tthis.radarColumn.strokeOpacity = undefined;\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.radarColumn;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[RadarColumn]].\r\n\t *\r\n\t * @param source Source RadarColumn\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.radarColumn) {\r\n\t\t\tthis.radarColumn.copyFrom(source.radarColumn);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * X coordinate for the slice tooltip.\r\n\t *\r\n\t * @return X\r\n\t * @ignore\r\n\t */\r\n\tpublic getTooltipX(): number {\r\n\t\tlet value = this.getPropertyValue(\"tooltipX\");\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\treturn this.radarColumn.getTooltipX();\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate for the slice tooltip.\r\n\t *\r\n\t * @return Y\r\n\t * @ignore\r\n\t */\r\n\tpublic getTooltipY(): number {\r\n\t\tlet value = this.getPropertyValue(\"tooltipX\");\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\treturn this.radarColumn.getTooltipY();\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarColumn\"] = RadarColumn;\r\n","/**\r\n * Radar column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"../series/ColumnSeries\";\r\nimport { Sprite, visualProperties } from \"../../core/Sprite\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { RadarColumn } from \"../elements/RadarColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport { Percent } from \"../../core/utils/Percent\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $array from \"../../core/utils/Array\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarColumnSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t */\r\n\tpublic _column: RadarColumn;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: RadarColumnSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarColumnSeriesAdapters extends IColumnSeriesAdapters, IRadarColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n *\r\n * @see {@link IRadarColumnSeriesEvents} for a list of available Events\r\n * @see {@link IRadarColumnSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class RadarColumnSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Type of data item.\r\n\t */\r\n\tpublic _dataItem: RadarColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t * Type of column.\r\n\t */\r\n\tpublic _column: RadarColumn;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IRadarColumnSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IRadarColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IRadarColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IRadarColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarColumnSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a RadarColumn element to use as column in radar chart.\r\n\t *\r\n\t * @return RadarColumn.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new RadarColumn();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected disableUnusedColumns(dataItem: ColumnSeriesDataItem) {\r\n\t\tif (dataItem) {\r\n\t\t\tif (dataItem.column) {\r\n\t\t\t\tdataItem.column.__disabled = true;\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn: Sprite = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (rangeColumn) {\r\n\t\t\t\t\trangeColumn.__disabled = true;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\t\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tlet startAngle = this.chart.startAngle;\r\n\t\tlet endAngle = this.chart.endAngle;\r\n\r\n\t\tlet yField: string = this.yField;\r\n\t\tlet yOpenField: string = this.yOpenField;\r\n\t\tlet xField: string = this.xField;\r\n\t\tlet xOpenField: string = this.xOpenField;\r\n\r\n\t\tlet lAngle: number;\r\n\t\tlet rAngle: number;\r\n\r\n\t\tlet tRadius: number;\r\n\t\tlet bRadius: number;\r\n\r\n\t\tlet startLocation = this.getStartLocation(dataItem);\r\n\t\tlet endLocation = this.getEndLocation(dataItem);\r\n\r\n\t\tlet cellAngle = (endAngle - startAngle) / (this.dataItems.length * (this.end - this.start));\r\n\r\n\t\tlet radarColumn = dataItem.column;\r\n\t\tif (!radarColumn) {\r\n\t\t\tradarColumn = this.columns.create();\r\n\t\t\tdataItem.column = radarColumn;\r\n\t\t\t$object.copyProperties(this, radarColumn, visualProperties); // need this \r\n\t\t\t$object.copyProperties(this.columns.template, radarColumn, visualProperties); // second time, no force, so that columns.template would override series properties\t\t\t\r\n\t\t\tdataItem.addSprite(radarColumn);\r\n\t\t\tradarColumn.paper = this.paper; // sometimes pattern is not drawn if is set with adapter without this.\r\n\t\t\tthis.setColumnStates(radarColumn);\r\n\t\t}\r\n\r\n\t\tlet width = radarColumn.width;\r\n\t\tlet percentWidth = 100;\r\n\r\n\t\tif (width instanceof Percent) {\r\n\t\t\tpercentWidth = width.percent;\r\n\t\t}\r\n\r\n\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\tstartLocation += offset;\r\n\t\tendLocation -= offset;\r\n\t\t// two category axes\r\n\t\tif ((this.xAxis instanceof CategoryAxis) && (this.yAxis instanceof CategoryAxis)) {\r\n\t\t\ttRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yField, 0, \"valueY\"), y: this.yAxis.getY(dataItem, yField, 0, \"valueY\") });\r\n\t\t\tbRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yOpenField, 1, \"valueY\"), y: this.yAxis.getY(dataItem, yOpenField, 1, \"valueY\") });\r\n\r\n\t\t\tlAngle = this.xAxis.getAngle(dataItem, xOpenField, 0, \"valueX\");\r\n\t\t\trAngle = this.xAxis.getAngle(dataItem, xField, 1, \"valueX\");\r\n\r\n\t\t\tstartAngle = startAngle + startLocation * cellAngle;\r\n\t\t\tendAngle = endAngle - (1 - endLocation) * cellAngle;\r\n\t\t}\r\n\t\telse if (this.baseAxis == this.xAxis) {\r\n\t\t\ttRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yField, dataItem.locations[yField], \"valueY\"), y: this.yAxis.getY(dataItem, yField, dataItem.locations[yField], \"valueY\") });\r\n\t\t\tbRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yOpenField, dataItem.locations[yOpenField], \"valueY\"), y: this.yAxis.getY(dataItem, yOpenField, dataItem.locations[yOpenField], \"valueY\") });\r\n\r\n\t\t\tlAngle = this.xAxis.getAngle(dataItem, xOpenField, startLocation, \"valueX\");\r\n\t\t\trAngle = this.xAxis.getAngle(dataItem, xField, endLocation, \"valueX\");\r\n\r\n\t\t\tstartAngle = startAngle + startLocation * cellAngle;\r\n\t\t\tendAngle = endAngle - (1 - endLocation) * cellAngle;\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yField, startLocation, \"valueY\"), y: this.yAxis.getY(dataItem, yField, startLocation, \"valueY\") });\r\n\t\t\tbRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yOpenField, endLocation, \"valueY\"), y: this.yAxis.getY(dataItem, yOpenField, endLocation, \"valueY\") });\r\n\r\n\t\t\tlAngle = this.xAxis.getAngle(dataItem, xField, dataItem.locations[xField], \"valueX\");\r\n\r\n\t\t\trAngle = this.xAxis.getAngle(dataItem, xOpenField, dataItem.locations[xOpenField], \"valueX\");\r\n\t\t}\r\n\r\n\t\tif (rAngle < lAngle) {\r\n\t\t\tlet temp = rAngle;\r\n\t\t\trAngle = lAngle;\r\n\t\t\tlAngle = temp;\r\n\t\t}\r\n\r\n\t\tlAngle = $math.fitToRange(lAngle, startAngle, endAngle);\r\n\t\trAngle = $math.fitToRange(rAngle, startAngle, endAngle);\r\n\r\n\t\tlet slice = radarColumn.radarColumn;\r\n\r\n\t\tslice.startAngle = lAngle;\r\n\r\n\t\tlet arc = rAngle - lAngle;\r\n\r\n\t\tif (arc > 0) {\r\n\t\t\tslice.arc = arc;\r\n\t\t\tslice.radius = tRadius;\r\n\t\t\tslice.innerRadius = bRadius;\r\n\t\t\tradarColumn.__disabled = false;\r\n\r\n\t\t\tradarColumn.parent = this.columnsContainer;\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (!rangeColumn) {\r\n\t\t\t\t\trangeColumn = this.columns.create();\r\n\r\n\t\t\t\t\t$object.forceCopyProperties(this.columns.template, rangeColumn, visualProperties);\r\n\t\t\t\t\t$object.copyProperties(axisRange.contents, rangeColumn, visualProperties); // need this because 3d columns are not in the same container\r\n\r\n\t\t\t\t\tif (rangeColumn.dataItem) {\r\n\t\t\t\t\t\t$array.remove(rangeColumn.dataItem.sprites, rangeColumn);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdataItem.addSprite(rangeColumn);\r\n\t\t\t\t\trangeColumn.paper = this.paper; // sometimes pattern is not drawn if is set with adapter without this.\t\t\t\t\t\r\n\t\t\t\t\tthis.setColumnStates(rangeColumn);\r\n\t\t\t\t\tdataItem.rangesColumns.setKey(axisRange.uid, rangeColumn);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet slice = rangeColumn.radarColumn;\r\n\t\t\t\tslice.startAngle = lAngle;\r\n\t\t\t\tslice.arc = arc;\r\n\t\t\t\tslice.radius = tRadius;\r\n\t\t\t\tslice.innerRadius = bRadius;\r\n\r\n\t\t\t\tif (slice.invalid) {\r\n\t\t\t\t\tslice.paper = this.paper;\r\n\t\t\t\t\tslice.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.__disabled = false;\r\n\t\t\t\trangeColumn.parent = axisRange.contents;\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an [[IPoint]] coordinates of the specific Serie's data point.\r\n\t *\r\n\t * @param    dataItem   Data item\r\n\t * @param    xKey       Name of X data field\r\n\t * @param    yKey       Name of Y data field\r\n\t * @param    locationX  X location\r\n\t * @param    locationY  Y location\r\n\t * @param    stackKeyX  ?\r\n\t * @param    stackKeyY  ?\r\n\t * @returns             Coordinates\r\n\t */\r\n\tpublic getPoint(dataItem: RadarColumnSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\r\n\t\tif (!stackKeyX) {\r\n\t\t\tstackKeyX = \"valueX\";\r\n\t\t}\r\n\t\tif (!stackKeyY) {\r\n\t\t\tstackKeyY = \"valueY\";\r\n\t\t}\r\n\r\n\t\tlet x: number = this.yAxis.getX(dataItem, yKey, locationY, stackKeyY);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY, stackKeyY);\r\n\r\n\t\tlet radius: number = $math.getDistance({ x: x, y: y });\r\n\t\t// hack to be able to determine angle later\r\n\t\tif (radius == 0) {\r\n\t\t\tradius = 0.00001;\r\n\t\t}\r\n\r\n\t\tlet angle: number = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX);\r\n\r\n\t\treturn { x: radius * $math.cos(angle), y: radius * $math.sin(angle) };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns an SVG path to be used as a mask for the series.\r\n\t *\r\n\t * @return SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>this.yAxis.renderer;\r\n\t\treturn $path.arc(renderer.startAngle, renderer.endAngle - renderer.startAngle, renderer.pixelRadius, renderer.pixelInnerRadius);\r\n\t}\r\n\r\n\tprotected positionBulletReal(bullet:Sprite, positionX:number, positionY:number){\r\n\t\tlet xAxis = this.xAxis;\r\n\t\tlet yAxis = this.yAxis;\r\n\r\n\t\tif(positionX < xAxis.start || positionX > xAxis.end || positionY < yAxis.start || positionY > yAxis.end){\r\n\t\t\tbullet.visible = false;\r\n\t\t}\r\n\r\n\t\tbullet.moveTo(this.xAxis.renderer.positionToPoint(positionX, positionY));\t\t\r\n\t}\r\n\r\n\tprotected setXAxis(axis: Axis) {\r\n\t\tsuper.setXAxis(axis);\r\n\t\tthis.updateRendererRefs();\r\n\t}\r\n\r\n\tprotected setYAxis(axis: Axis) {\r\n\t\tsuper.setYAxis(axis);\r\n\t\tthis.updateRendererRefs();\r\n\t}\r\n\r\n\tprotected updateRendererRefs() {\r\n\t\tlet rendererX = <AxisRendererCircular>this.xAxis.renderer;\r\n\t\tlet rendererY = <AxisRendererRadial>this.yAxis.renderer;\r\n\r\n\t\trendererX.axisRendererY = rendererY;\r\n\t}\t\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarColumnSeries\"] = RadarColumnSeries;\r\nregistry.registeredClasses[\"RadarColumnSeriesDataItem\"] = RadarColumnSeriesDataItem;\r\n","/**\r\n * Module that defines everything related to building Funnel slices.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[FunnelSlice]].\r\n */\r\nexport interface IFunnelSliceProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Width of the top edge of the slice.\r\n\t */\r\n\ttopWidth?: number | Percent;\r\n\r\n\t/**\r\n\t * Width of the bottom edge of the slice.\r\n\t */\r\n\tbottomWidth?: number | Percent;\r\n\r\n\t/**\r\n\t * A relative distance slice's sides should be bent to.\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\texpandDistance?: number;\r\n\r\n\t/**\r\n\t * Orientation of the slice.\r\n\t */\r\n\torientation?: Orientation;\r\n}\r\n\r\n/**\r\n * Defines events for [[FunnelSlice]].\r\n */\r\nexport interface IFunnelSliceEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[FunnelSlice]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IFunnelSliceAdapters extends IContainerAdapters, IFunnelSliceProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to create [[FunnelSlice]] elements.\r\n *\r\n * @see {@link IFunnelSliceEvents} for a list of available events\r\n * @see {@link IFunnelSliceAdapters} for a list of available adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class FunnelSlice extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IFunnelSliceProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IFunnelSliceAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IFunnelSliceEvents;\r\n\r\n\t/**\r\n\t * Main slice element.\r\n\t */\r\n\tpublic slice: Sprite;\r\n\r\n\t/**\r\n\t * Am anchor point the slice tick line is pointing to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @readonly\r\n\t */\r\n\tpublic tickPoint: IPoint;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.slice = this.createChild(Sprite);\r\n\t\tthis.slice.shouldClone = false;\r\n\t\tthis.slice.setElement(this.paper.add(\"path\"));\r\n\t\tthis.slice.isMeasured = false;\r\n\r\n\t\tthis.orientation = \"vertical\";\r\n\t\tthis.bottomWidth = percent(100);\r\n\t\tthis.topWidth = percent(100);\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.width = 10;\r\n\t\tthis.height = 10;\r\n\r\n\t\tthis.expandDistance = 0;\r\n\r\n\t\tthis.className = \"FunnelSlice\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the element.\r\n\t */\r\n\tprotected draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tlet pt = this.pixelPaddingTop;\r\n\t\tlet pb = this.pixelPaddingBottom;\r\n\t\tlet pr = this.pixelPaddingRight;\r\n\t\tlet pl = this.pixelPaddingLeft;\r\n\r\n\t\tlet w = this.pixelWidth - pr - pl;\r\n\t\tlet h = this.pixelHeight - pt - pb;\r\n\r\n\t\tlet ed = this.expandDistance;\r\n\r\n\t\tlet path = \"\";\r\n\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tlet tw = $utils.relativeToValue(this.topWidth, w);\r\n\t\t\tlet bw = $utils.relativeToValue(this.bottomWidth, w);\r\n\r\n\t\t\tlet tl = { x: (w - tw) / 2 + pl, y: pt };\r\n\t\t\tlet tr = { x: (w + tw) / 2 + pl, y: pt };\r\n\r\n\t\t\tlet br = { x: (w + bw) / 2 + pl, y: pt + h };\r\n\t\t\tlet bl = { x: (w - bw) / 2 + pl, y: pt + h };\r\n\r\n\t\t\tlet cpr = { x: tr.x + (br.x - tr.x) / 2 + ed * h, y: tr.y + 0.5 * h };\r\n\t\t\tlet cpl = { x: tl.x + (bl.x - tl.x) / 2 - ed * h, y: tl.y + 0.5 * h };\r\n\r\n\t\t\tlet qp1 = $path.lineTo(br);\r\n\t\t\tlet qp2 = \"\";\r\n\r\n\t\t\tif(ed != 0){\r\n\t\t\t\tqp1 = $path.quadraticCurveTo(br, cpr);\r\n\t\t\t\tqp2 = $path.quadraticCurveTo(tl, cpl);\r\n\t\t\t}\r\n\r\n\t\t\tpath = $path.moveTo(tl) + $path.lineTo(tr) + qp1 + $path.lineTo(bl) + qp2;\r\n\r\n\t\t\tthis.tickPoint = { x: tr.x + (br.x - tr.x) / 2, y: tr.y + (br.y - tr.y) / 2 };\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet tw = $utils.relativeToValue(this.topWidth, h);\r\n\t\t\tlet bw = $utils.relativeToValue(this.bottomWidth, h);\r\n\r\n\t\t\tlet tt = { x: pl, y: (h - tw) / 2 + pt };\r\n\t\t\tlet tb = { x: pl, y: (h + tw) / 2 + pt };\r\n\r\n\t\t\tlet bt = { x: pl + w, y: (h - bw) / 2 + pt };\r\n\t\t\tlet bb = { x: pl + w, y: (h + bw) / 2 + pt };\r\n\r\n\t\t\tlet cpr = { y: tt.y + (bt.y - tt.y) / 2 - ed * w, x: tt.x + 0.5 * w };\r\n\t\t\tlet cpl = { y: tb.y + (bb.y - tb.y) / 2 + ed * w, x: tb.x + 0.5 * w };\r\n\r\n\t\t\tlet qp1 = $path.lineTo(bt);\r\n\t\t\tlet qp2 = \"\"\r\n\t\t\tif(ed != 0){\r\n\t\t\t\tqp1 = $path.quadraticCurveTo(bt, cpr);\r\n\t\t\t\tqp2 = $path.quadraticCurveTo(tb, cpl);\r\n\t\t\t}\r\n\r\n\t\t\tpath = $path.moveTo(tb) + $path.lineTo(tt) + qp1 + $path.lineTo(bb) + qp2;\r\n\r\n\t\t\tthis.tickPoint = { y: tb.y + (bb.y - tb.y) / 2, x: tb.x + (bb.x - tb.x) / 2 };\r\n\t\t}\r\n\r\n\t\tthis.slice.path = path;\r\n\t\tthis.invalidateLayout();\r\n\t}\r\n\r\n\r\n\tgetPoint(locationX:number, locationY:number):IPoint{\r\n\r\n\t\tlet pt = this.pixelPaddingTop;\r\n\t\tlet pb = this.pixelPaddingBottom;\r\n\t\tlet pr = this.pixelPaddingRight;\r\n\t\tlet pl = this.pixelPaddingLeft;\r\n\r\n\t\tlet w = this.pixelWidth - pr - pl;\r\n\t\tlet h = this.pixelHeight - pt - pb;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tlet tw = $utils.relativeToValue(this.topWidth, w);\r\n\t\t\tlet bw = $utils.relativeToValue(this.bottomWidth, w);\r\n\r\n\t\t\tlet tl = { x: (w - tw) / 2 + pl, y: pt };\r\n\t\t\tlet tr = { x: (w + tw) / 2 + pl, y: pt };\r\n\r\n\t\t\tlet br = { x: (w + bw) / 2 + pl, y: pt + h };\r\n\t\t\tlet bl = { x: (w - bw) / 2 + pl, y: pt + h };\r\n\r\n\t\t\tlet mlx = tl.x + (bl.x - tl.x) * locationY;\r\n\t\t\tlet mrx = tr.x + (br.x - tr.x) * locationY;\r\n\r\n\t\t\treturn { x: mlx + (mrx - mlx) * locationX, y: tr.y + (br.y - tr.y) * locationY };\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet tw = $utils.relativeToValue(this.topWidth, h);\r\n\t\t\tlet bw = $utils.relativeToValue(this.bottomWidth, h);\r\n\r\n\t\t\tlet tt = { x: pl, y: (h - tw) / 2 + pt };\r\n\t\t\tlet tb = { x: pl, y: (h + tw) / 2 + pt };\r\n\r\n\t\t\tlet bt = { x: pl + w, y: (h - bw) / 2 + pt };\r\n\t\t\tlet bb = { x: pl + w, y: (h + bw) / 2 + pt };\r\n\r\n\t\t\tlet mty = tt.y + (bt.y - tt.y) * locationX;\r\n\t\t\tlet mby = tb.y + (bb.y - tb.y) * locationX;\r\n\r\n\t\t\treturn { y: mty + (mby - mty) * locationY, x: tt.x + (bt.x - tt.x) * locationX };\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Bottom width in pixels or percent.\r\n\t *\r\n\t * IMPORTANT: this setting might be used to set dimensions if you use slice\r\n\t * as a standalone element. If it's a part of [[FunnelSeries]] this setting\r\n\t * becomes read-only as it will be automatically reset by series.\r\n\t *\r\n\t * @param value  Bottom width\r\n\t */\r\n\tpublic set bottomWidth(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"bottomWidth\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return bottom width\r\n\t */\r\n\tpublic get bottomWidth(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"bottomWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Top width in pixels or percent.\r\n\t *\r\n\t * IMPORTANT: this setting might be used to set dimensions if you use slice\r\n\t * as a standalone element. If it's a part of [[FunnelSeries]] this setting\r\n\t * becomes read-only as it will be automatically reset by series.\r\n\t *\r\n\t * @param value  Top width\r\n\t */\r\n\tpublic set topWidth(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"topWidth\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Top width\r\n\t */\r\n\tpublic get topWidth(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"topWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation of the funnel slice: \"horizontal\" or \"vertical\".\r\n\t *\r\n\t * IMPORTANT: this setting might be used to set orintation if you use slice\r\n\t * as a standalone element. If it's a part of [[FunnelSeries]] this setting\r\n\t * becomes read-only as it will be automatically reset by series.\r\n\t *\r\n\t * @param value  Orientation\r\n\t */\r\n\tpublic set orientation(value: Orientation) {\r\n\t\tthis.setPropertyValue(\"orientation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Orientation\r\n\t */\r\n\tpublic get orientation(): Orientation {\r\n\t\treturn this.getPropertyValue(\"orientation\");\r\n\t}\r\n\r\n\t/**\r\n\t * A relative distance slice's sides should be bent to. It's relative to the\r\n\t * height of the slice.\r\n\t *\r\n\t * Zero (default) will mean the sides will be perfectly straight.\r\n\t *\r\n\t * Positive value will make them bend outwards, resulting in \"puffed\" slices.\r\n\t *\r\n\t * Negative values will make them bend inwards.\r\n\t *\r\n\t * @default 0\r\n\t * @param {number}\r\n\t */\r\n\tpublic set expandDistance(value: number) {\r\n\t\tthis.setPropertyValue(\"expandDistance\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return expandDistance\r\n\t */\r\n\tpublic get expandDistance(): number {\r\n\t\treturn this.getPropertyValue(\"expandDistance\");\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[Sprite]].\r\n\t *\r\n\t * @param source Source Sprite\r\n\t */\r\n\tpublic copyFrom(source :this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tif (this.slice) {\r\n\t\t\tthis.slice.copyFrom(source.slice);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FunnelSlice\"] = FunnelSlice;\r\n","/**\r\n * Funnel tick module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Tick, ITickProperties, ITickAdapters, ITickEvents } from \"../elements/Tick\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { FunnelSlice } from \"./FunnelSlice\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { FunnelSeries } from \"../series/FunnelSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[FunnelTick]].\r\n */\r\nexport interface IFunnelTickProperties extends ITickProperties {\r\n\tlocationX?: number;\r\n\r\n\tlocationY?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[FunnelTick]].\r\n */\r\nexport interface IFunnelTickEvents extends ITickEvents { }\r\n\r\n/**\r\n * Defines adapters for [[FunnelTick]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IFunnelTickAdapters extends ITickAdapters, IFunnelTickProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws an tick line for a funnel slice connecting it to a related label.\r\n *\r\n * @see {@link IFunnelTickEvents} for a list of available events\r\n * @see {@link IFunnelTickAdapters} for a list of available Adapters\r\n */\r\nexport class FunnelTick extends Tick {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IFunnelTickProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IFunnelTickAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IFunnelTickEvents;\r\n\r\n\t/**\r\n\t * A label element this tick is attached to.\r\n\t */\r\n\tprotected _label = new MutableValueDisposer<Label>();\r\n\r\n\t/**\r\n\t * A slice element this tick is attached to.\r\n\t */\r\n\tprotected _slice = new MutableValueDisposer<FunnelSlice>();\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"FunnelTick\";\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\t\tthis._disposers.push(this._label);\r\n\t\tthis._disposers.push(this._slice);\r\n\r\n\t\tthis.setPropertyValue(\"locationX\", 0);\r\n\t\tthis.setPropertyValue(\"locationY\", 0);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tlet slice: FunnelSlice = this.slice;\r\n\t\tlet point = slice.getPoint(this.locationX, this.locationY);\r\n\r\n\t\tif (point) {\r\n\t\t\tlet label = this.label;\r\n\r\n\t\t\tlet series = <FunnelSeries>slice.dataItem.component;\r\n\t\t\tlet p0:IPoint;\r\n\t\t\tlet p1:IPoint;\r\n\t\t\tlet p2:IPoint;\r\n\r\n\t\t\tif (series.orientation == \"vertical\") {\r\n\r\n\t\t\t\tlet x1 = label.pixelX;\r\n\t\t\t\tlet y1 = label.pixelY;\r\n\r\n\t\t\t\tif(!series.labelsOpposite){\r\n\t\t\t\t\tx1 += label.maxRight;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tp0 = $utils.spritePointToSprite(point, slice, this.parent);\t\t\t\t\r\n\t\t\t\tp2 = $utils.spritePointToSprite({ x: x1, y: y1 }, label.parent, this.parent);\r\n\t\t\t\tp1 = { x: label.parent.pixelX - this.length, y: p2.y };\r\n\r\n\t\t\t\tif(!series.labelsOpposite){\r\n\t\t\t\t\tp1.x = label.parent.measuredWidth + this.length; \r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet x1 = label.pixelX;\r\n\t\t\t\tlet y1 = label.pixelY;\r\n\r\n\t\t\t\tif(!series.labelsOpposite){\r\n\t\t\t\t\ty1 += label.maxBottom;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tp0 = $utils.spritePointToSprite(point, slice, this.parent);\r\n\t\t\t\tp2 = $utils.spritePointToSprite({ x: x1, y: y1 }, label.parent, this.parent);\r\n\t\t\t\tp1 = { x: p2.x, y: label.parent.pixelY - this.length };\r\n\r\n\t\t\t\tif(!series.labelsOpposite){\r\n\t\t\t\t\tp1.y = label.parent.measuredHeight + this.length; \r\n\t\t\t\t}\t\t\t\t\t\t\t\t\r\n\t\t\t}\r\n\t\t\tthis.path = $path.moveTo(p0) + $path.lineTo(p1) + $path.lineTo(p2);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [[FunnelSlice]] element tick is attached to.\r\n\t *\r\n\t * @param slice  Slice\r\n\t */\r\n\tpublic set slice(slice: FunnelSlice) {\r\n\t\tthis._slice.set(slice, new MultiDisposer([\r\n\t\t\tslice.events.on(\"transformed\", this.invalidate, this, false),\r\n\t\t\tslice.events.on(\"validated\", this.invalidate, this, false)\r\n\t\t]));\r\n\t}\r\n\r\n\t/**\r\n\t * @return FunnelSlice\r\n\t */\r\n\tpublic get slice(): FunnelSlice {\r\n\t\treturn this._slice.get();\r\n\t}\r\n\r\n\t/**\r\n\t * [[Label]] element tick is attached to.\r\n\t *\r\n\t * @param label  Label\r\n\t */\r\n\tpublic set label(label: Label) {\r\n\t\tthis._label.set(label, label.events.on(\"transformed\", this.invalidate, this, false));\r\n\t}\r\n\r\n\t/**\r\n\t * @return Label\r\n\t */\r\n\tpublic get label(): Label {\r\n\t\treturn this._label.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A relative horizontal position within target element a tick is pointing\r\n\t * to.\r\n\t *\r\n\t * A scale is from 0 to 1, where 0 means left edge, and 1 right edge.\r\n\t *\r\n\t * You can also set any value in-between (e.g. 0.5 will point to the middle\r\n\t * of the slice), or outside 0-1 range, which will put tick anchor position\r\n\t * outside target element.\r\n\t *\r\n\t * @param value  Location (0-1)\r\n\t */\r\n\tpublic set locationX(value: number) {\r\n\t\tthis.setPropertyValue(\"locationX\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get locationX(): number {\r\n\t\treturn this.getPropertyValue(\"locationX\");\r\n\t}\r\n\r\n\t/**\r\n\t * A relative vertical position within target element a tick is pointing\r\n\t * to.\r\n\t *\r\n\t * A scale is from 0 to 1, where 0 means top edge, and 1 bottom edge.\r\n\t *\r\n\t * You can also set any value in-between (e.g. 0.5 will point to the middle\r\n\t * of the slice), or outside 0-1 range, which will put tick anchor position\r\n\t * outside target element.\r\n\t *\r\n\t * @param value  Location (0-1)\r\n\t */\r\n\tpublic set locationY(value: number) {\r\n\t\tthis.setPropertyValue(\"locationY\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get locationY(): number {\r\n\t\treturn this.getPropertyValue(\"locationY\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FunnelTick\"] = FunnelTick;\r\n","/**\r\n * Defines Funnel Chart Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IPercentSeriesAdapters, IPercentSeriesDataFields, IPercentSeriesEvents, IPercentSeriesProperties, PercentSeries, PercentSeriesDataItem } from \"./PercentSeries\";\r\nimport { FunnelSlice } from \"../elements/FunnelSlice\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { FunnelTick } from \"../elements/FunnelTick\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { SlicedChart } from \"../types/SlicedChart\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport { Align } from \"../../core/defs/Align\";\r\nimport { VerticalAlign } from \"../../core/defs/VerticalAlign\";\r\nimport { options } from \"../../core/Options\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[FunnelSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class FunnelSeriesDataItem extends PercentSeriesDataItem {\r\n\r\n\t/**\r\n\t * A type of slice used for this series.\r\n\t */\r\n\tpublic _slice: FunnelSlice;\r\n\r\n\t/**\r\n\t * A reference to a label element.\r\n\t */\r\n\tpublic _label: Label;\r\n\r\n\t/**\r\n\t * A reference to a tick element.\r\n\t */\r\n\tpublic _tick: FunnelTick;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: FunnelSeries;\r\n\r\n\t/**\r\n\t * Defines a type of elements linking slices.\r\n\t */\r\n\tpublic _sliceLink: FunnelSlice;\r\n\r\n\t/**\r\n\t * A [[FunnelSlice]] element, related to this data item ([[FunnelSlice]]).\r\n\t *\r\n\t * @readonly\r\n\t * @return Slice element\r\n\t */\r\n\tpublic get sliceLink(): this[\"_sliceLink\"] {\r\n\t\tif (!this._sliceLink) {\r\n\t\t\tlet sliceLink = this.component.sliceLinks.create();\r\n\t\t\tthis._sliceLink = sliceLink;\r\n\t\t\tthis._disposers.push(sliceLink);\r\n\t\t\tsliceLink.parent = this.component.slicesContainer;\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif (this.component) {\r\n\t\t\t\t\tthis.component.sliceLinks.removeValue(sliceLink);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\r\n\t\t\tthis.addSprite(sliceLink);\r\n\t\t\tsliceLink.visible = this.visible;\r\n\t\t}\r\n\t\treturn this._sliceLink;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"FunnelSeriesDataItem\";\r\n\t\t// this helps to invalidate series when value is 0 an it is hidden (no other events are triggered then)\r\n\t\tthis.events.on(\"visibilitychanged\", () => {\r\n\t\t\tif (this.component) {\r\n\t\t\t\tthis.component.invalidateDataItems();\r\n\t\t\t}\r\n\t\t}, this, false);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[FunnelSeries]].\r\n */\r\nexport interface IFunnelSeriesDataFields extends IPercentSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[FunnelSeries]].\r\n */\r\nexport interface IFunnelSeriesProperties extends IPercentSeriesProperties {\r\n\r\n\t/**\r\n\t * Relative width of the slice bottom. See description of `bottomRatio`\r\n\t * property for full description.\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\tbottomRatio?: number;\r\n\r\n\t/**\r\n\t * Orientation of series\r\n\t *\r\n\t * @default \"vertical\"\r\n\t */\r\n\torientation?: Orientation;\r\n\r\n\t/**\r\n\t * Put labels on the oppsite side of the series?\r\n\t *\r\n\t * @since 4.1.13\r\n\t */\r\n\tlabelsOpposite?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[FunnelSeries]].\r\n */\r\nexport interface IFunnelSeriesEvents extends IPercentSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[FunnelSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IFunnelSeriesAdapters extends IPercentSeriesAdapters, IFunnelSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a FunnelSlice series on a [[SlicedChart]].\r\n *\r\n * @see {@link IFunnelSeriesEvents} for a list of available Events\r\n * @see {@link IFunnelSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class FunnelSeries extends PercentSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _slice: FunnelSlice;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _tick: FunnelTick;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _label: Label;\r\n\r\n\t/**\r\n\t * A reference to chart this series is for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _chart: SlicedChart;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IFunnelSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IFunnelSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IFunnelSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IFunnelSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: FunnelSeriesDataItem;\r\n\r\n\r\n\tprotected _nextY: number = 0;\r\n\r\n\t/**\r\n\t * List of slice elements.\r\n\t */\r\n\tprotected _sliceLinks: ListTemplate<this[\"_slice\"]>;\r\n\r\n\t/**\r\n\t * Holds sum of values for all slices\r\n\t */\r\n\tprotected _total: number;\r\n\r\n\t/**\r\n\t * Holds number of slices.\r\n\t */\r\n\tprotected _count: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"FunnelSeries\";\r\n\t\tthis.orientation = \"vertical\";\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.slicesContainer.width = percent(100);\r\n\t\tthis.slicesContainer.height = percent(100);\r\n\r\n\t\tthis._disposers.push(this.slicesContainer.events.on(\"maxsizechanged\", this.invalidateDataItems, this, false));\r\n\r\n\t\tthis.labelsOpposite = true;\r\n\r\n\t\tthis.labelsContainer.layout = \"absolute\";\r\n\r\n\t\tthis.bottomRatio = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a [[FunnelSlice]] element.\r\n\t *\r\n\t * @return Slice\r\n\t */\r\n\tprotected createSlice(): this[\"_slice\"] {\r\n\t\treturn new FunnelSlice();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a [[FunnelTick]] element.\r\n\t *\r\n\t * @return Tick\r\n\t */\r\n\tprotected createTick(): this[\"_tick\"] {\r\n\t\treturn new FunnelTick();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Funnel Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new FunnelSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Inits FunnelSlice.\r\n\t *\r\n\t * @param slice to init\r\n\t */\r\n\tprotected initSlice(slice: this[\"_slice\"]) {\r\n\t\tslice.isMeasured = false;\r\n\t\tslice.defaultState.properties.scale = 1;\r\n\t\tslice.observe(\"scale\", this.handleSliceScale, this);\r\n\t\tslice.observe([\"dx\", \"dy\", \"x\", \"y\"], this.handleSliceMove, this);\r\n\t\tslice.tooltipText = \"{category}: {value.percent.formatNumber('#.#')}% ({value.value})\";\r\n\r\n\t\tlet hoverState = slice.states.create(\"hover\");\r\n\t\thoverState.properties.expandDistance = 0.2;\r\n\t}\r\n\r\n\t/**\r\n\t * [initLabel description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param label [description]\r\n\t */\r\n\tprotected initLabel(label: this[\"_label\"]) {\r\n\t\tsuper.initLabel(label);\r\n\t\tlabel.verticalCenter = \"middle\";\r\n\t\tlabel.horizontalCenter = \"middle\";\r\n\t\tlabel.isMeasured = true;\r\n\t\tlabel.padding(5, 5, 5, 5);\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\t\tthis._nextY = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * [validateDataElements description]\r\n\t *\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements() {\r\n\r\n\t\tlet slicesContainer = this.slicesContainer;\r\n\t\tlet labelsContainer = this.labelsContainer;\r\n\t\tlet labelTemplate = this.labels.template;\r\n\r\n\t\tif (this.alignLabels) {\r\n\t\t\tlabelTemplate.interactionsEnabled = true;\r\n\t\t\tslicesContainer.isMeasured = true;\r\n\t\t\tlabelsContainer.isMeasured = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlabelTemplate.interactionsEnabled = false;\r\n\t\t\tslicesContainer.isMeasured = false;\r\n\t\t\tlabelsContainer.isMeasured = false;\r\n\t\t}\r\n\r\n\t\tlet total = 0;\r\n\t\tlet count = 0;\r\n\t\tthis.dataItems.each((dItem) => {\r\n\t\t\tif ($type.hasValue(dItem.value)) {\r\n\t\t\t\tcount++;\r\n\t\t\t\tif (dItem.value > 0) {\r\n\t\t\t\t\ttotal += Math.abs(dItem.getWorkingValue(\"value\") / dItem.value);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (this.ignoreZeroValues) {\r\n\t\t\t\t\t\tcount--;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tif (!dItem.visible || dItem.__disabled || dItem.isHiding) {\r\n\t\t\t\t\t\t\tcount--;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\ttotal += 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis._total = 1 / count * total;\r\n\t\tthis._count = count;\r\n\r\n\t\tsuper.validateDataElements();\r\n\r\n\t\tthis.arrangeLabels();\r\n\t}\r\n\r\n\t/**\r\n\t * [getNextValue description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem  [description]\r\n\t * @return [description]\r\n\t */\r\n\tprotected getNextValue(dataItem: FunnelSeriesDataItem): number {\r\n\t\tlet index = dataItem.index;\r\n\t\tlet nextValue: number = dataItem.getWorkingValue(\"value\");\r\n\t\tif (index < this.dataItems.length - 1) {\r\n\t\t\tlet nextItem = this.dataItems.getIndex(index + 1);\r\n\t\t\tnextValue = nextItem.getWorkingValue(\"value\");\r\n\r\n\t\t\tif (!nextItem.visible || nextItem.isHiding || nextItem.__disabled || (nextItem.value == 0 && this.ignoreZeroValues)) {\r\n\t\t\t\treturn this.getNextValue(nextItem);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn nextValue;\r\n\t}\r\n\r\n\t/**\r\n\t * [formDataElement description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected formDataElement(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\t//if ($type.hasValue(dataItem.value)) {\r\n\t\t// FunnelSlice\r\n\t\tlet slice = dataItem.slice;\r\n\t\tslice.orientation = this.orientation;\r\n\r\n\t\tlet sliceLink = dataItem.sliceLink;\r\n\t\tsliceLink.orientation = this.orientation;\r\n\r\n\t\tlet tick = dataItem.tick;\r\n\t\tlet label = dataItem.label;\r\n\r\n\t\ttick.slice = slice;\r\n\t\ttick.label = label;\r\n\r\n\t\tif ($type.hasValue(dataItem.value)) {\r\n\t\t\tthis.decorateSlice(dataItem);\r\n\t\t\t$array.each(dataItem.sprites, (sprite) => {\r\n\t\t\t\tif (dataItem.value == 0 && this.ignoreZeroValues) {\r\n\t\t\t\t\tsprite.__disabled = true;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tsprite.__disabled = false;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\t\telse {\r\n\t\t\t$array.each(dataItem.sprites, (sprite) => {\r\n\t\t\t\tsprite.__disabled = true;\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tif (dataItem.index == this.dataItems.length - 1) {\r\n\t\t\tsliceLink.disabled = true;\r\n\t\t}\r\n\r\n\t\t// do this at the end, otherwise bullets won't be positioned properly\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\tsliceLink.fill = slice.fill;\r\n\t\t//}\r\n\t}\r\n\r\n\t/**\r\n\t * [decorateSlice description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem [description]\r\n\t */\r\n\tprotected decorateSlice(dataItem: this[\"_dataItem\"]): void {\r\n\t\tlet slice = dataItem.slice;\r\n\t\tlet sliceLink = dataItem.sliceLink;\r\n\t\tlet label = dataItem.label;\r\n\t\tlet tick = dataItem.tick;\r\n\r\n\t\tlet maxWidth = this.slicesContainer.innerWidth;\r\n\t\tlet maxHeight = this.slicesContainer.innerHeight;\r\n\r\n\t\tlet nextValue = this.getNextValue(dataItem);\r\n\t\tlet workingValue = Math.abs(dataItem.getWorkingValue(\"value\"));\r\n\t\tlet bottomRatio = this.bottomRatio;\r\n\r\n\t\tlet d = 1;\r\n\t\tif (dataItem.value != 0) {\r\n\t\t\td = workingValue / Math.abs(dataItem.value);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (dataItem.__disabled || dataItem.isHiding || !dataItem.visible) {\r\n\t\t\t\td = 0.000001;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.ignoreZeroValues && dataItem.value == 0) {\r\n\t\t\tdataItem.__disabled = true;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdataItem.__disabled = false;\r\n\t\t}\r\n\r\n\t\tif (this._nextY == Infinity) {\r\n\t\t\tthis._nextY = 0;\r\n\t\t}\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\r\n\t\t\tlet linkHeight = sliceLink.pixelHeight * d;\r\n\r\n\t\t\tmaxHeight = maxHeight + linkHeight; // to avoid one link gap in the bottom\r\n\r\n\t\t\tslice.topWidth = workingValue / this.dataItem.values.value.high * maxWidth;\r\n\t\t\tslice.bottomWidth = (workingValue - (workingValue - nextValue) * bottomRatio) / this.dataItem.values.value.high * maxWidth;\r\n\r\n\t\t\tsliceLink.topWidth = slice.bottomWidth;\r\n\t\t\tsliceLink.bottomWidth = (workingValue - (workingValue - nextValue)) / this.dataItem.values.value.high * maxWidth;\r\n\r\n\t\t\tslice.y = this._nextY;\r\n\t\t\tslice.height = Math.min(100000, $math.max(0, maxHeight / this._count * d / this._total - linkHeight));\r\n\r\n\t\t\tslice.x = maxWidth / 2;\r\n\r\n\t\t\tif (!this.alignLabels) {\r\n\t\t\t\tlabel.x = slice.x;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabel.x = undefined;\r\n\t\t\t}\r\n\t\t\tlabel.y = slice.pixelY + slice.pixelHeight * tick.locationY;\r\n\r\n\t\t\tthis._nextY += slice.pixelHeight + linkHeight;\r\n\t\t\tsliceLink.y = this._nextY - linkHeight;\r\n\t\t\tsliceLink.x = slice.x;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet linkWidth = sliceLink.pixelWidth * d;\r\n\r\n\t\t\tmaxWidth = maxWidth + linkWidth; // to avoid one link gap in the bottom\r\n\r\n\t\t\tslice.topWidth = workingValue / this.dataItem.values.value.high * maxHeight;\r\n\t\t\tslice.bottomWidth = (workingValue - (workingValue - nextValue) * bottomRatio) / this.dataItem.values.value.high * maxHeight;\r\n\r\n\t\t\tsliceLink.topWidth = slice.bottomWidth;\r\n\t\t\tsliceLink.bottomWidth = (workingValue - (workingValue - nextValue)) / this.dataItem.values.value.high * maxHeight;\r\n\r\n\t\t\tslice.x = this._nextY;\r\n\t\t\tslice.width = Math.min(100000, maxWidth / this._count * d * 1 / this._total - linkWidth);\r\n\t\t\tslice.y = maxHeight / 2;\r\n\r\n\t\t\tif (!this.alignLabels) {\r\n\t\t\t\tlabel.y = slice.y;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabel.y = this.labelsContainer.measuredHeight;\r\n\t\t\t}\r\n\t\t\tlabel.x = slice.pixelX + slice.pixelWidth * tick.locationX;\r\n\r\n\t\t\tthis._nextY += slice.pixelWidth + linkWidth;\r\n\t\t\tsliceLink.x = this._nextY - linkWidth;\r\n\r\n\t\t\tsliceLink.y = slice.y;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected getLastLabel(index: number): Label {\r\n\t\tif (index > 0) {\r\n\t\t\tlet lastLabel = this.labels.getIndex(index);\r\n\t\t\tif (lastLabel.__disabled || !lastLabel.visible) {\r\n\t\t\t\treturn this.getLastLabel(index - 1);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn lastLabel;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [arrangeLabels description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected arrangeLabels(): void {\r\n\r\n\t\tif (this.alignLabels) {\r\n\t\t\tlet count = this.labels.length;\r\n\t\t\tif (count > 1) {\r\n\r\n\t\t\t\tlet lastLabel = this.getLastLabel(count - 1);\r\n\t\t\t\tif (lastLabel) {\r\n\r\n\t\t\t\t\tlet lastY = lastLabel.pixelY;\r\n\t\t\t\t\tlet lastX = lastLabel.pixelX;\r\n\r\n\t\t\t\t\tif (count > 1) {\r\n\t\t\t\t\t\tfor (let i = count - 2; i >= 0; i--) {\r\n\t\t\t\t\t\t\tlet label = this.labels.getIndex(i);\r\n\r\n\t\t\t\t\t\t\tif (label.visible && !label.__disabled) {\r\n\t\t\t\t\t\t\t\tif (label.invalid) {\r\n\t\t\t\t\t\t\t\t\tlabel.validate();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\t\t\t\t\t\tif (label.pixelY + label.measuredHeight > lastY) {\r\n\t\t\t\t\t\t\t\t\t\tlabel.y = Math.min(1000000, lastY - label.measuredHeight);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// horizontal\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tif (label.pixelX + label.measuredWidth > lastX) {\r\n\t\t\t\t\t\t\t\t\t\tlabel.x = Math.min(1000000, lastX - label.measuredWidth);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tlastY = label.pixelY;\r\n\t\t\t\t\t\t\t\tlastX = label.pixelX;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlastY = 0;\r\n\t\t\t\t\t\tlastX = 0;\r\n\t\t\t\t\t\tfor (let i = 0; i < count; i++) {\r\n\t\t\t\t\t\t\tlet label = this.labels.getIndex(i);\r\n\t\t\t\t\t\t\tif (label.visible && !label.__disabled) {\r\n\t\t\t\t\t\t\t\tif (label.invalid) {\r\n\t\t\t\t\t\t\t\t\tlabel.validate();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\t\t\t\t\t\tif (label.pixelY < lastY) {\r\n\t\t\t\t\t\t\t\t\t\tlabel.y = Math.min(1000000, lastY);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// horizontal\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tif (label.pixelX < lastX) {\r\n\t\t\t\t\t\t\t\t\t\tlabel.x = Math.min(1000000, lastX);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlastY += label.measuredHeight;\r\n\t\t\t\t\t\t\t\tlastX += label.measuredWidth;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Positions series bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet  Bullet\r\n\t */\r\n\tpublic positionBullet(bullet: Bullet): void {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>bullet.dataItem;\r\n\t\tlet slice: FunnelSlice = dataItem.slice;\r\n\r\n\t\tlet locationX = bullet.locationX;\r\n\t\tif (!$type.isNumber(locationX)) {\r\n\t\t\tlocationX = 0.5;\r\n\t\t}\r\n\t\tlet locationY = bullet.locationY;\r\n\t\tif (!$type.isNumber(locationY)) {\r\n\t\t\tlocationY = 1;\r\n\t\t}\r\n\r\n\t\tbullet.x = slice.pixelX + slice.measuredWidth * locationX;\r\n\t\tbullet.y = slice.pixelY + slice.measuredHeight * locationY;\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation of the funnel slices: \"horizontal\" or \"vertical\" (default).\r\n\t *\r\n\t * @default \"vertical\"\r\n\t * @param value Orientation\r\n\t */\r\n\tpublic set orientation(value: Orientation) {\r\n\t\tif (this.setPropertyValue(\"orientation\", value)) {\r\n\t\t\tthis.labelsOpposite = this.labelsOpposite;\r\n\t\t\tthis.invalidate();\r\n\t\t\tif (value == \"vertical\") {\r\n\t\t\t\tthis.ticks.template.locationX = 1;\r\n\t\t\t\tthis.ticks.template.locationY = 0.5;\r\n\t\t\t\tthis.labels.template.rotation = 0;\r\n\t\t\t\tthis.layout = \"horizontal\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.ticks.template.locationX = 0.5;\r\n\t\t\t\tthis.ticks.template.locationY = 1;\r\n\t\t\t\tthis.labels.template.rotation = -90;\r\n\t\t\t\tthis.layout = \"vertical\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Orientation\r\n\t */\r\n\tpublic get orientation(): Orientation {\r\n\t\treturn this.getPropertyValue(\"orientation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates how slice's bottom will change in relation to slices top AND\r\n\t * next slices top.\r\n\t *\r\n\t * Basically it's a relative value (0-1) that indicates bottom width\r\n\t * position between current slice's top width and the top withd of the next\r\n\t * one.\r\n\t *\r\n\t * The scale goes from 0 (closer to current slice width) to 1 (closer to next\r\n\t * slice with).\r\n\t *\r\n\t * `0` (default) will mean that bottom will be the same as top, resulting in\r\n\t * a prefectly square slice.\r\n\t *\r\n\t * From the data-viz standpoint `0` is a correct setting, since area of the\r\n\t * slices will depict their value correctly.\r\n\t *\r\n\t * `1` will mean that slice will become trapezoid with its bottom matching\r\n\t * width of the next slice.\r\n\t *\r\n\t * `0.5` will make bottom width be in the middle of width of current slice\r\n\t * and the next slice.\r\n\t *\r\n\t * @default 0\r\n\t * @param {number}\r\n\t */\r\n\tpublic set bottomRatio(value: number) {\r\n\t\tif (this.setPropertyValue(\"bottomRatio\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number}\r\n\t */\r\n\tpublic get bottomRatio(): number {\r\n\t\treturn this.getPropertyValue(\"bottomRatio\");\r\n\t}\r\n\r\n\t/**\r\n\t * A list of elements linking each actual slice.\r\n\t *\r\n\t * Please note that links are [[FunnelSlice]] objects, just like real links,\r\n\t * so they have all the same configuration options.\r\n\t *\r\n\t * You can use `template` of this link, to specify how links will look.\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.sliceLinks.template.fillOpacity = 0.5;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.sliceLinks.template.fillOpacity = 0.5;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     \"type\": \"FunnelSeries\",\r\n\t *      // ...\r\n\t *      \"sliceLinks\": {\r\n\t *        \"fillOpacity\": 0.5\r\n\t *      }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @return Funnel links\r\n\t */\r\n\tpublic get sliceLinks(): ListTemplate<this[\"_slice\"]> {\r\n\t\tif (!this._sliceLinks) {\r\n\t\t\tlet sliceLink = new FunnelSlice();\r\n\t\t\tsliceLink.applyOnClones = true;\r\n\t\t\tsliceLink.fillOpacity = 0.5;\r\n\t\t\tsliceLink.expandDistance = - 0.3;\r\n\t\t\tsliceLink.hiddenState.properties.opacity = 0;\r\n\r\n\t\t\tthis._disposers.push(sliceLink);\r\n\r\n\t\t\tthis._sliceLinks = new ListTemplate(sliceLink);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._sliceLinks));\r\n\t\t}\r\n\t\treturn this._sliceLinks;\r\n\t}\r\n\r\n\t/**\r\n\t * Shows hidden series.\r\n\t *\r\n\t * @param duration  Duration of reveal animation (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\tlet interpolationDuration = this.defaultState.transitionDuration;\r\n\r\n\t\tif ($type.isNumber(duration)) {\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\tif(!options.animationsEnabled){\r\n\t\t\tinterpolationDuration = 0;\r\n\t\t}\t\t\r\n\r\n\t\tlet delay: number = 0;\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\r\n\t\t\tif (this.sequencedInterpolation) {\r\n\t\t\t\tdelay = this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n\t\t\t}\r\n\t\t\tdataItem.show(interpolationDuration, delay, [\"value\"]);\r\n\t\t});\r\n\r\n\t\tlet animation = super.show(duration);\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides series.\r\n\t *\r\n\t * @param duration  Duration of hiding animation (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\t\tlet fields: string[] = [\"value\"];\r\n\t\tlet value: number = 0;\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\tlet delay: number = 0;\r\n\t\tlet interpolationDuration = this.hiddenState.transitionDuration;\r\n\t\tif ($type.isNumber(duration)) {\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\tif(!options.animationsEnabled){\r\n\t\t\tinterpolationDuration = 0;\r\n\t\t}\t\t\t\t\r\n\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\r\n\t\t\tif (this.sequencedInterpolation) {\r\n\t\t\t\tdelay = this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n\t\t\t}\r\n\t\t\tdataItem.hide(interpolationDuration, delay, value, fields);\r\n\t\t});\r\n\r\n\t\tlet animation: Animation = super.hide(duration);\r\n\t\tif (animation && !animation.isFinished()) {\r\n\t\t\tanimation.delay(delay);\r\n\t\t}\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setAlignLabels(value: boolean) {\r\n\t\tsuper.setAlignLabels(value);\r\n\t\tthis.ticks.template.disabled = !value;\r\n\t\tlet labelsContainer = this.labelsContainer;\r\n\t\tif (labelsContainer) {\r\n\t\t\t// do not align\r\n\t\t\tif (!value) {\r\n\t\t\t\tlabelsContainer.width = percent(100);\r\n\t\t\t\tlabelsContainer.height = percent(100);\r\n\t\t\t}\r\n\t\t\t//align\r\n\t\t\telse {\r\n\t\t\t\tlabelsContainer.height = undefined;\r\n\t\t\t\tlabelsContainer.width = undefined;\r\n\t\t\t\tlabelsContainer.margin(10, 10, 10, 10);\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.labelsOpposite = this.labelsOpposite;\r\n\t}\r\n\r\n\t/**\r\n\t * Put labels on the oppsite side of the series?\r\n\t *\r\n\t * This setting is only used if `alignLabels = true`.\r\n\t *\r\n\t * If set to `true` (default) labels will be drawn to the right (on vertical\r\n\t * series), or to the bottom (on horizontal series).\r\n\t *\r\n\t * If set to `false`, labels will be positioned to the left or top\r\n\t * respectively.\r\n\t *\r\n\t * @default true\r\n\t * @since 4.1.13\r\n\t * @param  value  Labels on opposite side?\r\n\t */\r\n\tpublic set labelsOpposite(value: boolean) {\r\n\t\tthis.setPropertyValue(\"labelsOpposite\", value)\r\n\t\tlet labelTemplate = this.labels.template;\r\n\r\n\t\tlet labelAlign: Align = \"none\";\r\n\t\tlet labelValign: VerticalAlign = \"none\";\r\n\r\n\t\tif (!this.alignLabels) {\r\n\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\tlabelAlign = \"center\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabelValign = \"middle\";\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// opposite (left/bottom)\r\n\t\t\tif (value) {\r\n\t\t\t\tthis.labelsContainer.toFront();\r\n\t\t\t\t// left\r\n\t\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\t\tthis.ticks.template.locationX = 1;\r\n\t\t\t\t\tlabelTemplate.horizontalCenter = \"left\";\r\n\t\t\t\t\tlabelAlign = \"right\";\r\n\t\t\t\t}\r\n\t\t\t\t// bottom\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.ticks.template.locationY = 1;\r\n\t\t\t\t\tlabelTemplate.horizontalCenter = \"right\";\r\n\t\t\t\t\tlabelValign = \"bottom\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// non oposite (right/top)\r\n\t\t\telse {\r\n\t\t\t\tthis.labelsContainer.toBack();\r\n\t\t\t\t// right\r\n\t\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\t\tthis.ticks.template.locationX = 0;\r\n\t\t\t\t\tlabelAlign = \"left\";\r\n\t\t\t\t}\r\n\t\t\t\t// top\r\n\t\t\t\telse {\r\n\t\t\t\t\tlabelValign = \"top\";\r\n\t\t\t\t\tthis.ticks.template.locationY = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlabelTemplate.align = labelAlign;\r\n\t\tlabelTemplate.valign = labelValign;\r\n\r\n\t\tthis.validateLayout();\r\n\t\tthis.ticks.each((tick) => {\r\n\t\t\ttick.invalidate();\r\n\t\t})\r\n\t\tthis.invalidateDataItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Labels on opposite side?\r\n\t */\r\n\tpublic get labelsOpposite(): boolean {\r\n\t\treturn this.getPropertyValue(\"labelsOpposite\");\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FunnelSeries\"] = FunnelSeries;\r\nregistry.registeredClasses[\"FunnelSeriesDataItem\"] = FunnelSeriesDataItem;\r\n","/**\r\n * Defines Pyramid Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IFunnelSeriesAdapters, IFunnelSeriesDataFields, IFunnelSeriesEvents, IFunnelSeriesProperties, FunnelSeries, FunnelSeriesDataItem } from \"./FunnelSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PyramidSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PyramidSeriesDataItem extends FunnelSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PyramidSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PyramidSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PyramidSeries]].\r\n */\r\nexport interface IPyramidSeriesDataFields extends IFunnelSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PyramidSeries]].\r\n */\r\nexport interface IPyramidSeriesProperties extends IFunnelSeriesProperties {\r\n\r\n\t/**\r\n\t * Bottom width in pixels or percent\r\n\t */\r\n\tbottomWidth?: number | Percent;\r\n\r\n\t/**\r\n\t * Top width in pixels or percent\r\n\t */\r\n\ttopWidth?: number | Percent;\r\n\r\n\t/**\r\n\t * Height of pyramid\r\n\t */\r\n\tpyramidHeight?: number | Percent;\r\n\r\n\t/**\r\n\t * Indicates whether slice value should sould influence its height or area\r\n\t * size.\r\n\t *\r\n\t * @default \"area\"\r\n\t */\r\n\tvalueIs?: \"height\" | \"area\";\r\n}\r\n\r\n/**\r\n * Defines events for [[PyramidSeries]].\r\n */\r\nexport interface IPyramidSeriesEvents extends IFunnelSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PyramidSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPyramidSeriesAdapters extends IFunnelSeriesAdapters, IPyramidSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a FunnelSlice series on a [[SlicedChart]].\r\n *\r\n * @see {@link IPyramidSeriesEvents} for a list of available Events\r\n * @see {@link IPyramidSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class PyramidSeries extends FunnelSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IPyramidSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPyramidSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPyramidSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPyramidSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: PyramidSeriesDataItem;\r\n\r\n\t/**\r\n\t * [_nextWidth description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _nextWidth: number;\r\n\r\n\tprotected _pyramidHeight: number;\r\n\r\n\tprotected _pyramidWidth: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"PyramidSeries\";\r\n\t\tthis.topWidth = percent(0);\r\n\t\tthis.bottomWidth = percent(100);\r\n\t\tthis.pyramidHeight = percent(100);\r\n\t\tthis.valueIs = \"area\";\r\n\r\n\t\tthis.sliceLinks.template.width = 0;\r\n\t\tthis.sliceLinks.template.height = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pyramid Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PyramidSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\t\tthis._nextWidth = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * [getNextValue description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem [description]\r\n\t * @return [description]\r\n\t */\r\n\tprotected getNextValue(dataItem: FunnelSeriesDataItem): number {\r\n\t\tlet index = dataItem.index;\r\n\t\tlet nextValue: number = dataItem.getWorkingValue(\"value\");\r\n\t\tif (index < this.dataItems.length - 1) {\r\n\t\t\tlet nextItem = this.dataItems.getIndex(index + 1);\r\n\t\t\tnextValue = nextItem.getWorkingValue(\"value\");\r\n\t\t}\r\n\t\tif (nextValue == 0) {\r\n\t\t\tnextValue = 0.000001;\r\n\t\t}\r\n\t\treturn nextValue;\r\n\t}\r\n\r\n\t/**\r\n\t * [validateDataElements description]\r\n\t *\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements() {\r\n\t\tlet maxWidth = this.slicesContainer.innerWidth;\r\n\t\tlet maxHeight = this.slicesContainer.innerHeight;\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\tif (dataItem.value > 0) {\r\n\t\t\t\tlet relValue = dataItem.getWorkingValue(\"value\") / dataItem.value;\r\n\t\t\t\tlet sliceLink = dataItem.sliceLink;\r\n\t\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\t\tmaxHeight -= (sliceLink.pixelHeight * relValue);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tmaxWidth -= (sliceLink.pixelWidth * relValue);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis._pyramidHeight = $utils.relativeToValue(this.pyramidHeight, maxHeight);\r\n\t\tthis._pyramidWidth = $utils.relativeToValue(this.pyramidHeight, maxWidth);\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tlet y = (maxHeight - this._pyramidHeight) / 2;\r\n\t\t\tthis.slicesContainer.y = y\r\n\t\t\tthis.labelsContainer.y = y;\r\n\t\t\tthis.ticksContainer.y = y;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet x = (maxWidth - this._pyramidWidth) / 2;\r\n\t\t\tthis.slicesContainer.x = x;\r\n\t\t\tthis.labelsContainer.x = x;\r\n\t\t\tthis.ticksContainer.x = x;\r\n\t\t}\r\n\r\n\t\tsuper.validateDataElements();\r\n\t}\r\n\r\n\t/**\r\n\t * [decorateSlice description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem [description]\r\n\t */\r\n\tprotected decorateSlice(dataItem: this[\"_dataItem\"]) {\r\n\r\n\t\tlet sum = this.dataItem.values.value.absoluteSum;\r\n\r\n\t\tif (sum == 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet slice = dataItem.slice;\r\n\t\tlet sliceLink = dataItem.sliceLink;\r\n\t\tlet label = dataItem.label;\r\n\t\tlet tick = dataItem.tick;\r\n\r\n\t\t// TODO can this be removed ?\r\n\t\tthis.getNextValue(dataItem);\r\n\r\n\t\tlet workingValue = Math.abs(dataItem.getWorkingValue(\"value\"));\r\n\r\n\t\tlet pyramidWidth = this._pyramidWidth;\r\n\t\tlet pyramidHeight = this._pyramidHeight;\r\n\r\n\t\tlet maxWidth = this.slicesContainer.innerWidth;\r\n\t\tlet maxHeight = this.slicesContainer.innerHeight;\r\n\r\n\t\tlet linkWidth = sliceLink.pixelWidth;\r\n\t\tlet linkHeight = sliceLink.pixelHeight;\r\n\r\n\t\tif ((dataItem.value == 0 || dataItem.value == null) && this.ignoreZeroValues) {\r\n\t\t\tdataItem.__disabled = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdataItem.__disabled = false;\r\n\t\t}\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tlet topWidth = $utils.relativeToValue(this.topWidth, maxWidth);\r\n\r\n\t\t\tif (!$type.isNumber(this._nextWidth)) {\r\n\t\t\t\tthis._nextWidth = topWidth;\r\n\t\t\t}\r\n\r\n\t\t\tlet bottomWidth = $utils.relativeToValue(this.bottomWidth, maxWidth);\r\n\t\t\tlet sliceTopWidth = this._nextWidth;\r\n\r\n\t\t\tlet angle = Math.atan2(pyramidHeight, topWidth - bottomWidth);\r\n\t\t\tlet c = Math.tan(Math.PI / 2 - angle);\r\n\t\t\tif (c == 0) {\r\n\t\t\t\tc = 0.00000001;\r\n\t\t\t}\r\n\r\n\t\t\tlet sliceHeight: number;\r\n\t\t\tlet sliceBottomWidth: number;\r\n\r\n\t\t\tif (this.valueIs == \"area\") {\r\n\t\t\t\tlet totalSquare = (topWidth + bottomWidth) / 2 * pyramidHeight;\r\n\t\t\t\tlet square = totalSquare * workingValue / sum;\r\n\r\n\t\t\t\tlet s = Math.abs(sliceTopWidth * sliceTopWidth - 2 * square * c);\r\n\r\n\t\t\t\tsliceHeight = (sliceTopWidth - Math.sqrt(s)) / c;\r\n\t\t\t\tif (sliceHeight > 0) {\r\n\t\t\t\t\tsliceBottomWidth = (2 * square - sliceHeight * sliceTopWidth) / sliceHeight;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tsliceBottomWidth = sliceTopWidth;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tsliceHeight = pyramidHeight * workingValue / sum;\r\n\t\t\t\tsliceBottomWidth = sliceTopWidth - sliceHeight * c;\r\n\t\t\t}\r\n\r\n\t\t\tslice.height = sliceHeight;\r\n\t\t\tslice.width = maxWidth;\r\n\t\t\tslice.bottomWidth = sliceBottomWidth;\r\n\t\t\tslice.topWidth = sliceTopWidth;\r\n\r\n\t\t\tsliceLink.topWidth = slice.bottomWidth;\r\n\t\t\tsliceLink.bottomWidth = slice.bottomWidth;\r\n\r\n\t\t\tslice.y = this._nextY;\r\n\t\t\t//slice.x = maxWidth / 2;\r\n\r\n\t\t\tif (!this.alignLabels) {\r\n\t\t\t\tlabel.x = maxWidth / 2;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabel.x = 0;\r\n\t\t\t}\r\n\r\n\t\t\tlabel.y = slice.pixelY + slice.pixelHeight * tick.locationY + slice.dy;\r\n\r\n\t\t\tthis._nextY += slice.pixelHeight + linkHeight * workingValue / Math.max(Math.abs(dataItem.value), 0.00000001);\r\n\t\t\tsliceLink.y = this._nextY - linkHeight;\r\n\t\t\tsliceLink.x = maxWidth / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet topWidth = $utils.relativeToValue(this.topWidth, maxHeight);\r\n\r\n\t\t\tif (!$type.isNumber(this._nextWidth)) {\r\n\t\t\t\tthis._nextWidth = topWidth;\r\n\t\t\t}\r\n\r\n\t\t\tlet bottomWidth = $utils.relativeToValue(this.bottomWidth, maxHeight);\r\n\t\t\tlet sliceTopWidth = this._nextWidth;\r\n\r\n\t\t\tlet angle = Math.atan2(pyramidWidth, topWidth - bottomWidth);\r\n\t\t\tlet c = Math.tan(Math.PI / 2 - angle);\r\n\t\t\tif (c == 0) {\r\n\t\t\t\tc = 0.00000001;\r\n\t\t\t}\r\n\r\n\t\t\tlet sliceWidth: number;\r\n\t\t\tlet sliceBottomWidth: number;\r\n\r\n\t\t\tif (this.valueIs == \"area\") {\r\n\t\t\t\tlet totalSquare = (topWidth + bottomWidth) / 2 * pyramidWidth;\r\n\t\t\t\tlet square = totalSquare * workingValue / sum;\r\n\t\t\t\tsliceWidth = (sliceTopWidth - Math.sqrt(sliceTopWidth * sliceTopWidth - 2 * square * c)) / c;\r\n\t\t\t\tsliceBottomWidth = (2 * square - sliceWidth * sliceTopWidth) / sliceWidth;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tsliceWidth = pyramidWidth * workingValue / sum;\r\n\t\t\t\tsliceBottomWidth = sliceTopWidth - sliceWidth * c;\r\n\t\t\t}\r\n\r\n\t\t\tslice.width = sliceWidth;\r\n\t\t\tslice.height = maxHeight;\r\n\t\t\tslice.bottomWidth = sliceBottomWidth;\r\n\t\t\tslice.topWidth = sliceTopWidth;\r\n\r\n\t\t\tsliceLink.topWidth = slice.bottomWidth;\r\n\t\t\tsliceLink.bottomWidth = slice.bottomWidth;\r\n\r\n\t\t\tslice.x = this._nextY;\r\n\r\n\t\t\tif (!this.alignLabels) {\r\n\t\t\t\tlabel.y = maxHeight / 2;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabel.y = this.labelsContainer.measuredHeight;\r\n\t\t\t}\r\n\r\n\t\t\tlabel.x = slice.pixelX + slice.pixelWidth * tick.locationX + slice.dx;\r\n\r\n\t\t\tthis._nextY += slice.pixelWidth + linkWidth * workingValue / Math.max(Math.abs(dataItem.value), 0.00000001);\r\n\t\t\tsliceLink.x = this._nextY - linkWidth;\r\n\t\t\tsliceLink.y = maxHeight / 2;\r\n\t\t}\r\n\r\n\t\tthis._nextWidth = slice.bottomWidth;\r\n\t}\r\n\r\n\t/**\r\n\t * Width of the pyramid's tip in pixels or relative (`Percent`).\r\n\t *\r\n\t * `0%` (default) means the pyramid will be perfectly pointy.\r\n\t * `50%` will have a cut off / blunt top that is half the width of the chart.\r\n\t * `100%` will take the whole width of the chart.\r\n\t *\r\n\t * If you need the downward-pointing pyramid, you might want to `topWidth` to\r\n\t * `100%` and `bottomWidth` to `0%`.\r\n\t *\r\n\t * @default 0%\r\n\t * @param {number | Percent}\r\n\t */\r\n\tpublic set topWidth(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"topWidth\", value, false, false, 10, false)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent}\r\n\t */\r\n\tpublic get topWidth(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"topWidth\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Height of pyramid\r\n\t *\r\n\t *\r\n\t * @default 100%\r\n\t * @param {number | Percent}\r\n\t */\r\n\tpublic set pyramidHeight(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"pyramidHeight\", value, false, false, 10, false)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent}\r\n\t */\r\n\tpublic get pyramidHeight(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"pyramidHeight\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width of the pyramid's bottom (bsae) in pixels or relative (`Percent`).\r\n\t *\r\n\t * `0%` means the pyramid's botto will be pointy.\r\n\t * `50%` will have a cut off / blunt bottom that is half the width of the chart.\r\n\t * `100%` (default) will take the whole width of the chart.\r\n\t *\r\n\t * If you need the downward-pointing pyramid, you might want to `topWidth` to\r\n\t * `100%` and `bottomWidth` to `0%`.\r\n\t *\r\n\t * @param {number | Percent}\r\n\t */\r\n\tpublic set bottomWidth(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"bottomWidth\", value, false, false, 10, false)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent}\r\n\t */\r\n\tpublic get bottomWidth(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"bottomWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates how slice's value will influence its size.\r\n\t *\r\n\t * `\"area\"` (default) means that the whole area of the pyramid (counting in\r\n\t * modifications by `topWidth` and `bottomWidth`) will be divvied up between\r\n\t * slices based on their value.\r\n\t *\r\n\t * With this setting at `\"area\"` the area of the trapezoids of each slice\r\n\t * will represent their value relatively to values of the other slices.\r\n\t *\r\n\t * This is a correct way to depict \"weight\" of each slice based on their\r\n\t * values.\r\n\t *\r\n\t * `\"height\"` means whole height (as opposed to area) of the pyramid will be\r\n\t * divvied up between slices. Actual slice width or area is not counted in.\r\n\t *\r\n\t * From the data-viz standpoint this does not make a lot of sense, since\r\n\t * slices with lesser values might appear more prominent if they are placed\r\n\t * towards thick end of the pyramid since their areas will be bigger.\r\n\t *\r\n\t * @default \"area\"\r\n\t * @param {\"area\" | \"height\"}\r\n\t */\r\n\tpublic set valueIs(value: \"area\" | \"height\") {\r\n\t\tif (this.setPropertyValue(\"valueIs\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {\"area\" | \"height\"}\r\n\t */\r\n\tpublic get valueIs(): \"area\" | \"height\" {\r\n\t\treturn this.getPropertyValue(\"valueIs\");\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PyramidSeries\"] = PyramidSeries;\r\nregistry.registeredClasses[\"PyramidSeriesDataItem\"] = PyramidSeriesDataItem;\r\n","/**\r\n * Defines Pictorial Stacked Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IPyramidSeriesAdapters, IPyramidSeriesDataFields, IPyramidSeriesEvents, IPyramidSeriesProperties, PyramidSeries, PyramidSeriesDataItem } from \"./PyramidSeries\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PictorialStackedSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PictorialStackedSeriesDataItem extends PyramidSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PictorialStackedSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PictorialStackedSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PictorialStackedSeries]].\r\n */\r\nexport interface IPictorialStackedSeriesDataFields extends IPyramidSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PictorialStackedSeries]].\r\n */\r\nexport interface IPictorialStackedSeriesProperties extends IPyramidSeriesProperties {\r\n\r\n\t/**\r\n\t * Relative location to start series from.\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\tstartLocation?: number;\r\n\r\n\t/**\r\n\t * Relative location to end series at.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\tendLocation?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PictorialStackedSeries]].\r\n */\r\nexport interface IPictorialStackedSeriesEvents extends IPyramidSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PictorialStackedSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPictorialStackedSeriesAdapters extends IPyramidSeriesAdapters, IPictorialStackedSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a PictorialStacked series on a [[SlicedChart]].\r\n *\r\n * @see {@link IPictorialStackedSeriesEvents} for a list of available Events\r\n * @see {@link IPictorialStackedSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class PictorialStackedSeries extends PyramidSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IPictorialStackedSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPictorialStackedSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPictorialStackedSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPictorialStackedSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: PictorialStackedSeriesDataItem;\r\n\r\n\t/**\r\n\t * Holds a Sprite that acts as an intelligent mask for the serries.\r\n\t */\r\n\tprotected _maskSprite: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"PictorialStackedSeries\";\r\n\t\tthis.topWidth = percent(100);\r\n\t\tthis.bottomWidth = percent(100);\r\n\t\tthis.valueIs = \"height\";\r\n\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.startLocation = 0;\r\n\t\tthis.endLocation = 1;\r\n\t\tthis.align = \"center\";\r\n\t\tthis.valign = \"middle\";\r\n\r\n\t\tthis._maskSprite = this.slicesContainer.createChild(Sprite);\r\n\t\tthis._maskSprite.visible = false;\r\n\t\tthis._maskSprite.zIndex = 100;\r\n\t\tthis._maskSprite.shouldClone = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Sizes the mask to fit the series.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic validateDataElements(): void {\r\n\r\n\t\tlet maxWidth = this.slicesContainer.maxWidth;\r\n\t\tlet maxHeight = this.slicesContainer.maxHeight;\r\n\r\n\t\tlet maskSprite = this._maskSprite;\r\n\t\t//maskSprite.validatePosition(); // for some reason size of the maskSprite is 0x0 after we removed validatePosition in afterdraw\r\n\r\n\t\tlet pictureWidth = maskSprite.measuredWidth / maskSprite.scale;\r\n\t\tlet pictureHeight = maskSprite.measuredHeight / maskSprite.scale;\r\n\r\n\t\tlet scale = $math.min(maxHeight / pictureHeight, maxWidth / pictureWidth);\r\n\r\n\t\tif (scale == Infinity) {\r\n\t\t\tscale = 1; // can't return here, won't draw legend properly\r\n\t\t}\r\n\r\n\t\tscale = $math.max(0.001, scale);\r\n\r\n\t\tlet startLocation = this.startLocation;\r\n\t\tlet endLocation = this.endLocation;\r\n\r\n\t\tlet newWidth = $math.min(maxWidth, pictureWidth * scale);\r\n\t\tlet newHeight = $math.min(maxHeight, pictureHeight * scale);\r\n\r\n\t\tmaskSprite.scale = scale;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tthis.topWidth = newWidth + 4;\r\n\t\t\tthis.bottomWidth = newWidth + 4;\r\n\t\t\tthis.pyramidHeight = newHeight * (endLocation - startLocation);\r\n\t\t\tmaskSprite.x = maxWidth / 2;\r\n\t\t\tmaskSprite.y = newHeight / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.topWidth = newHeight + 4;\r\n\t\t\tthis.bottomWidth = newHeight + 4;\r\n\t\t\tthis.pyramidHeight = newWidth * (endLocation - startLocation);\r\n\t\t\tmaskSprite.valign = \"middle\";\r\n\t\t\tmaskSprite.x = newWidth / 2;\r\n\t\t\tmaskSprite.y = maxHeight / 2;\r\n\t\t}\r\n\r\n\t\tmaskSprite.verticalCenter = \"middle\";\r\n\t\tmaskSprite.horizontalCenter = \"middle\";\r\n\r\n\t\tsuper.validateDataElements();\r\n\r\n\t\tlet y: number;\r\n\t\tlet x: number;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tif (this.valign == \"bottom\") {\r\n\t\t\t\ty = (maxHeight - newHeight);\r\n\t\t\t}\r\n\t\t\tif (this.valign == \"middle\") {\r\n\t\t\t\ty = (maxHeight - newHeight) / 2;\r\n\t\t\t}\r\n\t\t\tif (this.valign == \"top\") {\r\n\t\t\t\ty = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.align == \"left\") {\r\n\t\t\t\tx = -(maxWidth - newWidth) / 2;\r\n\t\t\t}\r\n\t\t\tif (this.align == \"center\") {\r\n\t\t\t\tx = 0;\r\n\t\t\t}\r\n\t\t\tif (this.align == \"right\") {\r\n\t\t\t\tx = (maxWidth - newWidth) / 2;\r\n\t\t\t}\r\n\r\n\t\t\tthis.slices.template.dy = startLocation * newHeight;\r\n\t\t\tif (this.alignLabels) {\r\n\t\t\t\tthis.slicesContainer.dx = x;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this.valign == \"bottom\") {\r\n\t\t\t\ty = (maxHeight - newHeight) / 2;\r\n\t\t\t}\r\n\t\t\tif (this.valign == \"middle\") {\r\n\t\t\t\ty = 0;\r\n\t\t\t}\r\n\t\t\tif (this.valign == \"top\") {\r\n\t\t\t\ty = -(maxHeight - newHeight) / 2;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.align == \"left\") {\r\n\t\t\t\tx = 0;\r\n\t\t\t}\r\n\t\t\tif (this.align == \"center\") {\r\n\t\t\t\tx = (maxWidth - newWidth) / 2;\r\n\t\t\t}\r\n\t\t\tif (this.align == \"right\") {\r\n\t\t\t\tx = (maxWidth - newWidth);\r\n\t\t\t}\r\n\r\n\t\t\tthis.slices.template.dx = startLocation * newWidth;\r\n\t\t\tif (this.alignLabels) {\r\n\t\t\t\tthis.slicesContainer.dy = y;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.slicesContainer.x = x;\r\n\t\tthis.labelsContainer.x = x;\r\n\t\tthis.ticksContainer.x = x;\r\n\r\n\t\tthis.slicesContainer.y = y;\r\n\t\tthis.labelsContainer.y = y;\r\n\t\tthis.ticksContainer.y = y;\r\n\r\n\t\tif (newWidth > 0 && newHeight > 0) {\r\n\t\t\tthis.slicesContainer.mask = maskSprite;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pyramid Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PictorialStackedSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Sprite]] element that is used as a series mask.\r\n\t *\r\n\t * If set, this element's shape will be used to apply shape to the whole\r\n\t * stacked pictorial series.\r\n\t *\r\n\t * You can use this element's `path` property to set an SVG path for the\r\n\t * shape:\r\n\t *\r\n\t * ```TypeScript\r\n\t * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n\t * // ...\r\n\t * series.maskSprite.path = iconPath;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n\t * // ...\r\n\t * series.maskSprite.path = iconPath;\r\n\t * ```\r\n\t * ```JSON\r\n\t * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n\t * // ...\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     \"type\": \"PictorialStackedSeries\",\r\n\t *     // ...\r\n\t *     \"maskSprite\": {\r\n\t *       \"path\": iconPath\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @return Mask sprite\r\n\t */\r\n\tpublic get maskSprite(): Sprite {\r\n\t\treturn this._maskSprite;\r\n\t}\r\n\r\n\t/**\r\n\t * Inits FunnelSlice.\r\n\t *\r\n\t * @param slice to init\r\n\t */\r\n\tprotected initSlice(slice: this[\"_slice\"]) {\r\n\t\tsuper.initSlice(slice);\r\n\r\n\t\tlet hs = slice.states.getKey(\"hover\");\r\n\t\tif (hs) {\r\n\t\t\ths.properties.expandDistance = 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Relative location to start series from.\r\n\t *\r\n\t * Range of values: 0 to 1.\r\n\t *\r\n\t * This setting indicates where actual slices will start relatively to the\r\n\t * whole height/width of the series.\r\n\t *\r\n\t * For example, if we want slices to start at 30% from the top/left of the\r\n\t * series, we can set `startLocation = 0.3`.\r\n\t *\r\n\t * To fill shape outside of the location range, use background of the\r\n\t * property `slicesContainer`.\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.startLocation = 0.2;\r\n\t * series.endLocation = 0.8;\r\n\t * series.slicesContainer.background.fill = am4core.color(\"#eee\");\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.startLocation = 0.2;\r\n\t * series.endLocation = 0.8;\r\n\t * series.slicesContainer.background.fill = am4core.color(\"#eee\");\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     // ...\r\n\t *     \"startLocation\": 0.2,\r\n\t *     \"endLocation\": 0.8,\r\n\t *     \"slicesContainer\": {\r\n\t *       \"background\": {\r\n\t *         \"fill\": \"#eee\"\r\n\t *       }\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @default 0\r\n\t * @since 4.1.13\r\n\t * @param  value  Start location\r\n\t */\r\n\tpublic set startLocation(value: number) {\r\n\t\tif (this.setPropertyValue(\"startLocation\", value)) {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return  Start location\r\n\t */\r\n\tpublic get startLocation(): number {\r\n\t\treturn this.getPropertyValue(\"startLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Relative location to end series at.\r\n\t *\r\n\t * Range of values: 0 to 1.\r\n\t *\r\n\t * This setting indicates where actual slices will end relatively to the\r\n\t * whole height/width of the series.\r\n\t *\r\n\t * For example, if we want slices to end at 70% from the top/left of the\r\n\t * series, we can set `endLocation = 0.7`.\r\n\t *\r\n\t * To fill shape outside of the location range, use background of the\r\n\t * property `slicesContainer`.\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.startLocation = 0.2;\r\n\t * series.endLocation = 0.8;\r\n\t * series.slicesContainer.background.fill = am4core.color(\"#eee\");\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.startLocation = 0.2;\r\n\t * series.endLocation = 0.8;\r\n\t * series.slicesContainer.background.fill = am4core.color(\"#eee\");\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     // ...\r\n\t *     \"startLocation\": 0.2,\r\n\t *     \"endLocation\": 0.8,\r\n\t *     \"slicesContainer\": {\r\n\t *       \"background\": {\r\n\t *         \"fill\": \"#eee\"\r\n\t *       }\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @default 1\r\n\t * @since 4.1.13\r\n\t * @param  value  End location\r\n\t */\r\n\tpublic set endLocation(value: number) {\r\n\t\tif (this.setPropertyValue(\"endLocation\", value)) {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return End location\r\n\t */\r\n\tpublic get endLocation(): number {\r\n\t\treturn this.getPropertyValue(\"endLocation\");\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PictorialStackedSeries\"] = PictorialStackedSeries;\r\nregistry.registeredClasses[\"PictorialStackedSeriesDataItem\"] = PictorialStackedSeriesDataItem;\r\n","/**\r\n * Module that defines everything related to building Cone Columns.\r\n * It is a container which has coneColumn element which is a Cone.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { Cone } from \"../../core/elements/3d/Cone\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ConeColumn]].\r\n */\r\nexport interface IConeColumnProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[ConeColumn]].\r\n */\r\nexport interface IConeColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ConeColumn]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IConeColumnAdapters extends IColumnAdapters, IConeColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates ConeColumns.\r\n *\r\n * @see {@link IConeColumnEvents} for a list of available events\r\n * @see {@link IConeColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class ConeColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IConeColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IConeColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IConeColumnEvents;\r\n\r\n\r\n\t/**\r\n\t * Cone column element\r\n\t */\r\n\tpublic coneColumn: Cone;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ConeColumn\";\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tcreateAssets() {\r\n\t\tthis.coneColumn = this.createChild(Cone);\r\n\t\tthis.coneColumn.shouldClone = false;\r\n\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.coneColumn;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[ConeColumn]].\r\n\t *\r\n\t * @param source Source ConeColumn\r\n\t */\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.coneColumn) {\r\n\t\t\tthis.coneColumn.copyFrom(source.coneColumn);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ConeColumn\"] = ConeColumn;\r\n","/**\r\n * ConeSeries module\r\n * Not recommended using if you use scrollbars or your chart is zoomable in some other way.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { ConeColumn } from \"../elements/ConeColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ConeSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ConeSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t */\r\n\tpublic _column: ConeColumn;\r\n\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: ConeSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ConeSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ConeSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IConeSeriesAdapters extends IColumnSeriesAdapters, IConeSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a cone graph.\r\n *\r\n * @see {@link IConeSeriesEvents} for a list of available Events\r\n * @see {@link IConeSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ConeSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Type of column.\r\n\t */\r\n\tpublic _column: ConeColumn;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _dataItem: ConeSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IConeSeriesDataFields\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IConeSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IConeSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IConeSeriesEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ConeSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new ConeColumn();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to use as series mask.\r\n\t *\r\n\t * @return SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\t\t\r\n\t\tlet dx = 0;\r\n\t\tlet dy = 0;\r\n\t\tlet column = this.columns.getIndex(0);\r\n\r\n\t\tif(column){\r\n\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\tdy = column.coneColumn.innerWidth / 2 + 1\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdx = column.coneColumn.innerHeight / 2 + 1;\r\n\t\t\t}\r\n\r\n\t\t\treturn $path.rectToPath({\r\n\t\t\t\tx: -dx,\r\n\t\t\t\ty: 0,\r\n\t\t\t\twidth: this.xAxis.axisLength + dx,\r\n\t\t\t\theight: this.yAxis.axisLength + dy\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\t\tlet column = dataItem.column;\r\n\t\tif(column){\r\n\t\t\tlet coneColumn = dataItem.column.coneColumn;\r\n\r\n\t\t\tconeColumn.fill = dataItem.column.fill;\r\n\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tconeColumn.orientation = \"horizontal\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tconeColumn.orientation = \"vertical\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ConeSeries\"] = ConeSeries;\r\nregistry.registeredClasses[\"ConeSeriesDataItem\"] = ConeSeriesDataItem;\r\n","/**\r\n * Module that defines everything related to building Curved Columns.\r\n * It is a container which has CurvedColumn element which is a Sprite.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[CurvedColumn]].\r\n */\r\nexport interface ICurvedColumnProperties extends IColumnProperties {\r\n\r\n\t/**\r\n\t * Horizontal tension setting of the line (0-1).\r\n\t *\r\n\t * Used for smoothed lines.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\ttensionX?: number;\r\n\r\n\t/**\r\n\t * Tension\r\n\t */\r\n\ttension?: number;\r\n\r\n\t/**\r\n\t * Orientation of the column\r\n\t *\r\n\t * @default \"vertical\"\r\n\t */\r\n\torientation?: Orientation;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[CurvedColumn]].\r\n */\r\nexport interface ICurvedColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CurvedColumn]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICurvedColumnAdapters extends IColumnAdapters, ICurvedColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates CurvedColumns.\r\n *\r\n * @see {@link ICurvedColumnEvents} for a list of available events\r\n * @see {@link ICurvedColumnAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class CurvedColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICurvedColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICurvedColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICurvedColumnEvents;\r\n\r\n\t/**\r\n\t * The element that holds curved column shape.\r\n\t */\r\n\tpublic curvedColumn: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CurvedColumn\";\r\n\t}\r\n\r\n\t/**\r\n\t * [createAssets description]\r\n\t *\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected createAssets(): void {\r\n\t\tthis.curvedColumn = this.createChild(Sprite);\r\n\t\tthis.curvedColumn.shouldClone = false;\r\n\r\n\t\tthis.setPropertyValue(\"tension\", 0.7);\r\n\r\n\t\tthis.width = percent(120);\r\n\t\tthis.height = percent(120);\r\n\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.curvedColumn;\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tlet w = this.realWidth;\r\n\t\tlet h = this.realHeight;\r\n\t\tlet x = this.realX - this.pixelX;\r\n\t\tlet y = this.realY - this.pixelY;\r\n\r\n\t\tlet points: IPoint[];\r\n\r\n\t\t// TODO can this be removed ?\r\n\t\t$utils.used(this.width);\r\n\r\n\t\tlet tensionX = 1;\r\n\t\tlet tensionY = 1;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\ttensionX = this.tension;\r\n\t\t\tpoints = [{ x: 0, y: h + y }, { x: w / 2, y: y }, { x: w, y: h + y }];\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttensionY = this.tension;\r\n\t\t\th = Math.abs(h);\r\n\t\t\tpoints = [{ x: x, y: h }, { x: x + w, y: h / 2 }, { x: x, y: 0 }];\r\n\t\t}\r\n\r\n\t\tlet path = $path.moveTo(points[0]) + new $smoothing.Tension(tensionX, tensionY).smooth(points);\r\n\t\tthis.column.path = path;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[CurvedColumn]].\r\n\t *\r\n\t * @param source  Source CurvedColumn\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.curvedColumn) {\r\n\t\t\tthis.curvedColumn.copyFrom(source.curvedColumn);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal tension of the curve.\r\n\t *\r\n\t * Tension defines how \"lose\" the line will be.\r\n\t *\r\n\t * 1 is the maximum tension which would result in pointy columns with\r\n\t * straight edges.\r\n\t *\r\n\t * The smaller the tension th wider the column will be.\r\n\t *\r\n\t * @default 0.7\r\n\t * @param value tension (0-1)\r\n\t */\r\n\tpublic set tension(value: number) {\r\n\t\tthis.setPropertyValue(\"tension\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Tension (0-1)\r\n\t */\r\n\tpublic get tension(): number {\r\n\t\treturn this.getPropertyValue(\"tension\");\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation of the column.\r\n\t *\r\n\t * Available options: \"vertical\" (default) and \"horizontal\".\r\n\t *\r\n\t * @default \"vertical\"\r\n\t * @param value  Orientation\r\n\t */\r\n\tpublic set orientation(value: Orientation) {\r\n\t\tthis.setPropertyValue(\"orientation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation\r\n\t */\r\n\tpublic get orientation(): Orientation {\r\n\t\treturn this.getPropertyValue(\"orientation\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CurvedColumn\"] = CurvedColumn;\r\n","/**\r\n * CurvedColumnSeries module.\r\n *\r\n * Not recommended using if you use scrollbars or your chart is zoomable in some other way.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { CurvedColumn } from \"../elements/CurvedColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CurvedColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CurvedColumnSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t */\r\n\tpublic _column: CurvedColumn;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: CurvedColumnSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CurvedColumnSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CurvedColumnSeries]].\r\n */\r\nexport interface ICurvedColumnSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[CurvedColumnSeries]].\r\n */\r\nexport interface ICurvedColumnSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[CurvedColumnSeries]].\r\n */\r\nexport interface ICurvedColumnSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CurvedColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICurvedColumnSeriesAdapters extends IColumnSeriesAdapters, ICurvedColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a curved columns graph.\r\n *\r\n * @see {@link ICurvedColumnSeriesEvents} for a list of available Events\r\n * @see {@link ICurvedColumnSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class CurvedColumnSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Defines type of the column.\r\n\t */\r\n\tpublic _column: CurvedColumn;\r\n\r\n\t/**\r\n\t * Defines type of the data item.\r\n\t */\r\n\tpublic _dataItem: CurvedColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: ICurvedColumnSeriesDataFields\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICurvedColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICurvedColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICurvedColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"CurvedColumnSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for the curved column.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new CurvedColumn();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\r\n\t\tlet column = dataItem.column;\r\n\t\tcolumn = dataItem.column;\r\n\r\n\t\tif (column) {\r\n\t\t\tlet curvedColumn = dataItem.column.curvedColumn;\r\n\r\n\t\t\tcurvedColumn.fill = dataItem.column.fill;\r\n\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tcolumn.orientation = \"horizontal\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tcolumn.orientation = \"vertical\";\r\n\t\t\t}\r\n\t\t}\t\t\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CurvedColumnSeries\"] = CurvedColumnSeries;\r\nregistry.registeredClasses[\"CurvedColumnSeriesDataItem\"] = CurvedColumnSeriesDataItem;\r\n","/**\r\n * Bullet module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Bullet, IBulletProperties, IBulletAdapters, IBulletEvents } from \"./Bullet\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Bullet]]\r\n */\r\nexport interface ICircleBulletProperties extends IBulletProperties { }\r\n\r\n/**\r\n * Defines events for [[Bullet]]\r\n */\r\nexport interface ICircleBulletEvents extends IBulletEvents { }\r\n\r\n/**\r\n * Defines adapters\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICircleBulletAdapters extends IBulletAdapters, ICircleBulletProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a bullet with a textual label.\r\n *\r\n * Uses [[Label]] instance to draw the label, so the label itself is\r\n * configurable.\r\n *\r\n * @see {@link IBulletEvents} for a list of available events\r\n * @see {@link IBulletAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class CircleBullet extends Bullet {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICircleBulletProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICircleBulletAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICircleBulletEvents;\r\n\r\n\t/**\r\n\t * A label (textual) element for the bullet.\r\n\t */\r\n\tpublic circle: Circle;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"CircleBullet\";\r\n\r\n\t\tlet circle = this.createChild(Circle);\r\n\t\tcircle.shouldClone = false;\r\n\t\tcircle.radius = 5;\r\n\t\tcircle.isMeasured = false;\r\n\t\tthis.circle = circle;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all proprities and related stuff from another instance of\r\n\t * [[CircleBullet]].\r\n\t *\r\n\t * @param source  Source element\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.circle.copyFrom(source.circle);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CircleBullet\"] = CircleBullet;\r\n","/**\r\n * Bullet module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Bullet, IBulletProperties, IBulletAdapters, IBulletEvents } from \"./Bullet\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Bullet]]\r\n */\r\nexport interface IErrorBulletProperties extends IBulletProperties { }\r\n\r\n/**\r\n * Defines events for [[Bullet]]\r\n */\r\nexport interface IErrorBulletEvents extends IBulletEvents { }\r\n\r\n/**\r\n * Defines adapters\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface IErrorBulletAdapters extends IBulletAdapters, IErrorBulletProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a bullet with a textual label.\r\n *\r\n * Uses [[Label]] instance to draw the label, so the label itself is\r\n * configurable.\r\n *\r\n * @see {@link IBulletEvents} for a list of available events\r\n * @see {@link IBulletAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class ErrorBullet extends Bullet {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IErrorBulletProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IErrorBulletAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IErrorBulletEvents;\r\n\r\n\tpublic errorLine:Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ErrorBullet\";\r\n\t\tthis.errorLine = this.createChild(Sprite);\r\n\t\tthis.errorLine.shouldClone = false;\r\n\t\tthis.width = 20;\r\n\t\tthis.height = 20;\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.isDynamic = true;\r\n\t}\r\n\r\n\r\n\tvalidatePosition(){\r\n\t\tsuper.validatePosition();\r\n\t\tlet w = this.pixelWidth / 2;\r\n\t\tlet h = this.pixelHeight / 2;\r\n\r\n\t\tthis.errorLine.path = $path.moveTo({x:-w, y:-h}) + $path.lineTo({x:w, y:-h}) + $path.moveTo({x:0, y:-h}) + $path.lineTo({x:0, y:h}) + $path.moveTo({x:-w, y:h}) + $path.lineTo({x:w, y:h});\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all proprities and related stuff from another instance of\r\n\t * [[ErrorBullet]].\r\n\t *\r\n\t * @param source  Source element\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.errorLine.copyFrom(source.errorLine);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ErrorBullet\"] = ErrorBullet;\r\n","/**\r\n * Functionality for drawing simple NavigationBar.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Component, IComponentProperties, IComponentAdapters, IComponentEvents, IComponentDataFields } from \"../../core/Component\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { DataItem } from \"../../core/DataItem\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { TextLink } from \"../../core/elements/TextLink\";\r\nimport { Triangle } from \"../../core/elements/Triangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[NavigationBar]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class NavigationBarDataItem extends DataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: NavigationBar;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"NavigationBarDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Name of the navigation bar item.\r\n\t *\r\n\t * @param value  Name\r\n\t */\r\n\tpublic set name(value: string) {\r\n\t\tthis.setProperty(\"name\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.properties[\"name\"];\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarDataFields extends IComponentDataFields {\r\n\r\n\t/**\r\n\t * Name of nav var item.\r\n\t */\r\n\tname?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarProperties extends IComponentProperties {\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarEvents extends IComponentEvents { }\r\n\r\n/**\r\n * Defines adapters for [[NavigationBar]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface INavigationBarAdapters extends IComponentAdapters, INavigationBarProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * NavigationBar class can be used to create a multi-level breadcrumb-style\r\n * navigation control.\r\n *\r\n * @see {@link INavigationBarEvents} for a list of available events\r\n * @see {@link INavigationBarAdapters} for a list of available Adapters\r\n * @todo Implement better\r\n * @important\r\n */\r\nexport class NavigationBar extends Component {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t */\r\n\tpublic _dataFields: INavigationBarDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: INavigationBarProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: INavigationBarAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: INavigationBarEvents;\r\n\r\n\t/**\r\n\t * A list of breadcrumbs (links) in the nav bar.\r\n\t */\r\n\tpublic links: ListTemplate<TextLink>;\r\n\r\n\t/**\r\n\t * [_linksIterator description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _linksIterator: $iter.ListIterator<TextLink>;\r\n\r\n\t/**\r\n\t * [_separatorsIterator description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _separatorsIterator: $iter.ListIterator<Sprite>;\r\n\r\n\t/**\r\n\t * A reference to the link which is currently active.\r\n\t */\r\n\tpublic activeLink: TextLink;\r\n\r\n\t/**\r\n\t * A list of elements used as nav bar item separators.\r\n\t */\r\n\tpublic separators: ListTemplate<Triangle>;\r\n\r\n\t/**\r\n\t * Identifies the type of the [[DataItem]] used in this element.\r\n\t */\r\n\tpublic _dataItem!: NavigationBarDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"NavigationBar\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet textLink = new TextLink();\r\n\t\ttextLink.valign = \"middle\";\r\n\t\ttextLink.paddingTop = 8;\r\n\t\ttextLink.paddingBottom = 8;\r\n\r\n\t\tthis.paddingBottom = 2;\r\n\r\n\t\tthis.links = new ListTemplate<TextLink>(textLink);\r\n\t\tthis._disposers.push(new ListDisposer(this.links));\r\n\t\tthis._disposers.push(textLink);\r\n\r\n\t\tthis._linksIterator = new $iter.ListIterator<TextLink>(this.links, () => this.links.create());\r\n\t\tthis._linksIterator.createNewItems = true;\r\n\r\n\t\tlet triangle = new Triangle();\r\n\t\ttriangle.direction = \"right\";\r\n\t\ttriangle.width = 8;\r\n\t\ttriangle.height = 12;\r\n\t\ttriangle.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\ttriangle.fillOpacity = 0.5;\r\n\t\ttriangle.valign = \"middle\";\r\n\t\ttriangle.marginLeft = 10;\r\n\t\ttriangle.marginRight = 10;\r\n\r\n\t\tthis.separators = new ListTemplate<Triangle>(triangle);\r\n\t\tthis._disposers.push(new ListDisposer(this.separators));\r\n\t\tthis._disposers.push(triangle);\r\n\r\n\t\tlet activeLink = new TextLink();\r\n\t\tthis.activeLink = activeLink;\r\n\t\tactiveLink.copyFrom(textLink);\r\n\t\tactiveLink.valign = \"middle\";\r\n\t\tactiveLink.fontWeight = \"bold\";\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.layout = \"grid\";\r\n\t\tthis.dataFields.name = \"name\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Completely redraws the navigation bar.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements(): void {\r\n\t\tthis.removeChildren();\r\n\t\tthis._linksIterator.reset();\r\n\t\tsuper.validateDataElements();\r\n\t\t//@todo: dispose\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a visual element for a data item (nav item).\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\tlet textLink: TextLink;\r\n\t\tif (dataItem.index < this.dataItems.length - 1) {\r\n\t\t\ttextLink = this._linksIterator.getLast();\r\n\t\t\ttextLink.parent = this;\r\n\t\t\tlet separator = this.separators.create();\r\n\t\t\tseparator.parent = this;\r\n\t\t\tseparator.valign = \"middle\";\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttextLink = this.activeLink;\r\n\t\t\ttextLink.events.copyFrom(this.links.template.events);\r\n\t\t\ttextLink.hide(0);\r\n\t\t\ttextLink.show();\r\n\t\t\ttextLink.parent = this;\r\n\t\t}\r\n\t\ttextLink.dataItem = dataItem;\r\n\t\ttextLink.text = dataItem.name;\r\n\t\ttextLink.validate();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"NavigationBar\"] = NavigationBar;\r\nregistry.registeredClasses[\"NavigationBarDataItem\"] = NavigationBarDataItem;\r\n","/**\r\n * Cursor module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { getInteraction, IInteractionEvents } from \"../../core/interaction/Interaction\";\r\nimport { IInteractionObjectEvents } from \"../../core/interaction/InteractionObjectEvents\";\r\nimport { IPoint, } from \"../../core/defs/IPoint\";\r\nimport { Chart } from \"../Chart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $dom from \"../../core/utils/DOM\";\r\nimport { system } from \"../../core/System\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Cursor]].\r\n */\r\nexport interface ICursorProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[Cursor]].\r\n */\r\nexport interface ICursorEvents extends IContainerEvents {\r\n\r\n\t/**\r\n\t * Invoked when position of cursor changes.\r\n\t */\r\n\tcursorpositionchanged: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts selecting a range with a cursor, e.g. presses\r\n\t * down mouse button and drags the cursor.\r\n\t */\r\n\tselectstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when selection has ended, e.g. user releases mouse button.\r\n\t */\r\n\tselectended: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts zooming using cursor.\r\n\t */\r\n\tzoomstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when user clicked to start zooming/panning/selecting but haven't\r\n\t * finished the operation.\r\n\t */\r\n\tbehaviorcanceled: {};\r\n\r\n\t/**\r\n\t * Invoked when user is done zooming using cursor.\r\n\t */\r\n\tzoomended: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts panning using cursor.\r\n\t */\r\n\tpanstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when user is done panning using cursor.\r\n\t */\r\n\tpanended: {};\r\n\r\n\t/**\r\n\t * Invoked when user is panning using cursor.\r\n\t */\r\n\tpanning: {};\r\n}\r\n\r\n/**\r\n * Defines adapters for [[Cursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICursorAdapters extends IContainerAdapters, ICursorProperties {\r\n\r\n\t/**\r\n\t * Can be used to modify cursor position point dynamically using custom code.\r\n\t *\r\n\t * @since 4.9.35\r\n\t */\r\n\tcursorPoint: IPoint;\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Main Cursor class with common cursor functionality.\r\n *\r\n * Chart-specific cursors must extend this class.\r\n *\r\n * @see {@link ICursorEvents} for a list of available events\r\n * @see {@link ICursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n * @todo Should we allow changing `_generalBehavior`?\r\n */\r\nexport class Cursor extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICursorEvents;\r\n\r\n\t/**\r\n\t * Point coordinates of where selection started.\r\n\t */\r\n\tpublic downPoint: IPoint;\r\n\r\n\t/**\r\n\t * Point coordinates of where selection ended.\r\n\t */\r\n\tpublic upPoint: IPoint;\r\n\r\n\t/**\r\n\t * Current cursor position during selection.\r\n\t *\r\n\t * @todo Better description\r\n\t */\r\n\tpublic point: IPoint = { x: 0, y: 0 };\r\n\r\n\t/**\r\n\t * Relative horizontal position.\r\n\t *\r\n\t * @todo: maybe we should make getter only? it is used from outside by axes or series to show tooltips at some position\r\n\t */\r\n\tpublic xPosition: number;\r\n\r\n\t/**\r\n\t * Relative vertical position.\r\n\t *\r\n\t * @todo: maybe we should make getter only? it is used from outside by axes or series to show tooltips at some position\r\n\t */\r\n\tpublic yPosition: number;\r\n\r\n\t/**\r\n\t * [_usesSelection description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _usesSelection: boolean;\r\n\r\n\t/**\r\n\t * What to do when user pressed down and drags cursor: zoom or select.\r\n\t */\r\n\tprotected _generalBehavior: \"zoom\" | \"select\" | \"pan\"; // todo: draw\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t */\r\n\tpublic _chart: Chart;\r\n\r\n\t/**\r\n\t * Specifies the rules when cursor needs to be moved or hidden.\r\n\t */\r\n\tprotected _stick: \"hard\" | \"soft\" | \"none\" = \"none\";\r\n\r\n\t/**\r\n\t * A screen point that cursor is \"stuck\" to.\r\n\t */\r\n\tprotected _stickPoint: IPoint;\r\n\r\n\t/**\r\n\t * non-modified down point\r\n\t * @ignore\r\n\t */\r\n\tprotected _downPointOrig: IPoint;\r\n\r\n\t/**\r\n\t * non-modified up point\r\n\t * @ignore\r\n\t */\r\n\tprotected _upPointOrig: IPoint;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"Cursor\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\t\tthis.shouldClone = false;\r\n\r\n\t\tthis.hide(0);\r\n\r\n\t\tthis.trackable = true;\r\n\t\tthis.clickable = true;\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\t// Add events on body to trigger down and up events (to start zooming or\r\n\t\t// selection)\r\n\t\tconst interaction = getInteraction();\r\n\t\tthis._disposers.push(interaction.body.events.on(\"down\", this.handleCursorDown, this));\r\n\t\tthis._disposers.push(interaction.body.events.on(\"up\", this.handleCursorUp, this));\r\n\t\tthis._disposers.push(interaction.body.events.on(\"track\", this.handleCursorMove, this));\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Handle pointer movement in document and update cursor position as needed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Event\r\n\t */\r\n\tpublic handleCursorMove(event: IInteractionObjectEvents[\"track\"]): IPoint {\r\n\r\n\r\n\t\tif (!this.interactionsEnabled || (this.interactions.isTouchProtected && event.touch)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (((this._generalBehavior != \"zoom\" && this._generalBehavior != \"pan\") || !this.downPoint) && !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\r\n\t\t\t// We want to let zoom/pan continue even if cursor is outside chart area\r\n\t\t\tif (!this.isHidden || !this.isHiding) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\r\n\t\tif (this._stick == \"hard\" && this._stickPoint) {\r\n\t\t\tlocal = this._stickPoint;\r\n\t\t}\r\n\r\n\t\tif (this._stick == \"soft\" && this._stickPoint) {\r\n\t\t\tif (!this.fitsToBounds(local)) {\r\n\t\t\t\tlocal = this._stickPoint;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this._adapterO) {\r\n\t\t\tthis._adapterO.apply(\"cursorPoint\", local);\r\n\t\t}\r\n\r\n\t\tthis.triggerMove(local);\r\n\t\treturn local;\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Hides actual SVG elements and handles hiding animations.\r\n\t *\r\n\t * @param duration  Fade out duration (ms)\r\n\t * @return Fade out duration (ms)\r\n\t * @ignore\r\n\t */\r\n\tprotected hideReal(duration?: number): $type.Optional<Animation> {\r\n\t\tif ((this._stick == \"hard\" || this._stick == \"soft\") && this._stickPoint) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\treturn super.hideReal(duration);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t *\r\n\t * The second parameter has following options:\r\n\t *\r\n\t * `\"none\"` - placed cursor will only be there until mouse/touch moves, then\r\n\t * it either moves to a new place (if pointer over plot area) or is hidden.\r\n\t *\r\n\t * `\"soft\"` - cursor will stay in the place if mouse/touch is happening\r\n\t * outside chart, but will move to a new place whe plot area is hovered or\r\n\t * touched.\r\n\t *\r\n\t * `\"hard\"` - cursor will stay in place no matter what, until it is moved by\r\n\t * another `triggerMove()` call.\r\n\t *\r\n\t * The third parameter - `force` (since `4.9.5`) - if set to `true` will\r\n\t * make cursor execute all of the actions associated with cursor move,\r\n\t * including line redraws, tooltip updates, etc. Useful when underlying\r\n\t * chart data is dynamically being updated.\r\n\t *\r\n\t * @param point  Point to place cursor at\r\n\t * @param stick  Level of cursor stickiness to the place\r\n\t * @param force  Force cursor move\r\n\t */\r\n\tpublic triggerMove(point: IPoint, stick?: \"hard\" | \"soft\" | \"none\", force?: boolean): void {\r\n\r\n\t\tpoint.x = $math.round(point.x, 1);\r\n\t\tpoint.y = $math.round(point.y, 1);\r\n\r\n\t\tif (stick) {\r\n\t\t\tthis._stick = stick;\r\n\t\t}\r\n\r\n\t\tif (stick == \"hard\" || stick == \"soft\") {\r\n\t\t\tthis._stickPoint = point;\r\n\t\t}\r\n\r\n\t\tthis.triggerMoveReal(point, force);\r\n\t}\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t *\r\n\t * @param point Point to place cursor at\r\n\t */\r\n\tprotected triggerMoveReal(point: IPoint, force?: boolean): void {\r\n\t\tif (this.point.x != point.x || this.point.y != point.y || force) {\r\n\t\t\tthis.point = point;\r\n\t\t\tthis.invalidatePosition();\r\n\t\t\t// hide cursor if it's out of bounds\r\n\t\t\tif (this.fitsToBounds(point)) {\r\n\t\t\t\tthis.show(0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// unless we are selecting (mouse is down)\r\n\t\t\t\tif (!this.downPoint) {\r\n\t\t\t\t\tthis.hide(0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (this.visible) {\r\n\t\t\t\tthis.getPositions();\r\n\t\t\t\tthis.dispatch(\"cursorpositionchanged\"); // not good to dispatch later (check step count example)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates pressing down (click/touch) action by a cursor.\r\n\t *\r\n\t * @param point               Point of action\r\n\t */\r\n\tpublic triggerDown(point: IPoint) {\r\n\t\tthis.triggerDownReal(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates pressing down (click/touch) action by a cursor.\r\n\t *\r\n\t * @param point               Point of action\r\n\t */\r\n\tprotected triggerDownReal(point: IPoint) {\r\n\t\tswitch (this._generalBehavior) {\r\n\t\t\tcase \"zoom\":\r\n\t\t\t\tthis.dispatchImmediately(\"zoomstarted\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"select\":\r\n\t\t\t\tthis.dispatchImmediately(\"selectstarted\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"pan\":\r\n\t\t\t\tthis.dispatchImmediately(\"panstarted\");\r\n\t\t\t\tgetInteraction().setGlobalStyle(MouseCursorStyle.grabbing);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates the action of release of the mouse down / touch.\r\n\t *\r\n\t * @param point               Point of action\r\n\t */\r\n\tpublic triggerUp(point: IPoint) {\r\n\t\tthis.triggerUpReal(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates the action of release of the mouse down / touch.\r\n\t *\r\n\t * @param point               Point of action\r\n\t */\r\n\tprotected triggerUpReal(point: IPoint) {\r\n\t\tsystem.requestFrame();\r\n\t\tthis.updatePoint(this.upPoint);\r\n\t\tlet interaction = getInteraction();\r\n\r\n\t\tif ($math.getDistance(this._upPointOrig, this._downPointOrig) > interaction.getHitOption(this.interactions, \"hitTolerance\")) {\r\n\t\t\tswitch (this._generalBehavior) {\r\n\t\t\t\tcase \"zoom\":\r\n\t\t\t\t\tthis.dispatch(\"zoomended\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"select\":\r\n\t\t\t\t\tthis.dispatch(\"selectended\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"pan\":\r\n\t\t\t\t\tthis.dispatch(\"panended\");\r\n\t\t\t\t\tinteraction.setGlobalStyle(MouseCursorStyle.default);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tthis.downPoint = undefined;\r\n\t\t\tthis.updateSelection();\r\n\t\t}\r\n\t\t/*\r\n\t\telse {\r\n\t\t\t\r\n\t\t\tif(this._generalBehavior == \"select\"){\r\n\t\t\t\tthis.dispatchImmediately(\"selectended\");\r\n\t\t\t}\r\n\t\t\tthis.dispatchImmediately(\"behaviorcanceled\");\r\n\t\t\tinteraction.setGlobalStyle(MouseCursorStyle.default);\r\n\t\t\tthis.downPoint = undefined;\r\n\t\t}*/\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursors current positions.\r\n\t */\r\n\tprotected getPositions(): void {\r\n\t\t// positions are used by axes or series\r\n\t\tthis.xPosition = this.point.x / this.innerWidth;\r\n\t\tthis.yPosition = 1 - this.point.y / this.innerHeight;\r\n\t}\r\n\r\n\t/**\r\n\t * Handles pointer down event so we can start zoom or selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Original event\r\n\t */\r\n\tpublic handleCursorDown(event: IInteractionEvents[\"down\"]): void {\r\n\r\n\t\tif (!this.interactionsEnabled || (this.interactions.isTouchProtected && event.touch) || !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Initiate blur so that whatever focused element on the page is unselected\r\n\t\t$dom.blur();\r\n\r\n\t\t// Get local point\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\r\n\t\tif (this._stick == \"hard\" && this._stickPoint) {\r\n\t\t\tlocal = this._stickPoint;\r\n\t\t}\r\n\r\n\t\tif (this._adapterO) {\r\n\t\t\tthis._adapterO.apply(\"cursorPoint\", local);\r\n\t\t}\r\n\r\n\t\tif (!this.fitsToBounds(local)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\r\n\t\tthis._downPointOrig = { x: local.x, y: local.y };\r\n\r\n\t\t// We need to cancel the event to prevent gestures on touch devices\r\n\t\tif (event.event.cancelable && this.shouldPreventGestures(event.touch) && this.fitsToBounds(local)) {\r\n\t\t\tevent.event.preventDefault();\r\n\t\t}\r\n\r\n\t\t// Make this happen\r\n\t\tthis.triggerMove(local);\r\n\t\tthis.triggerDown(local);\r\n\t}\r\n\r\n\t/**\r\n\t * Determines whether Cursor should prevent default action on move.\r\n\t *\r\n\t * Child classes should override this as necessary.\r\n\t * \r\n\t * @return Prevent default?\r\n\t */\r\n\tprotected shouldPreventGestures(touch: boolean): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the coordinates of where pointer down event occurred\r\n\t * (was pressed).\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\t}\r\n\r\n\t/**\r\n\t * Handles pointer up event - finishes zoom or selection action.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Original event\r\n\t */\r\n\tpublic handleCursorUp(event: IInteractionEvents[\"up\"]): void {\r\n\t\tif (!this.interactionsEnabled) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (!this.downPoint && !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\r\n\t\tif (this._adapterO) {\r\n\t\t\tthis._adapterO.apply(\"cursorPoint\", local);\r\n\t\t}\r\n\r\n\t\tif (!this.downPoint || !this.fitsToBounds(this.downPoint)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (this._stick == \"hard\" && this._stickPoint) {\r\n\t\t\tlocal = this._stickPoint;\r\n\t\t}\r\n\r\n\t\tthis._upPointOrig = { x: local.x, y: local.y };\r\n\r\n\t\tthis.triggerMove(local);\r\n\t\tthis.triggerUp(local);\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to a [[Chart]] the cursor belongs to.\r\n\t *\r\n\t * @param value  Chart\r\n\t */\r\n\tpublic set chart(value: this[\"_chart\"]) {\r\n\t\tthis._chart = value;\r\n\t\tif ($type.hasValue((<any>this._chart).plotContainer)) {\r\n\t\t\tgetInteraction().lockElement((<any>this._chart).plotContainer.interactions);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): this[\"_chart\"] {\r\n\t\treturn this._chart;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Cursor\"] = Cursor;\r\n","/**\r\n * Cursor for XY chart\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Cursor, ICursorProperties, ICursorAdapters, ICursorEvents } from \"./Cursor\";\r\nimport { Sprite, ISpriteEvents } from \"../../core/Sprite\";\r\nimport { MutableValueDisposer, MultiDisposer, IDisposer } from \"../../core/utils/Disposer\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { XYSeries } from \"../series/XYSeries\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { Tooltip } from \"../../core/elements/Tooltip\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { getInteraction } from \"../../core/interaction/Interaction\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[XYCursor]].\r\n */\r\nexport interface IXYCursorProperties extends ICursorProperties {\r\n\r\n\t/**\r\n\t * Cursor's behavior when moved with pointer down:\r\n\t *\r\n\t * * \"zoomX\" - zooms horizontally; (default)\r\n\t * * \"zoomY\" - zooms vertically;\r\n\t * * \"zoomXY\" - zooms both horizontally and vertically;\r\n\t * * \"selectX\" - selects a range horizontally;\r\n\t * * \"selectY\" - selects a range vertically;\r\n\t * * \"selectXY\" - selects a range both horizontally and vertically;\r\n\t * * \"panX\" - moves (pans) current selection horizontally;\r\n\t * * \"panY\" - moves (pans) current selection vertically;\r\n\t * * \"panXY\" - moves (pans) current selection both horizontally and vertically;\r\n\t * * \"none\" - does nothing with pointer down.\r\n\t *\r\n\t * @default \"zoomX\"\r\n\t */\r\n\tbehavior?: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\";\r\n\r\n\t/**\r\n\t * Cursor's horizontal line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t */\r\n\tfullWidthLineX?: boolean;\r\n\r\n\t/**\r\n\t * Cursor's vertical line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t */\r\n\tfullWidthLineY?: boolean;\r\n\r\n\t/**\r\n\t * If cursor behavior is panX or panY, we allow to pan plot out of it's max bounds for a better user experience.\r\n\t * This setting specifies relative value by how much we can pan out the plot\r\n\t */\r\n\tmaxPanOut?: number;\r\n\r\n\t/**\r\n\t * Specifies to which series cursor lines should be snapped.\r\n\t * \r\n\t * Can be a single series instance or an array of series.\r\n\t */\r\n\tsnapToSeries?: XYSeries | XYSeries[];\r\n\r\n\t/**\r\n\t * If set to `true` this will hide series tooltips when selecting with cursor.\r\n\t *\r\n\t * @since 4.5.15\r\n\t */\r\n\thideSeriesTooltipsOnSelection?: boolean;\r\n\r\n\t/**\r\n\t * If set to a numeric value, cursor will display closest series' tooltips\r\n\t * plus tooltips from series that are closer to than `maxTooltipDistance` to\r\n\t * it.\r\n\t *\r\n\t * Set it to `-1` to always force one tooltip, even if there are multiple\r\n\t * data items in exactly same place.\r\n\t *\r\n\t * @since 4.7.18\r\n\t */\r\n\tmaxTooltipDistance?: number;\r\n\r\n\t/**\r\n\t * Should zoom selection \"snap\" into equal categories/intervals after panning\r\n\t * the chart? (when `behavior == \"panX\"`)\r\n\t *\r\n\t * @default true\r\n\t * @since 4.10.17\r\n\t */\r\n\tsnapOnPan?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[XYCursor]].\r\n */\r\nexport interface IXYCursorEvents extends ICursorEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYCursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYCursorAdapters extends ICursorAdapters, IXYCursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A cursor used on [[XYChart]].\r\n *\r\n * @see {@link IXYCursorEvents} for a list of available events\r\n * @see {@link IXYCursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n */\r\nexport class XYCursor extends Cursor {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IXYCursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t */\r\n\tpublic _adapter!: IXYCursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IXYCursorEvents;\r\n\r\n\t/**\r\n\t * Vertical cursor line element.\r\n\t */\r\n\tprotected _lineX = new MutableValueDisposer<Sprite>();\r\n\r\n\t/**\r\n\t * Horizontal cursor line element.\r\n\t */\r\n\tprotected _lineY = new MutableValueDisposer<Sprite>();\r\n\r\n\t/**\r\n\t * Element which highlights selected area.\r\n\t */\r\n\tprotected _selection: Sprite;\r\n\r\n\t/**\r\n\t * A range of current horizontal selection.\r\n\t */\r\n\tpublic xRange: IRange;\r\n\r\n\t/**\r\n\t * A range of current vertical selection.\r\n\t */\r\n\tpublic yRange: IRange;\r\n\r\n\t/**\r\n\t * Horizontal [[Axis]].\r\n\t */\r\n\tprotected _xAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * Vertical [[Axis]].\r\n\t */\r\n\tprotected _yAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t */\r\n\tpublic _chart: XYChart;\r\n\r\n\tprotected _snapToDisposers: IDisposer[] = [];\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"XYCursor\";\r\n\r\n\t\t// Defaults\r\n\t\tthis.behavior = \"zoomX\";\r\n\r\n\t\tthis.maxPanOut = 0.1;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.snapOnPan = true;\r\n\r\n\t\t// Create selection element\r\n\t\tlet selection: Sprite = this.createChild(Sprite);\r\n\t\tselection.shouldClone = false;\r\n\t\tselection.fillOpacity = 0.2;\r\n\t\tselection.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tselection.isMeasured = false;\r\n\t\tselection.visible = false;\r\n\t\tselection.interactionsEnabled = false;\r\n\t\tthis.selection = selection;\r\n\t\tthis._disposers.push(this.selection);\r\n\r\n\t\t// Create cursor's vertical line\r\n\t\tlet lineX: Sprite = this.createChild(Sprite);\r\n\t\tlineX.shouldClone = false;\r\n\t\tlineX.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tlineX.fill = color();\r\n\t\tlineX.strokeDasharray = \"3,3\";\r\n\t\tlineX.isMeasured = false;\r\n\t\tlineX.strokeOpacity = 0.4;\r\n\t\tlineX.interactionsEnabled = false;\r\n\t\tlineX.y = 0;// important\r\n\t\tthis.lineX = lineX;\r\n\t\tthis._disposers.push(this.lineX);\r\n\r\n\t\t// Create cursor's horizontal line\r\n\t\tlet lineY: Sprite = this.createChild(Sprite);\r\n\t\tlineY.shouldClone = false;\r\n\t\tlineY.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tlineY.fill = color();\r\n\t\tlineY.strokeDasharray = \"3,3\";\r\n\t\tlineY.isMeasured = false;\r\n\t\tlineY.strokeOpacity = 0.4;\r\n\t\tlineY.interactionsEnabled = false;\r\n\t\tlineY.x = 0; // important\r\n\t\tthis.lineY = lineY;\r\n\t\tthis._disposers.push(this.lineY);\r\n\r\n\t\t// Add handler for size changes\r\n\t\tthis.events.on(\"sizechanged\", this.updateSize, this, false);\r\n\r\n\t\tthis._disposers.push(this._lineX);\r\n\t\tthis._disposers.push(this._lineY);\r\n\t\tthis._disposers.push(this._xAxis);\r\n\t\tthis._disposers.push(this._yAxis);\r\n\r\n\t\tthis.mask = this;\r\n\r\n\t\tthis.hideSeriesTooltipsOnSelection = true;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursor element dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSize(): void {\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.lineX.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: this.innerHeight });\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.lineY.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: this.innerWidth, y: 0 });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t\tif (this._usesSelection) {\r\n\t\t\tlet downPoint: IPoint = this.downPoint;\r\n\t\t\tlet behavior = this.behavior;\r\n\r\n\t\t\tif (downPoint) {\r\n\r\n\t\t\t\tlet point: IPoint = this.point;\r\n\r\n\t\t\t\tif (this.lineX) {\r\n\t\t\t\t\tpoint.x = this.lineX.pixelX;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.lineY) {\r\n\t\t\t\t\tpoint.y = this.lineY.pixelY;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet selection: Sprite = this.selection;\r\n\r\n\t\t\t\tlet x: number = Math.min(point.x, downPoint.x);\r\n\t\t\t\tlet y: number = Math.min(point.y, downPoint.y);\r\n\r\n\t\t\t\tlet w: number = $math.round(Math.abs(downPoint.x - point.x), this._positionPrecision);\r\n\t\t\t\tlet h: number = $math.round(Math.abs(downPoint.y - point.y), this._positionPrecision);\r\n\r\n\t\t\t\tswitch (behavior) {\r\n\t\t\t\t\tcase \"zoomX\":\r\n\t\t\t\t\t\ty = 0;\r\n\t\t\t\t\t\th = this.pixelHeight;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"zoomY\":\r\n\t\t\t\t\t\tx = 0;\r\n\t\t\t\t\t\tw = this.pixelWidth;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"selectX\":\r\n\t\t\t\t\t\ty = 0;\r\n\t\t\t\t\t\th = this.pixelHeight;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"selectY\":\r\n\t\t\t\t\t\tx = 0;\r\n\t\t\t\t\t\tw = this.pixelWidth;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tselection.x = x;\r\n\t\t\t\tselection.y = y;\r\n\r\n\t\t\t\tselection.path = $path.rectangle(w, h);\r\n\r\n\t\t\t\tselection.validatePosition(); // otherwise Edge shoes some incorrect size rectangle\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this._generalBehavior != \"select\") {\r\n\t\t\t\t\tthis.selection.hide();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\r\n\tprotected fixPoint(point: IPoint): IPoint {\r\n\t\tpoint.x = Math.max(0, point.x);\r\n\t\tpoint.y = Math.max(0, point.y);\r\n\t\tpoint.x = Math.min(this.pixelWidth, point.x);\r\n\t\tpoint.y = Math.min(this.pixelHeight, point.y);\r\n\r\n\t\treturn point;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t *\r\n\t * @param point Point to place cursor at\r\n\t */\r\n\tprotected triggerMoveReal(point: IPoint, force?: boolean): void {\r\n\r\n\t\tsuper.triggerMoveReal(point, force);\r\n\t\tlet snapToSeries = this.snapToSeries;\r\n\t\tif ((snapToSeries && !this.downPoint)) {\r\n\t\t\tif (snapToSeries instanceof XYSeries) {\r\n\t\t\t\tif (snapToSeries.isHidden) {\r\n\t\t\t\t\tthis.updateLinePositions(point);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet allHidden = true;\r\n\t\t\t\t$array.each(snapToSeries, (s) => {\r\n\t\t\t\t\tif (!s.isHidden) {\r\n\t\t\t\t\t\tallHidden = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\tif (allHidden) {\r\n\t\t\t\t\tthis.updateLinePositions(point);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.updateLinePositions(point);\r\n\t\t}\r\n\r\n\t\tif (this.downPoint && $math.getDistance(this.downPoint, point) > 3) {\r\n\t\t\tif (this._generalBehavior == \"pan\") {\r\n\t\t\t\tthis.getPanningRanges();\r\n\t\t\t\tthis.dispatch(\"panning\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateLinePositions(point: IPoint) {\r\n\t\tpoint = this.fixPoint(this.point);\r\n\r\n\t\tif (this.lineX && this.lineX.visible && !this.xAxis) {\r\n\t\t\tthis.lineX.x = point.x;\r\n\t\t}\r\n\t\tif (this.lineY && this.lineY.visible && !this.yAxis) {\r\n\t\t\tthis.lineY.y = point.y;\r\n\t\t}\r\n\t\tthis.updateSelection();\r\n\t}\r\n\r\n\r\n\tprotected triggerDownReal(point: IPoint) {\r\n\r\n\t\tif (this.visible && !this.isHiding) {\r\n\r\n\t\t\tif (this._generalBehavior == \"select\") {\r\n\t\t\t\tthis.selection.parent = this.parent;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.fitsToBounds(point)) {\r\n\t\t\t\tthis.downPoint = { x: point.x, y: point.y };\r\n\r\n\t\t\t\tthis.updatePoint(point);\r\n\r\n\t\t\t\t//this.updateLinePositions(point); // otherwise lines won't be in correct position and touch won't work fine\r\n\r\n\t\t\t\tthis.point.x = this.downPoint.x;\r\n\t\t\t\tthis.point.y = this.downPoint.y;\r\n\r\n\t\t\t\tlet selection: Sprite = this.selection;\r\n\t\t\t\tlet selectionX: number = this.downPoint.x;\r\n\t\t\t\tlet selectionY: number = this.downPoint.y;\r\n\r\n\t\t\t\tif (this._usesSelection) {\r\n\t\t\t\t\tselection.x = selectionX;\r\n\t\t\t\t\tselection.y = selectionY;\r\n\t\t\t\t\tselection.path = \"\";\r\n\t\t\t\t\tselection.show();\r\n\t\t\t\t}\r\n\t\t\t\tsuper.triggerDownReal(point);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.downPoint = undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.downPoint = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the coordinates of where pointer down event occurred\r\n\t * (was pressed).\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\t\tif (this.lineX) {\r\n\t\t\tpoint.x = this.lineX.pixelX;\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tpoint.y = this.lineY.pixelY;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Handle action when cursor is released, which should perform an operation\r\n\t * based on its `behavior`, like zoom.\r\n\t * \r\n\t * @param  point  Release point\r\n\t */\r\n\tprotected triggerUpReal(point: IPoint): void {\r\n\t\tif (this.hasMoved()) {\r\n\t\t\tif (this.downPoint) {\r\n\t\t\t\tthis.upPoint = point;\r\n\r\n\t\t\t\tthis.updatePoint(this.upPoint);\r\n\r\n\t\t\t\tif (this._generalBehavior != \"pan\") {\r\n\t\t\t\t\tthis.getRanges();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this._generalBehavior != \"select\") {\r\n\t\t\t\t\tthis.selection.hide();\r\n\t\t\t\t}\r\n\t\t\t\tsuper.triggerUpReal(point);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this._generalBehavior != \"select\") {\r\n\t\t\t\tthis.selection.hide(0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.xRange = undefined;\r\n\t\t\t\tthis.yRange = undefined;\r\n\t\t\t\tthis.dispatchImmediately(\"selectended\");\r\n\t\t\t}\r\n\r\n\t\t\t// reset cursor style, just in case\r\n\t\t\tif (this._generalBehavior == \"pan\") {\r\n\t\t\t\tlet interaction = getInteraction();\r\n\t\t\t\tinteraction.setGlobalStyle(MouseCursorStyle.default);\r\n\t\t\t}\r\n\r\n\t\t\tthis.dispatchImmediately(\"behaviorcanceled\");\r\n\t\t}\r\n\t\tthis.downPoint = undefined;\r\n\t\tthis.dispatch(\"cursorpositionchanged\");\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates if the cursor has moved enough based on its `behavior`.\r\n\t * \r\n\t * @return Moved?\r\n\t */\r\n\tprivate hasMoved(): boolean {\r\n\t\tlet distance: number;\r\n\t\tif (this.behavior == \"zoomX\" || this.behavior == \"panX\") {\r\n\t\t\tdistance = $math.getHorizontalDistance(this._upPointOrig, this._downPointOrig);\r\n\t\t}\r\n\t\telse if (this.behavior == \"zoomY\" || this.behavior == \"panY\") {\r\n\t\t\tdistance = $math.getVerticalDistance(this._upPointOrig, this._downPointOrig);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdistance = $math.getDistance(this._upPointOrig, this._downPointOrig);\r\n\t\t}\r\n\t\treturn distance > getInteraction().getHitOption(this.interactions, \"hitTolerance\");\r\n\t}\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getPanningRanges() {\r\n\r\n\t\tlet startX = $math.round(this.downPoint.x / this.innerWidth, 5);\r\n\t\tlet startY = 1 - $math.round(this.downPoint.y / this.innerHeight, 5);\r\n\r\n\t\tlet currentX = $math.round(this.point.x / this.innerWidth, 5);\r\n\t\tlet currentY = 1 - $math.round(this.point.y / this.innerHeight, 5);\r\n\r\n\t\tlet deltaX = startX - currentX;\r\n\t\tlet deltaY = startY - currentY;\r\n\r\n\t\tthis.xRange = { start: deltaX, end: 1 + deltaX };\r\n\t\tthis.yRange = { start: deltaY, end: 1 + deltaY };\r\n\r\n\t\tif (this.behavior == \"panX\") {\r\n\t\t\tthis.yRange.start = 0;\r\n\t\t\tthis.yRange.end = 1;\r\n\t\t}\r\n\t\tif (this.behavior == \"panY\") {\r\n\t\t\tthis.xRange.start = 0;\r\n\t\t\tthis.xRange.end = 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getRanges() {\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.upPoint.x = this.lineX.pixelX;\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.upPoint.y = this.lineY.pixelY;\r\n\t\t}\r\n\r\n\t\t// @todo Is this needed?\r\n\t\t$utils.used(this.selection);\r\n\r\n\t\tlet startX: number = $math.round(this.downPoint.x / this.innerWidth, 5);\r\n\t\tlet endX: number = $math.round((this.upPoint.x) / this.innerWidth, 5);\r\n\r\n\t\tlet startY: number = 1 - $math.round(this.downPoint.y / this.innerHeight, 5);\r\n\t\tlet endY: number = 1 - $math.round((this.upPoint.y) / this.innerHeight, 5);\r\n\r\n\t\tthis.xRange = { start: $math.min(startX, endX), end: $math.max(startX, endX) };\r\n\t\tthis.yRange = { start: $math.min(startY, endY), end: $math.max(startY, endY) };\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's behavior when it's moved with pointer down:\r\n\t *\r\n\t * * `\"zoomX\"` - zooms horizontally.\r\n\t * * `\"zoomY\"` - zooms vertically.\r\n\t * * `\"zoomXY\"` - zooms both horizontally and vertically.\r\n\t * * `\"selectX\"` - selects a range horizontally.\r\n\t * * `\"selectY\"` - selects a range vertically.\r\n\t * * `\"selectXY\"` - selects a range both horizontally and vertically.\r\n\t * * `\"panX\"` - moves (pans) current selection horizontally.\r\n\t * * `\"panY\"` - moves (pans) current selection vertically.\r\n\t * * `\"panXY\"` - moves (pans) current selection both horizontally and vertically.\r\n\t * * `\"none\"` - does nothing with pointer down.\r\n\t *\r\n\t * E.g. \"zoomXY\" will mean that pressing a mouse (or touching) over plot area\r\n\t * and dragging it will start zooming the chart.\r\n\t *\r\n\t * NOTE: `\"zoomXY\"` acts differently when used on a `DateAxis`.\r\n\t * See [this note](https://www.amcharts.com/docs/v4/concepts/chart-cursor/#zoomXY_behavior_and_DateAxis).\r\n\t *\r\n\t * @param value Bheavior\r\n\t */\r\n\tpublic set behavior(value: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\") {\r\n\t\tthis.setPropertyValue(\"behavior\", value, true);\r\n\r\n\t\tthis._usesSelection = false;\r\n\r\n\t\tif (value.indexOf(\"zoom\") != -1) {\r\n\t\t\tthis._generalBehavior = \"zoom\";\r\n\t\t\tthis._usesSelection = true;\r\n\t\t}\r\n\t\tif (value.indexOf(\"select\") != -1) {\r\n\t\t\tthis._generalBehavior = \"select\";\r\n\t\t\tthis._usesSelection = true;\r\n\t\t}\r\n\t\tif (value.indexOf(\"pan\") != -1) {\r\n\t\t\tthis._generalBehavior = \"pan\";\r\n\t\t\tthis._usesSelection = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Behavior\r\n\t */\r\n\tpublic get behavior(): \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"behavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * Determines whether Cursor should prevent default action on move.\r\n\t *\r\n\t * If cursor's behavior is \"none\", it should not obstruct the page scrolling.\r\n\t *\r\n\t * @return Prevent default?\r\n\t */\r\n\tprotected shouldPreventGestures(touch: boolean): boolean {\r\n\t\treturn (!this.interactions.isTouchProtected || !touch) && this.behavior != \"none\";\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's horizontal line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * NOTE: this setting will work properly if `xAxis` is set and only in case\r\n\t * `xAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n\t *\r\n\t * @param value Full width?\r\n\t */\r\n\tpublic set fullWidthLineX(value: boolean) {\r\n\t\tthis.setPropertyValue(\"fullWidthLineX\", value);\r\n\t\tif (!value) {\r\n\t\t\tthis.updateSize();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Full width?\r\n\t */\r\n\tpublic get fullWidthLineX(): boolean {\r\n\t\treturn this.getPropertyValue(\"fullWidthLineX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's vertical line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * NOTE: this setting will work properly if `yAxis` is set and only in case\r\n\t * `yAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n\t *\r\n\t * @param value Full width?\r\n\t */\r\n\tpublic set fullWidthLineY(value: boolean) {\r\n\t\tthis.setPropertyValue(\"fullWidthLineY\", value);\r\n\t\tif (!value) {\r\n\t\t\tthis.updateSize();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Full width?\r\n\t */\r\n\tpublic get fullWidthLineY(): boolean {\r\n\t\treturn this.getPropertyValue(\"fullWidthLineY\");\r\n\t}\r\n\r\n\t/**\r\n\t * If set to `true` this will hide series tooltips when selecting with cursor.\r\n\t *\r\n\t * @since 4.5.15\r\n\t * @param  value  hide tooltips?\r\n\t */\r\n\tpublic set hideSeriesTooltipsOnSelection(value: boolean) {\r\n\t\tthis.setPropertyValue(\"hideSeriesTooltipsOnSelection\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return hide tooltip?\r\n\t */\r\n\tpublic get hideSeriesTooltipsOnSelection(): boolean {\r\n\t\treturn this.getPropertyValue(\"hideSeriesTooltipsOnSelection\");\r\n\t}\r\n\r\n\t/**\r\n\t * If set to a numeric value, cursor will display closest series' tooltips\r\n\t * plus tooltips from series that are closer to than `maxTooltipDistance` to\r\n\t * it.\r\n\t *\r\n\t * Set it to `-1` to always force one tooltip, even if there are multiple\r\n\t * data items in exactly same place.\r\n\t *\r\n\t * @since 4.7.18\r\n\t * @param  value  Distance\r\n\t */\r\n\tpublic set maxTooltipDistance(value: number) {\r\n\t\tthis.setPropertyValue(\"maxTooltipDistance\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Distance\r\n\t */\r\n\tpublic get maxTooltipDistance(): number {\r\n\t\treturn this.getPropertyValue(\"maxTooltipDistance\");\r\n\t}\r\n\r\n\t/**\r\n\t * If cursor behavior is panX or panY, we allow to pan plot out of it's max bounds for a better user experience.\r\n\t * This setting specifies relative value by how much we can pan out the plot\r\n\t *\r\n\t * @param value\r\n\t */\r\n\tpublic set maxPanOut(value: number) {\r\n\t\tthis.setPropertyValue(\"maxPanOut\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Full width?\r\n\t */\r\n\tpublic get maxPanOut(): number {\r\n\t\treturn this.getPropertyValue(\"maxPanOut\");\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to X [[Axis]].\r\n\t *\r\n\t * An XY cursor can live without `xAxis` set. You set xAxis for cursor when\r\n\t * you have axis tooltip enabled and you want cursor line to be at the same\r\n\t * position as tooltip.\r\n\t *\r\n\t * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n\t * [[ValueAxis]].\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param axis X axis\r\n\t */\r\n\tpublic set xAxis(axis: Axis) {\r\n\t\tif (this._xAxis.get() != axis) {\r\n\t\t\tthis._xAxis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.tooltip.events.on(\"positionchanged\", this.handleXTooltipPosition, this, false),\r\n\r\n\t\t\t\taxis.events.on(\"rangechangestarted\", (event) => {\r\n\t\t\t\t\tthis.hide(0);\r\n\t\t\t\t\tthis.preventShow = true;\r\n\t\t\t\t}, undefined, false),\r\n\t\t\t\taxis.events.on(\"rangechangeended\", (event) => {\r\n\t\t\t\t\tthis.preventShow = false;\r\n\t\t\t\t\tthis.hide(0);\r\n\t\t\t\t\tthis.dispatch(\"cursorpositionchanged\");\r\n\t\t\t\t}, undefined, false)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return X axis\r\n\t */\r\n\tpublic get xAxis(): Axis {\r\n\t\treturn this._xAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to Y [[Axis]].\r\n\t *\r\n\t * An XY cursor can live without `yAxis` set. You set xAxis for cursor when\r\n\t * you have axis tooltip enabled and you want cursor line to be at the same\r\n\t * position as tooltip.\r\n\t *\r\n\t * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n\t * [[ValueAxis]].\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param axis Y axis\r\n\t */\r\n\tpublic set yAxis(axis: Axis) {\r\n\t\tif (this._yAxis.get() != axis) {\r\n\t\t\tthis._yAxis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.tooltip.events.on(\"positionchanged\", this.handleYTooltipPosition, this, false),\r\n\r\n\t\t\t\taxis.events.on(\"rangechangestarted\", (event) => {\r\n\t\t\t\t\tthis.hide(0);\r\n\t\t\t\t\tthis.__disabled = true;\r\n\t\t\t\t}, undefined, false),\r\n\t\t\t\taxis.events.on(\"rangechangeended\", (event) => {\r\n\t\t\t\t\tthis.__disabled = false;\r\n\t\t\t\t\tthis.hide(0);\r\n\t\t\t\t\tthis.dispatch(\"cursorpositionchanged\");\r\n\t\t\t\t}, undefined, false)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Y Axis\r\n\t */\r\n\tpublic get yAxis(): Axis {\r\n\t\treturn this._yAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Original Axis event\r\n\t */\r\n\tprotected handleXTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tlet tooltip: Tooltip = this.xAxis.tooltip;\r\n\t\tlet point: IPoint = $utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this);\r\n\t\tlet x: number = point.x;\r\n\t\tpoint.y = 1;\r\n\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.lineX.x = x;\r\n\t\t\tif (!this.fitsToBounds(point)) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.xAxis && this.fullWidthLineX) {\r\n\t\t\tlet startPoint: IPoint = this.xAxis.currentItemStartPoint;\r\n\t\t\tlet endPoint: IPoint = this.xAxis.currentItemEndPoint;\r\n\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\tthis.lineX.x = x;\r\n\t\t\t\tlet width: number = endPoint.x - startPoint.x;\r\n\t\t\t\tthis.lineX.path = $path.rectangle(width, this.innerHeight, -width / 2);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when Y axis changes position or scale.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Original Axis event\r\n\t */\r\n\tprotected handleYTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tlet tooltip: Tooltip = this.yAxis.tooltip;\r\n\t\tlet point: IPoint = $utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this);\r\n\t\tlet y: number = point.y;\r\n\t\tpoint.x = 1;\r\n\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.lineY.y = y;\r\n\r\n\t\t\tif (!this.fitsToBounds(point)) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.yAxis && this.fullWidthLineY) {\r\n\t\t\tlet startPoint: IPoint = this.yAxis.currentItemStartPoint;\r\n\t\t\tlet endPoint: IPoint = this.yAxis.currentItemEndPoint;\r\n\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\tthis.lineY.y = y;\r\n\t\t\t\tlet height: number = endPoint.y - startPoint.y;\r\n\t\t\t\tthis.lineY.path = $path.rectangle(this.innerWidth, height, 0, -height / 2);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A Line element to use for X axis.\r\n\t *\r\n\t * @param lineX Line\r\n\t */\r\n\tpublic set lineX(lineX: Sprite) {\r\n\t\tif (lineX) {\r\n\t\t\tlineX.setElement(this.paper.add(\"path\"));\r\n\t\t\tthis._lineX.set(lineX, lineX.events.on(\"positionchanged\", this.updateSelection, this, false));\r\n\t\t\tlineX.interactionsEnabled = false;\r\n\t\t\tlineX.parent = this;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._lineX.reset();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Line element\r\n\t */\r\n\tpublic get lineX(): Sprite {\r\n\t\treturn this._lineX.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A Line element to use Y axis.\r\n\t *\r\n\t * @param lineY Line\r\n\t */\r\n\tpublic set lineY(lineY: Sprite) {\r\n\t\tif (lineY) {\r\n\t\t\tlineY.setElement(this.paper.add(\"path\"));\r\n\t\t\tthis._lineY.set(lineY, lineY.events.on(\"positionchanged\", this.updateSelection, this, false));\r\n\t\t\tlineY.parent = this;\r\n\t\t\tlineY.interactionsEnabled = false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._lineY.reset();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Line element\r\n\t */\r\n\tpublic get lineY(): Sprite {\r\n\t\treturn this._lineY.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A selection element ([[Sprite]]).\r\n\t *\r\n\t * @param selection Selection rectangle\r\n\t */\r\n\tpublic set selection(selection: Sprite) {\r\n\t\tthis._selection = selection;\r\n\t\tif (selection) {\r\n\t\t\tselection.element = this.paper.add(\"path\");\r\n\t\t\tselection.parent = this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Selection rectangle\r\n\t */\r\n\tpublic get selection(): Sprite {\r\n\t\treturn this._selection;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * Looks if `xAxis` and `yAxis` is set via ID in JSON config, and replaces\r\n\t * with real references.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxis) && $type.isString(config.xAxis)) {\r\n\t\t\t\tif (this.map.hasKey(config.xAxis)) {\r\n\t\t\t\t\tconfig.xAxis = this.map.getKey(config.xAxis);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.processingErrors.push(\"[XYCursor] No axis with id \\\"\" + config.xAxis + \"\\\" found for `xAxis`\");\r\n\t\t\t\t\tdelete config.xAxis;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxis) && $type.isString(config.yAxis)) {\r\n\t\t\t\tif (this.map.hasKey(config.yAxis)) {\r\n\t\t\t\t\tconfig.yAxis = this.map.getKey(config.yAxis);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.processingErrors.push(\"[XYCursor] No axis with id \\\"\" + config.yAxis + \"\\\" found for `yAxis`\");\r\n\t\t\t\t\tdelete config.yAxis;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.hasValue(config.snapToSeries)) {\r\n\t\t\t\tlet snapTo = $type.isArray(config.snapToSeries) ? config.snapToSeries : [config.snapToSeries];\r\n\t\t\t\tlet snapError = false;\r\n\t\t\t\t$array.each(snapTo, (snap, index) => {\r\n\t\t\t\t\tif ($type.isString(snap)) {\r\n\t\t\t\t\t\tif (this.map.hasKey(snap)) {\r\n\t\t\t\t\t\t\tsnapTo[index] = this.map.getKey(snap);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthis.processingErrors.push(\"[XYCursor] No series with id \\\"\" + snap + \"\\\" found for `series`\");\r\n\t\t\t\t\t\t\tsnapError = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tif (snapError) {\r\n\t\t\t\t\tdelete config.snapToSeries;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tconfig.snapToSeries = snapTo;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies to which series cursor lines should be snapped.\r\n\t * \r\n\t * Can be a single series instance or an array of series.\r\n\t *\r\n\t * @param {XYSeries | XYSeries[]}\r\n\t */\r\n\tpublic set snapToSeries(series: XYSeries | XYSeries[]) {\r\n\t\tif (this.setPropertyValue(\"snapToSeries\", series)) {\r\n\r\n\t\t\tif (series instanceof XYSeries) {\r\n\t\t\t\tseries = [series];\r\n\t\t\t}\r\n\t\t\tif (this._snapToDisposers) {\r\n\t\t\t\t$array.each(this._snapToDisposers, (disposer) => {\r\n\t\t\t\t\tdisposer.dispose();\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\tthis._snapToDisposers = [];\r\n\r\n\t\t\tif (series) {\r\n\t\t\t\t$array.each(series, (s) => {\r\n\t\t\t\t\tthis._snapToDisposers.push(s.events.on(\"tooltipshownat\", () => { this.handleSnap(s) }, undefined, false));\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {XYSeries | XYSeries[]}\r\n\t */\r\n\tpublic get snapToSeries(): XYSeries | XYSeries[] {\r\n\t\treturn this.getPropertyValue(\"snapToSeries\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Should zoom selection \"snap\" into equal categories/intervals after panning\r\n\t * the chart? (when `behavior == \"panX\"`)\r\n\t *\r\n\t * @default true\r\n\t * @since 4.10.17\r\n\t * @return Snap on pan?\r\n\t */\r\n\tpublic get snapOnPan(): boolean {\r\n\t\treturn this.getPropertyValue(\"snapOnPan\");\r\n\t}\r\n\r\n\t/**\r\n\t * @param value Snap on pan?\r\n\t */\r\n\tpublic set snapOnPan(value: boolean) {\r\n\t\tthis.setPropertyValue(\"snapOnPan\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * Snaps the zoom selection after chart is panned.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic handleSnap(series: XYSeries) {\r\n\t\tif (!this.downPoint) {\r\n\t\t\tlet x = series.getTooltipX() + series.xAxis.pixelX;\r\n\t\t\tlet y = series.getTooltipY() + series.yAxis.pixelY;\r\n\r\n\t\t\tif (this.xAxis) {\r\n\t\t\t\tif (this.xAxis.renderer.opposite) {\r\n\t\t\t\t\ty -= this.pixelHeight;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.point = { x: x, y: y };\r\n\t\t\tthis.getPositions();\r\n\r\n\t\t\tlet xx = x;\r\n\t\t\tlet yy = y;\r\n\r\n\t\t\tx -= this.pixelWidth;\r\n\r\n\t\t\tif (this.yAxis) {\r\n\t\t\t\tif (this.yAxis.renderer.opposite) {\r\n\t\t\t\t\tx += this.pixelWidth;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet tooltip = series.tooltip;\r\n\t\t\tlet duration = tooltip.animationDuration;\r\n\t\t\tlet easing = tooltip.animationEasing;\r\n\r\n\r\n\t\t\tlet xAxis = series.xAxis;\r\n\t\t\tlet yAxis = series.yAxis;\r\n\r\n\t\t\tif (xAxis instanceof ValueAxis && !(xAxis instanceof DateAxis) && yAxis instanceof ValueAxis && !(yAxis instanceof DateAxis)) {\r\n\t\t\t\tseries.yAxis.showTooltipAtPosition(this.yPosition);\r\n\t\t\t\tseries.xAxis.showTooltipAtPosition(this.xPosition);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (series.baseAxis == series.xAxis) {\r\n\t\t\t\t\tseries.yAxis.showTooltipAtPosition(this.yPosition);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (series.baseAxis == series.yAxis) {\r\n\t\t\t\t\tseries.xAxis.showTooltipAtPosition(this.xPosition);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.lineX.animate([{ property: \"y\", to: y }], duration, easing);\r\n\t\t\tthis.lineY.animate([{ property: \"x\", to: x }], duration, easing);\r\n\r\n\t\t\tif (!this.xAxis) {\r\n\t\t\t\tthis.lineX.animate([{ property: \"x\", to: xx }], duration, easing);\r\n\t\t\t}\r\n\t\t\tif (!this.yAxis) {\r\n\t\t\t\tthis.lineY.animate([{ property: \"y\", to: yy }], duration, easing);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Destroys this object and all related data.\r\n\t */\r\n\tpublic dispose() {\r\n\t\tthis.hide(0);\r\n\t\tsuper.dispose();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYCursor\"] = XYCursor;\r\n","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { XYCursor, IXYCursorAdapters, IXYCursorEvents, IXYCursorProperties } from \"./XYCursor\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { ISpriteEvents } from \"../../core/Sprite\";\r\nimport { Tooltip } from \"../../core/elements/Tooltip\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[RadarCursor]].\r\n */\r\nexport interface IRadarCursorProperties extends IXYCursorProperties {\r\n\r\n\t/**\r\n\t * Inner radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n\t/**\r\n\t * Starting angle of the cursor's radial line.\r\n\t */\r\n\tstartAngle: number;\r\n\r\n\t/**\r\n\t * Ending angle of the cursor's radial line.\r\n\t */\r\n\tendAngle: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarCursor]].\r\n */\r\nexport interface IRadarCursorEvents extends IXYCursorEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarCursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarCursorAdapters extends IXYCursorAdapters, IRadarCursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Cursor for [[RadarChart]].\r\n *\r\n * @see {@link IRadarCursorEvents} for a list of available events\r\n * @see {@link IRadarCursorAdapters} for a list of available Adapters\r\n */\r\nexport class RadarCursor extends XYCursor {\r\n\r\n\t/**\r\n\t * Defines available properties\r\n\t */\r\n\tpublic _properties!: IRadarCursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t */\r\n\tpublic _adapter!: IRadarCursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IRadarCursorEvents;\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\r\n\tprotected _prevAngle: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarCursor\";\r\n\t\tthis.radius = percent(100);\r\n\t\tthis.innerRadius = percent(0);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.mask = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param point  Point to check\r\n\t * @return Fits within container?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\tlet radius = $math.getDistance(point);\r\n\r\n\t\t//if(!$math.isAngleInRange(angle, this.startAngle, this.endAngle)){\r\n\t\t\t//return false;\r\n\t\t//}\r\n\t\tif (radius < this.truePixelRadius + 1 && radius > this.pixelInnerRadius - 1) { // ok to add/remove some\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the cursor's radial line.\r\n\t *\r\n\t * @param value Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the cursor's radial line.\r\n\t *\r\n\t * @param value End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\r\n\tprotected triggerMoveReal(point:IPoint, force?:boolean) {\r\n\r\n\t\tif (!this.xAxis || (this.xAxis && (!this.xAxis.cursorTooltipEnabled || this.xAxis.tooltip.disabled))) {\r\n\t\t\tthis.updateLineX(this.point);\r\n\t\t}\r\n\t\tif (!this.yAxis || (this.yAxis && (!this.yAxis.cursorTooltipEnabled || this.yAxis.tooltip.disabled))) {\r\n\t\t\tthis.updateLineY(this.point);\r\n\t\t}\r\n\r\n\t\tthis.updateSelection();\r\n\t\tsuper.triggerMoveReal(point, force);\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)draws the horizontal (circular) cursor's line.\r\n\t *\r\n\t * @param point New target point\r\n\t */\r\n\tprotected updateLineX(point: IPoint) {\r\n\r\n\t\tlet radius: number = this.pixelRadius;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\t\tlet innerRadius: number = this.pixelInnerRadius;\r\n\r\n\t\tif (radius > 0 && $type.isNumber(startAngle) && $type.isNumber(endAngle) && $type.isNumber(innerRadius)) {\r\n\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(point), startAngle, endAngle);\r\n\t\t\tlet path: string;\r\n\r\n\t\t\tif (this.lineX && this.lineX.visible) {\r\n\r\n\t\t\t\tthis.lineX.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\t// fill\r\n\t\t\t\tif (this.xAxis && this.fullWidthLineX) {\r\n\r\n\t\t\t\t\tlet startPoint: IPoint = this.xAxis.currentItemStartPoint;\r\n\t\t\t\t\tlet endPoint: IPoint = this.xAxis.currentItemEndPoint;\r\n\r\n\t\t\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\t\t\tlet fillStartAngle: number = $math.fitAngleToRange($math.getAngle(startPoint), startAngle, endAngle);\r\n\t\t\t\t\t\tlet fillEndAngle: number = $math.fitAngleToRange($math.getAngle(endPoint), startAngle, endAngle);\r\n\r\n\t\t\t\t\t\tlet arc: number = fillEndAngle - fillStartAngle;\r\n\r\n\t\t\t\t\t\t// clockwise\r\n\t\t\t\t\t\t// this is needed, normalizeAngle doesn't solve it\r\n\t\t\t\t\t\tif (startAngle < endAngle) {\r\n\t\t\t\t\t\t\tif (arc < 0) {\r\n\t\t\t\t\t\t\t\tarc += 360;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// ccw\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif (arc > 0) {\r\n\t\t\t\t\t\t\t\tarc -= 360;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tangle -= arc / 2;\r\n\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) })\r\n\t\t\t\t\t\t\t+ $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) })\r\n\t\t\t\t\t\t\t+ $path.arcTo(angle, arc, radius)\r\n\t\t\t\t\t\t\t+ $path.lineTo({ x: innerRadius * $math.cos(angle + arc), y: innerRadius * $math.sin(angle + arc) })\r\n\t\t\t\t\t\t\t+ $path.arcTo(angle + arc, -arc, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// line\r\n\t\t\t\tif (!path) {\r\n\t\t\t\t\tpath = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) }) + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.lineX.path = path;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)draws the vertical (radial) cursor's line.\r\n\t *\r\n\t * @param point New target point\r\n\t */\r\n\tprotected updateLineY(point: IPoint) {\r\n\t\tif (this.lineY && this.lineY.visible) {\r\n\t\t\tlet startAngle = this.startAngle;\r\n\t\t\tlet endAngle = this.endAngle;\r\n\t\t\tlet truePixelRadius = this.truePixelRadius;\r\n\t\t\tlet radius = $math.fitToRange($math.getDistance(point), 0, this.truePixelRadius);\r\n\t\t\tif ($type.isNumber(radius) && $type.isNumber(startAngle)) {\r\n\t\t\t\tthis.lineY.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\tlet path: string;\r\n\t\t\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\t\t\tif (this.yAxis && this.fullWidthLineY) {\r\n\t\t\t\t\t// fill\r\n\t\t\t\t\tlet startPoint: IPoint = this.yAxis.currentItemStartPoint;\r\n\t\t\t\t\tlet endPoint: IPoint = this.yAxis.currentItemEndPoint;\r\n\r\n\t\t\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\t\t\tlet innerRadius: number = $math.fitToRange($math.getDistance(startPoint), 0, truePixelRadius);\r\n\t\t\t\t\t\tradius = $math.fitToRange($math.getDistance(endPoint), 0, truePixelRadius);\r\n\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, arc, radius);\r\n\t\t\t\t\t\tpath += $path.moveTo({ x: innerRadius * $math.cos(endAngle), y: innerRadius * $math.sin(endAngle) }) + $path.arcTo(endAngle, -arc, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!path) {\r\n\t\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, radius);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.lineY.path = path;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t\tif (this._usesSelection) {\r\n\t\t\tlet downPoint: IPoint = this.downPoint;\r\n\r\n\t\t\tif (downPoint) {\r\n\r\n\t\t\t\tlet point: IPoint = this.point;\r\n\r\n\t\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\t\tlet truePixelRadius: number = this.truePixelRadius;\r\n\t\t\t\tlet innerRadius: number = this.pixelInnerRadius;\r\n\r\n\t\t\t\tlet startAngle: number = Math.min(this.startAngle, this.endAngle);\r\n\t\t\t\tlet endAngle: number = Math.max(this.startAngle, this.endAngle);\r\n\r\n\t\t\t\tlet downAngle: number = $math.fitAngleToRange($math.getAngle(downPoint), startAngle, endAngle);\r\n\t\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(point), startAngle, endAngle);\r\n\r\n\t\t\t\tlet downRadius: number = $math.getDistance(downPoint);\r\n\t\t\t\tif (downRadius < truePixelRadius) {\r\n\r\n\t\t\t\t\tlet currentRadius = $math.fitToRange($math.getDistance(point), 0, truePixelRadius);\r\n\r\n\t\t\t\t\tthis._prevAngle = angle;\r\n\r\n\t\t\t\t\tlet path: string = $path.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\t\tlet downSin: number = $math.sin(downAngle);\r\n\t\t\t\t\tlet downCos: number = $math.cos(downAngle);\r\n\r\n\t\t\t\t\tlet sin: number = $math.sin(angle);\r\n\t\t\t\t\tlet cos: number = $math.cos(angle);\r\n\r\n\t\t\t\t\tlet behavior = this.behavior;\r\n\t\t\t\t\tif (behavior == \"zoomX\" || behavior == \"selectX\") {\r\n\t\t\t\t\t\tpath += $path.lineTo({ x: radius * downCos, y: radius * downSin }) + $path.arcTo(downAngle, angle - downAngle, radius) + $path.lineTo({ x: innerRadius * cos, y: innerRadius * sin }) + $path.arcTo(angle, downAngle - angle, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (behavior == \"zoomY\" || behavior == \"selectY\") {\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: currentRadius * $math.cos(startAngle), y: currentRadius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, currentRadius) + $path.lineTo({ x: downRadius * $math.cos(endAngle), y: downRadius * $math.sin(endAngle) }) + $path.arcTo(endAngle, startAngle - endAngle, downRadius) + $path.closePath();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (behavior == \"zoomXY\") {\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: currentRadius * $math.cos(downAngle), y: currentRadius * $math.sin(downAngle) }) + $path.arcTo(downAngle, angle - downAngle, currentRadius) + $path.lineTo({ x: downRadius * $math.cos(angle), y: downRadius * $math.sin(angle) }) + $path.arcTo(angle, downAngle - angle, downRadius) + $path.closePath();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.selection.path = path;\r\n\t\t\t\t}\r\n\t\t\t\tthis.selection.moveTo({ x: 0, y: 0 });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursors current positions.\r\n\t */\r\n\tprotected getPositions() {\r\n\t\t// positions are used by axes or series\r\n\t\tlet chart: RadarChart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\tlet innerRadius = this.pixelInnerRadius;\r\n\t\t\tlet radius: number = this.truePixelRadius - innerRadius;\r\n\r\n\t\t\tlet startAngle: number = this.startAngle;\r\n\t\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(this.point), startAngle, endAngle);\r\n\t\t\tlet xPosition = ((angle - startAngle) / (endAngle - startAngle));\r\n\t\t\tthis.xPosition = xPosition;\r\n\r\n\t\t\tthis.yPosition = $math.fitToRange(($math.getDistance(this.point) - innerRadius) / radius, 0, 1);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Overriding inherited method, so that nothing happens when it's triggered.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes horizontal position.\r\n\t *\r\n\t * @param event Axis event\r\n\t */\r\n\tprotected handleXTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tif (this.xAxis.cursorTooltipEnabled) {\r\n\t\t\tlet tooltip: Tooltip = this.xAxis.tooltip;\r\n\t\t\tthis.updateLineX($utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes vertical position.\r\n\t *\r\n\t * @todo Description\r\n\t * @param event Axis event\r\n\t */\r\n\tprotected handleYTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tif (this.yAxis.cursorTooltipEnabled) {\r\n\t\t\tlet tooltip: Tooltip = this.yAxis.tooltip;\r\n\t\t\tthis.updateLineY($utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * needs to be overriden\r\n\t * @ignore\r\n\t */\r\n\tprotected updateLinePositions(point: IPoint) {\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getRanges(): void {\r\n\t\tlet downPoint = this.downPoint;\r\n\t\tif (downPoint) {\r\n\t\t\tlet upPoint: IPoint = this.upPoint;\r\n\r\n\t\t\tlet chart: RadarChart = this.chart;\r\n\t\t\tif (chart) {\r\n\t\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\t\tlet startAngle: number = this.startAngle;\r\n\t\t\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\t\t\tlet downAngle: number = $math.fitAngleToRange($math.getAngle(downPoint), this.startAngle, this.endAngle);\r\n\t\t\t\tlet upAngle: number = $math.fitAngleToRange($math.getAngle(upPoint), this.startAngle, this.endAngle);\r\n\r\n\t\t\t\tlet downRadius = $math.fitToRange($math.getDistance(downPoint), 0, radius);\r\n\t\t\t\tlet upRadius = $math.fitToRange($math.getDistance(upPoint), 0, radius);\r\n\r\n\t\t\t\tlet startX: number = 0;\r\n\t\t\t\tlet endX: number = 1;\r\n\r\n\t\t\t\tlet startY: number = 0;\r\n\t\t\t\tlet endY: number = 1;\r\n\r\n\t\t\t\tlet behavior = this.behavior;\r\n\t\t\t\tif (behavior == \"zoomX\" || behavior == \"selectX\" || behavior == \"zoomXY\" || behavior == \"selectXY\") {\r\n\t\t\t\t\tlet arc: number = endAngle - startAngle;\r\n\t\t\t\t\tstartX = $math.round((downAngle - startAngle) / arc, 5);\r\n\t\t\t\t\tendX = $math.round((upAngle - startAngle) / arc, 5);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (behavior == \"zoomY\" || behavior == \"selectY\" || behavior == \"zoomXY\" || behavior == \"selectXY\") {\r\n\t\t\t\t\tstartY = $math.round(downRadius / radius, 5);\r\n\t\t\t\t\tendY = $math.round(upRadius / radius, 5);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.xRange = { start: Math.min(startX, endX), end: Math.max(startX, endX) };\r\n\t\t\t\tthis.yRange = { start: Math.min(startY, endY), end: Math.max(startY, endY) };\r\n\r\n\t\t\t\tif (this.behavior == \"selectX\" || this.behavior == \"selectY\" || this.behavior == \"selectXY\") {\r\n\t\t\t\t\t// void\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.selection.hide();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Overriding inherited method, so that nothing happens when `updateSize`\r\n\t * is triggered.\r\n\t *\r\n\t * RadarCursor is quite complicated and needs own sizing logic.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSize(): void { }\r\n\r\n\t/**\r\n\t * Outer radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, false, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the circular line in pixels.\r\n\t *\r\n\t * @return Outer radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.truePixelRadius);\r\n\t}\r\n\r\n\t/**\r\n\t * [truePixelRadius description]\r\n\t *\r\n\t * @todo Description\r\n\t * @return Outer radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get truePixelRadius(): number {\r\n\t\treturn $utils.relativeToValue(percent(100), $math.min(this.innerWidth / 2, this.innerHeight / 2));\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, false, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the circular line in pixels.\r\n\t *\r\n\t * @return Inner radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tinnerRadius = percent(100 * innerRadius.value * this.chart.innerRadiusModifyer);\r\n\t\t}\r\n\r\n\t\treturn $utils.relativeRadiusToValue(innerRadius, this.truePixelRadius) || 0;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\r\n\tprotected fixPoint(point: IPoint): IPoint {\r\n\t\t// overriding xy method\r\n\t\treturn point;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarCursor\"] = RadarCursor;\r\n"],"sourceRoot":""}